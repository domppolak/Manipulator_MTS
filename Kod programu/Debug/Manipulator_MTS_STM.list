
Manipulator_MTS_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000584c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080059d4  080059d4  000159d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a1c  08005a1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a1c  08005a1c  00015a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a24  08005a24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a24  08005a24  00015a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a28  08005a28  00015a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  2000000c  08005a38  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08005a38  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013da7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a0b  00000000  00000000  00033de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  000367f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  00037888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027da0  00000000  00000000  000387f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001461b  00000000  00000000  00060598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4933  00000000  00000000  00074bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001694e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000440c  00000000  00000000  00169538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080059bc 	.word	0x080059bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080059bc 	.word	0x080059bc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <motorA_init>:
uint32_t tim_channelServo;


// q1
void motorA_init(TIM_HandleTypeDef *tim, uint32_t tim_channel)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
	timA = tim;
 80004d6:	4a09      	ldr	r2, [pc, #36]	; (80004fc <motorA_init+0x30>)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	6013      	str	r3, [r2, #0]
	tim_channelA = tim_channel;
 80004dc:	4a08      	ldr	r2, [pc, #32]	; (8000500 <motorA_init+0x34>)
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	6013      	str	r3, [r2, #0]
	//motorA_setDirection(CW);
	//motorA_setSpeed(0);
	HAL_TIM_PWM_Start(timA, tim_channelA);
 80004e2:	4b06      	ldr	r3, [pc, #24]	; (80004fc <motorA_init+0x30>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a06      	ldr	r2, [pc, #24]	; (8000500 <motorA_init+0x34>)
 80004e8:	6812      	ldr	r2, [r2, #0]
 80004ea:	4611      	mov	r1, r2
 80004ec:	4618      	mov	r0, r3
 80004ee:	f003 f87b 	bl	80035e8 <HAL_TIM_PWM_Start>
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000028 	.word	0x20000028
 8000500:	20000034 	.word	0x20000034

08000504 <motorB_init>:
	HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_RESET);
}

// q2
void motorB_init(TIM_HandleTypeDef *tim, uint32_t tim_channel)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	6039      	str	r1, [r7, #0]
	timB = tim;
 800050e:	4a09      	ldr	r2, [pc, #36]	; (8000534 <motorB_init+0x30>)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	6013      	str	r3, [r2, #0]
	tim_channelB = tim_channel;
 8000514:	4a08      	ldr	r2, [pc, #32]	; (8000538 <motorB_init+0x34>)
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	6013      	str	r3, [r2, #0]
	//motorA_setDirection(CW);
	//motorA_setSpeed(0);
	HAL_TIM_PWM_Start(timB, tim_channelB);
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <motorB_init+0x30>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a06      	ldr	r2, [pc, #24]	; (8000538 <motorB_init+0x34>)
 8000520:	6812      	ldr	r2, [r2, #0]
 8000522:	4611      	mov	r1, r2
 8000524:	4618      	mov	r0, r3
 8000526:	f003 f85f 	bl	80035e8 <HAL_TIM_PWM_Start>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	2000002c 	.word	0x2000002c
 8000538:	20000038 	.word	0x20000038

0800053c <servo_init>:
	HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_RESET);
}

// q3
void servo_init(TIM_HandleTypeDef *tim, uint32_t channel)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
	timServo = tim;
 8000546:	4a26      	ldr	r2, [pc, #152]	; (80005e0 <servo_init+0xa4>)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	6013      	str	r3, [r2, #0]
	tim_channelServo = channel;
 800054c:	4a25      	ldr	r2, [pc, #148]	; (80005e4 <servo_init+0xa8>)
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(timServo, tim_channelServo);
 8000552:	4b23      	ldr	r3, [pc, #140]	; (80005e0 <servo_init+0xa4>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a23      	ldr	r2, [pc, #140]	; (80005e4 <servo_init+0xa8>)
 8000558:	6812      	ldr	r2, [r2, #0]
 800055a:	4611      	mov	r1, r2
 800055c:	4618      	mov	r0, r3
 800055e:	f003 f843 	bl	80035e8 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(timServo, tim_channelServo, 0);
 8000562:	4b20      	ldr	r3, [pc, #128]	; (80005e4 <servo_init+0xa8>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d105      	bne.n	8000576 <servo_init+0x3a>
 800056a:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <servo_init+0xa4>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2200      	movs	r2, #0
 8000572:	635a      	str	r2, [r3, #52]	; 0x34
 8000574:	e02c      	b.n	80005d0 <servo_init+0x94>
 8000576:	4b1b      	ldr	r3, [pc, #108]	; (80005e4 <servo_init+0xa8>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2b04      	cmp	r3, #4
 800057c:	d105      	bne.n	800058a <servo_init+0x4e>
 800057e:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <servo_init+0xa4>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	2300      	movs	r3, #0
 8000586:	6393      	str	r3, [r2, #56]	; 0x38
 8000588:	e022      	b.n	80005d0 <servo_init+0x94>
 800058a:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <servo_init+0xa8>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b08      	cmp	r3, #8
 8000590:	d105      	bne.n	800059e <servo_init+0x62>
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <servo_init+0xa4>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	2300      	movs	r3, #0
 800059a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800059c:	e018      	b.n	80005d0 <servo_init+0x94>
 800059e:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <servo_init+0xa8>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b0c      	cmp	r3, #12
 80005a4:	d105      	bne.n	80005b2 <servo_init+0x76>
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <servo_init+0xa4>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	2300      	movs	r3, #0
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	e00e      	b.n	80005d0 <servo_init+0x94>
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <servo_init+0xa8>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b10      	cmp	r3, #16
 80005b8:	d105      	bne.n	80005c6 <servo_init+0x8a>
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <servo_init+0xa4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	2300      	movs	r3, #0
 80005c2:	6593      	str	r3, [r2, #88]	; 0x58
 80005c4:	e004      	b.n	80005d0 <servo_init+0x94>
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <servo_init+0xa4>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	2300      	movs	r3, #0
 80005ce:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(1000);
 80005d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d4:	f000 ff6e 	bl	80014b4 <HAL_Delay>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000030 	.word	0x20000030
 80005e4:	2000003c 	.word	0x2000003c

080005e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <MX_DMA_Init+0x48>)
 80005f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005f2:	4a0f      	ldr	r2, [pc, #60]	; (8000630 <MX_DMA_Init+0x48>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6493      	str	r3, [r2, #72]	; 0x48
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <MX_DMA_Init+0x48>)
 80005fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	2010      	movs	r0, #16
 800060c:	f001 f851 	bl	80016b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000610:	2010      	movs	r0, #16
 8000612:	f001 f86a 	bl	80016ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	2011      	movs	r0, #17
 800061c:	f001 f849 	bl	80016b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000620:	2011      	movs	r0, #17
 8000622:	f001 f862 	bl	80016ea <HAL_NVIC_EnableIRQ>

}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000

08000634 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08a      	sub	sp, #40	; 0x28
 8000638:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064a:	4b2a      	ldr	r3, [pc, #168]	; (80006f4 <MX_GPIO_Init+0xc0>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	4a29      	ldr	r2, [pc, #164]	; (80006f4 <MX_GPIO_Init+0xc0>)
 8000650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000656:	4b27      	ldr	r3, [pc, #156]	; (80006f4 <MX_GPIO_Init+0xc0>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b24      	ldr	r3, [pc, #144]	; (80006f4 <MX_GPIO_Init+0xc0>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	4a23      	ldr	r2, [pc, #140]	; (80006f4 <MX_GPIO_Init+0xc0>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066e:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <MX_GPIO_Init+0xc0>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800067a:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <MX_GPIO_Init+0xc0>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	4a1d      	ldr	r2, [pc, #116]	; (80006f4 <MX_GPIO_Init+0xc0>)
 8000680:	f043 0310 	orr.w	r3, r3, #16
 8000684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_GPIO_Init+0xc0>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	f003 0310 	and.w	r3, r3, #16
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <MX_GPIO_Init+0xc0>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	4a17      	ldr	r2, [pc, #92]	; (80006f4 <MX_GPIO_Init+0xc0>)
 8000698:	f043 0308 	orr.w	r3, r3, #8
 800069c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_GPIO_Init+0xc0>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	f003 0308 	and.w	r3, r3, #8
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_GPIO_Init+0xc0>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <MX_GPIO_Init+0xc0>)
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_GPIO_Init+0xc0>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AIN2_Pin|AIN1_Pin|BIN2_Pin|BIN1_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 80006c8:	480b      	ldr	r0, [pc, #44]	; (80006f8 <MX_GPIO_Init+0xc4>)
 80006ca:	f001 fbb9 	bl	8001e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN2_Pin|BIN1_Pin;
 80006ce:	f44f 4334 	mov.w	r3, #46080	; 0xb400
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4619      	mov	r1, r3
 80006e6:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_GPIO_Init+0xc4>)
 80006e8:	f001 fa00 	bl	8001aec <HAL_GPIO_Init>

}
 80006ec:	bf00      	nop
 80006ee:	3728      	adds	r7, #40	; 0x28
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40021000 	.word	0x40021000
 80006f8:	48001000 	.word	0x48001000

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000700:	f000 fe5c 	bl	80013bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000704:	f000 f876 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000708:	f7ff ff94 	bl	8000634 <MX_GPIO_Init>
  MX_TIM1_Init();
 800070c:	f000 f9d0 	bl	8000ab0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000710:	f000 fa68 	bl	8000be4 <MX_TIM2_Init>
  MX_TIM15_Init();
 8000714:	f000 fb48 	bl	8000da8 <MX_TIM15_Init>
  MX_DMA_Init();
 8000718:	f7ff ff66 	bl	80005e8 <MX_DMA_Init>
  MX_TIM4_Init();
 800071c:	f000 fab6 	bl	8000c8c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000720:	f000 fd10 	bl	8001144 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000724:	f000 fb08 	bl	8000d38 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //q1
 8000728:	213c      	movs	r1, #60	; 0x3c
 800072a:	4826      	ldr	r0, [pc, #152]	; (80007c4 <main+0xc8>)
 800072c:	f003 f908 	bl	8003940 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //q2
 8000730:	213c      	movs	r1, #60	; 0x3c
 8000732:	4825      	ldr	r0, [pc, #148]	; (80007c8 <main+0xcc>)
 8000734:	f003 f904 	bl	8003940 <HAL_TIM_Encoder_Start>
  servo_init(&htim15, TIM_CHANNEL_1);
 8000738:	2100      	movs	r1, #0
 800073a:	4824      	ldr	r0, [pc, #144]	; (80007cc <main+0xd0>)
 800073c:	f7ff fefe 	bl	800053c <servo_init>
  motorA_init(&htim1, TIM_CHANNEL_2);
 8000740:	2104      	movs	r1, #4
 8000742:	4823      	ldr	r0, [pc, #140]	; (80007d0 <main+0xd4>)
 8000744:	f7ff fec2 	bl	80004cc <motorA_init>
  motorB_init(&htim1, TIM_CHANNEL_4);
 8000748:	210c      	movs	r1, #12
 800074a:	4821      	ldr	r0, [pc, #132]	; (80007d0 <main+0xd4>)
 800074c:	f7ff feda 	bl	8000504 <motorB_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(!moveFlag){
 8000750:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <main+0xd8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d112      	bne.n	800077e <main+0x82>
		  enc_pos1 = TIM2->CNT;
 8000758:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800075c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075e:	461a      	mov	r2, r3
 8000760:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <main+0xdc>)
 8000762:	601a      	str	r2, [r3, #0]
		  enc_pos2 = TIM4->CNT;
 8000764:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <main+0xe0>)
 8000766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000768:	461a      	mov	r2, r3
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <main+0xe4>)
 800076c:	601a      	str	r2, [r3, #0]
		  u1 = 0;
 800076e:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <main+0xe8>)
 8000770:	f04f 0200 	mov.w	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
		  u2 = 0;
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <main+0xec>)
 8000778:	f04f 0200 	mov.w	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
	  }
	  if(moveFlag){
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <main+0xd8>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0e4      	beq.n	8000750 <main+0x54>
		  u1 = pid_calculate(pid1,enc_pos1,(TIM2->CNT));
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <main+0xf0>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <main+0xdc>)
 800078c:	6811      	ldr	r1, [r2, #0]
 800078e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000792:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000794:	4618      	mov	r0, r3
 8000796:	f000 f884 	bl	80008a2 <pid_calculate>
 800079a:	eef0 7a40 	vmov.f32	s15, s0
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <main+0xe8>)
 80007a0:	edc3 7a00 	vstr	s15, [r3]
		  u2 = pid_calculate(pid2, enc_pos2, (TIM4->CNT));
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <main+0xf4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <main+0xe4>)
 80007aa:	6811      	ldr	r1, [r2, #0]
 80007ac:	4a0b      	ldr	r2, [pc, #44]	; (80007dc <main+0xe0>)
 80007ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 f876 	bl	80008a2 <pid_calculate>
 80007b6:	eef0 7a40 	vmov.f32	s15, s0
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <main+0xec>)
 80007bc:	edc3 7a00 	vstr	s15, [r3]
	  if(!moveFlag){
 80007c0:	e7c6      	b.n	8000750 <main+0x54>
 80007c2:	bf00      	nop
 80007c4:	200000a8 	.word	0x200000a8
 80007c8:	200000f4 	.word	0x200000f4
 80007cc:	2000018c 	.word	0x2000018c
 80007d0:	2000005c 	.word	0x2000005c
 80007d4:	20000040 	.word	0x20000040
 80007d8:	2000004c 	.word	0x2000004c
 80007dc:	40000800 	.word	0x40000800
 80007e0:	20000050 	.word	0x20000050
 80007e4:	20000044 	.word	0x20000044
 80007e8:	20000048 	.word	0x20000048
 80007ec:	20000054 	.word	0x20000054
 80007f0:	20000058 	.word	0x20000058

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b096      	sub	sp, #88	; 0x58
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	2244      	movs	r2, #68	; 0x44
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f005 f8d2 	bl	80059ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	463b      	mov	r3, r7
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000816:	f44f 7000 	mov.w	r0, #512	; 0x200
 800081a:	f001 fb37 	bl	8001e8c <HAL_PWREx_ControlVoltageScaling>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000824:	f000 f838 	bl	8000898 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000828:	2310      	movs	r3, #16
 800082a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800082c:	2301      	movs	r3, #1
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000834:	2360      	movs	r3, #96	; 0x60
 8000836:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000838:	2302      	movs	r3, #2
 800083a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800083c:	2301      	movs	r3, #1
 800083e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000840:	2301      	movs	r3, #1
 8000842:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000844:	2328      	movs	r3, #40	; 0x28
 8000846:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000848:	2307      	movs	r3, #7
 800084a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800084c:	2302      	movs	r3, #2
 800084e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000850:	2302      	movs	r3, #2
 8000852:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4618      	mov	r0, r3
 800085a:	f001 fb6d 	bl	8001f38 <HAL_RCC_OscConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000864:	f000 f818 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000868:	230f      	movs	r3, #15
 800086a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086c:	2303      	movs	r3, #3
 800086e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800087c:	463b      	mov	r3, r7
 800087e:	2104      	movs	r1, #4
 8000880:	4618      	mov	r0, r3
 8000882:	f001 ff41 	bl	8002708 <HAL_RCC_ClockConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800088c:	f000 f804 	bl	8000898 <Error_Handler>
  }
}
 8000890:	bf00      	nop
 8000892:	3758      	adds	r7, #88	; 0x58
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <Error_Handler+0x8>

080008a2 <pid_calculate>:
}

// pid
// u = kp * e + ki * total_e + kd * (e - e_previous);
float pid_calculate(PidStruct *pid, int desire, int current)
{
 80008a2:	b480      	push	{r7}
 80008a4:	b089      	sub	sp, #36	; 0x24
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	60f8      	str	r0, [r7, #12]
 80008aa:	60b9      	str	r1, [r7, #8]
 80008ac:	607a      	str	r2, [r7, #4]
	float p,i,d;

	int error = desire - current;
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	61fb      	str	r3, [r7, #28]
	pid->total_error += error;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	691a      	ldr	r2, [r3, #16]
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	441a      	add	r2, r3
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	611a      	str	r2, [r3, #16]



	if(pid->total_error > ERR_TOTAL_MAX){
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	691b      	ldr	r3, [r3, #16]
 80008c6:	2bff      	cmp	r3, #255	; 0xff
 80008c8:	dd03      	ble.n	80008d2 <pid_calculate+0x30>
		pid->total_error = ERR_TOTAL_MAX;
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	22ff      	movs	r2, #255	; 0xff
 80008ce:	611a      	str	r2, [r3, #16]
 80008d0:	e008      	b.n	80008e4 <pid_calculate+0x42>
	}else if(pid->total_error < -ERR_TOTAL_MAX){
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	691b      	ldr	r3, [r3, #16]
 80008d6:	f113 0fff 	cmn.w	r3, #255	; 0xff
 80008da:	da03      	bge.n	80008e4 <pid_calculate+0x42>
		pid->total_error = -ERR_TOTAL_MAX;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f06f 02fe 	mvn.w	r2, #254	; 0xfe
 80008e2:	611a      	str	r2, [r3, #16]
	}

	p = (float)(pid->kp * error);
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	ed93 7a00 	vldr	s14, [r3]
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	ee07 3a90 	vmov	s15, r3
 80008f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008f8:	edc7 7a06 	vstr	s15, [r7, #24]
	i = (float)(pid->ki * pid->total_error);
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	691b      	ldr	r3, [r3, #16]
 8000906:	ee07 3a90 	vmov	s15, r3
 800090a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800090e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000912:	edc7 7a05 	vstr	s15, [r7, #20]
	d = (float)(pid->kd * (error - pid->previous_error));
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	ed93 7a02 	vldr	s14, [r3, #8]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	69fa      	ldr	r2, [r7, #28]
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	ee07 3a90 	vmov	s15, r3
 8000928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800092c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000930:	edc7 7a04 	vstr	s15, [r7, #16]

	pid->previous_error = error;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	69fa      	ldr	r2, [r7, #28]
 8000938:	60da      	str	r2, [r3, #12]

	return p+i+d;
 800093a:	ed97 7a06 	vldr	s14, [r7, #24]
 800093e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000942:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000946:	edd7 7a04 	vldr	s15, [r7, #16]
 800094a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800094e:	eeb0 0a67 	vmov.f32	s0, s15
 8000952:	3724      	adds	r7, #36	; 0x24
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_MspInit+0x44>)
 8000964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000966:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <HAL_MspInit+0x44>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6613      	str	r3, [r2, #96]	; 0x60
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HAL_MspInit+0x44>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_MspInit+0x44>)
 800097c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_MspInit+0x44>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6593      	str	r3, [r2, #88]	; 0x58
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_MspInit+0x44>)
 8000988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <NMI_Handler+0x4>

080009aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <MemManage_Handler+0x4>

080009b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <BusFault_Handler+0x4>

080009bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <UsageFault_Handler+0x4>

080009c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f0:	f000 fd40 	bl	8001474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <DMA1_Channel6_IRQHandler+0x10>)
 80009fe:	f000 ffc6 	bl	800198e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	2000025c 	.word	0x2000025c

08000a0c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <DMA1_Channel7_IRQHandler+0x10>)
 8000a12:	f000 ffbc 	bl	800198e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200002a4 	.word	0x200002a4

08000a20 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a24:	4803      	ldr	r0, [pc, #12]	; (8000a34 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8000a26:	f003 f819 	bl	8003a5c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8000a2a:	4803      	ldr	r0, [pc, #12]	; (8000a38 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8000a2c:	f003 f816 	bl	8003a5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2000005c 	.word	0x2000005c
 8000a38:	2000018c 	.word	0x2000018c

08000a3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <TIM2_IRQHandler+0x10>)
 8000a42:	f003 f80b 	bl	8003a5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000a8 	.word	0x200000a8

08000a50 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <TIM4_IRQHandler+0x10>)
 8000a56:	f003 f801 	bl	8003a5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200000f4 	.word	0x200000f4

08000a64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <USART2_IRQHandler+0x10>)
 8000a6a:	f003 ff65 	bl	8004938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200001d8 	.word	0x200001d8

08000a78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a7c:	4802      	ldr	r0, [pc, #8]	; (8000a88 <TIM6_DAC_IRQHandler+0x10>)
 8000a7e:	f002 ffed 	bl	8003a5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000140 	.word	0x20000140

08000a8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <SystemInit+0x20>)
 8000a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a96:	4a05      	ldr	r2, [pc, #20]	; (8000aac <SystemInit+0x20>)
 8000a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b096      	sub	sp, #88	; 0x58
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ac2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]
 8000ad2:	615a      	str	r2, [r3, #20]
 8000ad4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	222c      	movs	r2, #44	; 0x2c
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f004 ff65 	bl	80059ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ae2:	4b3e      	ldr	r3, [pc, #248]	; (8000bdc <MX_TIM1_Init+0x12c>)
 8000ae4:	4a3e      	ldr	r2, [pc, #248]	; (8000be0 <MX_TIM1_Init+0x130>)
 8000ae6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 39;
 8000ae8:	4b3c      	ldr	r3, [pc, #240]	; (8000bdc <MX_TIM1_Init+0x12c>)
 8000aea:	2227      	movs	r2, #39	; 0x27
 8000aec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aee:	4b3b      	ldr	r3, [pc, #236]	; (8000bdc <MX_TIM1_Init+0x12c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000af4:	4b39      	ldr	r3, [pc, #228]	; (8000bdc <MX_TIM1_Init+0x12c>)
 8000af6:	2263      	movs	r2, #99	; 0x63
 8000af8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000afa:	4b38      	ldr	r3, [pc, #224]	; (8000bdc <MX_TIM1_Init+0x12c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b00:	4b36      	ldr	r3, [pc, #216]	; (8000bdc <MX_TIM1_Init+0x12c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b06:	4b35      	ldr	r3, [pc, #212]	; (8000bdc <MX_TIM1_Init+0x12c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b0c:	4833      	ldr	r0, [pc, #204]	; (8000bdc <MX_TIM1_Init+0x12c>)
 8000b0e:	f002 fd14 	bl	800353a <HAL_TIM_PWM_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000b18:	f7ff febe 	bl	8000898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b20:	2300      	movs	r3, #0
 8000b22:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	482b      	ldr	r0, [pc, #172]	; (8000bdc <MX_TIM1_Init+0x12c>)
 8000b30:	f003 fd90 	bl	8004654 <HAL_TIMEx_MasterConfigSynchronization>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000b3a:	f7ff fead 	bl	8000898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b3e:	2360      	movs	r3, #96	; 0x60
 8000b40:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b46:	2300      	movs	r3, #0
 8000b48:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b5e:	2204      	movs	r2, #4
 8000b60:	4619      	mov	r1, r3
 8000b62:	481e      	ldr	r0, [pc, #120]	; (8000bdc <MX_TIM1_Init+0x12c>)
 8000b64:	f003 f89a 	bl	8003c9c <HAL_TIM_PWM_ConfigChannel>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000b6e:	f7ff fe93 	bl	8000898 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b76:	220c      	movs	r2, #12
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4818      	ldr	r0, [pc, #96]	; (8000bdc <MX_TIM1_Init+0x12c>)
 8000b7c:	f003 f88e 	bl	8003c9c <HAL_TIM_PWM_ConfigChannel>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000b86:	f7ff fe87 	bl	8000898 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4807      	ldr	r0, [pc, #28]	; (8000bdc <MX_TIM1_Init+0x12c>)
 8000bc0:	f003 fdd0 	bl	8004764 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000bca:	f7ff fe65 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bce:	4803      	ldr	r0, [pc, #12]	; (8000bdc <MX_TIM1_Init+0x12c>)
 8000bd0:	f000 fa5a 	bl	8001088 <HAL_TIM_MspPostInit>

}
 8000bd4:	bf00      	nop
 8000bd6:	3758      	adds	r7, #88	; 0x58
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	2000005c 	.word	0x2000005c
 8000be0:	40012c00 	.word	0x40012c00

08000be4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08c      	sub	sp, #48	; 0x30
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bea:	f107 030c 	add.w	r3, r7, #12
 8000bee:	2224      	movs	r2, #36	; 0x24
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f004 feda 	bl	80059ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c02:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <MX_TIM2_Init+0xa4>)
 8000c04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <MX_TIM2_Init+0xa4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <MX_TIM2_Init+0xa4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c16:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MX_TIM2_Init+0xa4>)
 8000c18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_TIM2_Init+0xa4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c24:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <MX_TIM2_Init+0xa4>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c32:	2301      	movs	r3, #1
 8000c34:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000c3a:	230f      	movs	r3, #15
 8000c3c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c42:	2301      	movs	r3, #1
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000c4e:	f107 030c 	add.w	r3, r7, #12
 8000c52:	4619      	mov	r1, r3
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <MX_TIM2_Init+0xa4>)
 8000c56:	f002 fdcd 	bl	80037f4 <HAL_TIM_Encoder_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000c60:	f7ff fe1a 	bl	8000898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c64:	2300      	movs	r3, #0
 8000c66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_TIM2_Init+0xa4>)
 8000c72:	f003 fcef 	bl	8004654 <HAL_TIMEx_MasterConfigSynchronization>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000c7c:	f7ff fe0c 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	3730      	adds	r7, #48	; 0x30
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200000a8 	.word	0x200000a8

08000c8c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	2224      	movs	r2, #36	; 0x24
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f004 fe86 	bl	80059ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000caa:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <MX_TIM4_Init+0xa4>)
 8000cac:	4a21      	ldr	r2, [pc, #132]	; (8000d34 <MX_TIM4_Init+0xa8>)
 8000cae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <MX_TIM4_Init+0xa4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb6:	4b1e      	ldr	r3, [pc, #120]	; (8000d30 <MX_TIM4_Init+0xa4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <MX_TIM4_Init+0xa4>)
 8000cbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cc2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <MX_TIM4_Init+0xa4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <MX_TIM4_Init+0xa4>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000ce0:	230f      	movs	r3, #15
 8000ce2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480d      	ldr	r0, [pc, #52]	; (8000d30 <MX_TIM4_Init+0xa4>)
 8000cfc:	f002 fd7a 	bl	80037f4 <HAL_TIM_Encoder_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000d06:	f7ff fdc7 	bl	8000898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d12:	463b      	mov	r3, r7
 8000d14:	4619      	mov	r1, r3
 8000d16:	4806      	ldr	r0, [pc, #24]	; (8000d30 <MX_TIM4_Init+0xa4>)
 8000d18:	f003 fc9c 	bl	8004654 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d22:	f7ff fdb9 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	3730      	adds	r7, #48	; 0x30
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200000f4 	.word	0x200000f4
 8000d34:	40000800 	.word	0x40000800

08000d38 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <MX_TIM6_Init+0x68>)
 8000d4a:	4a16      	ldr	r2, [pc, #88]	; (8000da4 <MX_TIM6_Init+0x6c>)
 8000d4c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_TIM6_Init+0x68>)
 8000d50:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d54:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d56:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <MX_TIM6_Init+0x68>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000d5c:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <MX_TIM6_Init+0x68>)
 8000d5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d62:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d64:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_TIM6_Init+0x68>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d6a:	480d      	ldr	r0, [pc, #52]	; (8000da0 <MX_TIM6_Init+0x68>)
 8000d6c:	f002 fb8e 	bl	800348c <HAL_TIM_Base_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000d76:	f7ff fd8f 	bl	8000898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	4619      	mov	r1, r3
 8000d86:	4806      	ldr	r0, [pc, #24]	; (8000da0 <MX_TIM6_Init+0x68>)
 8000d88:	f003 fc64 	bl	8004654 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000d92:	f7ff fd81 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000140 	.word	0x20000140
 8000da4:	40001000 	.word	0x40001000

08000da8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b096      	sub	sp, #88	; 0x58
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	611a      	str	r2, [r3, #16]
 8000dca:	615a      	str	r2, [r3, #20]
 8000dcc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	222c      	movs	r2, #44	; 0x2c
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f004 fde9 	bl	80059ac <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000dda:	4b34      	ldr	r3, [pc, #208]	; (8000eac <MX_TIM15_Init+0x104>)
 8000ddc:	4a34      	ldr	r2, [pc, #208]	; (8000eb0 <MX_TIM15_Init+0x108>)
 8000dde:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1919;
 8000de0:	4b32      	ldr	r3, [pc, #200]	; (8000eac <MX_TIM15_Init+0x104>)
 8000de2:	f240 727f 	movw	r2, #1919	; 0x77f
 8000de6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de8:	4b30      	ldr	r3, [pc, #192]	; (8000eac <MX_TIM15_Init+0x104>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8000dee:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <MX_TIM15_Init+0x104>)
 8000df0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000df4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df6:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <MX_TIM15_Init+0x104>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000dfc:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <MX_TIM15_Init+0x104>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e02:	4b2a      	ldr	r3, [pc, #168]	; (8000eac <MX_TIM15_Init+0x104>)
 8000e04:	2280      	movs	r2, #128	; 0x80
 8000e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000e08:	4828      	ldr	r0, [pc, #160]	; (8000eac <MX_TIM15_Init+0x104>)
 8000e0a:	f002 fb96 	bl	800353a <HAL_TIM_PWM_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8000e14:	f7ff fd40 	bl	8000898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000e20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e24:	4619      	mov	r1, r3
 8000e26:	4821      	ldr	r0, [pc, #132]	; (8000eac <MX_TIM15_Init+0x104>)
 8000e28:	f003 fc14 	bl	8004654 <HAL_TIMEx_MasterConfigSynchronization>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8000e32:	f7ff fd31 	bl	8000898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e36:	2360      	movs	r3, #96	; 0x60
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50;
 8000e3a:	2332      	movs	r3, #50	; 0x32
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e42:	2300      	movs	r3, #0
 8000e44:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e56:	2200      	movs	r2, #0
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4814      	ldr	r0, [pc, #80]	; (8000eac <MX_TIM15_Init+0x104>)
 8000e5c:	f002 ff1e 	bl	8003c9c <HAL_TIM_PWM_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 8000e66:	f7ff fd17 	bl	8000898 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4807      	ldr	r0, [pc, #28]	; (8000eac <MX_TIM15_Init+0x104>)
 8000e8e:	f003 fc69 	bl	8004764 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM15_Init+0xf4>
  {
    Error_Handler();
 8000e98:	f7ff fcfe 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000e9c:	4803      	ldr	r0, [pc, #12]	; (8000eac <MX_TIM15_Init+0x104>)
 8000e9e:	f000 f8f3 	bl	8001088 <HAL_TIM_MspPostInit>

}
 8000ea2:	bf00      	nop
 8000ea4:	3758      	adds	r7, #88	; 0x58
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	2000018c 	.word	0x2000018c
 8000eb0:	40014000 	.word	0x40014000

08000eb4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a1a      	ldr	r2, [pc, #104]	; (8000f2c <HAL_TIM_PWM_MspInit+0x78>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d114      	bne.n	8000ef0 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <HAL_TIM_PWM_MspInit+0x7c>)
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eca:	4a19      	ldr	r2, [pc, #100]	; (8000f30 <HAL_TIM_PWM_MspInit+0x7c>)
 8000ecc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ed0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <HAL_TIM_PWM_MspInit+0x7c>)
 8000ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2018      	movs	r0, #24
 8000ee4:	f000 fbe5 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000ee8:	2018      	movs	r0, #24
 8000eea:	f000 fbfe 	bl	80016ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8000eee:	e018      	b.n	8000f22 <HAL_TIM_PWM_MspInit+0x6e>
  else if(tim_pwmHandle->Instance==TIM15)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0f      	ldr	r2, [pc, #60]	; (8000f34 <HAL_TIM_PWM_MspInit+0x80>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d113      	bne.n	8000f22 <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <HAL_TIM_PWM_MspInit+0x7c>)
 8000efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000efe:	4a0c      	ldr	r2, [pc, #48]	; (8000f30 <HAL_TIM_PWM_MspInit+0x7c>)
 8000f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f04:	6613      	str	r3, [r2, #96]	; 0x60
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_TIM_PWM_MspInit+0x7c>)
 8000f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	2018      	movs	r0, #24
 8000f18:	f000 fbcb 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000f1c:	2018      	movs	r0, #24
 8000f1e:	f000 fbe4 	bl	80016ea <HAL_NVIC_EnableIRQ>
}
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40012c00 	.word	0x40012c00
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40014000 	.word	0x40014000

08000f38 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08c      	sub	sp, #48	; 0x30
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f58:	d131      	bne.n	8000fbe <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f5a:	4b35      	ldr	r3, [pc, #212]	; (8001030 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5e:	4a34      	ldr	r2, [pc, #208]	; (8001030 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6593      	str	r3, [r2, #88]	; 0x58
 8000f66:	4b32      	ldr	r3, [pc, #200]	; (8001030 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	61bb      	str	r3, [r7, #24]
 8000f70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	4b2f      	ldr	r3, [pc, #188]	; (8001030 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	4a2e      	ldr	r2, [pc, #184]	; (8001030 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7e:	4b2c      	ldr	r3, [pc, #176]	; (8001030 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC2_A2_Pin|ENC2_B2_Pin;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa8:	f000 fda0 	bl	8001aec <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2100      	movs	r1, #0
 8000fb0:	201c      	movs	r0, #28
 8000fb2:	f000 fb7e 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fb6:	201c      	movs	r0, #28
 8000fb8:	f000 fb97 	bl	80016ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000fbc:	e034      	b.n	8001028 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(tim_encoderHandle->Instance==TIM4)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a1c      	ldr	r2, [pc, #112]	; (8001034 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d12f      	bne.n	8001028 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fcc:	4a18      	ldr	r2, [pc, #96]	; (8001030 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000fce:	f043 0304 	orr.w	r3, r3, #4
 8000fd2:	6593      	str	r3, [r2, #88]	; 0x58
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe4:	4a12      	ldr	r2, [pc, #72]	; (8001030 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000fe6:	f043 0302 	orr.w	r3, r3, #2
 8000fea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fec:	4b10      	ldr	r3, [pc, #64]	; (8001030 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC1_B1_Pin|ENC1_A1_Pin;
 8000ff8:	23c0      	movs	r3, #192	; 0xc0
 8000ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001008:	2302      	movs	r3, #2
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4619      	mov	r1, r3
 8001012:	4809      	ldr	r0, [pc, #36]	; (8001038 <HAL_TIM_Encoder_MspInit+0x100>)
 8001014:	f000 fd6a 	bl	8001aec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	201e      	movs	r0, #30
 800101e:	f000 fb48 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001022:	201e      	movs	r0, #30
 8001024:	f000 fb61 	bl	80016ea <HAL_NVIC_EnableIRQ>
}
 8001028:	bf00      	nop
 800102a:	3730      	adds	r7, #48	; 0x30
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40021000 	.word	0x40021000
 8001034:	40000800 	.word	0x40000800
 8001038:	48000400 	.word	0x48000400

0800103c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <HAL_TIM_Base_MspInit+0x44>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d113      	bne.n	8001076 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800104e:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <HAL_TIM_Base_MspInit+0x48>)
 8001050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001052:	4a0c      	ldr	r2, [pc, #48]	; (8001084 <HAL_TIM_Base_MspInit+0x48>)
 8001054:	f043 0310 	orr.w	r3, r3, #16
 8001058:	6593      	str	r3, [r2, #88]	; 0x58
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_TIM_Base_MspInit+0x48>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	f003 0310 	and.w	r3, r3, #16
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2036      	movs	r0, #54	; 0x36
 800106c:	f000 fb21 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001070:	2036      	movs	r0, #54	; 0x36
 8001072:	f000 fb3a 	bl	80016ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40001000 	.word	0x40001000
 8001084:	40021000 	.word	0x40021000

08001088 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a23      	ldr	r2, [pc, #140]	; (8001134 <HAL_TIM_MspPostInit+0xac>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d11d      	bne.n	80010e6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010aa:	4b23      	ldr	r3, [pc, #140]	; (8001138 <HAL_TIM_MspPostInit+0xb0>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	4a22      	ldr	r2, [pc, #136]	; (8001138 <HAL_TIM_MspPostInit+0xb0>)
 80010b0:	f043 0310 	orr.w	r3, r3, #16
 80010b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b6:	4b20      	ldr	r3, [pc, #128]	; (8001138 <HAL_TIM_MspPostInit+0xb0>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 80010c2:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80010c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	4817      	ldr	r0, [pc, #92]	; (800113c <HAL_TIM_MspPostInit+0xb4>)
 80010e0:	f000 fd04 	bl	8001aec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80010e4:	e021      	b.n	800112a <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM15)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a15      	ldr	r2, [pc, #84]	; (8001140 <HAL_TIM_MspPostInit+0xb8>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d11c      	bne.n	800112a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_TIM_MspPostInit+0xb0>)
 80010f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f4:	4a10      	ldr	r2, [pc, #64]	; (8001138 <HAL_TIM_MspPostInit+0xb0>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_TIM_MspPostInit+0xb0>)
 80010fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8001108:	2304      	movs	r3, #4
 800110a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001118:	230e      	movs	r3, #14
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001126:	f000 fce1 	bl	8001aec <HAL_GPIO_Init>
}
 800112a:	bf00      	nop
 800112c:	3728      	adds	r7, #40	; 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40012c00 	.word	0x40012c00
 8001138:	40021000 	.word	0x40021000
 800113c:	48001000 	.word	0x48001000
 8001140:	40014000 	.word	0x40014000

08001144 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <MX_USART2_UART_Init+0x58>)
 800114a:	4a15      	ldr	r2, [pc, #84]	; (80011a0 <MX_USART2_UART_Init+0x5c>)
 800114c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <MX_USART2_UART_Init+0x58>)
 8001150:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001154:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_USART2_UART_Init+0x58>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <MX_USART2_UART_Init+0x58>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <MX_USART2_UART_Init+0x58>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <MX_USART2_UART_Init+0x58>)
 800116a:	220c      	movs	r2, #12
 800116c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <MX_USART2_UART_Init+0x58>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <MX_USART2_UART_Init+0x58>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <MX_USART2_UART_Init+0x58>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <MX_USART2_UART_Init+0x58>)
 8001182:	2200      	movs	r2, #0
 8001184:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001186:	4805      	ldr	r0, [pc, #20]	; (800119c <MX_USART2_UART_Init+0x58>)
 8001188:	f003 fb88 	bl	800489c <HAL_UART_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001192:	f7ff fb81 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200001d8 	.word	0x200001d8
 80011a0:	40004400 	.word	0x40004400

080011a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b0ac      	sub	sp, #176	; 0xb0
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2288      	movs	r2, #136	; 0x88
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f004 fbf1 	bl	80059ac <memset>
  if(uartHandle->Instance==USART2)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a5f      	ldr	r2, [pc, #380]	; (800134c <HAL_UART_MspInit+0x1a8>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	f040 80b7 	bne.w	8001344 <HAL_UART_MspInit+0x1a0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011d6:	2302      	movs	r3, #2
 80011d8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011da:	2300      	movs	r3, #0
 80011dc:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4618      	mov	r0, r3
 80011e4:	f001 fc96 	bl	8002b14 <HAL_RCCEx_PeriphCLKConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011ee:	f7ff fb53 	bl	8000898 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011f2:	4b57      	ldr	r3, [pc, #348]	; (8001350 <HAL_UART_MspInit+0x1ac>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f6:	4a56      	ldr	r2, [pc, #344]	; (8001350 <HAL_UART_MspInit+0x1ac>)
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fc:	6593      	str	r3, [r2, #88]	; 0x58
 80011fe:	4b54      	ldr	r3, [pc, #336]	; (8001350 <HAL_UART_MspInit+0x1ac>)
 8001200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	4b51      	ldr	r3, [pc, #324]	; (8001350 <HAL_UART_MspInit+0x1ac>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	4a50      	ldr	r2, [pc, #320]	; (8001350 <HAL_UART_MspInit+0x1ac>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001216:	4b4e      	ldr	r3, [pc, #312]	; (8001350 <HAL_UART_MspInit+0x1ac>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001222:	4b4b      	ldr	r3, [pc, #300]	; (8001350 <HAL_UART_MspInit+0x1ac>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	4a4a      	ldr	r2, [pc, #296]	; (8001350 <HAL_UART_MspInit+0x1ac>)
 8001228:	f043 0308 	orr.w	r3, r3, #8
 800122c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122e:	4b48      	ldr	r3, [pc, #288]	; (8001350 <HAL_UART_MspInit+0x1ac>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800123a:	2308      	movs	r3, #8
 800123c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001252:	2307      	movs	r3, #7
 8001254:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800125c:	4619      	mov	r1, r3
 800125e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001262:	f000 fc43 	bl	8001aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001266:	2320      	movs	r3, #32
 8001268:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800127e:	2307      	movs	r3, #7
 8001280:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001284:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001288:	4619      	mov	r1, r3
 800128a:	4832      	ldr	r0, [pc, #200]	; (8001354 <HAL_UART_MspInit+0x1b0>)
 800128c:	f000 fc2e 	bl	8001aec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001290:	4b31      	ldr	r3, [pc, #196]	; (8001358 <HAL_UART_MspInit+0x1b4>)
 8001292:	4a32      	ldr	r2, [pc, #200]	; (800135c <HAL_UART_MspInit+0x1b8>)
 8001294:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001296:	4b30      	ldr	r3, [pc, #192]	; (8001358 <HAL_UART_MspInit+0x1b4>)
 8001298:	2202      	movs	r2, #2
 800129a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800129c:	4b2e      	ldr	r3, [pc, #184]	; (8001358 <HAL_UART_MspInit+0x1b4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a2:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <HAL_UART_MspInit+0x1b4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012a8:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <HAL_UART_MspInit+0x1b4>)
 80012aa:	2280      	movs	r2, #128	; 0x80
 80012ac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ae:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <HAL_UART_MspInit+0x1b4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012b4:	4b28      	ldr	r3, [pc, #160]	; (8001358 <HAL_UART_MspInit+0x1b4>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80012ba:	4b27      	ldr	r3, [pc, #156]	; (8001358 <HAL_UART_MspInit+0x1b4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012c0:	4b25      	ldr	r3, [pc, #148]	; (8001358 <HAL_UART_MspInit+0x1b4>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80012c6:	4824      	ldr	r0, [pc, #144]	; (8001358 <HAL_UART_MspInit+0x1b4>)
 80012c8:	f000 fa2a 	bl	8001720 <HAL_DMA_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 80012d2:	f7ff fae1 	bl	8000898 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a1f      	ldr	r2, [pc, #124]	; (8001358 <HAL_UART_MspInit+0x1b4>)
 80012da:	671a      	str	r2, [r3, #112]	; 0x70
 80012dc:	4a1e      	ldr	r2, [pc, #120]	; (8001358 <HAL_UART_MspInit+0x1b4>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80012e2:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <HAL_UART_MspInit+0x1bc>)
 80012e4:	4a1f      	ldr	r2, [pc, #124]	; (8001364 <HAL_UART_MspInit+0x1c0>)
 80012e6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <HAL_UART_MspInit+0x1bc>)
 80012ea:	2202      	movs	r2, #2
 80012ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <HAL_UART_MspInit+0x1bc>)
 80012f0:	2210      	movs	r2, #16
 80012f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_UART_MspInit+0x1bc>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <HAL_UART_MspInit+0x1bc>)
 80012fc:	2280      	movs	r2, #128	; 0x80
 80012fe:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <HAL_UART_MspInit+0x1bc>)
 8001302:	2200      	movs	r2, #0
 8001304:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_UART_MspInit+0x1bc>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <HAL_UART_MspInit+0x1bc>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_UART_MspInit+0x1bc>)
 8001314:	2200      	movs	r2, #0
 8001316:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001318:	4811      	ldr	r0, [pc, #68]	; (8001360 <HAL_UART_MspInit+0x1bc>)
 800131a:	f000 fa01 	bl	8001720 <HAL_DMA_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_UART_MspInit+0x184>
    {
      Error_Handler();
 8001324:	f7ff fab8 	bl	8000898 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <HAL_UART_MspInit+0x1bc>)
 800132c:	66da      	str	r2, [r3, #108]	; 0x6c
 800132e:	4a0c      	ldr	r2, [pc, #48]	; (8001360 <HAL_UART_MspInit+0x1bc>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	2100      	movs	r1, #0
 8001338:	2026      	movs	r0, #38	; 0x26
 800133a:	f000 f9ba 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800133e:	2026      	movs	r0, #38	; 0x26
 8001340:	f000 f9d3 	bl	80016ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001344:	bf00      	nop
 8001346:	37b0      	adds	r7, #176	; 0xb0
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40004400 	.word	0x40004400
 8001350:	40021000 	.word	0x40021000
 8001354:	48000c00 	.word	0x48000c00
 8001358:	2000025c 	.word	0x2000025c
 800135c:	4002006c 	.word	0x4002006c
 8001360:	200002a4 	.word	0x200002a4
 8001364:	40020080 	.word	0x40020080

08001368 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800136c:	f7ff fb8e 	bl	8000a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001370:	480c      	ldr	r0, [pc, #48]	; (80013a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001372:	490d      	ldr	r1, [pc, #52]	; (80013a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001374:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <LoopForever+0xe>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001378:	e002      	b.n	8001380 <LoopCopyDataInit>

0800137a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800137c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137e:	3304      	adds	r3, #4

08001380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001384:	d3f9      	bcc.n	800137a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001388:	4c0a      	ldr	r4, [pc, #40]	; (80013b4 <LoopForever+0x16>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800138c:	e001      	b.n	8001392 <LoopFillZerobss>

0800138e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001390:	3204      	adds	r2, #4

08001392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001394:	d3fb      	bcc.n	800138e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001396:	f004 fae5 	bl	8005964 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800139a:	f7ff f9af 	bl	80006fc <main>

0800139e <LoopForever>:

LoopForever:
    b LoopForever
 800139e:	e7fe      	b.n	800139e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013ac:	08005a2c 	.word	0x08005a2c
  ldr r2, =_sbss
 80013b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013b4:	200002f0 	.word	0x200002f0

080013b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013b8:	e7fe      	b.n	80013b8 <ADC1_2_IRQHandler>
	...

080013bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <HAL_Init+0x3c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <HAL_Init+0x3c>)
 80013cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d2:	2003      	movs	r0, #3
 80013d4:	f000 f962 	bl	800169c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013d8:	2000      	movs	r0, #0
 80013da:	f000 f80f 	bl	80013fc <HAL_InitTick>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d002      	beq.n	80013ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	71fb      	strb	r3, [r7, #7]
 80013e8:	e001      	b.n	80013ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013ea:	f7ff fab7 	bl	800095c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013ee:	79fb      	ldrb	r3, [r7, #7]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40022000 	.word	0x40022000

080013fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001404:	2300      	movs	r3, #0
 8001406:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <HAL_InitTick+0x6c>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d023      	beq.n	8001458 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001410:	4b16      	ldr	r3, [pc, #88]	; (800146c <HAL_InitTick+0x70>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <HAL_InitTick+0x6c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4619      	mov	r1, r3
 800141a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001422:	fbb2 f3f3 	udiv	r3, r2, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f96d 	bl	8001706 <HAL_SYSTICK_Config>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10f      	bne.n	8001452 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b0f      	cmp	r3, #15
 8001436:	d809      	bhi.n	800144c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001438:	2200      	movs	r2, #0
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f000 f937 	bl	80016b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001444:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <HAL_InitTick+0x74>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e007      	b.n	800145c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e004      	b.n	800145c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	73fb      	strb	r3, [r7, #15]
 8001456:	e001      	b.n	800145c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800145c:	7bfb      	ldrb	r3, [r7, #15]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000008 	.word	0x20000008
 800146c:	20000000 	.word	0x20000000
 8001470:	20000004 	.word	0x20000004

08001474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_IncTick+0x20>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_IncTick+0x24>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4413      	add	r3, r2
 8001484:	4a04      	ldr	r2, [pc, #16]	; (8001498 <HAL_IncTick+0x24>)
 8001486:	6013      	str	r3, [r2, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000008 	.word	0x20000008
 8001498:	200002ec 	.word	0x200002ec

0800149c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return uwTick;
 80014a0:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <HAL_GetTick+0x14>)
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	200002ec 	.word	0x200002ec

080014b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014bc:	f7ff ffee 	bl	800149c <HAL_GetTick>
 80014c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014cc:	d005      	beq.n	80014da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_Delay+0x44>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4413      	add	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014da:	bf00      	nop
 80014dc:	f7ff ffde 	bl	800149c <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d8f7      	bhi.n	80014dc <HAL_Delay+0x28>
  {
  }
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000008 	.word	0x20000008

080014fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001518:	4013      	ands	r3, r2
 800151a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152e:	4a04      	ldr	r2, [pc, #16]	; (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60d3      	str	r3, [r2, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <__NVIC_GetPriorityGrouping+0x18>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	f003 0307 	and.w	r3, r3, #7
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	2b00      	cmp	r3, #0
 8001570:	db0b      	blt.n	800158a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	f003 021f 	and.w	r2, r3, #31
 8001578:	4907      	ldr	r1, [pc, #28]	; (8001598 <__NVIC_EnableIRQ+0x38>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	095b      	lsrs	r3, r3, #5
 8001580:	2001      	movs	r0, #1
 8001582:	fa00 f202 	lsl.w	r2, r0, r2
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000e100 	.word	0xe000e100

0800159c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	6039      	str	r1, [r7, #0]
 80015a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	db0a      	blt.n	80015c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	490c      	ldr	r1, [pc, #48]	; (80015e8 <__NVIC_SetPriority+0x4c>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	0112      	lsls	r2, r2, #4
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	440b      	add	r3, r1
 80015c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c4:	e00a      	b.n	80015dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4908      	ldr	r1, [pc, #32]	; (80015ec <__NVIC_SetPriority+0x50>)
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	3b04      	subs	r3, #4
 80015d4:	0112      	lsls	r2, r2, #4
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	440b      	add	r3, r1
 80015da:	761a      	strb	r2, [r3, #24]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000e100 	.word	0xe000e100
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b089      	sub	sp, #36	; 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f1c3 0307 	rsb	r3, r3, #7
 800160a:	2b04      	cmp	r3, #4
 800160c:	bf28      	it	cs
 800160e:	2304      	movcs	r3, #4
 8001610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3304      	adds	r3, #4
 8001616:	2b06      	cmp	r3, #6
 8001618:	d902      	bls.n	8001620 <NVIC_EncodePriority+0x30>
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3b03      	subs	r3, #3
 800161e:	e000      	b.n	8001622 <NVIC_EncodePriority+0x32>
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	f04f 32ff 	mov.w	r2, #4294967295
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43da      	mvns	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	401a      	ands	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001638:	f04f 31ff 	mov.w	r1, #4294967295
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	43d9      	mvns	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	4313      	orrs	r3, r2
         );
}
 800164a:	4618      	mov	r0, r3
 800164c:	3724      	adds	r7, #36	; 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001668:	d301      	bcc.n	800166e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166a:	2301      	movs	r3, #1
 800166c:	e00f      	b.n	800168e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <SysTick_Config+0x40>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001676:	210f      	movs	r1, #15
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f7ff ff8e 	bl	800159c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <SysTick_Config+0x40>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <SysTick_Config+0x40>)
 8001688:	2207      	movs	r2, #7
 800168a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	e000e010 	.word	0xe000e010

0800169c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ff29 	bl	80014fc <__NVIC_SetPriorityGrouping>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016c4:	f7ff ff3e 	bl	8001544 <__NVIC_GetPriorityGrouping>
 80016c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	6978      	ldr	r0, [r7, #20]
 80016d0:	f7ff ff8e 	bl	80015f0 <NVIC_EncodePriority>
 80016d4:	4602      	mov	r2, r0
 80016d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff5d 	bl	800159c <__NVIC_SetPriority>
}
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff31 	bl	8001560 <__NVIC_EnableIRQ>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff ffa2 	bl	8001658 <SysTick_Config>
 8001714:	4603      	mov	r3, r0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e098      	b.n	8001864 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	4b4d      	ldr	r3, [pc, #308]	; (8001870 <HAL_DMA_Init+0x150>)
 800173a:	429a      	cmp	r2, r3
 800173c:	d80f      	bhi.n	800175e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	4b4b      	ldr	r3, [pc, #300]	; (8001874 <HAL_DMA_Init+0x154>)
 8001746:	4413      	add	r3, r2
 8001748:	4a4b      	ldr	r2, [pc, #300]	; (8001878 <HAL_DMA_Init+0x158>)
 800174a:	fba2 2303 	umull	r2, r3, r2, r3
 800174e:	091b      	lsrs	r3, r3, #4
 8001750:	009a      	lsls	r2, r3, #2
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a48      	ldr	r2, [pc, #288]	; (800187c <HAL_DMA_Init+0x15c>)
 800175a:	641a      	str	r2, [r3, #64]	; 0x40
 800175c:	e00e      	b.n	800177c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	4b46      	ldr	r3, [pc, #280]	; (8001880 <HAL_DMA_Init+0x160>)
 8001766:	4413      	add	r3, r2
 8001768:	4a43      	ldr	r2, [pc, #268]	; (8001878 <HAL_DMA_Init+0x158>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	091b      	lsrs	r3, r3, #4
 8001770:	009a      	lsls	r2, r3, #2
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a42      	ldr	r2, [pc, #264]	; (8001884 <HAL_DMA_Init+0x164>)
 800177a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2202      	movs	r2, #2
 8001780:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001796:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80017a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017d6:	d039      	beq.n	800184c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	4a27      	ldr	r2, [pc, #156]	; (800187c <HAL_DMA_Init+0x15c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d11a      	bne.n	8001818 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80017e2:	4b29      	ldr	r3, [pc, #164]	; (8001888 <HAL_DMA_Init+0x168>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f003 031c 	and.w	r3, r3, #28
 80017ee:	210f      	movs	r1, #15
 80017f0:	fa01 f303 	lsl.w	r3, r1, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	4924      	ldr	r1, [pc, #144]	; (8001888 <HAL_DMA_Init+0x168>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80017fc:	4b22      	ldr	r3, [pc, #136]	; (8001888 <HAL_DMA_Init+0x168>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6859      	ldr	r1, [r3, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001808:	f003 031c 	and.w	r3, r3, #28
 800180c:	fa01 f303 	lsl.w	r3, r1, r3
 8001810:	491d      	ldr	r1, [pc, #116]	; (8001888 <HAL_DMA_Init+0x168>)
 8001812:	4313      	orrs	r3, r2
 8001814:	600b      	str	r3, [r1, #0]
 8001816:	e019      	b.n	800184c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001818:	4b1c      	ldr	r3, [pc, #112]	; (800188c <HAL_DMA_Init+0x16c>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001820:	f003 031c 	and.w	r3, r3, #28
 8001824:	210f      	movs	r1, #15
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	4917      	ldr	r1, [pc, #92]	; (800188c <HAL_DMA_Init+0x16c>)
 800182e:	4013      	ands	r3, r2
 8001830:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001832:	4b16      	ldr	r3, [pc, #88]	; (800188c <HAL_DMA_Init+0x16c>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6859      	ldr	r1, [r3, #4]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	f003 031c 	and.w	r3, r3, #28
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	4911      	ldr	r1, [pc, #68]	; (800188c <HAL_DMA_Init+0x16c>)
 8001848:	4313      	orrs	r3, r2
 800184a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	40020407 	.word	0x40020407
 8001874:	bffdfff8 	.word	0xbffdfff8
 8001878:	cccccccd 	.word	0xcccccccd
 800187c:	40020000 	.word	0x40020000
 8001880:	bffdfbf8 	.word	0xbffdfbf8
 8001884:	40020400 	.word	0x40020400
 8001888:	400200a8 	.word	0x400200a8
 800188c:	400204a8 	.word	0x400204a8

08001890 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d008      	beq.n	80018ba <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2204      	movs	r2, #4
 80018ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e022      	b.n	8001900 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 020e 	bic.w	r2, r2, #14
 80018c8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 0201 	bic.w	r2, r2, #1
 80018d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f003 021c 	and.w	r2, r3, #28
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	2101      	movs	r1, #1
 80018e8:	fa01 f202 	lsl.w	r2, r1, r2
 80018ec:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001900:	4618      	mov	r0, r3
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d005      	beq.n	8001930 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2204      	movs	r2, #4
 8001928:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	73fb      	strb	r3, [r7, #15]
 800192e:	e029      	b.n	8001984 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 020e 	bic.w	r2, r2, #14
 800193e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0201 	bic.w	r2, r2, #1
 800194e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001954:	f003 021c 	and.w	r2, r3, #28
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	2101      	movs	r1, #1
 800195e:	fa01 f202 	lsl.w	r2, r1, r2
 8001962:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	4798      	blx	r3
    }
  }
  return status;
 8001984:	7bfb      	ldrb	r3, [r7, #15]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b084      	sub	sp, #16
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	f003 031c 	and.w	r3, r3, #28
 80019ae:	2204      	movs	r2, #4
 80019b0:	409a      	lsls	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d026      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x7a>
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d021      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0320 	and.w	r3, r3, #32
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d107      	bne.n	80019e2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0204 	bic.w	r2, r2, #4
 80019e0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	f003 021c 	and.w	r2, r3, #28
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	2104      	movs	r1, #4
 80019f0:	fa01 f202 	lsl.w	r2, r1, r2
 80019f4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d071      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001a06:	e06c      	b.n	8001ae2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0c:	f003 031c 	and.w	r3, r3, #28
 8001a10:	2202      	movs	r2, #2
 8001a12:	409a      	lsls	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d02e      	beq.n	8001a7a <HAL_DMA_IRQHandler+0xec>
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d029      	beq.n	8001a7a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0320 	and.w	r3, r3, #32
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10b      	bne.n	8001a4c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 020a 	bic.w	r2, r2, #10
 8001a42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a50:	f003 021c 	and.w	r2, r3, #28
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	2102      	movs	r1, #2
 8001a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d038      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a78:	e033      	b.n	8001ae2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	f003 031c 	and.w	r3, r3, #28
 8001a82:	2208      	movs	r2, #8
 8001a84:	409a      	lsls	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d02a      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x156>
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d025      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 020e 	bic.w	r2, r2, #14
 8001aa6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aac:	f003 021c 	and.w	r2, r3, #28
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d004      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ae2:	bf00      	nop
 8001ae4:	bf00      	nop
}
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afa:	e17f      	b.n	8001dfc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	2101      	movs	r1, #1
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	fa01 f303 	lsl.w	r3, r1, r3
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 8171 	beq.w	8001df6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d005      	beq.n	8001b2c <HAL_GPIO_Init+0x40>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d130      	bne.n	8001b8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	2203      	movs	r2, #3
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b62:	2201      	movs	r2, #1
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	091b      	lsrs	r3, r3, #4
 8001b78:	f003 0201 	and.w	r2, r3, #1
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d118      	bne.n	8001bcc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	08db      	lsrs	r3, r3, #3
 8001bb6:	f003 0201 	and.w	r2, r3, #1
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d017      	beq.n	8001c08 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	2203      	movs	r2, #3
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d123      	bne.n	8001c5c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	08da      	lsrs	r2, r3, #3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3208      	adds	r2, #8
 8001c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	220f      	movs	r2, #15
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	08da      	lsrs	r2, r3, #3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3208      	adds	r2, #8
 8001c56:	6939      	ldr	r1, [r7, #16]
 8001c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	2203      	movs	r2, #3
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0203 	and.w	r2, r3, #3
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 80ac 	beq.w	8001df6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	4b5f      	ldr	r3, [pc, #380]	; (8001e1c <HAL_GPIO_Init+0x330>)
 8001ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca2:	4a5e      	ldr	r2, [pc, #376]	; (8001e1c <HAL_GPIO_Init+0x330>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6613      	str	r3, [r2, #96]	; 0x60
 8001caa:	4b5c      	ldr	r3, [pc, #368]	; (8001e1c <HAL_GPIO_Init+0x330>)
 8001cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cb6:	4a5a      	ldr	r2, [pc, #360]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	220f      	movs	r2, #15
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ce0:	d025      	beq.n	8001d2e <HAL_GPIO_Init+0x242>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4f      	ldr	r2, [pc, #316]	; (8001e24 <HAL_GPIO_Init+0x338>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d01f      	beq.n	8001d2a <HAL_GPIO_Init+0x23e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a4e      	ldr	r2, [pc, #312]	; (8001e28 <HAL_GPIO_Init+0x33c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d019      	beq.n	8001d26 <HAL_GPIO_Init+0x23a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4d      	ldr	r2, [pc, #308]	; (8001e2c <HAL_GPIO_Init+0x340>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d013      	beq.n	8001d22 <HAL_GPIO_Init+0x236>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4c      	ldr	r2, [pc, #304]	; (8001e30 <HAL_GPIO_Init+0x344>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00d      	beq.n	8001d1e <HAL_GPIO_Init+0x232>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4b      	ldr	r2, [pc, #300]	; (8001e34 <HAL_GPIO_Init+0x348>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d007      	beq.n	8001d1a <HAL_GPIO_Init+0x22e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4a      	ldr	r2, [pc, #296]	; (8001e38 <HAL_GPIO_Init+0x34c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d101      	bne.n	8001d16 <HAL_GPIO_Init+0x22a>
 8001d12:	2306      	movs	r3, #6
 8001d14:	e00c      	b.n	8001d30 <HAL_GPIO_Init+0x244>
 8001d16:	2307      	movs	r3, #7
 8001d18:	e00a      	b.n	8001d30 <HAL_GPIO_Init+0x244>
 8001d1a:	2305      	movs	r3, #5
 8001d1c:	e008      	b.n	8001d30 <HAL_GPIO_Init+0x244>
 8001d1e:	2304      	movs	r3, #4
 8001d20:	e006      	b.n	8001d30 <HAL_GPIO_Init+0x244>
 8001d22:	2303      	movs	r3, #3
 8001d24:	e004      	b.n	8001d30 <HAL_GPIO_Init+0x244>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e002      	b.n	8001d30 <HAL_GPIO_Init+0x244>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <HAL_GPIO_Init+0x244>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	f002 0203 	and.w	r2, r2, #3
 8001d36:	0092      	lsls	r2, r2, #2
 8001d38:	4093      	lsls	r3, r2
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d40:	4937      	ldr	r1, [pc, #220]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	089b      	lsrs	r3, r3, #2
 8001d46:	3302      	adds	r3, #2
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d4e:	4b3b      	ldr	r3, [pc, #236]	; (8001e3c <HAL_GPIO_Init+0x350>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d72:	4a32      	ldr	r2, [pc, #200]	; (8001e3c <HAL_GPIO_Init+0x350>)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d78:	4b30      	ldr	r3, [pc, #192]	; (8001e3c <HAL_GPIO_Init+0x350>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4013      	ands	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d9c:	4a27      	ldr	r2, [pc, #156]	; (8001e3c <HAL_GPIO_Init+0x350>)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001da2:	4b26      	ldr	r3, [pc, #152]	; (8001e3c <HAL_GPIO_Init+0x350>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dc6:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <HAL_GPIO_Init+0x350>)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <HAL_GPIO_Init+0x350>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001df0:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <HAL_GPIO_Init+0x350>)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa22 f303 	lsr.w	r3, r2, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f47f ae78 	bne.w	8001afc <HAL_GPIO_Init+0x10>
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	371c      	adds	r7, #28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40010000 	.word	0x40010000
 8001e24:	48000400 	.word	0x48000400
 8001e28:	48000800 	.word	0x48000800
 8001e2c:	48000c00 	.word	0x48000c00
 8001e30:	48001000 	.word	0x48001000
 8001e34:	48001400 	.word	0x48001400
 8001e38:	48001800 	.word	0x48001800
 8001e3c:	40010400 	.word	0x40010400

08001e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	807b      	strh	r3, [r7, #2]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e50:	787b      	ldrb	r3, [r7, #1]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e56:	887a      	ldrh	r2, [r7, #2]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e5c:	e002      	b.n	8001e64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e5e:	887a      	ldrh	r2, [r7, #2]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40007000 	.word	0x40007000

08001e8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e9a:	d130      	bne.n	8001efe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e9c:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ea8:	d038      	beq.n	8001f1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eaa:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001eb2:	4a1e      	ldr	r2, [pc, #120]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001eba:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2232      	movs	r2, #50	; 0x32
 8001ec0:	fb02 f303 	mul.w	r3, r2, r3
 8001ec4:	4a1b      	ldr	r2, [pc, #108]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eca:	0c9b      	lsrs	r3, r3, #18
 8001ecc:	3301      	adds	r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ed0:	e002      	b.n	8001ed8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ed8:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee4:	d102      	bne.n	8001eec <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f2      	bne.n	8001ed2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eec:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef8:	d110      	bne.n	8001f1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e00f      	b.n	8001f1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0a:	d007      	beq.n	8001f1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f0c:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f14:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40007000 	.word	0x40007000
 8001f30:	20000000 	.word	0x20000000
 8001f34:	431bde83 	.word	0x431bde83

08001f38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e3d8      	b.n	80026fc <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f4a:	4b97      	ldr	r3, [pc, #604]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f54:	4b94      	ldr	r3, [pc, #592]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 80e4 	beq.w	8002134 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d007      	beq.n	8001f82 <HAL_RCC_OscConfig+0x4a>
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	2b0c      	cmp	r3, #12
 8001f76:	f040 808b 	bne.w	8002090 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	f040 8087 	bne.w	8002090 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f82:	4b89      	ldr	r3, [pc, #548]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <HAL_RCC_OscConfig+0x62>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e3b0      	b.n	80026fc <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1a      	ldr	r2, [r3, #32]
 8001f9e:	4b82      	ldr	r3, [pc, #520]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d004      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x7c>
 8001faa:	4b7f      	ldr	r3, [pc, #508]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fb2:	e005      	b.n	8001fc0 <HAL_RCC_OscConfig+0x88>
 8001fb4:	4b7c      	ldr	r3, [pc, #496]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 8001fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fba:	091b      	lsrs	r3, r3, #4
 8001fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d223      	bcs.n	800200c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 fd43 	bl	8002a54 <RCC_SetFlashLatencyFromMSIRange>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e391      	b.n	80026fc <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fd8:	4b73      	ldr	r3, [pc, #460]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a72      	ldr	r2, [pc, #456]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 8001fde:	f043 0308 	orr.w	r3, r3, #8
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	4b70      	ldr	r3, [pc, #448]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	496d      	ldr	r1, [pc, #436]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ff6:	4b6c      	ldr	r3, [pc, #432]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	4968      	ldr	r1, [pc, #416]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]
 800200a:	e025      	b.n	8002058 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800200c:	4b66      	ldr	r3, [pc, #408]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a65      	ldr	r2, [pc, #404]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 8002012:	f043 0308 	orr.w	r3, r3, #8
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	4b63      	ldr	r3, [pc, #396]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	4960      	ldr	r1, [pc, #384]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 8002026:	4313      	orrs	r3, r2
 8002028:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800202a:	4b5f      	ldr	r3, [pc, #380]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	021b      	lsls	r3, r3, #8
 8002038:	495b      	ldr	r1, [pc, #364]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 800203a:	4313      	orrs	r3, r2
 800203c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d109      	bne.n	8002058 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	4618      	mov	r0, r3
 800204a:	f000 fd03 	bl	8002a54 <RCC_SetFlashLatencyFromMSIRange>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e351      	b.n	80026fc <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002058:	f000 fc38 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 800205c:	4602      	mov	r2, r0
 800205e:	4b52      	ldr	r3, [pc, #328]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	091b      	lsrs	r3, r3, #4
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	4950      	ldr	r1, [pc, #320]	; (80021ac <HAL_RCC_OscConfig+0x274>)
 800206a:	5ccb      	ldrb	r3, [r1, r3]
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
 8002074:	4a4e      	ldr	r2, [pc, #312]	; (80021b0 <HAL_RCC_OscConfig+0x278>)
 8002076:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002078:	4b4e      	ldr	r3, [pc, #312]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff f9bd 	bl	80013fc <HAL_InitTick>
 8002082:	4603      	mov	r3, r0
 8002084:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d052      	beq.n	8002132 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	e335      	b.n	80026fc <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d032      	beq.n	80020fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002098:	4b43      	ldr	r3, [pc, #268]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a42      	ldr	r2, [pc, #264]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020a4:	f7ff f9fa 	bl	800149c <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020ac:	f7ff f9f6 	bl	800149c <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e31e      	b.n	80026fc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020be:	4b3a      	ldr	r3, [pc, #232]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ca:	4b37      	ldr	r3, [pc, #220]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a36      	ldr	r2, [pc, #216]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 80020d0:	f043 0308 	orr.w	r3, r3, #8
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4b34      	ldr	r3, [pc, #208]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4931      	ldr	r1, [pc, #196]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020e8:	4b2f      	ldr	r3, [pc, #188]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	492c      	ldr	r1, [pc, #176]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]
 80020fc:	e01a      	b.n	8002134 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020fe:	4b2a      	ldr	r3, [pc, #168]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a29      	ldr	r2, [pc, #164]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 8002104:	f023 0301 	bic.w	r3, r3, #1
 8002108:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800210a:	f7ff f9c7 	bl	800149c <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002112:	f7ff f9c3 	bl	800149c <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e2eb      	b.n	80026fc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002124:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f0      	bne.n	8002112 <HAL_RCC_OscConfig+0x1da>
 8002130:	e000      	b.n	8002134 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002132:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	d074      	beq.n	800222a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	2b08      	cmp	r3, #8
 8002144:	d005      	beq.n	8002152 <HAL_RCC_OscConfig+0x21a>
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2b0c      	cmp	r3, #12
 800214a:	d10e      	bne.n	800216a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2b03      	cmp	r3, #3
 8002150:	d10b      	bne.n	800216a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002152:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d064      	beq.n	8002228 <HAL_RCC_OscConfig+0x2f0>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d160      	bne.n	8002228 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e2c8      	b.n	80026fc <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002172:	d106      	bne.n	8002182 <HAL_RCC_OscConfig+0x24a>
 8002174:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a0b      	ldr	r2, [pc, #44]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 800217a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	e026      	b.n	80021d0 <HAL_RCC_OscConfig+0x298>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800218a:	d115      	bne.n	80021b8 <HAL_RCC_OscConfig+0x280>
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a05      	ldr	r2, [pc, #20]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 8002192:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a02      	ldr	r2, [pc, #8]	; (80021a8 <HAL_RCC_OscConfig+0x270>)
 800219e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	e014      	b.n	80021d0 <HAL_RCC_OscConfig+0x298>
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
 80021ac:	080059d4 	.word	0x080059d4
 80021b0:	20000000 	.word	0x20000000
 80021b4:	20000004 	.word	0x20000004
 80021b8:	4ba0      	ldr	r3, [pc, #640]	; (800243c <HAL_RCC_OscConfig+0x504>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a9f      	ldr	r2, [pc, #636]	; (800243c <HAL_RCC_OscConfig+0x504>)
 80021be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c2:	6013      	str	r3, [r2, #0]
 80021c4:	4b9d      	ldr	r3, [pc, #628]	; (800243c <HAL_RCC_OscConfig+0x504>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a9c      	ldr	r2, [pc, #624]	; (800243c <HAL_RCC_OscConfig+0x504>)
 80021ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d013      	beq.n	8002200 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7ff f960 	bl	800149c <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e0:	f7ff f95c 	bl	800149c <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b64      	cmp	r3, #100	; 0x64
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e284      	b.n	80026fc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021f2:	4b92      	ldr	r3, [pc, #584]	; (800243c <HAL_RCC_OscConfig+0x504>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x2a8>
 80021fe:	e014      	b.n	800222a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002200:	f7ff f94c 	bl	800149c <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002208:	f7ff f948 	bl	800149c <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b64      	cmp	r3, #100	; 0x64
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e270      	b.n	80026fc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800221a:	4b88      	ldr	r3, [pc, #544]	; (800243c <HAL_RCC_OscConfig+0x504>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x2d0>
 8002226:	e000      	b.n	800222a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d060      	beq.n	80022f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	2b04      	cmp	r3, #4
 800223a:	d005      	beq.n	8002248 <HAL_RCC_OscConfig+0x310>
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	2b0c      	cmp	r3, #12
 8002240:	d119      	bne.n	8002276 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2b02      	cmp	r3, #2
 8002246:	d116      	bne.n	8002276 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002248:	4b7c      	ldr	r3, [pc, #496]	; (800243c <HAL_RCC_OscConfig+0x504>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_RCC_OscConfig+0x328>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e24d      	b.n	80026fc <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002260:	4b76      	ldr	r3, [pc, #472]	; (800243c <HAL_RCC_OscConfig+0x504>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	061b      	lsls	r3, r3, #24
 800226e:	4973      	ldr	r1, [pc, #460]	; (800243c <HAL_RCC_OscConfig+0x504>)
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002274:	e040      	b.n	80022f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d023      	beq.n	80022c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800227e:	4b6f      	ldr	r3, [pc, #444]	; (800243c <HAL_RCC_OscConfig+0x504>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a6e      	ldr	r2, [pc, #440]	; (800243c <HAL_RCC_OscConfig+0x504>)
 8002284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002288:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228a:	f7ff f907 	bl	800149c <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002292:	f7ff f903 	bl	800149c <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e22b      	b.n	80026fc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022a4:	4b65      	ldr	r3, [pc, #404]	; (800243c <HAL_RCC_OscConfig+0x504>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b0:	4b62      	ldr	r3, [pc, #392]	; (800243c <HAL_RCC_OscConfig+0x504>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	061b      	lsls	r3, r3, #24
 80022be:	495f      	ldr	r1, [pc, #380]	; (800243c <HAL_RCC_OscConfig+0x504>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
 80022c4:	e018      	b.n	80022f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c6:	4b5d      	ldr	r3, [pc, #372]	; (800243c <HAL_RCC_OscConfig+0x504>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a5c      	ldr	r2, [pc, #368]	; (800243c <HAL_RCC_OscConfig+0x504>)
 80022cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d2:	f7ff f8e3 	bl	800149c <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022da:	f7ff f8df 	bl	800149c <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e207      	b.n	80026fc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022ec:	4b53      	ldr	r3, [pc, #332]	; (800243c <HAL_RCC_OscConfig+0x504>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f0      	bne.n	80022da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d03c      	beq.n	800237e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d01c      	beq.n	8002346 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230c:	4b4b      	ldr	r3, [pc, #300]	; (800243c <HAL_RCC_OscConfig+0x504>)
 800230e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002312:	4a4a      	ldr	r2, [pc, #296]	; (800243c <HAL_RCC_OscConfig+0x504>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231c:	f7ff f8be 	bl	800149c <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002324:	f7ff f8ba 	bl	800149c <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e1e2      	b.n	80026fc <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002336:	4b41      	ldr	r3, [pc, #260]	; (800243c <HAL_RCC_OscConfig+0x504>)
 8002338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0ef      	beq.n	8002324 <HAL_RCC_OscConfig+0x3ec>
 8002344:	e01b      	b.n	800237e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002346:	4b3d      	ldr	r3, [pc, #244]	; (800243c <HAL_RCC_OscConfig+0x504>)
 8002348:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800234c:	4a3b      	ldr	r2, [pc, #236]	; (800243c <HAL_RCC_OscConfig+0x504>)
 800234e:	f023 0301 	bic.w	r3, r3, #1
 8002352:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002356:	f7ff f8a1 	bl	800149c <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800235e:	f7ff f89d 	bl	800149c <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e1c5      	b.n	80026fc <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002370:	4b32      	ldr	r3, [pc, #200]	; (800243c <HAL_RCC_OscConfig+0x504>)
 8002372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1ef      	bne.n	800235e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 80a6 	beq.w	80024d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800238c:	2300      	movs	r3, #0
 800238e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002390:	4b2a      	ldr	r3, [pc, #168]	; (800243c <HAL_RCC_OscConfig+0x504>)
 8002392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10d      	bne.n	80023b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_RCC_OscConfig+0x504>)
 800239e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a0:	4a26      	ldr	r2, [pc, #152]	; (800243c <HAL_RCC_OscConfig+0x504>)
 80023a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a6:	6593      	str	r3, [r2, #88]	; 0x58
 80023a8:	4b24      	ldr	r3, [pc, #144]	; (800243c <HAL_RCC_OscConfig+0x504>)
 80023aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b4:	2301      	movs	r3, #1
 80023b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023b8:	4b21      	ldr	r3, [pc, #132]	; (8002440 <HAL_RCC_OscConfig+0x508>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d118      	bne.n	80023f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c4:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <HAL_RCC_OscConfig+0x508>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a1d      	ldr	r2, [pc, #116]	; (8002440 <HAL_RCC_OscConfig+0x508>)
 80023ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d0:	f7ff f864 	bl	800149c <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d8:	f7ff f860 	bl	800149c <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e188      	b.n	80026fc <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ea:	4b15      	ldr	r3, [pc, #84]	; (8002440 <HAL_RCC_OscConfig+0x508>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d108      	bne.n	8002410 <HAL_RCC_OscConfig+0x4d8>
 80023fe:	4b0f      	ldr	r3, [pc, #60]	; (800243c <HAL_RCC_OscConfig+0x504>)
 8002400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002404:	4a0d      	ldr	r2, [pc, #52]	; (800243c <HAL_RCC_OscConfig+0x504>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800240e:	e029      	b.n	8002464 <HAL_RCC_OscConfig+0x52c>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2b05      	cmp	r3, #5
 8002416:	d115      	bne.n	8002444 <HAL_RCC_OscConfig+0x50c>
 8002418:	4b08      	ldr	r3, [pc, #32]	; (800243c <HAL_RCC_OscConfig+0x504>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241e:	4a07      	ldr	r2, [pc, #28]	; (800243c <HAL_RCC_OscConfig+0x504>)
 8002420:	f043 0304 	orr.w	r3, r3, #4
 8002424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002428:	4b04      	ldr	r3, [pc, #16]	; (800243c <HAL_RCC_OscConfig+0x504>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242e:	4a03      	ldr	r2, [pc, #12]	; (800243c <HAL_RCC_OscConfig+0x504>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002438:	e014      	b.n	8002464 <HAL_RCC_OscConfig+0x52c>
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000
 8002440:	40007000 	.word	0x40007000
 8002444:	4b91      	ldr	r3, [pc, #580]	; (800268c <HAL_RCC_OscConfig+0x754>)
 8002446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244a:	4a90      	ldr	r2, [pc, #576]	; (800268c <HAL_RCC_OscConfig+0x754>)
 800244c:	f023 0301 	bic.w	r3, r3, #1
 8002450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002454:	4b8d      	ldr	r3, [pc, #564]	; (800268c <HAL_RCC_OscConfig+0x754>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	4a8c      	ldr	r2, [pc, #560]	; (800268c <HAL_RCC_OscConfig+0x754>)
 800245c:	f023 0304 	bic.w	r3, r3, #4
 8002460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d016      	beq.n	800249a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246c:	f7ff f816 	bl	800149c <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002472:	e00a      	b.n	800248a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002474:	f7ff f812 	bl	800149c <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002482:	4293      	cmp	r3, r2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e138      	b.n	80026fc <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800248a:	4b80      	ldr	r3, [pc, #512]	; (800268c <HAL_RCC_OscConfig+0x754>)
 800248c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0ed      	beq.n	8002474 <HAL_RCC_OscConfig+0x53c>
 8002498:	e015      	b.n	80024c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249a:	f7fe ffff 	bl	800149c <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024a0:	e00a      	b.n	80024b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a2:	f7fe fffb 	bl	800149c <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e121      	b.n	80026fc <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024b8:	4b74      	ldr	r3, [pc, #464]	; (800268c <HAL_RCC_OscConfig+0x754>)
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1ed      	bne.n	80024a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024c6:	7ffb      	ldrb	r3, [r7, #31]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d105      	bne.n	80024d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024cc:	4b6f      	ldr	r3, [pc, #444]	; (800268c <HAL_RCC_OscConfig+0x754>)
 80024ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d0:	4a6e      	ldr	r2, [pc, #440]	; (800268c <HAL_RCC_OscConfig+0x754>)
 80024d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 810c 	beq.w	80026fa <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	f040 80d4 	bne.w	8002694 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024ec:	4b67      	ldr	r3, [pc, #412]	; (800268c <HAL_RCC_OscConfig+0x754>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f003 0203 	and.w	r2, r3, #3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d130      	bne.n	8002562 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	3b01      	subs	r3, #1
 800250c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d127      	bne.n	8002562 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800251e:	429a      	cmp	r2, r3
 8002520:	d11f      	bne.n	8002562 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800252c:	2a07      	cmp	r2, #7
 800252e:	bf14      	ite	ne
 8002530:	2201      	movne	r2, #1
 8002532:	2200      	moveq	r2, #0
 8002534:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002536:	4293      	cmp	r3, r2
 8002538:	d113      	bne.n	8002562 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002544:	085b      	lsrs	r3, r3, #1
 8002546:	3b01      	subs	r3, #1
 8002548:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800254a:	429a      	cmp	r2, r3
 800254c:	d109      	bne.n	8002562 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	085b      	lsrs	r3, r3, #1
 800255a:	3b01      	subs	r3, #1
 800255c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800255e:	429a      	cmp	r2, r3
 8002560:	d06e      	beq.n	8002640 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	2b0c      	cmp	r3, #12
 8002566:	d069      	beq.n	800263c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002568:	4b48      	ldr	r3, [pc, #288]	; (800268c <HAL_RCC_OscConfig+0x754>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d105      	bne.n	8002580 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002574:	4b45      	ldr	r3, [pc, #276]	; (800268c <HAL_RCC_OscConfig+0x754>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0bb      	b.n	80026fc <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002584:	4b41      	ldr	r3, [pc, #260]	; (800268c <HAL_RCC_OscConfig+0x754>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a40      	ldr	r2, [pc, #256]	; (800268c <HAL_RCC_OscConfig+0x754>)
 800258a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800258e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002590:	f7fe ff84 	bl	800149c <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002598:	f7fe ff80 	bl	800149c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e0a8      	b.n	80026fc <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025aa:	4b38      	ldr	r3, [pc, #224]	; (800268c <HAL_RCC_OscConfig+0x754>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025b6:	4b35      	ldr	r3, [pc, #212]	; (800268c <HAL_RCC_OscConfig+0x754>)
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	4b35      	ldr	r3, [pc, #212]	; (8002690 <HAL_RCC_OscConfig+0x758>)
 80025bc:	4013      	ands	r3, r2
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025c6:	3a01      	subs	r2, #1
 80025c8:	0112      	lsls	r2, r2, #4
 80025ca:	4311      	orrs	r1, r2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025d0:	0212      	lsls	r2, r2, #8
 80025d2:	4311      	orrs	r1, r2
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025d8:	0852      	lsrs	r2, r2, #1
 80025da:	3a01      	subs	r2, #1
 80025dc:	0552      	lsls	r2, r2, #21
 80025de:	4311      	orrs	r1, r2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025e4:	0852      	lsrs	r2, r2, #1
 80025e6:	3a01      	subs	r2, #1
 80025e8:	0652      	lsls	r2, r2, #25
 80025ea:	4311      	orrs	r1, r2
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025f0:	0912      	lsrs	r2, r2, #4
 80025f2:	0452      	lsls	r2, r2, #17
 80025f4:	430a      	orrs	r2, r1
 80025f6:	4925      	ldr	r1, [pc, #148]	; (800268c <HAL_RCC_OscConfig+0x754>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025fc:	4b23      	ldr	r3, [pc, #140]	; (800268c <HAL_RCC_OscConfig+0x754>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a22      	ldr	r2, [pc, #136]	; (800268c <HAL_RCC_OscConfig+0x754>)
 8002602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002606:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002608:	4b20      	ldr	r3, [pc, #128]	; (800268c <HAL_RCC_OscConfig+0x754>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4a1f      	ldr	r2, [pc, #124]	; (800268c <HAL_RCC_OscConfig+0x754>)
 800260e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002612:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002614:	f7fe ff42 	bl	800149c <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261c:	f7fe ff3e 	bl	800149c <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e066      	b.n	80026fc <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262e:	4b17      	ldr	r3, [pc, #92]	; (800268c <HAL_RCC_OscConfig+0x754>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800263a:	e05e      	b.n	80026fa <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e05d      	b.n	80026fc <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002640:	4b12      	ldr	r3, [pc, #72]	; (800268c <HAL_RCC_OscConfig+0x754>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d156      	bne.n	80026fa <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800264c:	4b0f      	ldr	r3, [pc, #60]	; (800268c <HAL_RCC_OscConfig+0x754>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a0e      	ldr	r2, [pc, #56]	; (800268c <HAL_RCC_OscConfig+0x754>)
 8002652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002656:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002658:	4b0c      	ldr	r3, [pc, #48]	; (800268c <HAL_RCC_OscConfig+0x754>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4a0b      	ldr	r2, [pc, #44]	; (800268c <HAL_RCC_OscConfig+0x754>)
 800265e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002662:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002664:	f7fe ff1a 	bl	800149c <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266c:	f7fe ff16 	bl	800149c <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e03e      	b.n	80026fc <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267e:	4b03      	ldr	r3, [pc, #12]	; (800268c <HAL_RCC_OscConfig+0x754>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0x734>
 800268a:	e036      	b.n	80026fa <HAL_RCC_OscConfig+0x7c2>
 800268c:	40021000 	.word	0x40021000
 8002690:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	2b0c      	cmp	r3, #12
 8002698:	d02d      	beq.n	80026f6 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269a:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <HAL_RCC_OscConfig+0x7cc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a19      	ldr	r2, [pc, #100]	; (8002704 <HAL_RCC_OscConfig+0x7cc>)
 80026a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026a4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80026a6:	4b17      	ldr	r3, [pc, #92]	; (8002704 <HAL_RCC_OscConfig+0x7cc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d105      	bne.n	80026be <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80026b2:	4b14      	ldr	r3, [pc, #80]	; (8002704 <HAL_RCC_OscConfig+0x7cc>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	4a13      	ldr	r2, [pc, #76]	; (8002704 <HAL_RCC_OscConfig+0x7cc>)
 80026b8:	f023 0303 	bic.w	r3, r3, #3
 80026bc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026be:	4b11      	ldr	r3, [pc, #68]	; (8002704 <HAL_RCC_OscConfig+0x7cc>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	4a10      	ldr	r2, [pc, #64]	; (8002704 <HAL_RCC_OscConfig+0x7cc>)
 80026c4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80026c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026cc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ce:	f7fe fee5 	bl	800149c <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d6:	f7fe fee1 	bl	800149c <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e009      	b.n	80026fc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_RCC_OscConfig+0x7cc>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f0      	bne.n	80026d6 <HAL_RCC_OscConfig+0x79e>
 80026f4:	e001      	b.n	80026fa <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3720      	adds	r7, #32
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000

08002708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0c8      	b.n	80028ae <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800271c:	4b66      	ldr	r3, [pc, #408]	; (80028b8 <HAL_RCC_ClockConfig+0x1b0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d910      	bls.n	800274c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b63      	ldr	r3, [pc, #396]	; (80028b8 <HAL_RCC_ClockConfig+0x1b0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 0207 	bic.w	r2, r3, #7
 8002732:	4961      	ldr	r1, [pc, #388]	; (80028b8 <HAL_RCC_ClockConfig+0x1b0>)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b5f      	ldr	r3, [pc, #380]	; (80028b8 <HAL_RCC_ClockConfig+0x1b0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0b0      	b.n	80028ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d04c      	beq.n	80027f2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b03      	cmp	r3, #3
 800275e:	d107      	bne.n	8002770 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002760:	4b56      	ldr	r3, [pc, #344]	; (80028bc <HAL_RCC_ClockConfig+0x1b4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d121      	bne.n	80027b0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e09e      	b.n	80028ae <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d107      	bne.n	8002788 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002778:	4b50      	ldr	r3, [pc, #320]	; (80028bc <HAL_RCC_ClockConfig+0x1b4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d115      	bne.n	80027b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e092      	b.n	80028ae <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d107      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002790:	4b4a      	ldr	r3, [pc, #296]	; (80028bc <HAL_RCC_ClockConfig+0x1b4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d109      	bne.n	80027b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e086      	b.n	80028ae <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027a0:	4b46      	ldr	r3, [pc, #280]	; (80028bc <HAL_RCC_ClockConfig+0x1b4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e07e      	b.n	80028ae <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027b0:	4b42      	ldr	r3, [pc, #264]	; (80028bc <HAL_RCC_ClockConfig+0x1b4>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f023 0203 	bic.w	r2, r3, #3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	493f      	ldr	r1, [pc, #252]	; (80028bc <HAL_RCC_ClockConfig+0x1b4>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c2:	f7fe fe6b 	bl	800149c <HAL_GetTick>
 80027c6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c8:	e00a      	b.n	80027e0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ca:	f7fe fe67 	bl	800149c <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d8:	4293      	cmp	r3, r2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e066      	b.n	80028ae <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e0:	4b36      	ldr	r3, [pc, #216]	; (80028bc <HAL_RCC_ClockConfig+0x1b4>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 020c 	and.w	r2, r3, #12
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d1eb      	bne.n	80027ca <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d008      	beq.n	8002810 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027fe:	4b2f      	ldr	r3, [pc, #188]	; (80028bc <HAL_RCC_ClockConfig+0x1b4>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	492c      	ldr	r1, [pc, #176]	; (80028bc <HAL_RCC_ClockConfig+0x1b4>)
 800280c:	4313      	orrs	r3, r2
 800280e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002810:	4b29      	ldr	r3, [pc, #164]	; (80028b8 <HAL_RCC_ClockConfig+0x1b0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d210      	bcs.n	8002840 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b26      	ldr	r3, [pc, #152]	; (80028b8 <HAL_RCC_ClockConfig+0x1b0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 0207 	bic.w	r2, r3, #7
 8002826:	4924      	ldr	r1, [pc, #144]	; (80028b8 <HAL_RCC_ClockConfig+0x1b0>)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282e:	4b22      	ldr	r3, [pc, #136]	; (80028b8 <HAL_RCC_ClockConfig+0x1b0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d001      	beq.n	8002840 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e036      	b.n	80028ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800284c:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <HAL_RCC_ClockConfig+0x1b4>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4918      	ldr	r1, [pc, #96]	; (80028bc <HAL_RCC_ClockConfig+0x1b4>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d009      	beq.n	800287e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800286a:	4b14      	ldr	r3, [pc, #80]	; (80028bc <HAL_RCC_ClockConfig+0x1b4>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4910      	ldr	r1, [pc, #64]	; (80028bc <HAL_RCC_ClockConfig+0x1b4>)
 800287a:	4313      	orrs	r3, r2
 800287c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800287e:	f000 f825 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 8002882:	4602      	mov	r2, r0
 8002884:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <HAL_RCC_ClockConfig+0x1b4>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	490c      	ldr	r1, [pc, #48]	; (80028c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002890:	5ccb      	ldrb	r3, [r1, r3]
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	fa22 f303 	lsr.w	r3, r2, r3
 800289a:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800289e:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe fdaa 	bl	80013fc <HAL_InitTick>
 80028a8:	4603      	mov	r3, r0
 80028aa:	72fb      	strb	r3, [r7, #11]

  return status;
 80028ac:	7afb      	ldrb	r3, [r7, #11]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40022000 	.word	0x40022000
 80028bc:	40021000 	.word	0x40021000
 80028c0:	080059d4 	.word	0x080059d4
 80028c4:	20000000 	.word	0x20000000
 80028c8:	20000004 	.word	0x20000004

080028cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b089      	sub	sp, #36	; 0x24
 80028d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	2300      	movs	r3, #0
 80028d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028da:	4b3e      	ldr	r3, [pc, #248]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028e4:	4b3b      	ldr	r3, [pc, #236]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <HAL_RCC_GetSysClockFreq+0x34>
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	2b0c      	cmp	r3, #12
 80028f8:	d121      	bne.n	800293e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d11e      	bne.n	800293e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002900:	4b34      	ldr	r3, [pc, #208]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d107      	bne.n	800291c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800290c:	4b31      	ldr	r3, [pc, #196]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800290e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002912:	0a1b      	lsrs	r3, r3, #8
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	e005      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800291c:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	091b      	lsrs	r3, r3, #4
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002928:	4a2b      	ldr	r2, [pc, #172]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002930:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10d      	bne.n	8002954 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800293c:	e00a      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	2b04      	cmp	r3, #4
 8002942:	d102      	bne.n	800294a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002944:	4b25      	ldr	r3, [pc, #148]	; (80029dc <HAL_RCC_GetSysClockFreq+0x110>)
 8002946:	61bb      	str	r3, [r7, #24]
 8002948:	e004      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	2b08      	cmp	r3, #8
 800294e:	d101      	bne.n	8002954 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002950:	4b23      	ldr	r3, [pc, #140]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002952:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	2b0c      	cmp	r3, #12
 8002958:	d134      	bne.n	80029c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800295a:	4b1e      	ldr	r3, [pc, #120]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d003      	beq.n	8002972 <HAL_RCC_GetSysClockFreq+0xa6>
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d003      	beq.n	8002978 <HAL_RCC_GetSysClockFreq+0xac>
 8002970:	e005      	b.n	800297e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002972:	4b1a      	ldr	r3, [pc, #104]	; (80029dc <HAL_RCC_GetSysClockFreq+0x110>)
 8002974:	617b      	str	r3, [r7, #20]
      break;
 8002976:	e005      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002978:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800297a:	617b      	str	r3, [r7, #20]
      break;
 800297c:	e002      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	617b      	str	r3, [r7, #20]
      break;
 8002982:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002984:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	091b      	lsrs	r3, r3, #4
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	3301      	adds	r3, #1
 8002990:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002992:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	0a1b      	lsrs	r3, r3, #8
 8002998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	fb03 f202 	mul.w	r2, r3, r2
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029aa:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	0e5b      	lsrs	r3, r3, #25
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	3301      	adds	r3, #1
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029c4:	69bb      	ldr	r3, [r7, #24]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3724      	adds	r7, #36	; 0x24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40021000 	.word	0x40021000
 80029d8:	080059ec 	.word	0x080059ec
 80029dc:	00f42400 	.word	0x00f42400
 80029e0:	007a1200 	.word	0x007a1200

080029e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029e8:	4b03      	ldr	r3, [pc, #12]	; (80029f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029ea:	681b      	ldr	r3, [r3, #0]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	20000000 	.word	0x20000000

080029fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a00:	f7ff fff0 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
 8002a04:	4602      	mov	r2, r0
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	0a1b      	lsrs	r3, r3, #8
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	4904      	ldr	r1, [pc, #16]	; (8002a24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a12:	5ccb      	ldrb	r3, [r1, r3]
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40021000 	.word	0x40021000
 8002a24:	080059e4 	.word	0x080059e4

08002a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a2c:	f7ff ffda 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
 8002a30:	4602      	mov	r2, r0
 8002a32:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	0adb      	lsrs	r3, r3, #11
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	4904      	ldr	r1, [pc, #16]	; (8002a50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a3e:	5ccb      	ldrb	r3, [r1, r3]
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	080059e4 	.word	0x080059e4

08002a54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a60:	4b2a      	ldr	r3, [pc, #168]	; (8002b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a6c:	f7ff fa00 	bl	8001e70 <HAL_PWREx_GetVoltageRange>
 8002a70:	6178      	str	r0, [r7, #20]
 8002a72:	e014      	b.n	8002a9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a74:	4b25      	ldr	r3, [pc, #148]	; (8002b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	4a24      	ldr	r2, [pc, #144]	; (8002b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a80:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a8c:	f7ff f9f0 	bl	8001e70 <HAL_PWREx_GetVoltageRange>
 8002a90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a92:	4b1e      	ldr	r3, [pc, #120]	; (8002b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a96:	4a1d      	ldr	r2, [pc, #116]	; (8002b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aa4:	d10b      	bne.n	8002abe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b80      	cmp	r3, #128	; 0x80
 8002aaa:	d919      	bls.n	8002ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2ba0      	cmp	r3, #160	; 0xa0
 8002ab0:	d902      	bls.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	e013      	b.n	8002ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ab8:	2301      	movs	r3, #1
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	e010      	b.n	8002ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b80      	cmp	r3, #128	; 0x80
 8002ac2:	d902      	bls.n	8002aca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	e00a      	b.n	8002ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b80      	cmp	r3, #128	; 0x80
 8002ace:	d102      	bne.n	8002ad6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	e004      	b.n	8002ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b70      	cmp	r3, #112	; 0x70
 8002ada:	d101      	bne.n	8002ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002adc:	2301      	movs	r3, #1
 8002ade:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f023 0207 	bic.w	r2, r3, #7
 8002ae8:	4909      	ldr	r1, [pc, #36]	; (8002b10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002af0:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d001      	beq.n	8002b02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40022000 	.word	0x40022000

08002b14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b20:	2300      	movs	r3, #0
 8002b22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d041      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b34:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b38:	d02a      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b3a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b3e:	d824      	bhi.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b44:	d008      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b4a:	d81e      	bhi.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b54:	d010      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b56:	e018      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b58:	4b86      	ldr	r3, [pc, #536]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4a85      	ldr	r2, [pc, #532]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b62:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b64:	e015      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 fabb 	bl	80030e8 <RCCEx_PLLSAI1_Config>
 8002b72:	4603      	mov	r3, r0
 8002b74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b76:	e00c      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3320      	adds	r3, #32
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 fba6 	bl	80032d0 <RCCEx_PLLSAI2_Config>
 8002b84:	4603      	mov	r3, r0
 8002b86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b88:	e003      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	74fb      	strb	r3, [r7, #19]
      break;
 8002b8e:	e000      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b92:	7cfb      	ldrb	r3, [r7, #19]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10b      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b98:	4b76      	ldr	r3, [pc, #472]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ba6:	4973      	ldr	r1, [pc, #460]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bae:	e001      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb0:	7cfb      	ldrb	r3, [r7, #19]
 8002bb2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d041      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002bc8:	d02a      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002bca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002bce:	d824      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bd4:	d008      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002bd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bda:	d81e      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be4:	d010      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002be6:	e018      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002be8:	4b62      	ldr	r3, [pc, #392]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4a61      	ldr	r2, [pc, #388]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bf4:	e015      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 fa73 	bl	80030e8 <RCCEx_PLLSAI1_Config>
 8002c02:	4603      	mov	r3, r0
 8002c04:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c06:	e00c      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3320      	adds	r3, #32
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fb5e 	bl	80032d0 <RCCEx_PLLSAI2_Config>
 8002c14:	4603      	mov	r3, r0
 8002c16:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c18:	e003      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	74fb      	strb	r3, [r7, #19]
      break;
 8002c1e:	e000      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002c20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c22:	7cfb      	ldrb	r3, [r7, #19]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10b      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c28:	4b52      	ldr	r3, [pc, #328]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c36:	494f      	ldr	r1, [pc, #316]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c3e:	e001      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c40:	7cfb      	ldrb	r3, [r7, #19]
 8002c42:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 80a0 	beq.w	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c52:	2300      	movs	r3, #0
 8002c54:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c56:	4b47      	ldr	r3, [pc, #284]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c66:	2300      	movs	r3, #0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00d      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6c:	4b41      	ldr	r3, [pc, #260]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c70:	4a40      	ldr	r2, [pc, #256]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c76:	6593      	str	r3, [r2, #88]	; 0x58
 8002c78:	4b3e      	ldr	r3, [pc, #248]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c84:	2301      	movs	r3, #1
 8002c86:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c88:	4b3b      	ldr	r3, [pc, #236]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a3a      	ldr	r2, [pc, #232]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c94:	f7fe fc02 	bl	800149c <HAL_GetTick>
 8002c98:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c9a:	e009      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9c:	f7fe fbfe 	bl	800149c <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d902      	bls.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	74fb      	strb	r3, [r7, #19]
        break;
 8002cae:	e005      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cb0:	4b31      	ldr	r3, [pc, #196]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0ef      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002cbc:	7cfb      	ldrb	r3, [r7, #19]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d15c      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cc2:	4b2c      	ldr	r3, [pc, #176]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ccc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d01f      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d019      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ce0:	4b24      	ldr	r3, [pc, #144]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cec:	4b21      	ldr	r3, [pc, #132]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf2:	4a20      	ldr	r2, [pc, #128]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cfc:	4b1d      	ldr	r3, [pc, #116]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d02:	4a1c      	ldr	r2, [pc, #112]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d0c:	4a19      	ldr	r2, [pc, #100]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d016      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1e:	f7fe fbbd 	bl	800149c <HAL_GetTick>
 8002d22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d24:	e00b      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d26:	f7fe fbb9 	bl	800149c <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d902      	bls.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	74fb      	strb	r3, [r7, #19]
            break;
 8002d3c:	e006      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d3e:	4b0d      	ldr	r3, [pc, #52]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0ec      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002d4c:	7cfb      	ldrb	r3, [r7, #19]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d52:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d62:	4904      	ldr	r1, [pc, #16]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d6a:	e009      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d6c:	7cfb      	ldrb	r3, [r7, #19]
 8002d6e:	74bb      	strb	r3, [r7, #18]
 8002d70:	e006      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002d72:	bf00      	nop
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d7c:	7cfb      	ldrb	r3, [r7, #19]
 8002d7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d80:	7c7b      	ldrb	r3, [r7, #17]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d105      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d86:	4b9e      	ldr	r3, [pc, #632]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8a:	4a9d      	ldr	r2, [pc, #628]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d90:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d9e:	4b98      	ldr	r3, [pc, #608]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da4:	f023 0203 	bic.w	r2, r3, #3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dac:	4994      	ldr	r1, [pc, #592]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dc0:	4b8f      	ldr	r3, [pc, #572]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc6:	f023 020c 	bic.w	r2, r3, #12
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dce:	498c      	ldr	r1, [pc, #560]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002de2:	4b87      	ldr	r3, [pc, #540]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	4983      	ldr	r1, [pc, #524]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e04:	4b7e      	ldr	r3, [pc, #504]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	497b      	ldr	r1, [pc, #492]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e26:	4b76      	ldr	r3, [pc, #472]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e34:	4972      	ldr	r1, [pc, #456]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e48:	4b6d      	ldr	r3, [pc, #436]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e56:	496a      	ldr	r1, [pc, #424]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e6a:	4b65      	ldr	r3, [pc, #404]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e78:	4961      	ldr	r1, [pc, #388]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e8c:	4b5c      	ldr	r3, [pc, #368]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e9a:	4959      	ldr	r1, [pc, #356]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eae:	4b54      	ldr	r3, [pc, #336]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ebc:	4950      	ldr	r1, [pc, #320]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ed0:	4b4b      	ldr	r3, [pc, #300]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ede:	4948      	ldr	r1, [pc, #288]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ef2:	4b43      	ldr	r3, [pc, #268]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f00:	493f      	ldr	r1, [pc, #252]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d028      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f14:	4b3a      	ldr	r3, [pc, #232]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f22:	4937      	ldr	r1, [pc, #220]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f32:	d106      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f34:	4b32      	ldr	r3, [pc, #200]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	4a31      	ldr	r2, [pc, #196]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f3e:	60d3      	str	r3, [r2, #12]
 8002f40:	e011      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f4a:	d10c      	bne.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	2101      	movs	r1, #1
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 f8c8 	bl	80030e8 <RCCEx_PLLSAI1_Config>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f5c:	7cfb      	ldrb	r3, [r7, #19]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002f62:	7cfb      	ldrb	r3, [r7, #19]
 8002f64:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d028      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f72:	4b23      	ldr	r3, [pc, #140]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	491f      	ldr	r1, [pc, #124]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f90:	d106      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f92:	4b1b      	ldr	r3, [pc, #108]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	4a1a      	ldr	r2, [pc, #104]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f9c:	60d3      	str	r3, [r2, #12]
 8002f9e:	e011      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3304      	adds	r3, #4
 8002fae:	2101      	movs	r1, #1
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 f899 	bl	80030e8 <RCCEx_PLLSAI1_Config>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fba:	7cfb      	ldrb	r3, [r7, #19]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002fc0:	7cfb      	ldrb	r3, [r7, #19]
 8002fc2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d02b      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fde:	4908      	ldr	r1, [pc, #32]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fee:	d109      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ff0:	4b03      	ldr	r3, [pc, #12]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4a02      	ldr	r2, [pc, #8]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ffa:	60d3      	str	r3, [r2, #12]
 8002ffc:	e014      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002ffe:	bf00      	nop
 8003000:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003008:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800300c:	d10c      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3304      	adds	r3, #4
 8003012:	2101      	movs	r1, #1
 8003014:	4618      	mov	r0, r3
 8003016:	f000 f867 	bl	80030e8 <RCCEx_PLLSAI1_Config>
 800301a:	4603      	mov	r3, r0
 800301c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800301e:	7cfb      	ldrb	r3, [r7, #19]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003024:	7cfb      	ldrb	r3, [r7, #19]
 8003026:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d02f      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003034:	4b2b      	ldr	r3, [pc, #172]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003042:	4928      	ldr	r1, [pc, #160]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800304e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003052:	d10d      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3304      	adds	r3, #4
 8003058:	2102      	movs	r1, #2
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f844 	bl	80030e8 <RCCEx_PLLSAI1_Config>
 8003060:	4603      	mov	r3, r0
 8003062:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003064:	7cfb      	ldrb	r3, [r7, #19]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d014      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800306a:	7cfb      	ldrb	r3, [r7, #19]
 800306c:	74bb      	strb	r3, [r7, #18]
 800306e:	e011      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003074:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003078:	d10c      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3320      	adds	r3, #32
 800307e:	2102      	movs	r1, #2
 8003080:	4618      	mov	r0, r3
 8003082:	f000 f925 	bl	80032d0 <RCCEx_PLLSAI2_Config>
 8003086:	4603      	mov	r3, r0
 8003088:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800308a:	7cfb      	ldrb	r3, [r7, #19]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003090:	7cfb      	ldrb	r3, [r7, #19]
 8003092:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030a0:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ae:	490d      	ldr	r1, [pc, #52]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00b      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030d2:	4904      	ldr	r1, [pc, #16]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030da:	7cbb      	ldrb	r3, [r7, #18]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40021000 	.word	0x40021000

080030e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030f6:	4b75      	ldr	r3, [pc, #468]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d018      	beq.n	8003134 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003102:	4b72      	ldr	r3, [pc, #456]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f003 0203 	and.w	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d10d      	bne.n	800312e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
       ||
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800311a:	4b6c      	ldr	r3, [pc, #432]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	091b      	lsrs	r3, r3, #4
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
       ||
 800312a:	429a      	cmp	r2, r3
 800312c:	d047      	beq.n	80031be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	73fb      	strb	r3, [r7, #15]
 8003132:	e044      	b.n	80031be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b03      	cmp	r3, #3
 800313a:	d018      	beq.n	800316e <RCCEx_PLLSAI1_Config+0x86>
 800313c:	2b03      	cmp	r3, #3
 800313e:	d825      	bhi.n	800318c <RCCEx_PLLSAI1_Config+0xa4>
 8003140:	2b01      	cmp	r3, #1
 8003142:	d002      	beq.n	800314a <RCCEx_PLLSAI1_Config+0x62>
 8003144:	2b02      	cmp	r3, #2
 8003146:	d009      	beq.n	800315c <RCCEx_PLLSAI1_Config+0x74>
 8003148:	e020      	b.n	800318c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800314a:	4b60      	ldr	r3, [pc, #384]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d11d      	bne.n	8003192 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800315a:	e01a      	b.n	8003192 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800315c:	4b5b      	ldr	r3, [pc, #364]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003164:	2b00      	cmp	r3, #0
 8003166:	d116      	bne.n	8003196 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800316c:	e013      	b.n	8003196 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800316e:	4b57      	ldr	r3, [pc, #348]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10f      	bne.n	800319a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800317a:	4b54      	ldr	r3, [pc, #336]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d109      	bne.n	800319a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800318a:	e006      	b.n	800319a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	73fb      	strb	r3, [r7, #15]
      break;
 8003190:	e004      	b.n	800319c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003192:	bf00      	nop
 8003194:	e002      	b.n	800319c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003196:	bf00      	nop
 8003198:	e000      	b.n	800319c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800319a:	bf00      	nop
    }

    if(status == HAL_OK)
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10d      	bne.n	80031be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031a2:	4b4a      	ldr	r3, [pc, #296]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6819      	ldr	r1, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	430b      	orrs	r3, r1
 80031b8:	4944      	ldr	r1, [pc, #272]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d17d      	bne.n	80032c0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031c4:	4b41      	ldr	r3, [pc, #260]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a40      	ldr	r2, [pc, #256]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d0:	f7fe f964 	bl	800149c <HAL_GetTick>
 80031d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031d6:	e009      	b.n	80031ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031d8:	f7fe f960 	bl	800149c <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d902      	bls.n	80031ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	73fb      	strb	r3, [r7, #15]
        break;
 80031ea:	e005      	b.n	80031f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031ec:	4b37      	ldr	r3, [pc, #220]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1ef      	bne.n	80031d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d160      	bne.n	80032c0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d111      	bne.n	8003228 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003204:	4b31      	ldr	r3, [pc, #196]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800320c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6892      	ldr	r2, [r2, #8]
 8003214:	0211      	lsls	r1, r2, #8
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	68d2      	ldr	r2, [r2, #12]
 800321a:	0912      	lsrs	r2, r2, #4
 800321c:	0452      	lsls	r2, r2, #17
 800321e:	430a      	orrs	r2, r1
 8003220:	492a      	ldr	r1, [pc, #168]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003222:	4313      	orrs	r3, r2
 8003224:	610b      	str	r3, [r1, #16]
 8003226:	e027      	b.n	8003278 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d112      	bne.n	8003254 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800322e:	4b27      	ldr	r3, [pc, #156]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003236:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6892      	ldr	r2, [r2, #8]
 800323e:	0211      	lsls	r1, r2, #8
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6912      	ldr	r2, [r2, #16]
 8003244:	0852      	lsrs	r2, r2, #1
 8003246:	3a01      	subs	r2, #1
 8003248:	0552      	lsls	r2, r2, #21
 800324a:	430a      	orrs	r2, r1
 800324c:	491f      	ldr	r1, [pc, #124]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800324e:	4313      	orrs	r3, r2
 8003250:	610b      	str	r3, [r1, #16]
 8003252:	e011      	b.n	8003278 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003254:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800325c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6892      	ldr	r2, [r2, #8]
 8003264:	0211      	lsls	r1, r2, #8
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6952      	ldr	r2, [r2, #20]
 800326a:	0852      	lsrs	r2, r2, #1
 800326c:	3a01      	subs	r2, #1
 800326e:	0652      	lsls	r2, r2, #25
 8003270:	430a      	orrs	r2, r1
 8003272:	4916      	ldr	r1, [pc, #88]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003274:	4313      	orrs	r3, r2
 8003276:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003278:	4b14      	ldr	r3, [pc, #80]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a13      	ldr	r2, [pc, #76]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800327e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003282:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003284:	f7fe f90a 	bl	800149c <HAL_GetTick>
 8003288:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800328a:	e009      	b.n	80032a0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800328c:	f7fe f906 	bl	800149c <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d902      	bls.n	80032a0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	73fb      	strb	r3, [r7, #15]
          break;
 800329e:	e005      	b.n	80032ac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032a0:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0ef      	beq.n	800328c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032b2:	4b06      	ldr	r3, [pc, #24]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	4904      	ldr	r1, [pc, #16]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40021000 	.word	0x40021000

080032d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032de:	4b6a      	ldr	r3, [pc, #424]	; (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d018      	beq.n	800331c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80032ea:	4b67      	ldr	r3, [pc, #412]	; (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f003 0203 	and.w	r2, r3, #3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d10d      	bne.n	8003316 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
       ||
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003302:	4b61      	ldr	r3, [pc, #388]	; (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	091b      	lsrs	r3, r3, #4
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
       ||
 8003312:	429a      	cmp	r2, r3
 8003314:	d047      	beq.n	80033a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	73fb      	strb	r3, [r7, #15]
 800331a:	e044      	b.n	80033a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b03      	cmp	r3, #3
 8003322:	d018      	beq.n	8003356 <RCCEx_PLLSAI2_Config+0x86>
 8003324:	2b03      	cmp	r3, #3
 8003326:	d825      	bhi.n	8003374 <RCCEx_PLLSAI2_Config+0xa4>
 8003328:	2b01      	cmp	r3, #1
 800332a:	d002      	beq.n	8003332 <RCCEx_PLLSAI2_Config+0x62>
 800332c:	2b02      	cmp	r3, #2
 800332e:	d009      	beq.n	8003344 <RCCEx_PLLSAI2_Config+0x74>
 8003330:	e020      	b.n	8003374 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003332:	4b55      	ldr	r3, [pc, #340]	; (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d11d      	bne.n	800337a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003342:	e01a      	b.n	800337a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003344:	4b50      	ldr	r3, [pc, #320]	; (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334c:	2b00      	cmp	r3, #0
 800334e:	d116      	bne.n	800337e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003354:	e013      	b.n	800337e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003356:	4b4c      	ldr	r3, [pc, #304]	; (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10f      	bne.n	8003382 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003362:	4b49      	ldr	r3, [pc, #292]	; (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d109      	bne.n	8003382 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003372:	e006      	b.n	8003382 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
      break;
 8003378:	e004      	b.n	8003384 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800337a:	bf00      	nop
 800337c:	e002      	b.n	8003384 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800337e:	bf00      	nop
 8003380:	e000      	b.n	8003384 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003382:	bf00      	nop
    }

    if(status == HAL_OK)
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10d      	bne.n	80033a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800338a:	4b3f      	ldr	r3, [pc, #252]	; (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6819      	ldr	r1, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	3b01      	subs	r3, #1
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	430b      	orrs	r3, r1
 80033a0:	4939      	ldr	r1, [pc, #228]	; (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d167      	bne.n	800347c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80033ac:	4b36      	ldr	r3, [pc, #216]	; (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a35      	ldr	r2, [pc, #212]	; (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033b8:	f7fe f870 	bl	800149c <HAL_GetTick>
 80033bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033be:	e009      	b.n	80033d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033c0:	f7fe f86c 	bl	800149c <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d902      	bls.n	80033d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	73fb      	strb	r3, [r7, #15]
        break;
 80033d2:	e005      	b.n	80033e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033d4:	4b2c      	ldr	r3, [pc, #176]	; (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1ef      	bne.n	80033c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d14a      	bne.n	800347c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d111      	bne.n	8003410 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033ec:	4b26      	ldr	r3, [pc, #152]	; (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80033f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6892      	ldr	r2, [r2, #8]
 80033fc:	0211      	lsls	r1, r2, #8
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	68d2      	ldr	r2, [r2, #12]
 8003402:	0912      	lsrs	r2, r2, #4
 8003404:	0452      	lsls	r2, r2, #17
 8003406:	430a      	orrs	r2, r1
 8003408:	491f      	ldr	r1, [pc, #124]	; (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 800340a:	4313      	orrs	r3, r2
 800340c:	614b      	str	r3, [r1, #20]
 800340e:	e011      	b.n	8003434 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003410:	4b1d      	ldr	r3, [pc, #116]	; (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003418:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6892      	ldr	r2, [r2, #8]
 8003420:	0211      	lsls	r1, r2, #8
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6912      	ldr	r2, [r2, #16]
 8003426:	0852      	lsrs	r2, r2, #1
 8003428:	3a01      	subs	r2, #1
 800342a:	0652      	lsls	r2, r2, #25
 800342c:	430a      	orrs	r2, r1
 800342e:	4916      	ldr	r1, [pc, #88]	; (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003430:	4313      	orrs	r3, r2
 8003432:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003434:	4b14      	ldr	r3, [pc, #80]	; (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a13      	ldr	r2, [pc, #76]	; (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 800343a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800343e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003440:	f7fe f82c 	bl	800149c <HAL_GetTick>
 8003444:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003446:	e009      	b.n	800345c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003448:	f7fe f828 	bl	800149c <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d902      	bls.n	800345c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	73fb      	strb	r3, [r7, #15]
          break;
 800345a:	e005      	b.n	8003468 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800345c:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0ef      	beq.n	8003448 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	4904      	ldr	r1, [pc, #16]	; (8003488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003478:	4313      	orrs	r3, r2
 800347a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800347c:	7bfb      	ldrb	r3, [r7, #15]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40021000 	.word	0x40021000

0800348c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e049      	b.n	8003532 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fd fdc2 	bl	800103c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3304      	adds	r3, #4
 80034c8:	4619      	mov	r1, r3
 80034ca:	4610      	mov	r0, r2
 80034cc:	f000 fd2c 	bl	8003f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e049      	b.n	80035e0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d106      	bne.n	8003566 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7fd fca7 	bl	8000eb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2202      	movs	r2, #2
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3304      	adds	r3, #4
 8003576:	4619      	mov	r1, r3
 8003578:	4610      	mov	r0, r2
 800357a:	f000 fcd5 	bl	8003f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d109      	bne.n	800360c <HAL_TIM_PWM_Start+0x24>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	bf14      	ite	ne
 8003604:	2301      	movne	r3, #1
 8003606:	2300      	moveq	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	e03c      	b.n	8003686 <HAL_TIM_PWM_Start+0x9e>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2b04      	cmp	r3, #4
 8003610:	d109      	bne.n	8003626 <HAL_TIM_PWM_Start+0x3e>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b01      	cmp	r3, #1
 800361c:	bf14      	ite	ne
 800361e:	2301      	movne	r3, #1
 8003620:	2300      	moveq	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	e02f      	b.n	8003686 <HAL_TIM_PWM_Start+0x9e>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b08      	cmp	r3, #8
 800362a:	d109      	bne.n	8003640 <HAL_TIM_PWM_Start+0x58>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b01      	cmp	r3, #1
 8003636:	bf14      	ite	ne
 8003638:	2301      	movne	r3, #1
 800363a:	2300      	moveq	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	e022      	b.n	8003686 <HAL_TIM_PWM_Start+0x9e>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b0c      	cmp	r3, #12
 8003644:	d109      	bne.n	800365a <HAL_TIM_PWM_Start+0x72>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b01      	cmp	r3, #1
 8003650:	bf14      	ite	ne
 8003652:	2301      	movne	r3, #1
 8003654:	2300      	moveq	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	e015      	b.n	8003686 <HAL_TIM_PWM_Start+0x9e>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b10      	cmp	r3, #16
 800365e:	d109      	bne.n	8003674 <HAL_TIM_PWM_Start+0x8c>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b01      	cmp	r3, #1
 800366a:	bf14      	ite	ne
 800366c:	2301      	movne	r3, #1
 800366e:	2300      	moveq	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	e008      	b.n	8003686 <HAL_TIM_PWM_Start+0x9e>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b01      	cmp	r3, #1
 800367e:	bf14      	ite	ne
 8003680:	2301      	movne	r3, #1
 8003682:	2300      	moveq	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e09c      	b.n	80037c8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d104      	bne.n	800369e <HAL_TIM_PWM_Start+0xb6>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800369c:	e023      	b.n	80036e6 <HAL_TIM_PWM_Start+0xfe>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d104      	bne.n	80036ae <HAL_TIM_PWM_Start+0xc6>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036ac:	e01b      	b.n	80036e6 <HAL_TIM_PWM_Start+0xfe>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d104      	bne.n	80036be <HAL_TIM_PWM_Start+0xd6>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036bc:	e013      	b.n	80036e6 <HAL_TIM_PWM_Start+0xfe>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b0c      	cmp	r3, #12
 80036c2:	d104      	bne.n	80036ce <HAL_TIM_PWM_Start+0xe6>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036cc:	e00b      	b.n	80036e6 <HAL_TIM_PWM_Start+0xfe>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b10      	cmp	r3, #16
 80036d2:	d104      	bne.n	80036de <HAL_TIM_PWM_Start+0xf6>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036dc:	e003      	b.n	80036e6 <HAL_TIM_PWM_Start+0xfe>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2202      	movs	r2, #2
 80036e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2201      	movs	r2, #1
 80036ec:	6839      	ldr	r1, [r7, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 ff8a 	bl	8004608 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a35      	ldr	r2, [pc, #212]	; (80037d0 <HAL_TIM_PWM_Start+0x1e8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d013      	beq.n	8003726 <HAL_TIM_PWM_Start+0x13e>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a34      	ldr	r2, [pc, #208]	; (80037d4 <HAL_TIM_PWM_Start+0x1ec>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00e      	beq.n	8003726 <HAL_TIM_PWM_Start+0x13e>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a32      	ldr	r2, [pc, #200]	; (80037d8 <HAL_TIM_PWM_Start+0x1f0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d009      	beq.n	8003726 <HAL_TIM_PWM_Start+0x13e>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a31      	ldr	r2, [pc, #196]	; (80037dc <HAL_TIM_PWM_Start+0x1f4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d004      	beq.n	8003726 <HAL_TIM_PWM_Start+0x13e>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a2f      	ldr	r2, [pc, #188]	; (80037e0 <HAL_TIM_PWM_Start+0x1f8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d101      	bne.n	800372a <HAL_TIM_PWM_Start+0x142>
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <HAL_TIM_PWM_Start+0x144>
 800372a:	2300      	movs	r3, #0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800373e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a22      	ldr	r2, [pc, #136]	; (80037d0 <HAL_TIM_PWM_Start+0x1e8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d01d      	beq.n	8003786 <HAL_TIM_PWM_Start+0x19e>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003752:	d018      	beq.n	8003786 <HAL_TIM_PWM_Start+0x19e>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a22      	ldr	r2, [pc, #136]	; (80037e4 <HAL_TIM_PWM_Start+0x1fc>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d013      	beq.n	8003786 <HAL_TIM_PWM_Start+0x19e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a21      	ldr	r2, [pc, #132]	; (80037e8 <HAL_TIM_PWM_Start+0x200>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d00e      	beq.n	8003786 <HAL_TIM_PWM_Start+0x19e>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a1f      	ldr	r2, [pc, #124]	; (80037ec <HAL_TIM_PWM_Start+0x204>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d009      	beq.n	8003786 <HAL_TIM_PWM_Start+0x19e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a17      	ldr	r2, [pc, #92]	; (80037d4 <HAL_TIM_PWM_Start+0x1ec>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d004      	beq.n	8003786 <HAL_TIM_PWM_Start+0x19e>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a15      	ldr	r2, [pc, #84]	; (80037d8 <HAL_TIM_PWM_Start+0x1f0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d115      	bne.n	80037b2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	4b18      	ldr	r3, [pc, #96]	; (80037f0 <HAL_TIM_PWM_Start+0x208>)
 800378e:	4013      	ands	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b06      	cmp	r3, #6
 8003796:	d015      	beq.n	80037c4 <HAL_TIM_PWM_Start+0x1dc>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800379e:	d011      	beq.n	80037c4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b0:	e008      	b.n	80037c4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 0201 	orr.w	r2, r2, #1
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	e000      	b.n	80037c6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40012c00 	.word	0x40012c00
 80037d4:	40013400 	.word	0x40013400
 80037d8:	40014000 	.word	0x40014000
 80037dc:	40014400 	.word	0x40014400
 80037e0:	40014800 	.word	0x40014800
 80037e4:	40000400 	.word	0x40000400
 80037e8:	40000800 	.word	0x40000800
 80037ec:	40000c00 	.word	0x40000c00
 80037f0:	00010007 	.word	0x00010007

080037f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e097      	b.n	8003938 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d106      	bne.n	8003822 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7fd fb8b 	bl	8000f38 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2202      	movs	r2, #2
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003838:	f023 0307 	bic.w	r3, r3, #7
 800383c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3304      	adds	r3, #4
 8003846:	4619      	mov	r1, r3
 8003848:	4610      	mov	r0, r2
 800384a:	f000 fb6d 	bl	8003f28 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003876:	f023 0303 	bic.w	r3, r3, #3
 800387a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	021b      	lsls	r3, r3, #8
 8003886:	4313      	orrs	r3, r2
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4313      	orrs	r3, r2
 800388c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003894:	f023 030c 	bic.w	r3, r3, #12
 8003898:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	021b      	lsls	r3, r3, #8
 80038b0:	4313      	orrs	r3, r2
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	011a      	lsls	r2, r3, #4
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	031b      	lsls	r3, r3, #12
 80038c4:	4313      	orrs	r3, r2
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80038d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80038da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	4313      	orrs	r3, r2
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003950:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003958:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003960:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003968:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d110      	bne.n	8003992 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d102      	bne.n	800397c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003976:	7b7b      	ldrb	r3, [r7, #13]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d001      	beq.n	8003980 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e069      	b.n	8003a54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003990:	e031      	b.n	80039f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b04      	cmp	r3, #4
 8003996:	d110      	bne.n	80039ba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003998:	7bbb      	ldrb	r3, [r7, #14]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d102      	bne.n	80039a4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800399e:	7b3b      	ldrb	r3, [r7, #12]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d001      	beq.n	80039a8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e055      	b.n	8003a54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039b8:	e01d      	b.n	80039f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d108      	bne.n	80039d2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80039c0:	7bbb      	ldrb	r3, [r7, #14]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d105      	bne.n	80039d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039c6:	7b7b      	ldrb	r3, [r7, #13]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d102      	bne.n	80039d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80039cc:	7b3b      	ldrb	r3, [r7, #12]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d001      	beq.n	80039d6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e03e      	b.n	8003a54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2202      	movs	r2, #2
 80039da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2202      	movs	r2, #2
 80039e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2202      	movs	r2, #2
 80039ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2202      	movs	r2, #2
 80039f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_TIM_Encoder_Start+0xc4>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d008      	beq.n	8003a14 <HAL_TIM_Encoder_Start+0xd4>
 8003a02:	e00f      	b.n	8003a24 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fdfb 	bl	8004608 <TIM_CCxChannelCmd>
      break;
 8003a12:	e016      	b.n	8003a42 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	2104      	movs	r1, #4
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 fdf3 	bl	8004608 <TIM_CCxChannelCmd>
      break;
 8003a22:	e00e      	b.n	8003a42 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fdeb 	bl	8004608 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2201      	movs	r2, #1
 8003a38:	2104      	movs	r1, #4
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fde4 	bl	8004608 <TIM_CCxChannelCmd>
      break;
 8003a40:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0201 	orr.w	r2, r2, #1
 8003a50:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d122      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d11b      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0202 	mvn.w	r2, #2
 8003a88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fa24 	bl	8003eec <HAL_TIM_IC_CaptureCallback>
 8003aa4:	e005      	b.n	8003ab2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fa16 	bl	8003ed8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fa27 	bl	8003f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d122      	bne.n	8003b0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d11b      	bne.n	8003b0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0204 	mvn.w	r2, #4
 8003adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f9fa 	bl	8003eec <HAL_TIM_IC_CaptureCallback>
 8003af8:	e005      	b.n	8003b06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f9ec 	bl	8003ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f9fd 	bl	8003f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d122      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d11b      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0208 	mvn.w	r2, #8
 8003b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2204      	movs	r2, #4
 8003b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f9d0 	bl	8003eec <HAL_TIM_IC_CaptureCallback>
 8003b4c:	e005      	b.n	8003b5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f9c2 	bl	8003ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f9d3 	bl	8003f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0310 	and.w	r3, r3, #16
 8003b6a:	2b10      	cmp	r3, #16
 8003b6c:	d122      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f003 0310 	and.w	r3, r3, #16
 8003b78:	2b10      	cmp	r3, #16
 8003b7a:	d11b      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0210 	mvn.w	r2, #16
 8003b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2208      	movs	r2, #8
 8003b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f9a6 	bl	8003eec <HAL_TIM_IC_CaptureCallback>
 8003ba0:	e005      	b.n	8003bae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f998 	bl	8003ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f9a9 	bl	8003f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d10e      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d107      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0201 	mvn.w	r2, #1
 8003bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f972 	bl	8003ec4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bea:	2b80      	cmp	r3, #128	; 0x80
 8003bec:	d10e      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf8:	2b80      	cmp	r3, #128	; 0x80
 8003bfa:	d107      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fe34 	bl	8004874 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c1a:	d10e      	bne.n	8003c3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c26:	2b80      	cmp	r3, #128	; 0x80
 8003c28:	d107      	bne.n	8003c3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fe27 	bl	8004888 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c44:	2b40      	cmp	r3, #64	; 0x40
 8003c46:	d10e      	bne.n	8003c66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c52:	2b40      	cmp	r3, #64	; 0x40
 8003c54:	d107      	bne.n	8003c66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f957 	bl	8003f14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d10e      	bne.n	8003c92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	d107      	bne.n	8003c92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f06f 0220 	mvn.w	r2, #32
 8003c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 fde7 	bl	8004860 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c92:	bf00      	nop
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d101      	bne.n	8003cba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e0ff      	b.n	8003eba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b14      	cmp	r3, #20
 8003cc6:	f200 80f0 	bhi.w	8003eaa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003cca:	a201      	add	r2, pc, #4	; (adr r2, 8003cd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd0:	08003d25 	.word	0x08003d25
 8003cd4:	08003eab 	.word	0x08003eab
 8003cd8:	08003eab 	.word	0x08003eab
 8003cdc:	08003eab 	.word	0x08003eab
 8003ce0:	08003d65 	.word	0x08003d65
 8003ce4:	08003eab 	.word	0x08003eab
 8003ce8:	08003eab 	.word	0x08003eab
 8003cec:	08003eab 	.word	0x08003eab
 8003cf0:	08003da7 	.word	0x08003da7
 8003cf4:	08003eab 	.word	0x08003eab
 8003cf8:	08003eab 	.word	0x08003eab
 8003cfc:	08003eab 	.word	0x08003eab
 8003d00:	08003de7 	.word	0x08003de7
 8003d04:	08003eab 	.word	0x08003eab
 8003d08:	08003eab 	.word	0x08003eab
 8003d0c:	08003eab 	.word	0x08003eab
 8003d10:	08003e29 	.word	0x08003e29
 8003d14:	08003eab 	.word	0x08003eab
 8003d18:	08003eab 	.word	0x08003eab
 8003d1c:	08003eab 	.word	0x08003eab
 8003d20:	08003e69 	.word	0x08003e69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 f996 	bl	800405c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699a      	ldr	r2, [r3, #24]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0208 	orr.w	r2, r2, #8
 8003d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0204 	bic.w	r2, r2, #4
 8003d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6999      	ldr	r1, [r3, #24]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	691a      	ldr	r2, [r3, #16]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	619a      	str	r2, [r3, #24]
      break;
 8003d62:	e0a5      	b.n	8003eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68b9      	ldr	r1, [r7, #8]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fa06 	bl	800417c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699a      	ldr	r2, [r3, #24]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699a      	ldr	r2, [r3, #24]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6999      	ldr	r1, [r3, #24]
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	021a      	lsls	r2, r3, #8
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	619a      	str	r2, [r3, #24]
      break;
 8003da4:	e084      	b.n	8003eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68b9      	ldr	r1, [r7, #8]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 fa6f 	bl	8004290 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69da      	ldr	r2, [r3, #28]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0208 	orr.w	r2, r2, #8
 8003dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69da      	ldr	r2, [r3, #28]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0204 	bic.w	r2, r2, #4
 8003dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69d9      	ldr	r1, [r3, #28]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	61da      	str	r2, [r3, #28]
      break;
 8003de4:	e064      	b.n	8003eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68b9      	ldr	r1, [r7, #8]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fad7 	bl	80043a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69da      	ldr	r2, [r3, #28]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69da      	ldr	r2, [r3, #28]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69d9      	ldr	r1, [r3, #28]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	021a      	lsls	r2, r3, #8
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	61da      	str	r2, [r3, #28]
      break;
 8003e26:	e043      	b.n	8003eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68b9      	ldr	r1, [r7, #8]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fb20 	bl	8004474 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0208 	orr.w	r2, r2, #8
 8003e42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0204 	bic.w	r2, r2, #4
 8003e52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	691a      	ldr	r2, [r3, #16]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e66:	e023      	b.n	8003eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68b9      	ldr	r1, [r7, #8]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fb64 	bl	800453c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	021a      	lsls	r2, r3, #8
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ea8:	e002      	b.n	8003eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	75fb      	strb	r3, [r7, #23]
      break;
 8003eae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop

08003ec4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a40      	ldr	r2, [pc, #256]	; (800403c <TIM_Base_SetConfig+0x114>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d013      	beq.n	8003f68 <TIM_Base_SetConfig+0x40>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f46:	d00f      	beq.n	8003f68 <TIM_Base_SetConfig+0x40>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a3d      	ldr	r2, [pc, #244]	; (8004040 <TIM_Base_SetConfig+0x118>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d00b      	beq.n	8003f68 <TIM_Base_SetConfig+0x40>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a3c      	ldr	r2, [pc, #240]	; (8004044 <TIM_Base_SetConfig+0x11c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d007      	beq.n	8003f68 <TIM_Base_SetConfig+0x40>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a3b      	ldr	r2, [pc, #236]	; (8004048 <TIM_Base_SetConfig+0x120>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d003      	beq.n	8003f68 <TIM_Base_SetConfig+0x40>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a3a      	ldr	r2, [pc, #232]	; (800404c <TIM_Base_SetConfig+0x124>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d108      	bne.n	8003f7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2f      	ldr	r2, [pc, #188]	; (800403c <TIM_Base_SetConfig+0x114>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d01f      	beq.n	8003fc2 <TIM_Base_SetConfig+0x9a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f88:	d01b      	beq.n	8003fc2 <TIM_Base_SetConfig+0x9a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a2c      	ldr	r2, [pc, #176]	; (8004040 <TIM_Base_SetConfig+0x118>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d017      	beq.n	8003fc2 <TIM_Base_SetConfig+0x9a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a2b      	ldr	r2, [pc, #172]	; (8004044 <TIM_Base_SetConfig+0x11c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d013      	beq.n	8003fc2 <TIM_Base_SetConfig+0x9a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a2a      	ldr	r2, [pc, #168]	; (8004048 <TIM_Base_SetConfig+0x120>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d00f      	beq.n	8003fc2 <TIM_Base_SetConfig+0x9a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a29      	ldr	r2, [pc, #164]	; (800404c <TIM_Base_SetConfig+0x124>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00b      	beq.n	8003fc2 <TIM_Base_SetConfig+0x9a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a28      	ldr	r2, [pc, #160]	; (8004050 <TIM_Base_SetConfig+0x128>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d007      	beq.n	8003fc2 <TIM_Base_SetConfig+0x9a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a27      	ldr	r2, [pc, #156]	; (8004054 <TIM_Base_SetConfig+0x12c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d003      	beq.n	8003fc2 <TIM_Base_SetConfig+0x9a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a26      	ldr	r2, [pc, #152]	; (8004058 <TIM_Base_SetConfig+0x130>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d108      	bne.n	8003fd4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a10      	ldr	r2, [pc, #64]	; (800403c <TIM_Base_SetConfig+0x114>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d00f      	beq.n	8004020 <TIM_Base_SetConfig+0xf8>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a12      	ldr	r2, [pc, #72]	; (800404c <TIM_Base_SetConfig+0x124>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d00b      	beq.n	8004020 <TIM_Base_SetConfig+0xf8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a11      	ldr	r2, [pc, #68]	; (8004050 <TIM_Base_SetConfig+0x128>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d007      	beq.n	8004020 <TIM_Base_SetConfig+0xf8>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a10      	ldr	r2, [pc, #64]	; (8004054 <TIM_Base_SetConfig+0x12c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d003      	beq.n	8004020 <TIM_Base_SetConfig+0xf8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a0f      	ldr	r2, [pc, #60]	; (8004058 <TIM_Base_SetConfig+0x130>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d103      	bne.n	8004028 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	615a      	str	r2, [r3, #20]
}
 800402e:	bf00      	nop
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	40012c00 	.word	0x40012c00
 8004040:	40000400 	.word	0x40000400
 8004044:	40000800 	.word	0x40000800
 8004048:	40000c00 	.word	0x40000c00
 800404c:	40013400 	.word	0x40013400
 8004050:	40014000 	.word	0x40014000
 8004054:	40014400 	.word	0x40014400
 8004058:	40014800 	.word	0x40014800

0800405c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	f023 0201 	bic.w	r2, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800408a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800408e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0303 	bic.w	r3, r3, #3
 8004096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f023 0302 	bic.w	r3, r3, #2
 80040a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a2c      	ldr	r2, [pc, #176]	; (8004168 <TIM_OC1_SetConfig+0x10c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00f      	beq.n	80040dc <TIM_OC1_SetConfig+0x80>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a2b      	ldr	r2, [pc, #172]	; (800416c <TIM_OC1_SetConfig+0x110>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d00b      	beq.n	80040dc <TIM_OC1_SetConfig+0x80>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a2a      	ldr	r2, [pc, #168]	; (8004170 <TIM_OC1_SetConfig+0x114>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d007      	beq.n	80040dc <TIM_OC1_SetConfig+0x80>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a29      	ldr	r2, [pc, #164]	; (8004174 <TIM_OC1_SetConfig+0x118>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d003      	beq.n	80040dc <TIM_OC1_SetConfig+0x80>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a28      	ldr	r2, [pc, #160]	; (8004178 <TIM_OC1_SetConfig+0x11c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d10c      	bne.n	80040f6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f023 0308 	bic.w	r3, r3, #8
 80040e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f023 0304 	bic.w	r3, r3, #4
 80040f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a1b      	ldr	r2, [pc, #108]	; (8004168 <TIM_OC1_SetConfig+0x10c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00f      	beq.n	800411e <TIM_OC1_SetConfig+0xc2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a1a      	ldr	r2, [pc, #104]	; (800416c <TIM_OC1_SetConfig+0x110>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00b      	beq.n	800411e <TIM_OC1_SetConfig+0xc2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a19      	ldr	r2, [pc, #100]	; (8004170 <TIM_OC1_SetConfig+0x114>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d007      	beq.n	800411e <TIM_OC1_SetConfig+0xc2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a18      	ldr	r2, [pc, #96]	; (8004174 <TIM_OC1_SetConfig+0x118>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d003      	beq.n	800411e <TIM_OC1_SetConfig+0xc2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a17      	ldr	r2, [pc, #92]	; (8004178 <TIM_OC1_SetConfig+0x11c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d111      	bne.n	8004142 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800412c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	621a      	str	r2, [r3, #32]
}
 800415c:	bf00      	nop
 800415e:	371c      	adds	r7, #28
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	40012c00 	.word	0x40012c00
 800416c:	40013400 	.word	0x40013400
 8004170:	40014000 	.word	0x40014000
 8004174:	40014400 	.word	0x40014400
 8004178:	40014800 	.word	0x40014800

0800417c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	f023 0210 	bic.w	r2, r3, #16
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	021b      	lsls	r3, r3, #8
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f023 0320 	bic.w	r3, r3, #32
 80041ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a28      	ldr	r2, [pc, #160]	; (800427c <TIM_OC2_SetConfig+0x100>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d003      	beq.n	80041e8 <TIM_OC2_SetConfig+0x6c>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a27      	ldr	r2, [pc, #156]	; (8004280 <TIM_OC2_SetConfig+0x104>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d10d      	bne.n	8004204 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004202:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a1d      	ldr	r2, [pc, #116]	; (800427c <TIM_OC2_SetConfig+0x100>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00f      	beq.n	800422c <TIM_OC2_SetConfig+0xb0>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a1c      	ldr	r2, [pc, #112]	; (8004280 <TIM_OC2_SetConfig+0x104>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00b      	beq.n	800422c <TIM_OC2_SetConfig+0xb0>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a1b      	ldr	r2, [pc, #108]	; (8004284 <TIM_OC2_SetConfig+0x108>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d007      	beq.n	800422c <TIM_OC2_SetConfig+0xb0>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a1a      	ldr	r2, [pc, #104]	; (8004288 <TIM_OC2_SetConfig+0x10c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d003      	beq.n	800422c <TIM_OC2_SetConfig+0xb0>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a19      	ldr	r2, [pc, #100]	; (800428c <TIM_OC2_SetConfig+0x110>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d113      	bne.n	8004254 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004232:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800423a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4313      	orrs	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	621a      	str	r2, [r3, #32]
}
 800426e:	bf00      	nop
 8004270:	371c      	adds	r7, #28
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40012c00 	.word	0x40012c00
 8004280:	40013400 	.word	0x40013400
 8004284:	40014000 	.word	0x40014000
 8004288:	40014400 	.word	0x40014400
 800428c:	40014800 	.word	0x40014800

08004290 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 0303 	bic.w	r3, r3, #3
 80042ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	021b      	lsls	r3, r3, #8
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a27      	ldr	r2, [pc, #156]	; (800438c <TIM_OC3_SetConfig+0xfc>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d003      	beq.n	80042fa <TIM_OC3_SetConfig+0x6a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a26      	ldr	r2, [pc, #152]	; (8004390 <TIM_OC3_SetConfig+0x100>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d10d      	bne.n	8004316 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004300:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	021b      	lsls	r3, r3, #8
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	4313      	orrs	r3, r2
 800430c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004314:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a1c      	ldr	r2, [pc, #112]	; (800438c <TIM_OC3_SetConfig+0xfc>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00f      	beq.n	800433e <TIM_OC3_SetConfig+0xae>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a1b      	ldr	r2, [pc, #108]	; (8004390 <TIM_OC3_SetConfig+0x100>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d00b      	beq.n	800433e <TIM_OC3_SetConfig+0xae>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a1a      	ldr	r2, [pc, #104]	; (8004394 <TIM_OC3_SetConfig+0x104>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d007      	beq.n	800433e <TIM_OC3_SetConfig+0xae>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a19      	ldr	r2, [pc, #100]	; (8004398 <TIM_OC3_SetConfig+0x108>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d003      	beq.n	800433e <TIM_OC3_SetConfig+0xae>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a18      	ldr	r2, [pc, #96]	; (800439c <TIM_OC3_SetConfig+0x10c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d113      	bne.n	8004366 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800434c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	011b      	lsls	r3, r3, #4
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	621a      	str	r2, [r3, #32]
}
 8004380:	bf00      	nop
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	40012c00 	.word	0x40012c00
 8004390:	40013400 	.word	0x40013400
 8004394:	40014000 	.word	0x40014000
 8004398:	40014400 	.word	0x40014400
 800439c:	40014800 	.word	0x40014800

080043a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	021b      	lsls	r3, r3, #8
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	031b      	lsls	r3, r3, #12
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a18      	ldr	r2, [pc, #96]	; (8004460 <TIM_OC4_SetConfig+0xc0>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00f      	beq.n	8004424 <TIM_OC4_SetConfig+0x84>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a17      	ldr	r2, [pc, #92]	; (8004464 <TIM_OC4_SetConfig+0xc4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d00b      	beq.n	8004424 <TIM_OC4_SetConfig+0x84>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a16      	ldr	r2, [pc, #88]	; (8004468 <TIM_OC4_SetConfig+0xc8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d007      	beq.n	8004424 <TIM_OC4_SetConfig+0x84>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a15      	ldr	r2, [pc, #84]	; (800446c <TIM_OC4_SetConfig+0xcc>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d003      	beq.n	8004424 <TIM_OC4_SetConfig+0x84>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a14      	ldr	r2, [pc, #80]	; (8004470 <TIM_OC4_SetConfig+0xd0>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d109      	bne.n	8004438 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800442a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	019b      	lsls	r3, r3, #6
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	621a      	str	r2, [r3, #32]
}
 8004452:	bf00      	nop
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40012c00 	.word	0x40012c00
 8004464:	40013400 	.word	0x40013400
 8004468:	40014000 	.word	0x40014000
 800446c:	40014400 	.word	0x40014400
 8004470:	40014800 	.word	0x40014800

08004474 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80044b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	041b      	lsls	r3, r3, #16
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a17      	ldr	r2, [pc, #92]	; (8004528 <TIM_OC5_SetConfig+0xb4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00f      	beq.n	80044ee <TIM_OC5_SetConfig+0x7a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a16      	ldr	r2, [pc, #88]	; (800452c <TIM_OC5_SetConfig+0xb8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00b      	beq.n	80044ee <TIM_OC5_SetConfig+0x7a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a15      	ldr	r2, [pc, #84]	; (8004530 <TIM_OC5_SetConfig+0xbc>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d007      	beq.n	80044ee <TIM_OC5_SetConfig+0x7a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a14      	ldr	r2, [pc, #80]	; (8004534 <TIM_OC5_SetConfig+0xc0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d003      	beq.n	80044ee <TIM_OC5_SetConfig+0x7a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a13      	ldr	r2, [pc, #76]	; (8004538 <TIM_OC5_SetConfig+0xc4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d109      	bne.n	8004502 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	021b      	lsls	r3, r3, #8
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	621a      	str	r2, [r3, #32]
}
 800451c:	bf00      	nop
 800451e:	371c      	adds	r7, #28
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	40012c00 	.word	0x40012c00
 800452c:	40013400 	.word	0x40013400
 8004530:	40014000 	.word	0x40014000
 8004534:	40014400 	.word	0x40014400
 8004538:	40014800 	.word	0x40014800

0800453c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800456a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800456e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	021b      	lsls	r3, r3, #8
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4313      	orrs	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	051b      	lsls	r3, r3, #20
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a18      	ldr	r2, [pc, #96]	; (80045f4 <TIM_OC6_SetConfig+0xb8>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d00f      	beq.n	80045b8 <TIM_OC6_SetConfig+0x7c>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a17      	ldr	r2, [pc, #92]	; (80045f8 <TIM_OC6_SetConfig+0xbc>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d00b      	beq.n	80045b8 <TIM_OC6_SetConfig+0x7c>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a16      	ldr	r2, [pc, #88]	; (80045fc <TIM_OC6_SetConfig+0xc0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d007      	beq.n	80045b8 <TIM_OC6_SetConfig+0x7c>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a15      	ldr	r2, [pc, #84]	; (8004600 <TIM_OC6_SetConfig+0xc4>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d003      	beq.n	80045b8 <TIM_OC6_SetConfig+0x7c>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a14      	ldr	r2, [pc, #80]	; (8004604 <TIM_OC6_SetConfig+0xc8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d109      	bne.n	80045cc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	029b      	lsls	r3, r3, #10
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	621a      	str	r2, [r3, #32]
}
 80045e6:	bf00      	nop
 80045e8:	371c      	adds	r7, #28
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40012c00 	.word	0x40012c00
 80045f8:	40013400 	.word	0x40013400
 80045fc:	40014000 	.word	0x40014000
 8004600:	40014400 	.word	0x40014400
 8004604:	40014800 	.word	0x40014800

08004608 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f003 031f 	and.w	r3, r3, #31
 800461a:	2201      	movs	r2, #1
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a1a      	ldr	r2, [r3, #32]
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	43db      	mvns	r3, r3
 800462a:	401a      	ands	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a1a      	ldr	r2, [r3, #32]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f003 031f 	and.w	r3, r3, #31
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	fa01 f303 	lsl.w	r3, r1, r3
 8004640:	431a      	orrs	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	621a      	str	r2, [r3, #32]
}
 8004646:	bf00      	nop
 8004648:	371c      	adds	r7, #28
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
	...

08004654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004664:	2b01      	cmp	r3, #1
 8004666:	d101      	bne.n	800466c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004668:	2302      	movs	r3, #2
 800466a:	e068      	b.n	800473e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a2e      	ldr	r2, [pc, #184]	; (800474c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d004      	beq.n	80046a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a2d      	ldr	r2, [pc, #180]	; (8004750 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d108      	bne.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80046a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a1e      	ldr	r2, [pc, #120]	; (800474c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d01d      	beq.n	8004712 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046de:	d018      	beq.n	8004712 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1b      	ldr	r2, [pc, #108]	; (8004754 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d013      	beq.n	8004712 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a1a      	ldr	r2, [pc, #104]	; (8004758 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00e      	beq.n	8004712 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a18      	ldr	r2, [pc, #96]	; (800475c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d009      	beq.n	8004712 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a13      	ldr	r2, [pc, #76]	; (8004750 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d004      	beq.n	8004712 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a14      	ldr	r2, [pc, #80]	; (8004760 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d10c      	bne.n	800472c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004718:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	4313      	orrs	r3, r2
 8004722:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40012c00 	.word	0x40012c00
 8004750:	40013400 	.word	0x40013400
 8004754:	40000400 	.word	0x40000400
 8004758:	40000800 	.word	0x40000800
 800475c:	40000c00 	.word	0x40000c00
 8004760:	40014000 	.word	0x40014000

08004764 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800477c:	2302      	movs	r3, #2
 800477e:	e065      	b.n	800484c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4313      	orrs	r3, r2
 80047be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	041b      	lsls	r3, r3, #16
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a16      	ldr	r2, [pc, #88]	; (8004858 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d004      	beq.n	800480e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a14      	ldr	r2, [pc, #80]	; (800485c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d115      	bne.n	800483a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	051b      	lsls	r3, r3, #20
 800481a:	4313      	orrs	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	4313      	orrs	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	40012c00 	.word	0x40012c00
 800485c:	40013400 	.word	0x40013400

08004860 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e040      	b.n	8004930 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d106      	bne.n	80048c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7fc fc70 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2224      	movs	r2, #36	; 0x24
 80048c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0201 	bic.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fb2e 	bl	8004f3c <UART_SetConfig>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e022      	b.n	8004930 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fdda 	bl	80054ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004906:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004916:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 fe61 	bl	80055f0 <UART_CheckIdleState>
 800492e:	4603      	mov	r3, r0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b0ba      	sub	sp, #232	; 0xe8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800495e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004962:	f640 030f 	movw	r3, #2063	; 0x80f
 8004966:	4013      	ands	r3, r2
 8004968:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800496c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004970:	2b00      	cmp	r3, #0
 8004972:	d115      	bne.n	80049a0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004978:	f003 0320 	and.w	r3, r3, #32
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00f      	beq.n	80049a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004984:	f003 0320 	and.w	r3, r3, #32
 8004988:	2b00      	cmp	r3, #0
 800498a:	d009      	beq.n	80049a0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 82a6 	beq.w	8004ee2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	4798      	blx	r3
      }
      return;
 800499e:	e2a0      	b.n	8004ee2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80049a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 8117 	beq.w	8004bd8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80049aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d106      	bne.n	80049c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80049b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80049ba:	4b85      	ldr	r3, [pc, #532]	; (8004bd0 <HAL_UART_IRQHandler+0x298>)
 80049bc:	4013      	ands	r3, r2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 810a 	beq.w	8004bd8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d011      	beq.n	80049f4 <HAL_UART_IRQHandler+0xbc>
 80049d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00b      	beq.n	80049f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2201      	movs	r2, #1
 80049e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049ea:	f043 0201 	orr.w	r2, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d011      	beq.n	8004a24 <HAL_UART_IRQHandler+0xec>
 8004a00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00b      	beq.n	8004a24 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2202      	movs	r2, #2
 8004a12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a1a:	f043 0204 	orr.w	r2, r3, #4
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d011      	beq.n	8004a54 <HAL_UART_IRQHandler+0x11c>
 8004a30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00b      	beq.n	8004a54 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2204      	movs	r2, #4
 8004a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a4a:	f043 0202 	orr.w	r2, r3, #2
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d017      	beq.n	8004a90 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a64:	f003 0320 	and.w	r3, r3, #32
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d105      	bne.n	8004a78 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a70:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00b      	beq.n	8004a90 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2208      	movs	r2, #8
 8004a7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a86:	f043 0208 	orr.w	r2, r3, #8
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d012      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x18a>
 8004a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00c      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ab0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ab8:	f043 0220 	orr.w	r2, r3, #32
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 820c 	beq.w	8004ee6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad2:	f003 0320 	and.w	r3, r3, #32
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00d      	beq.n	8004af6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d007      	beq.n	8004af6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004afc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0a:	2b40      	cmp	r3, #64	; 0x40
 8004b0c:	d005      	beq.n	8004b1a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d04f      	beq.n	8004bba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fe75 	bl	800580a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2a:	2b40      	cmp	r3, #64	; 0x40
 8004b2c:	d141      	bne.n	8004bb2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3308      	adds	r3, #8
 8004b34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b3c:	e853 3f00 	ldrex	r3, [r3]
 8004b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3308      	adds	r3, #8
 8004b56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b6a:	e841 2300 	strex	r3, r2, [r1]
 8004b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1d9      	bne.n	8004b2e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d013      	beq.n	8004baa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b86:	4a13      	ldr	r2, [pc, #76]	; (8004bd4 <HAL_UART_IRQHandler+0x29c>)
 8004b88:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fc febc 	bl	800190c <HAL_DMA_Abort_IT>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d017      	beq.n	8004bca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba8:	e00f      	b.n	8004bca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f9b0 	bl	8004f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb0:	e00b      	b.n	8004bca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f9ac 	bl	8004f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb8:	e007      	b.n	8004bca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f9a8 	bl	8004f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004bc8:	e18d      	b.n	8004ee6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bca:	bf00      	nop
    return;
 8004bcc:	e18b      	b.n	8004ee6 <HAL_UART_IRQHandler+0x5ae>
 8004bce:	bf00      	nop
 8004bd0:	04000120 	.word	0x04000120
 8004bd4:	080058d1 	.word	0x080058d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	f040 8146 	bne.w	8004e6e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004be6:	f003 0310 	and.w	r3, r3, #16
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 813f 	beq.w	8004e6e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bf4:	f003 0310 	and.w	r3, r3, #16
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 8138 	beq.w	8004e6e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2210      	movs	r2, #16
 8004c04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c10:	2b40      	cmp	r3, #64	; 0x40
 8004c12:	f040 80b4 	bne.w	8004d7e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c22:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 815f 	beq.w	8004eea <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c36:	429a      	cmp	r2, r3
 8004c38:	f080 8157 	bcs.w	8004eea <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0320 	and.w	r3, r3, #32
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f040 8085 	bne.w	8004d62 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c86:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c92:	e841 2300 	strex	r3, r2, [r1]
 8004c96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1da      	bne.n	8004c58 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3308      	adds	r3, #8
 8004ca8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cac:	e853 3f00 	ldrex	r3, [r3]
 8004cb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004cb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cb4:	f023 0301 	bic.w	r3, r3, #1
 8004cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3308      	adds	r3, #8
 8004cc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004cc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004cca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004cce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004cd2:	e841 2300 	strex	r3, r2, [r1]
 8004cd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1e1      	bne.n	8004ca2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ce8:	e853 3f00 	ldrex	r3, [r3]
 8004cec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3308      	adds	r3, #8
 8004cfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d0a:	e841 2300 	strex	r3, r2, [r1]
 8004d0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1e3      	bne.n	8004cde <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d2a:	e853 3f00 	ldrex	r3, [r3]
 8004d2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d32:	f023 0310 	bic.w	r3, r3, #16
 8004d36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d44:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d46:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d4c:	e841 2300 	strex	r3, r2, [r1]
 8004d50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1e4      	bne.n	8004d22 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fc fd97 	bl	8001890 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	4619      	mov	r1, r3
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f8d4 	bl	8004f24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d7c:	e0b5      	b.n	8004eea <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 80a7 	beq.w	8004eee <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004da0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 80a2 	beq.w	8004eee <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db2:	e853 3f00 	ldrex	r3, [r3]
 8004db6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8004dce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dd4:	e841 2300 	strex	r3, r2, [r1]
 8004dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1e4      	bne.n	8004daa <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3308      	adds	r3, #8
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	e853 3f00 	ldrex	r3, [r3]
 8004dee:	623b      	str	r3, [r7, #32]
   return(result);
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	f023 0301 	bic.w	r3, r3, #1
 8004df6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3308      	adds	r3, #8
 8004e00:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e04:	633a      	str	r2, [r7, #48]	; 0x30
 8004e06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e0c:	e841 2300 	strex	r3, r2, [r1]
 8004e10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1e3      	bne.n	8004de0 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	e853 3f00 	ldrex	r3, [r3]
 8004e36:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0310 	bic.w	r3, r3, #16
 8004e3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	461a      	mov	r2, r3
 8004e48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e4c:	61fb      	str	r3, [r7, #28]
 8004e4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	69b9      	ldr	r1, [r7, #24]
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	e841 2300 	strex	r3, r2, [r1]
 8004e58:	617b      	str	r3, [r7, #20]
   return(result);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1e4      	bne.n	8004e2a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e64:	4619      	mov	r1, r3
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f85c 	bl	8004f24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e6c:	e03f      	b.n	8004eee <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00e      	beq.n	8004e98 <HAL_UART_IRQHandler+0x560>
 8004e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d008      	beq.n	8004e98 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e8e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 fd5d 	bl	8005950 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e96:	e02d      	b.n	8004ef4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00e      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d008      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01c      	beq.n	8004ef2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	4798      	blx	r3
    }
    return;
 8004ec0:	e017      	b.n	8004ef2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d012      	beq.n	8004ef4 <HAL_UART_IRQHandler+0x5bc>
 8004ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00c      	beq.n	8004ef4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 fd0e 	bl	80058fc <UART_EndTransmit_IT>
    return;
 8004ee0:	e008      	b.n	8004ef4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004ee2:	bf00      	nop
 8004ee4:	e006      	b.n	8004ef4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004ee6:	bf00      	nop
 8004ee8:	e004      	b.n	8004ef4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004eea:	bf00      	nop
 8004eec:	e002      	b.n	8004ef4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004eee:	bf00      	nop
 8004ef0:	e000      	b.n	8004ef4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004ef2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004ef4:	37e8      	adds	r7, #232	; 0xe8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop

08004efc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f40:	b08a      	sub	sp, #40	; 0x28
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f46:	2300      	movs	r3, #0
 8004f48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	431a      	orrs	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	4ba4      	ldr	r3, [pc, #656]	; (80051fc <UART_SetConfig+0x2c0>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	6812      	ldr	r2, [r2, #0]
 8004f72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f74:	430b      	orrs	r3, r1
 8004f76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a99      	ldr	r2, [pc, #612]	; (8005200 <UART_SetConfig+0x2c4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d004      	beq.n	8004fa8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a90      	ldr	r2, [pc, #576]	; (8005204 <UART_SetConfig+0x2c8>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d126      	bne.n	8005014 <UART_SetConfig+0xd8>
 8004fc6:	4b90      	ldr	r3, [pc, #576]	; (8005208 <UART_SetConfig+0x2cc>)
 8004fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fcc:	f003 0303 	and.w	r3, r3, #3
 8004fd0:	2b03      	cmp	r3, #3
 8004fd2:	d81b      	bhi.n	800500c <UART_SetConfig+0xd0>
 8004fd4:	a201      	add	r2, pc, #4	; (adr r2, 8004fdc <UART_SetConfig+0xa0>)
 8004fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fda:	bf00      	nop
 8004fdc:	08004fed 	.word	0x08004fed
 8004fe0:	08004ffd 	.word	0x08004ffd
 8004fe4:	08004ff5 	.word	0x08004ff5
 8004fe8:	08005005 	.word	0x08005005
 8004fec:	2301      	movs	r3, #1
 8004fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ff2:	e116      	b.n	8005222 <UART_SetConfig+0x2e6>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ffa:	e112      	b.n	8005222 <UART_SetConfig+0x2e6>
 8004ffc:	2304      	movs	r3, #4
 8004ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005002:	e10e      	b.n	8005222 <UART_SetConfig+0x2e6>
 8005004:	2308      	movs	r3, #8
 8005006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800500a:	e10a      	b.n	8005222 <UART_SetConfig+0x2e6>
 800500c:	2310      	movs	r3, #16
 800500e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005012:	e106      	b.n	8005222 <UART_SetConfig+0x2e6>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a7c      	ldr	r2, [pc, #496]	; (800520c <UART_SetConfig+0x2d0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d138      	bne.n	8005090 <UART_SetConfig+0x154>
 800501e:	4b7a      	ldr	r3, [pc, #488]	; (8005208 <UART_SetConfig+0x2cc>)
 8005020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005024:	f003 030c 	and.w	r3, r3, #12
 8005028:	2b0c      	cmp	r3, #12
 800502a:	d82d      	bhi.n	8005088 <UART_SetConfig+0x14c>
 800502c:	a201      	add	r2, pc, #4	; (adr r2, 8005034 <UART_SetConfig+0xf8>)
 800502e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005032:	bf00      	nop
 8005034:	08005069 	.word	0x08005069
 8005038:	08005089 	.word	0x08005089
 800503c:	08005089 	.word	0x08005089
 8005040:	08005089 	.word	0x08005089
 8005044:	08005079 	.word	0x08005079
 8005048:	08005089 	.word	0x08005089
 800504c:	08005089 	.word	0x08005089
 8005050:	08005089 	.word	0x08005089
 8005054:	08005071 	.word	0x08005071
 8005058:	08005089 	.word	0x08005089
 800505c:	08005089 	.word	0x08005089
 8005060:	08005089 	.word	0x08005089
 8005064:	08005081 	.word	0x08005081
 8005068:	2300      	movs	r3, #0
 800506a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800506e:	e0d8      	b.n	8005222 <UART_SetConfig+0x2e6>
 8005070:	2302      	movs	r3, #2
 8005072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005076:	e0d4      	b.n	8005222 <UART_SetConfig+0x2e6>
 8005078:	2304      	movs	r3, #4
 800507a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800507e:	e0d0      	b.n	8005222 <UART_SetConfig+0x2e6>
 8005080:	2308      	movs	r3, #8
 8005082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005086:	e0cc      	b.n	8005222 <UART_SetConfig+0x2e6>
 8005088:	2310      	movs	r3, #16
 800508a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800508e:	e0c8      	b.n	8005222 <UART_SetConfig+0x2e6>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a5e      	ldr	r2, [pc, #376]	; (8005210 <UART_SetConfig+0x2d4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d125      	bne.n	80050e6 <UART_SetConfig+0x1aa>
 800509a:	4b5b      	ldr	r3, [pc, #364]	; (8005208 <UART_SetConfig+0x2cc>)
 800509c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050a4:	2b30      	cmp	r3, #48	; 0x30
 80050a6:	d016      	beq.n	80050d6 <UART_SetConfig+0x19a>
 80050a8:	2b30      	cmp	r3, #48	; 0x30
 80050aa:	d818      	bhi.n	80050de <UART_SetConfig+0x1a2>
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	d00a      	beq.n	80050c6 <UART_SetConfig+0x18a>
 80050b0:	2b20      	cmp	r3, #32
 80050b2:	d814      	bhi.n	80050de <UART_SetConfig+0x1a2>
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d002      	beq.n	80050be <UART_SetConfig+0x182>
 80050b8:	2b10      	cmp	r3, #16
 80050ba:	d008      	beq.n	80050ce <UART_SetConfig+0x192>
 80050bc:	e00f      	b.n	80050de <UART_SetConfig+0x1a2>
 80050be:	2300      	movs	r3, #0
 80050c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050c4:	e0ad      	b.n	8005222 <UART_SetConfig+0x2e6>
 80050c6:	2302      	movs	r3, #2
 80050c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050cc:	e0a9      	b.n	8005222 <UART_SetConfig+0x2e6>
 80050ce:	2304      	movs	r3, #4
 80050d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050d4:	e0a5      	b.n	8005222 <UART_SetConfig+0x2e6>
 80050d6:	2308      	movs	r3, #8
 80050d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050dc:	e0a1      	b.n	8005222 <UART_SetConfig+0x2e6>
 80050de:	2310      	movs	r3, #16
 80050e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050e4:	e09d      	b.n	8005222 <UART_SetConfig+0x2e6>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a4a      	ldr	r2, [pc, #296]	; (8005214 <UART_SetConfig+0x2d8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d125      	bne.n	800513c <UART_SetConfig+0x200>
 80050f0:	4b45      	ldr	r3, [pc, #276]	; (8005208 <UART_SetConfig+0x2cc>)
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050fa:	2bc0      	cmp	r3, #192	; 0xc0
 80050fc:	d016      	beq.n	800512c <UART_SetConfig+0x1f0>
 80050fe:	2bc0      	cmp	r3, #192	; 0xc0
 8005100:	d818      	bhi.n	8005134 <UART_SetConfig+0x1f8>
 8005102:	2b80      	cmp	r3, #128	; 0x80
 8005104:	d00a      	beq.n	800511c <UART_SetConfig+0x1e0>
 8005106:	2b80      	cmp	r3, #128	; 0x80
 8005108:	d814      	bhi.n	8005134 <UART_SetConfig+0x1f8>
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <UART_SetConfig+0x1d8>
 800510e:	2b40      	cmp	r3, #64	; 0x40
 8005110:	d008      	beq.n	8005124 <UART_SetConfig+0x1e8>
 8005112:	e00f      	b.n	8005134 <UART_SetConfig+0x1f8>
 8005114:	2300      	movs	r3, #0
 8005116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800511a:	e082      	b.n	8005222 <UART_SetConfig+0x2e6>
 800511c:	2302      	movs	r3, #2
 800511e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005122:	e07e      	b.n	8005222 <UART_SetConfig+0x2e6>
 8005124:	2304      	movs	r3, #4
 8005126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800512a:	e07a      	b.n	8005222 <UART_SetConfig+0x2e6>
 800512c:	2308      	movs	r3, #8
 800512e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005132:	e076      	b.n	8005222 <UART_SetConfig+0x2e6>
 8005134:	2310      	movs	r3, #16
 8005136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800513a:	e072      	b.n	8005222 <UART_SetConfig+0x2e6>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a35      	ldr	r2, [pc, #212]	; (8005218 <UART_SetConfig+0x2dc>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d12a      	bne.n	800519c <UART_SetConfig+0x260>
 8005146:	4b30      	ldr	r3, [pc, #192]	; (8005208 <UART_SetConfig+0x2cc>)
 8005148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005150:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005154:	d01a      	beq.n	800518c <UART_SetConfig+0x250>
 8005156:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800515a:	d81b      	bhi.n	8005194 <UART_SetConfig+0x258>
 800515c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005160:	d00c      	beq.n	800517c <UART_SetConfig+0x240>
 8005162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005166:	d815      	bhi.n	8005194 <UART_SetConfig+0x258>
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <UART_SetConfig+0x238>
 800516c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005170:	d008      	beq.n	8005184 <UART_SetConfig+0x248>
 8005172:	e00f      	b.n	8005194 <UART_SetConfig+0x258>
 8005174:	2300      	movs	r3, #0
 8005176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800517a:	e052      	b.n	8005222 <UART_SetConfig+0x2e6>
 800517c:	2302      	movs	r3, #2
 800517e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005182:	e04e      	b.n	8005222 <UART_SetConfig+0x2e6>
 8005184:	2304      	movs	r3, #4
 8005186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800518a:	e04a      	b.n	8005222 <UART_SetConfig+0x2e6>
 800518c:	2308      	movs	r3, #8
 800518e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005192:	e046      	b.n	8005222 <UART_SetConfig+0x2e6>
 8005194:	2310      	movs	r3, #16
 8005196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800519a:	e042      	b.n	8005222 <UART_SetConfig+0x2e6>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a17      	ldr	r2, [pc, #92]	; (8005200 <UART_SetConfig+0x2c4>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d13a      	bne.n	800521c <UART_SetConfig+0x2e0>
 80051a6:	4b18      	ldr	r3, [pc, #96]	; (8005208 <UART_SetConfig+0x2cc>)
 80051a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051b4:	d01a      	beq.n	80051ec <UART_SetConfig+0x2b0>
 80051b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051ba:	d81b      	bhi.n	80051f4 <UART_SetConfig+0x2b8>
 80051bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c0:	d00c      	beq.n	80051dc <UART_SetConfig+0x2a0>
 80051c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c6:	d815      	bhi.n	80051f4 <UART_SetConfig+0x2b8>
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <UART_SetConfig+0x298>
 80051cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d0:	d008      	beq.n	80051e4 <UART_SetConfig+0x2a8>
 80051d2:	e00f      	b.n	80051f4 <UART_SetConfig+0x2b8>
 80051d4:	2300      	movs	r3, #0
 80051d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051da:	e022      	b.n	8005222 <UART_SetConfig+0x2e6>
 80051dc:	2302      	movs	r3, #2
 80051de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051e2:	e01e      	b.n	8005222 <UART_SetConfig+0x2e6>
 80051e4:	2304      	movs	r3, #4
 80051e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ea:	e01a      	b.n	8005222 <UART_SetConfig+0x2e6>
 80051ec:	2308      	movs	r3, #8
 80051ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051f2:	e016      	b.n	8005222 <UART_SetConfig+0x2e6>
 80051f4:	2310      	movs	r3, #16
 80051f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051fa:	e012      	b.n	8005222 <UART_SetConfig+0x2e6>
 80051fc:	efff69f3 	.word	0xefff69f3
 8005200:	40008000 	.word	0x40008000
 8005204:	40013800 	.word	0x40013800
 8005208:	40021000 	.word	0x40021000
 800520c:	40004400 	.word	0x40004400
 8005210:	40004800 	.word	0x40004800
 8005214:	40004c00 	.word	0x40004c00
 8005218:	40005000 	.word	0x40005000
 800521c:	2310      	movs	r3, #16
 800521e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a9f      	ldr	r2, [pc, #636]	; (80054a4 <UART_SetConfig+0x568>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d17a      	bne.n	8005322 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800522c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005230:	2b08      	cmp	r3, #8
 8005232:	d824      	bhi.n	800527e <UART_SetConfig+0x342>
 8005234:	a201      	add	r2, pc, #4	; (adr r2, 800523c <UART_SetConfig+0x300>)
 8005236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523a:	bf00      	nop
 800523c:	08005261 	.word	0x08005261
 8005240:	0800527f 	.word	0x0800527f
 8005244:	08005269 	.word	0x08005269
 8005248:	0800527f 	.word	0x0800527f
 800524c:	0800526f 	.word	0x0800526f
 8005250:	0800527f 	.word	0x0800527f
 8005254:	0800527f 	.word	0x0800527f
 8005258:	0800527f 	.word	0x0800527f
 800525c:	08005277 	.word	0x08005277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005260:	f7fd fbcc 	bl	80029fc <HAL_RCC_GetPCLK1Freq>
 8005264:	61f8      	str	r0, [r7, #28]
        break;
 8005266:	e010      	b.n	800528a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005268:	4b8f      	ldr	r3, [pc, #572]	; (80054a8 <UART_SetConfig+0x56c>)
 800526a:	61fb      	str	r3, [r7, #28]
        break;
 800526c:	e00d      	b.n	800528a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800526e:	f7fd fb2d 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 8005272:	61f8      	str	r0, [r7, #28]
        break;
 8005274:	e009      	b.n	800528a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800527a:	61fb      	str	r3, [r7, #28]
        break;
 800527c:	e005      	b.n	800528a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005288:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 80fb 	beq.w	8005488 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	4613      	mov	r3, r2
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	4413      	add	r3, r2
 800529c:	69fa      	ldr	r2, [r7, #28]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d305      	bcc.n	80052ae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052a8:	69fa      	ldr	r2, [r7, #28]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d903      	bls.n	80052b6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80052b4:	e0e8      	b.n	8005488 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	2200      	movs	r2, #0
 80052ba:	461c      	mov	r4, r3
 80052bc:	4615      	mov	r5, r2
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	f04f 0300 	mov.w	r3, #0
 80052c6:	022b      	lsls	r3, r5, #8
 80052c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80052cc:	0222      	lsls	r2, r4, #8
 80052ce:	68f9      	ldr	r1, [r7, #12]
 80052d0:	6849      	ldr	r1, [r1, #4]
 80052d2:	0849      	lsrs	r1, r1, #1
 80052d4:	2000      	movs	r0, #0
 80052d6:	4688      	mov	r8, r1
 80052d8:	4681      	mov	r9, r0
 80052da:	eb12 0a08 	adds.w	sl, r2, r8
 80052de:	eb43 0b09 	adc.w	fp, r3, r9
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	603b      	str	r3, [r7, #0]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052f0:	4650      	mov	r0, sl
 80052f2:	4659      	mov	r1, fp
 80052f4:	f7fa ff68 	bl	80001c8 <__aeabi_uldivmod>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4613      	mov	r3, r2
 80052fe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005306:	d308      	bcc.n	800531a <UART_SetConfig+0x3de>
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800530e:	d204      	bcs.n	800531a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	60da      	str	r2, [r3, #12]
 8005318:	e0b6      	b.n	8005488 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005320:	e0b2      	b.n	8005488 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800532a:	d15e      	bne.n	80053ea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800532c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005330:	2b08      	cmp	r3, #8
 8005332:	d828      	bhi.n	8005386 <UART_SetConfig+0x44a>
 8005334:	a201      	add	r2, pc, #4	; (adr r2, 800533c <UART_SetConfig+0x400>)
 8005336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533a:	bf00      	nop
 800533c:	08005361 	.word	0x08005361
 8005340:	08005369 	.word	0x08005369
 8005344:	08005371 	.word	0x08005371
 8005348:	08005387 	.word	0x08005387
 800534c:	08005377 	.word	0x08005377
 8005350:	08005387 	.word	0x08005387
 8005354:	08005387 	.word	0x08005387
 8005358:	08005387 	.word	0x08005387
 800535c:	0800537f 	.word	0x0800537f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005360:	f7fd fb4c 	bl	80029fc <HAL_RCC_GetPCLK1Freq>
 8005364:	61f8      	str	r0, [r7, #28]
        break;
 8005366:	e014      	b.n	8005392 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005368:	f7fd fb5e 	bl	8002a28 <HAL_RCC_GetPCLK2Freq>
 800536c:	61f8      	str	r0, [r7, #28]
        break;
 800536e:	e010      	b.n	8005392 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005370:	4b4d      	ldr	r3, [pc, #308]	; (80054a8 <UART_SetConfig+0x56c>)
 8005372:	61fb      	str	r3, [r7, #28]
        break;
 8005374:	e00d      	b.n	8005392 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005376:	f7fd faa9 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 800537a:	61f8      	str	r0, [r7, #28]
        break;
 800537c:	e009      	b.n	8005392 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800537e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005382:	61fb      	str	r3, [r7, #28]
        break;
 8005384:	e005      	b.n	8005392 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005390:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d077      	beq.n	8005488 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	005a      	lsls	r2, r3, #1
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	085b      	lsrs	r3, r3, #1
 80053a2:	441a      	add	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	2b0f      	cmp	r3, #15
 80053b2:	d916      	bls.n	80053e2 <UART_SetConfig+0x4a6>
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ba:	d212      	bcs.n	80053e2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	b29b      	uxth	r3, r3
 80053c0:	f023 030f 	bic.w	r3, r3, #15
 80053c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	085b      	lsrs	r3, r3, #1
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	8afb      	ldrh	r3, [r7, #22]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	8afa      	ldrh	r2, [r7, #22]
 80053de:	60da      	str	r2, [r3, #12]
 80053e0:	e052      	b.n	8005488 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80053e8:	e04e      	b.n	8005488 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d827      	bhi.n	8005442 <UART_SetConfig+0x506>
 80053f2:	a201      	add	r2, pc, #4	; (adr r2, 80053f8 <UART_SetConfig+0x4bc>)
 80053f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f8:	0800541d 	.word	0x0800541d
 80053fc:	08005425 	.word	0x08005425
 8005400:	0800542d 	.word	0x0800542d
 8005404:	08005443 	.word	0x08005443
 8005408:	08005433 	.word	0x08005433
 800540c:	08005443 	.word	0x08005443
 8005410:	08005443 	.word	0x08005443
 8005414:	08005443 	.word	0x08005443
 8005418:	0800543b 	.word	0x0800543b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800541c:	f7fd faee 	bl	80029fc <HAL_RCC_GetPCLK1Freq>
 8005420:	61f8      	str	r0, [r7, #28]
        break;
 8005422:	e014      	b.n	800544e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005424:	f7fd fb00 	bl	8002a28 <HAL_RCC_GetPCLK2Freq>
 8005428:	61f8      	str	r0, [r7, #28]
        break;
 800542a:	e010      	b.n	800544e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800542c:	4b1e      	ldr	r3, [pc, #120]	; (80054a8 <UART_SetConfig+0x56c>)
 800542e:	61fb      	str	r3, [r7, #28]
        break;
 8005430:	e00d      	b.n	800544e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005432:	f7fd fa4b 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 8005436:	61f8      	str	r0, [r7, #28]
        break;
 8005438:	e009      	b.n	800544e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800543a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800543e:	61fb      	str	r3, [r7, #28]
        break;
 8005440:	e005      	b.n	800544e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800544c:	bf00      	nop
    }

    if (pclk != 0U)
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d019      	beq.n	8005488 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	085a      	lsrs	r2, r3, #1
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	441a      	add	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	fbb2 f3f3 	udiv	r3, r2, r3
 8005466:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	2b0f      	cmp	r3, #15
 800546c:	d909      	bls.n	8005482 <UART_SetConfig+0x546>
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005474:	d205      	bcs.n	8005482 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	60da      	str	r2, [r3, #12]
 8005480:	e002      	b.n	8005488 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005494:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005498:	4618      	mov	r0, r3
 800549a:	3728      	adds	r7, #40	; 0x28
 800549c:	46bd      	mov	sp, r7
 800549e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054a2:	bf00      	nop
 80054a4:	40008000 	.word	0x40008000
 80054a8:	00f42400 	.word	0x00f42400

080054ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00a      	beq.n	80054d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00a      	beq.n	800551a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	f003 0310 	and.w	r3, r3, #16
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00a      	beq.n	800555e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005562:	f003 0320 	and.w	r3, r3, #32
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005588:	2b00      	cmp	r3, #0
 800558a:	d01a      	beq.n	80055c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055aa:	d10a      	bne.n	80055c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	605a      	str	r2, [r3, #4]
  }
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af02      	add	r7, sp, #8
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005600:	f7fb ff4c 	bl	800149c <HAL_GetTick>
 8005604:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	2b08      	cmp	r3, #8
 8005612:	d10e      	bne.n	8005632 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005614:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f82d 	bl	8005682 <UART_WaitOnFlagUntilTimeout>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e023      	b.n	800567a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b04      	cmp	r3, #4
 800563e:	d10e      	bne.n	800565e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005640:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f817 	bl	8005682 <UART_WaitOnFlagUntilTimeout>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e00d      	b.n	800567a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2220      	movs	r2, #32
 8005662:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2220      	movs	r2, #32
 8005668:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b09c      	sub	sp, #112	; 0x70
 8005686:	af00      	add	r7, sp, #0
 8005688:	60f8      	str	r0, [r7, #12]
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	603b      	str	r3, [r7, #0]
 800568e:	4613      	mov	r3, r2
 8005690:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005692:	e0a5      	b.n	80057e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569a:	f000 80a1 	beq.w	80057e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800569e:	f7fb fefd 	bl	800149c <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d302      	bcc.n	80056b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80056ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d13e      	bne.n	8005732 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056bc:	e853 3f00 	ldrex	r3, [r3]
 80056c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80056c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056c8:	667b      	str	r3, [r7, #100]	; 0x64
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80056d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80056e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1e6      	bne.n	80056b4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3308      	adds	r3, #8
 80056ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f8:	f023 0301 	bic.w	r3, r3, #1
 80056fc:	663b      	str	r3, [r7, #96]	; 0x60
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	3308      	adds	r3, #8
 8005704:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005706:	64ba      	str	r2, [r7, #72]	; 0x48
 8005708:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800570c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e5      	bne.n	80056e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2220      	movs	r2, #32
 800571e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2220      	movs	r2, #32
 8005724:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e067      	b.n	8005802 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	2b00      	cmp	r3, #0
 800573e:	d04f      	beq.n	80057e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800574a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800574e:	d147      	bne.n	80057e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005758:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005762:	e853 3f00 	ldrex	r3, [r3]
 8005766:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800576e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	461a      	mov	r2, r3
 8005776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005778:	637b      	str	r3, [r7, #52]	; 0x34
 800577a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800577e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005780:	e841 2300 	strex	r3, r2, [r1]
 8005784:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1e6      	bne.n	800575a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3308      	adds	r3, #8
 8005792:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	e853 3f00 	ldrex	r3, [r3]
 800579a:	613b      	str	r3, [r7, #16]
   return(result);
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f023 0301 	bic.w	r3, r3, #1
 80057a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3308      	adds	r3, #8
 80057aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057ac:	623a      	str	r2, [r7, #32]
 80057ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b0:	69f9      	ldr	r1, [r7, #28]
 80057b2:	6a3a      	ldr	r2, [r7, #32]
 80057b4:	e841 2300 	strex	r3, r2, [r1]
 80057b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e5      	bne.n	800578c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2220      	movs	r2, #32
 80057c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2220      	movs	r2, #32
 80057ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e010      	b.n	8005802 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	69da      	ldr	r2, [r3, #28]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	4013      	ands	r3, r2
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	bf0c      	ite	eq
 80057f0:	2301      	moveq	r3, #1
 80057f2:	2300      	movne	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	461a      	mov	r2, r3
 80057f8:	79fb      	ldrb	r3, [r7, #7]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	f43f af4a 	beq.w	8005694 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3770      	adds	r7, #112	; 0x70
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800580a:	b480      	push	{r7}
 800580c:	b095      	sub	sp, #84	; 0x54
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581a:	e853 3f00 	ldrex	r3, [r3]
 800581e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005822:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	461a      	mov	r2, r3
 800582e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005830:	643b      	str	r3, [r7, #64]	; 0x40
 8005832:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005834:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005836:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005838:	e841 2300 	strex	r3, r2, [r1]
 800583c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1e6      	bne.n	8005812 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3308      	adds	r3, #8
 800584a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	e853 3f00 	ldrex	r3, [r3]
 8005852:	61fb      	str	r3, [r7, #28]
   return(result);
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	f023 0301 	bic.w	r3, r3, #1
 800585a:	64bb      	str	r3, [r7, #72]	; 0x48
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3308      	adds	r3, #8
 8005862:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005864:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005866:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800586a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800586c:	e841 2300 	strex	r3, r2, [r1]
 8005870:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1e5      	bne.n	8005844 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800587c:	2b01      	cmp	r3, #1
 800587e:	d118      	bne.n	80058b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	e853 3f00 	ldrex	r3, [r3]
 800588c:	60bb      	str	r3, [r7, #8]
   return(result);
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	f023 0310 	bic.w	r3, r3, #16
 8005894:	647b      	str	r3, [r7, #68]	; 0x44
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800589e:	61bb      	str	r3, [r7, #24]
 80058a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	6979      	ldr	r1, [r7, #20]
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	613b      	str	r3, [r7, #16]
   return(result);
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e6      	bne.n	8005880 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2220      	movs	r2, #32
 80058b6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80058c4:	bf00      	nop
 80058c6:	3754      	adds	r7, #84	; 0x54
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f7ff fb0e 	bl	8004f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058f4:	bf00      	nop
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b088      	sub	sp, #32
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	e853 3f00 	ldrex	r3, [r3]
 8005910:	60bb      	str	r3, [r7, #8]
   return(result);
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005918:	61fb      	str	r3, [r7, #28]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	61bb      	str	r3, [r7, #24]
 8005924:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005926:	6979      	ldr	r1, [r7, #20]
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	e841 2300 	strex	r3, r2, [r1]
 800592e:	613b      	str	r3, [r7, #16]
   return(result);
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1e6      	bne.n	8005904 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2220      	movs	r2, #32
 800593a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7ff fada 	bl	8004efc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005948:	bf00      	nop
 800594a:	3720      	adds	r7, #32
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <__libc_init_array>:
 8005964:	b570      	push	{r4, r5, r6, lr}
 8005966:	4d0d      	ldr	r5, [pc, #52]	; (800599c <__libc_init_array+0x38>)
 8005968:	4c0d      	ldr	r4, [pc, #52]	; (80059a0 <__libc_init_array+0x3c>)
 800596a:	1b64      	subs	r4, r4, r5
 800596c:	10a4      	asrs	r4, r4, #2
 800596e:	2600      	movs	r6, #0
 8005970:	42a6      	cmp	r6, r4
 8005972:	d109      	bne.n	8005988 <__libc_init_array+0x24>
 8005974:	4d0b      	ldr	r5, [pc, #44]	; (80059a4 <__libc_init_array+0x40>)
 8005976:	4c0c      	ldr	r4, [pc, #48]	; (80059a8 <__libc_init_array+0x44>)
 8005978:	f000 f820 	bl	80059bc <_init>
 800597c:	1b64      	subs	r4, r4, r5
 800597e:	10a4      	asrs	r4, r4, #2
 8005980:	2600      	movs	r6, #0
 8005982:	42a6      	cmp	r6, r4
 8005984:	d105      	bne.n	8005992 <__libc_init_array+0x2e>
 8005986:	bd70      	pop	{r4, r5, r6, pc}
 8005988:	f855 3b04 	ldr.w	r3, [r5], #4
 800598c:	4798      	blx	r3
 800598e:	3601      	adds	r6, #1
 8005990:	e7ee      	b.n	8005970 <__libc_init_array+0xc>
 8005992:	f855 3b04 	ldr.w	r3, [r5], #4
 8005996:	4798      	blx	r3
 8005998:	3601      	adds	r6, #1
 800599a:	e7f2      	b.n	8005982 <__libc_init_array+0x1e>
 800599c:	08005a24 	.word	0x08005a24
 80059a0:	08005a24 	.word	0x08005a24
 80059a4:	08005a24 	.word	0x08005a24
 80059a8:	08005a28 	.word	0x08005a28

080059ac <memset>:
 80059ac:	4402      	add	r2, r0
 80059ae:	4603      	mov	r3, r0
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d100      	bne.n	80059b6 <memset+0xa>
 80059b4:	4770      	bx	lr
 80059b6:	f803 1b01 	strb.w	r1, [r3], #1
 80059ba:	e7f9      	b.n	80059b0 <memset+0x4>

080059bc <_init>:
 80059bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059be:	bf00      	nop
 80059c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059c2:	bc08      	pop	{r3}
 80059c4:	469e      	mov	lr, r3
 80059c6:	4770      	bx	lr

080059c8 <_fini>:
 80059c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ca:	bf00      	nop
 80059cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ce:	bc08      	pop	{r3}
 80059d0:	469e      	mov	lr, r3
 80059d2:	4770      	bx	lr
