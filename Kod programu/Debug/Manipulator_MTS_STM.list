
Manipulator_MTS_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005528  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080056b0  080056b0  000156b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056f8  080056f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080056f8  080056f8  000156f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005700  08005700  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005700  08005700  00015700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005704  08005704  00015704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  2000000c  08005714  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08005714  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132cd  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e8  00000000  00000000  00033309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  000359f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  000369f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000026eb  00000000  00000000  000378e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013913  00000000  00000000  00039fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f472f  00000000  00000000  0004d8de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014200d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041f4  00000000  00000000  00142060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005698 	.word	0x08005698

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005698 	.word	0x08005698

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d2:	4b10      	ldr	r3, [pc, #64]	; (8000514 <MX_DMA_Init+0x48>)
 80004d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004d6:	4a0f      	ldr	r2, [pc, #60]	; (8000514 <MX_DMA_Init+0x48>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6493      	str	r3, [r2, #72]	; 0x48
 80004de:	4b0d      	ldr	r3, [pc, #52]	; (8000514 <MX_DMA_Init+0x48>)
 80004e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2100      	movs	r1, #0
 80004ee:	2010      	movs	r0, #16
 80004f0:	f000 ffdb 	bl	80014aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004f4:	2010      	movs	r0, #16
 80004f6:	f000 fff4 	bl	80014e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2100      	movs	r1, #0
 80004fe:	2011      	movs	r0, #17
 8000500:	f000 ffd3 	bl	80014aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000504:	2011      	movs	r0, #17
 8000506:	f000 ffec 	bl	80014e2 <HAL_NVIC_EnableIRQ>

}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40021000 	.word	0x40021000

08000518 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	; 0x28
 800051c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800052e:	4b2a      	ldr	r3, [pc, #168]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a29      	ldr	r2, [pc, #164]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053a:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <MX_GPIO_Init+0xc0>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	4a23      	ldr	r2, [pc, #140]	; (80005d8 <MX_GPIO_Init+0xc0>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000552:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800055e:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	4a1d      	ldr	r2, [pc, #116]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000564:	f043 0310 	orr.w	r3, r3, #16
 8000568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056a:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <MX_GPIO_Init+0xc0>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	f003 0310 	and.w	r3, r3, #16
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000576:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	4a17      	ldr	r2, [pc, #92]	; (80005d8 <MX_GPIO_Init+0xc0>)
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000582:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	f003 0308 	and.w	r3, r3, #8
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058e:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000592:	4a11      	ldr	r2, [pc, #68]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000594:	f043 0302 	orr.w	r3, r3, #2
 8000598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800059a:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <MX_GPIO_Init+0xc0>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	f003 0302 	and.w	r3, r3, #2
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AIN2_Pin|AIN1_Pin|BIN2_Pin|BIN1_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 80005ac:	480b      	ldr	r0, [pc, #44]	; (80005dc <MX_GPIO_Init+0xc4>)
 80005ae:	f001 fb43 	bl	8001c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN2_Pin|BIN1_Pin;
 80005b2:	f44f 4334 	mov.w	r3, #46080	; 0xb400
 80005b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b8:	2301      	movs	r3, #1
 80005ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c0:	2300      	movs	r3, #0
 80005c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	4619      	mov	r1, r3
 80005ca:	4804      	ldr	r0, [pc, #16]	; (80005dc <MX_GPIO_Init+0xc4>)
 80005cc:	f001 f98a 	bl	80018e4 <HAL_GPIO_Init>

}
 80005d0:	bf00      	nop
 80005d2:	3728      	adds	r7, #40	; 0x28
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40021000 	.word	0x40021000
 80005dc:	48001000 	.word	0x48001000

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f000 fde5 	bl	80011b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f85d 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f7ff ff93 	bl	8000518 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005f2:	f000 f95b 	bl	80008ac <MX_TIM1_Init>
  MX_TIM2_Init();
 80005f6:	f000 f9f3 	bl	80009e0 <MX_TIM2_Init>
  MX_TIM15_Init();
 80005fa:	f000 fad3 	bl	8000ba4 <MX_TIM15_Init>
  MX_DMA_Init();
 80005fe:	f7ff ff65 	bl	80004cc <MX_DMA_Init>
  MX_TIM4_Init();
 8000602:	f000 fa41 	bl	8000a88 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000606:	f000 fc99 	bl	8000f3c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800060a:	f000 fa93 	bl	8000b34 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //q1
  //HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //q2
  //servo_init(&htim15, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800060e:	2100      	movs	r1, #0
 8000610:	4822      	ldr	r0, [pc, #136]	; (800069c <main+0xbc>)
 8000612:	f002 fee5 	bl	80033e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // powinien byc 2
 8000616:	2104      	movs	r1, #4
 8000618:	4821      	ldr	r0, [pc, #132]	; (80006a0 <main+0xc0>)
 800061a:	f002 fee1 	bl	80033e0 <HAL_TIM_PWM_Start>
  //motorA_init(&htim1, TIM_CHANNEL_2);
  //motorB_init(&htim1, TIM_CHANNEL_4);
  //pid_init(pid1, kp, ki, kd); // limit jako ostatni argument?
  //pid_init(pid2, kp, ki, kd);

  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
 800061e:	4b1f      	ldr	r3, [pc, #124]	; (800069c <main+0xbc>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000626:	635a      	str	r2, [r3, #52]	; 0x34
  //servo_move(900,CCW);
  //motorB_setDirection(CW);
	HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062e:	481d      	ldr	r0, [pc, #116]	; (80006a4 <main+0xc4>)
 8000630:	f001 fb02 	bl	8001c38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800063a:	481a      	ldr	r0, [pc, #104]	; (80006a4 <main+0xc4>)
 800063c:	f001 fafc 	bl	8001c38 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */
  for(int i=0; i<20; i++){
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	e00b      	b.n	800065e <main+0x7e>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1000-i);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <main+0xc0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	639a      	str	r2, [r3, #56]	; 0x38
	  HAL_Delay(10);
 8000652:	200a      	movs	r0, #10
 8000654:	f000 fe2a 	bl	80012ac <HAL_Delay>
  for(int i=0; i<20; i++){
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3301      	adds	r3, #1
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b13      	cmp	r3, #19
 8000662:	ddf0      	ble.n	8000646 <main+0x66>
	  HAL_Delay(500);*/




	  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
 8000664:	4b0d      	ldr	r3, [pc, #52]	; (800069c <main+0xbc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800066c:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(1000);
 800066e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000672:	f000 fe1b 	bl	80012ac <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1500);
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <main+0xbc>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800067e:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(1000);
 8000680:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000684:	f000 fe12 	bl	80012ac <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 2000);
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <main+0xbc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000690:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(1000);
 8000692:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000696:	f000 fe09 	bl	80012ac <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000);
 800069a:	e7e3      	b.n	8000664 <main+0x84>
 800069c:	20000158 	.word	0x20000158
 80006a0:	20000028 	.word	0x20000028
 80006a4:	48001000 	.word	0x48001000

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b096      	sub	sp, #88	; 0x58
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	2244      	movs	r2, #68	; 0x44
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f004 ffe6 	bl	8005688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	463b      	mov	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ce:	f001 fad9 	bl	8001c84 <HAL_PWREx_ControlVoltageScaling>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006d8:	f000 f838 	bl	800074c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006dc:	2310      	movs	r3, #16
 80006de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006e8:	2360      	movs	r3, #96	; 0x60
 80006ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ec:	2302      	movs	r3, #2
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006f0:	2301      	movs	r3, #1
 80006f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f4:	2301      	movs	r3, #1
 80006f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006f8:	2328      	movs	r3, #40	; 0x28
 80006fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006fc:	2307      	movs	r3, #7
 80006fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4618      	mov	r0, r3
 800070e:	f001 fb0f 	bl	8001d30 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000718:	f000 f818 	bl	800074c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2303      	movs	r3, #3
 8000722:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	2104      	movs	r1, #4
 8000734:	4618      	mov	r0, r3
 8000736:	f001 fee3 	bl	8002500 <HAL_RCC_ClockConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000740:	f000 f804 	bl	800074c <Error_Handler>
  }
}
 8000744:	bf00      	nop
 8000746:	3758      	adds	r7, #88	; 0x58
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000750:	b672      	cpsid	i
}
 8000752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000754:	e7fe      	b.n	8000754 <Error_Handler+0x8>
	...

08000758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <HAL_MspInit+0x44>)
 8000760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000762:	4a0e      	ldr	r2, [pc, #56]	; (800079c <HAL_MspInit+0x44>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6613      	str	r3, [r2, #96]	; 0x60
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <HAL_MspInit+0x44>)
 800076c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <HAL_MspInit+0x44>)
 8000778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800077a:	4a08      	ldr	r2, [pc, #32]	; (800079c <HAL_MspInit+0x44>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000780:	6593      	str	r3, [r2, #88]	; 0x58
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_MspInit+0x44>)
 8000784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40021000 	.word	0x40021000

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <NMI_Handler+0x4>

080007a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <HardFault_Handler+0x4>

080007ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <MemManage_Handler+0x4>

080007b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <BusFault_Handler+0x4>

080007b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <UsageFault_Handler+0x4>

080007be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ec:	f000 fd3e 	bl	800126c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80007f8:	4802      	ldr	r0, [pc, #8]	; (8000804 <DMA1_Channel6_IRQHandler+0x10>)
 80007fa:	f000 ffc4 	bl	8001786 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000228 	.word	0x20000228

08000808 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800080c:	4802      	ldr	r0, [pc, #8]	; (8000818 <DMA1_Channel7_IRQHandler+0x10>)
 800080e:	f000 ffba 	bl	8001786 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000270 	.word	0x20000270

0800081c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8000822:	f002 ff89 	bl	8003738 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8000826:	4803      	ldr	r0, [pc, #12]	; (8000834 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8000828:	f002 ff86 	bl	8003738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000028 	.word	0x20000028
 8000834:	20000158 	.word	0x20000158

08000838 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800083c:	4802      	ldr	r0, [pc, #8]	; (8000848 <TIM2_IRQHandler+0x10>)
 800083e:	f002 ff7b 	bl	8003738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000074 	.word	0x20000074

0800084c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000850:	4802      	ldr	r0, [pc, #8]	; (800085c <TIM4_IRQHandler+0x10>)
 8000852:	f002 ff71 	bl	8003738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000c0 	.word	0x200000c0

08000860 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000864:	4802      	ldr	r0, [pc, #8]	; (8000870 <USART2_IRQHandler+0x10>)
 8000866:	f003 fed5 	bl	8004614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200001a4 	.word	0x200001a4

08000874 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000878:	4802      	ldr	r0, [pc, #8]	; (8000884 <TIM6_DAC_IRQHandler+0x10>)
 800087a:	f002 ff5d 	bl	8003738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000010c 	.word	0x2000010c

08000888 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <SystemInit+0x20>)
 800088e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000892:	4a05      	ldr	r2, [pc, #20]	; (80008a8 <SystemInit+0x20>)
 8000894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b096      	sub	sp, #88	; 0x58
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
 80008ce:	615a      	str	r2, [r3, #20]
 80008d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	222c      	movs	r2, #44	; 0x2c
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f004 fed5 	bl	8005688 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008de:	4b3e      	ldr	r3, [pc, #248]	; (80009d8 <MX_TIM1_Init+0x12c>)
 80008e0:	4a3e      	ldr	r2, [pc, #248]	; (80009dc <MX_TIM1_Init+0x130>)
 80008e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 39;
 80008e4:	4b3c      	ldr	r3, [pc, #240]	; (80009d8 <MX_TIM1_Init+0x12c>)
 80008e6:	2227      	movs	r2, #39	; 0x27
 80008e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ea:	4b3b      	ldr	r3, [pc, #236]	; (80009d8 <MX_TIM1_Init+0x12c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80008f0:	4b39      	ldr	r3, [pc, #228]	; (80009d8 <MX_TIM1_Init+0x12c>)
 80008f2:	2263      	movs	r2, #99	; 0x63
 80008f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f6:	4b38      	ldr	r3, [pc, #224]	; (80009d8 <MX_TIM1_Init+0x12c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008fc:	4b36      	ldr	r3, [pc, #216]	; (80009d8 <MX_TIM1_Init+0x12c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000902:	4b35      	ldr	r3, [pc, #212]	; (80009d8 <MX_TIM1_Init+0x12c>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000908:	4833      	ldr	r0, [pc, #204]	; (80009d8 <MX_TIM1_Init+0x12c>)
 800090a:	f002 fd12 	bl	8003332 <HAL_TIM_PWM_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000914:	f7ff ff1a 	bl	800074c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000918:	2300      	movs	r3, #0
 800091a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800091c:	2300      	movs	r3, #0
 800091e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000924:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000928:	4619      	mov	r1, r3
 800092a:	482b      	ldr	r0, [pc, #172]	; (80009d8 <MX_TIM1_Init+0x12c>)
 800092c:	f003 fd00 	bl	8004330 <HAL_TIMEx_MasterConfigSynchronization>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000936:	f7ff ff09 	bl	800074c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093a:	2360      	movs	r3, #96	; 0x60
 800093c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000942:	2300      	movs	r3, #0
 8000944:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000946:	2300      	movs	r3, #0
 8000948:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800094e:	2300      	movs	r3, #0
 8000950:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000952:	2300      	movs	r3, #0
 8000954:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000956:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800095a:	2204      	movs	r2, #4
 800095c:	4619      	mov	r1, r3
 800095e:	481e      	ldr	r0, [pc, #120]	; (80009d8 <MX_TIM1_Init+0x12c>)
 8000960:	f003 f80a 	bl	8003978 <HAL_TIM_PWM_ConfigChannel>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800096a:	f7ff feef 	bl	800074c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800096e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000972:	220c      	movs	r2, #12
 8000974:	4619      	mov	r1, r3
 8000976:	4818      	ldr	r0, [pc, #96]	; (80009d8 <MX_TIM1_Init+0x12c>)
 8000978:	f002 fffe 	bl	8003978 <HAL_TIM_PWM_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000982:	f7ff fee3 	bl	800074c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800099a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	4619      	mov	r1, r3
 80009ba:	4807      	ldr	r0, [pc, #28]	; (80009d8 <MX_TIM1_Init+0x12c>)
 80009bc:	f003 fd40 	bl	8004440 <HAL_TIMEx_ConfigBreakDeadTime>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 80009c6:	f7ff fec1 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009ca:	4803      	ldr	r0, [pc, #12]	; (80009d8 <MX_TIM1_Init+0x12c>)
 80009cc:	f000 fa58 	bl	8000e80 <HAL_TIM_MspPostInit>

}
 80009d0:	bf00      	nop
 80009d2:	3758      	adds	r7, #88	; 0x58
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000028 	.word	0x20000028
 80009dc:	40012c00 	.word	0x40012c00

080009e0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	; 0x30
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	2224      	movs	r2, #36	; 0x24
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f004 fe4a 	bl	8005688 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f4:	463b      	mov	r3, r7
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009fe:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <MX_TIM2_Init+0xa4>)
 8000a00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <MX_TIM2_Init+0xa4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <MX_TIM2_Init+0xa4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <MX_TIM2_Init+0xa4>)
 8000a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <MX_TIM2_Init+0xa4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_TIM2_Init+0xa4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a26:	2303      	movs	r3, #3
 8000a28:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000a36:	230f      	movs	r3, #15
 8000a38:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000a46:	230f      	movs	r3, #15
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480c      	ldr	r0, [pc, #48]	; (8000a84 <MX_TIM2_Init+0xa4>)
 8000a52:	f002 fdcb 	bl	80035ec <HAL_TIM_Encoder_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000a5c:	f7ff fe76 	bl	800074c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a60:	2300      	movs	r3, #0
 8000a62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a68:	463b      	mov	r3, r7
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_TIM2_Init+0xa4>)
 8000a6e:	f003 fc5f 	bl	8004330 <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000a78:	f7ff fe68 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	3730      	adds	r7, #48	; 0x30
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000074 	.word	0x20000074

08000a88 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08c      	sub	sp, #48	; 0x30
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a8e:	f107 030c 	add.w	r3, r7, #12
 8000a92:	2224      	movs	r2, #36	; 0x24
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f004 fdf6 	bl	8005688 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000aa6:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <MX_TIM4_Init+0xa4>)
 8000aa8:	4a21      	ldr	r2, [pc, #132]	; (8000b30 <MX_TIM4_Init+0xa8>)
 8000aaa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <MX_TIM4_Init+0xa4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <MX_TIM4_Init+0xa4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <MX_TIM4_Init+0xa4>)
 8000aba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000abe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <MX_TIM4_Init+0xa4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <MX_TIM4_Init+0xa4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000acc:	2303      	movs	r3, #3
 8000ace:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000adc:	230f      	movs	r3, #15
 8000ade:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000aec:	230f      	movs	r3, #15
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	4619      	mov	r1, r3
 8000af6:	480d      	ldr	r0, [pc, #52]	; (8000b2c <MX_TIM4_Init+0xa4>)
 8000af8:	f002 fd78 	bl	80035ec <HAL_TIM_Encoder_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000b02:	f7ff fe23 	bl	800074c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b0e:	463b      	mov	r3, r7
 8000b10:	4619      	mov	r1, r3
 8000b12:	4806      	ldr	r0, [pc, #24]	; (8000b2c <MX_TIM4_Init+0xa4>)
 8000b14:	f003 fc0c 	bl	8004330 <HAL_TIMEx_MasterConfigSynchronization>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000b1e:	f7ff fe15 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	3730      	adds	r7, #48	; 0x30
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200000c0 	.word	0x200000c0
 8000b30:	40000800 	.word	0x40000800

08000b34 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <MX_TIM6_Init+0x68>)
 8000b46:	4a16      	ldr	r2, [pc, #88]	; (8000ba0 <MX_TIM6_Init+0x6c>)
 8000b48:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_TIM6_Init+0x68>)
 8000b4c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b50:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <MX_TIM6_Init+0x68>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000b58:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <MX_TIM6_Init+0x68>)
 8000b5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b5e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b60:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_TIM6_Init+0x68>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b66:	480d      	ldr	r0, [pc, #52]	; (8000b9c <MX_TIM6_Init+0x68>)
 8000b68:	f002 fb8c 	bl	8003284 <HAL_TIM_Base_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000b72:	f7ff fdeb 	bl	800074c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	4806      	ldr	r0, [pc, #24]	; (8000b9c <MX_TIM6_Init+0x68>)
 8000b84:	f003 fbd4 	bl	8004330 <HAL_TIMEx_MasterConfigSynchronization>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000b8e:	f7ff fddd 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2000010c 	.word	0x2000010c
 8000ba0:	40001000 	.word	0x40001000

08000ba4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b096      	sub	sp, #88	; 0x58
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000baa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]
 8000bc6:	615a      	str	r2, [r3, #20]
 8000bc8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	222c      	movs	r2, #44	; 0x2c
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f004 fd59 	bl	8005688 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000bd6:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <MX_TIM15_Init+0x100>)
 8000bd8:	4a33      	ldr	r2, [pc, #204]	; (8000ca8 <MX_TIM15_Init+0x104>)
 8000bda:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 79;
 8000bdc:	4b31      	ldr	r3, [pc, #196]	; (8000ca4 <MX_TIM15_Init+0x100>)
 8000bde:	224f      	movs	r2, #79	; 0x4f
 8000be0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be2:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <MX_TIM15_Init+0x100>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8000be8:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <MX_TIM15_Init+0x100>)
 8000bea:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000bee:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf0:	4b2c      	ldr	r3, [pc, #176]	; (8000ca4 <MX_TIM15_Init+0x100>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000bf6:	4b2b      	ldr	r3, [pc, #172]	; (8000ca4 <MX_TIM15_Init+0x100>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bfc:	4b29      	ldr	r3, [pc, #164]	; (8000ca4 <MX_TIM15_Init+0x100>)
 8000bfe:	2280      	movs	r2, #128	; 0x80
 8000c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000c02:	4828      	ldr	r0, [pc, #160]	; (8000ca4 <MX_TIM15_Init+0x100>)
 8000c04:	f002 fb95 	bl	8003332 <HAL_TIM_PWM_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000c0e:	f7ff fd9d 	bl	800074c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000c1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4820      	ldr	r0, [pc, #128]	; (8000ca4 <MX_TIM15_Init+0x100>)
 8000c22:	f003 fb85 	bl	8004330 <HAL_TIMEx_MasterConfigSynchronization>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000c2c:	f7ff fd8e 	bl	800074c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c30:	2360      	movs	r3, #96	; 0x60
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c44:	2300      	movs	r3, #0
 8000c46:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c50:	2200      	movs	r2, #0
 8000c52:	4619      	mov	r1, r3
 8000c54:	4813      	ldr	r0, [pc, #76]	; (8000ca4 <MX_TIM15_Init+0x100>)
 8000c56:	f002 fe8f 	bl	8003978 <HAL_TIM_PWM_ConfigChannel>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000c60:	f7ff fd74 	bl	800074c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	4619      	mov	r1, r3
 8000c86:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <MX_TIM15_Init+0x100>)
 8000c88:	f003 fbda 	bl	8004440 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8000c92:	f7ff fd5b 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000c96:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <MX_TIM15_Init+0x100>)
 8000c98:	f000 f8f2 	bl	8000e80 <HAL_TIM_MspPostInit>

}
 8000c9c:	bf00      	nop
 8000c9e:	3758      	adds	r7, #88	; 0x58
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000158 	.word	0x20000158
 8000ca8:	40014000 	.word	0x40014000

08000cac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a1a      	ldr	r2, [pc, #104]	; (8000d24 <HAL_TIM_PWM_MspInit+0x78>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d114      	bne.n	8000ce8 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <HAL_TIM_PWM_MspInit+0x7c>)
 8000cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc2:	4a19      	ldr	r2, [pc, #100]	; (8000d28 <HAL_TIM_PWM_MspInit+0x7c>)
 8000cc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cc8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cca:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <HAL_TIM_PWM_MspInit+0x7c>)
 8000ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2018      	movs	r0, #24
 8000cdc:	f000 fbe5 	bl	80014aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000ce0:	2018      	movs	r0, #24
 8000ce2:	f000 fbfe 	bl	80014e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8000ce6:	e018      	b.n	8000d1a <HAL_TIM_PWM_MspInit+0x6e>
  else if(tim_pwmHandle->Instance==TIM15)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <HAL_TIM_PWM_MspInit+0x80>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d113      	bne.n	8000d1a <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <HAL_TIM_PWM_MspInit+0x7c>)
 8000cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf6:	4a0c      	ldr	r2, [pc, #48]	; (8000d28 <HAL_TIM_PWM_MspInit+0x7c>)
 8000cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cfc:	6613      	str	r3, [r2, #96]	; 0x60
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_TIM_PWM_MspInit+0x7c>)
 8000d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2018      	movs	r0, #24
 8000d10:	f000 fbcb 	bl	80014aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000d14:	2018      	movs	r0, #24
 8000d16:	f000 fbe4 	bl	80014e2 <HAL_NVIC_EnableIRQ>
}
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40012c00 	.word	0x40012c00
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40014000 	.word	0x40014000

08000d30 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08c      	sub	sp, #48	; 0x30
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d50:	d131      	bne.n	8000db6 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d52:	4b35      	ldr	r3, [pc, #212]	; (8000e28 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d56:	4a34      	ldr	r2, [pc, #208]	; (8000e28 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d5e:	4b32      	ldr	r3, [pc, #200]	; (8000e28 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	61bb      	str	r3, [r7, #24]
 8000d68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	4a2e      	ldr	r2, [pc, #184]	; (8000e28 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d76:	4b2c      	ldr	r3, [pc, #176]	; (8000e28 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC2_A2_Pin|ENC2_B2_Pin;
 8000d82:	2303      	movs	r3, #3
 8000d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d92:	2301      	movs	r3, #1
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da0:	f000 fda0 	bl	80018e4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	201c      	movs	r0, #28
 8000daa:	f000 fb7e 	bl	80014aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dae:	201c      	movs	r0, #28
 8000db0:	f000 fb97 	bl	80014e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000db4:	e034      	b.n	8000e20 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(tim_encoderHandle->Instance==TIM4)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a1c      	ldr	r2, [pc, #112]	; (8000e2c <HAL_TIM_Encoder_MspInit+0xfc>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d12f      	bne.n	8000e20 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dc0:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc4:	4a18      	ldr	r2, [pc, #96]	; (8000e28 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000dc6:	f043 0304 	orr.w	r3, r3, #4
 8000dca:	6593      	str	r3, [r2, #88]	; 0x58
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ddc:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000dde:	f043 0302 	orr.w	r3, r3, #2
 8000de2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de4:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC1_B1_Pin|ENC1_A1_Pin;
 8000df0:	23c0      	movs	r3, #192	; 0xc0
 8000df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e00:	2302      	movs	r3, #2
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4809      	ldr	r0, [pc, #36]	; (8000e30 <HAL_TIM_Encoder_MspInit+0x100>)
 8000e0c:	f000 fd6a 	bl	80018e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2100      	movs	r1, #0
 8000e14:	201e      	movs	r0, #30
 8000e16:	f000 fb48 	bl	80014aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e1a:	201e      	movs	r0, #30
 8000e1c:	f000 fb61 	bl	80014e2 <HAL_NVIC_EnableIRQ>
}
 8000e20:	bf00      	nop
 8000e22:	3730      	adds	r7, #48	; 0x30
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40000800 	.word	0x40000800
 8000e30:	48000400 	.word	0x48000400

08000e34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0d      	ldr	r2, [pc, #52]	; (8000e78 <HAL_TIM_Base_MspInit+0x44>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d113      	bne.n	8000e6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e46:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <HAL_TIM_Base_MspInit+0x48>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4a:	4a0c      	ldr	r2, [pc, #48]	; (8000e7c <HAL_TIM_Base_MspInit+0x48>)
 8000e4c:	f043 0310 	orr.w	r3, r3, #16
 8000e50:	6593      	str	r3, [r2, #88]	; 0x58
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <HAL_TIM_Base_MspInit+0x48>)
 8000e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e56:	f003 0310 	and.w	r3, r3, #16
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2100      	movs	r1, #0
 8000e62:	2036      	movs	r0, #54	; 0x36
 8000e64:	f000 fb21 	bl	80014aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e68:	2036      	movs	r0, #54	; 0x36
 8000e6a:	f000 fb3a 	bl	80014e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40001000 	.word	0x40001000
 8000e7c:	40021000 	.word	0x40021000

08000e80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	; 0x28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a23      	ldr	r2, [pc, #140]	; (8000f2c <HAL_TIM_MspPostInit+0xac>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d11d      	bne.n	8000ede <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ea2:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <HAL_TIM_MspPostInit+0xb0>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	4a22      	ldr	r2, [pc, #136]	; (8000f30 <HAL_TIM_MspPostInit+0xb0>)
 8000ea8:	f043 0310 	orr.w	r3, r3, #16
 8000eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eae:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <HAL_TIM_MspPostInit+0xb0>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	f003 0310 	and.w	r3, r3, #16
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8000eba:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4817      	ldr	r0, [pc, #92]	; (8000f34 <HAL_TIM_MspPostInit+0xb4>)
 8000ed8:	f000 fd04 	bl	80018e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000edc:	e021      	b.n	8000f22 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM15)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a15      	ldr	r2, [pc, #84]	; (8000f38 <HAL_TIM_MspPostInit+0xb8>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d11c      	bne.n	8000f22 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_TIM_MspPostInit+0xb0>)
 8000eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eec:	4a10      	ldr	r2, [pc, #64]	; (8000f30 <HAL_TIM_MspPostInit+0xb0>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_TIM_MspPostInit+0xb0>)
 8000ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8000f00:	2304      	movs	r3, #4
 8000f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000f10:	230e      	movs	r3, #14
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1e:	f000 fce1 	bl	80018e4 <HAL_GPIO_Init>
}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	; 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40012c00 	.word	0x40012c00
 8000f30:	40021000 	.word	0x40021000
 8000f34:	48001000 	.word	0x48001000
 8000f38:	40014000 	.word	0x40014000

08000f3c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f42:	4a15      	ldr	r2, [pc, #84]	; (8000f98 <MX_USART2_UART_Init+0x5c>)
 8000f44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f62:	220c      	movs	r2, #12
 8000f64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f80:	f003 fafa 	bl	8004578 <HAL_UART_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f8a:	f7ff fbdf 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200001a4 	.word	0x200001a4
 8000f98:	40004400 	.word	0x40004400

08000f9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0ac      	sub	sp, #176	; 0xb0
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2288      	movs	r2, #136	; 0x88
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f004 fb63 	bl	8005688 <memset>
  if(uartHandle->Instance==USART2)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a5f      	ldr	r2, [pc, #380]	; (8001144 <HAL_UART_MspInit+0x1a8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	f040 80b7 	bne.w	800113c <HAL_UART_MspInit+0x1a0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f001 fc96 	bl	800290c <HAL_RCCEx_PeriphCLKConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fe6:	f7ff fbb1 	bl	800074c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fea:	4b57      	ldr	r3, [pc, #348]	; (8001148 <HAL_UART_MspInit+0x1ac>)
 8000fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fee:	4a56      	ldr	r2, [pc, #344]	; (8001148 <HAL_UART_MspInit+0x1ac>)
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ff6:	4b54      	ldr	r3, [pc, #336]	; (8001148 <HAL_UART_MspInit+0x1ac>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	4b51      	ldr	r3, [pc, #324]	; (8001148 <HAL_UART_MspInit+0x1ac>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	4a50      	ldr	r2, [pc, #320]	; (8001148 <HAL_UART_MspInit+0x1ac>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100e:	4b4e      	ldr	r3, [pc, #312]	; (8001148 <HAL_UART_MspInit+0x1ac>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800101a:	4b4b      	ldr	r3, [pc, #300]	; (8001148 <HAL_UART_MspInit+0x1ac>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	4a4a      	ldr	r2, [pc, #296]	; (8001148 <HAL_UART_MspInit+0x1ac>)
 8001020:	f043 0308 	orr.w	r3, r3, #8
 8001024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001026:	4b48      	ldr	r3, [pc, #288]	; (8001148 <HAL_UART_MspInit+0x1ac>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	f003 0308 	and.w	r3, r3, #8
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001032:	2308      	movs	r3, #8
 8001034:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800104a:	2307      	movs	r3, #7
 800104c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001054:	4619      	mov	r1, r3
 8001056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105a:	f000 fc43 	bl	80018e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800105e:	2320      	movs	r3, #32
 8001060:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001076:	2307      	movs	r3, #7
 8001078:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800107c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001080:	4619      	mov	r1, r3
 8001082:	4832      	ldr	r0, [pc, #200]	; (800114c <HAL_UART_MspInit+0x1b0>)
 8001084:	f000 fc2e 	bl	80018e4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001088:	4b31      	ldr	r3, [pc, #196]	; (8001150 <HAL_UART_MspInit+0x1b4>)
 800108a:	4a32      	ldr	r2, [pc, #200]	; (8001154 <HAL_UART_MspInit+0x1b8>)
 800108c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800108e:	4b30      	ldr	r3, [pc, #192]	; (8001150 <HAL_UART_MspInit+0x1b4>)
 8001090:	2202      	movs	r2, #2
 8001092:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001094:	4b2e      	ldr	r3, [pc, #184]	; (8001150 <HAL_UART_MspInit+0x1b4>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800109a:	4b2d      	ldr	r3, [pc, #180]	; (8001150 <HAL_UART_MspInit+0x1b4>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010a0:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <HAL_UART_MspInit+0x1b4>)
 80010a2:	2280      	movs	r2, #128	; 0x80
 80010a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010a6:	4b2a      	ldr	r3, [pc, #168]	; (8001150 <HAL_UART_MspInit+0x1b4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010ac:	4b28      	ldr	r3, [pc, #160]	; (8001150 <HAL_UART_MspInit+0x1b4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80010b2:	4b27      	ldr	r3, [pc, #156]	; (8001150 <HAL_UART_MspInit+0x1b4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010b8:	4b25      	ldr	r3, [pc, #148]	; (8001150 <HAL_UART_MspInit+0x1b4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80010be:	4824      	ldr	r0, [pc, #144]	; (8001150 <HAL_UART_MspInit+0x1b4>)
 80010c0:	f000 fa2a 	bl	8001518 <HAL_DMA_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 80010ca:	f7ff fb3f 	bl	800074c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a1f      	ldr	r2, [pc, #124]	; (8001150 <HAL_UART_MspInit+0x1b4>)
 80010d2:	671a      	str	r2, [r3, #112]	; 0x70
 80010d4:	4a1e      	ldr	r2, [pc, #120]	; (8001150 <HAL_UART_MspInit+0x1b4>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80010da:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <HAL_UART_MspInit+0x1bc>)
 80010dc:	4a1f      	ldr	r2, [pc, #124]	; (800115c <HAL_UART_MspInit+0x1c0>)
 80010de:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <HAL_UART_MspInit+0x1bc>)
 80010e2:	2202      	movs	r2, #2
 80010e4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010e6:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <HAL_UART_MspInit+0x1bc>)
 80010e8:	2210      	movs	r2, #16
 80010ea:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <HAL_UART_MspInit+0x1bc>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010f2:	4b19      	ldr	r3, [pc, #100]	; (8001158 <HAL_UART_MspInit+0x1bc>)
 80010f4:	2280      	movs	r2, #128	; 0x80
 80010f6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010f8:	4b17      	ldr	r3, [pc, #92]	; (8001158 <HAL_UART_MspInit+0x1bc>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010fe:	4b16      	ldr	r3, [pc, #88]	; (8001158 <HAL_UART_MspInit+0x1bc>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <HAL_UART_MspInit+0x1bc>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <HAL_UART_MspInit+0x1bc>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001110:	4811      	ldr	r0, [pc, #68]	; (8001158 <HAL_UART_MspInit+0x1bc>)
 8001112:	f000 fa01 	bl	8001518 <HAL_DMA_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_UART_MspInit+0x184>
    {
      Error_Handler();
 800111c:	f7ff fb16 	bl	800074c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <HAL_UART_MspInit+0x1bc>)
 8001124:	66da      	str	r2, [r3, #108]	; 0x6c
 8001126:	4a0c      	ldr	r2, [pc, #48]	; (8001158 <HAL_UART_MspInit+0x1bc>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800112c:	2200      	movs	r2, #0
 800112e:	2100      	movs	r1, #0
 8001130:	2026      	movs	r0, #38	; 0x26
 8001132:	f000 f9ba 	bl	80014aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001136:	2026      	movs	r0, #38	; 0x26
 8001138:	f000 f9d3 	bl	80014e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800113c:	bf00      	nop
 800113e:	37b0      	adds	r7, #176	; 0xb0
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40004400 	.word	0x40004400
 8001148:	40021000 	.word	0x40021000
 800114c:	48000c00 	.word	0x48000c00
 8001150:	20000228 	.word	0x20000228
 8001154:	4002006c 	.word	0x4002006c
 8001158:	20000270 	.word	0x20000270
 800115c:	40020080 	.word	0x40020080

08001160 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001160:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001198 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001164:	f7ff fb90 	bl	8000888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001168:	480c      	ldr	r0, [pc, #48]	; (800119c <LoopForever+0x6>)
  ldr r1, =_edata
 800116a:	490d      	ldr	r1, [pc, #52]	; (80011a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800116c:	4a0d      	ldr	r2, [pc, #52]	; (80011a4 <LoopForever+0xe>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001170:	e002      	b.n	8001178 <LoopCopyDataInit>

08001172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001176:	3304      	adds	r3, #4

08001178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800117c:	d3f9      	bcc.n	8001172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001180:	4c0a      	ldr	r4, [pc, #40]	; (80011ac <LoopForever+0x16>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001184:	e001      	b.n	800118a <LoopFillZerobss>

08001186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001188:	3204      	adds	r2, #4

0800118a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800118c:	d3fb      	bcc.n	8001186 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800118e:	f004 fa57 	bl	8005640 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001192:	f7ff fa25 	bl	80005e0 <main>

08001196 <LoopForever>:

LoopForever:
    b LoopForever
 8001196:	e7fe      	b.n	8001196 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001198:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011a4:	08005708 	.word	0x08005708
  ldr r2, =_sbss
 80011a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011ac:	200002bc 	.word	0x200002bc

080011b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC1_2_IRQHandler>
	...

080011b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <HAL_Init+0x3c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <HAL_Init+0x3c>)
 80011c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ca:	2003      	movs	r0, #3
 80011cc:	f000 f962 	bl	8001494 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011d0:	2000      	movs	r0, #0
 80011d2:	f000 f80f 	bl	80011f4 <HAL_InitTick>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	71fb      	strb	r3, [r7, #7]
 80011e0:	e001      	b.n	80011e6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011e2:	f7ff fab9 	bl	8000758 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011e6:	79fb      	ldrb	r3, [r7, #7]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40022000 	.word	0x40022000

080011f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_InitTick+0x6c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d023      	beq.n	8001250 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <HAL_InitTick+0x70>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <HAL_InitTick+0x6c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001216:	fbb3 f3f1 	udiv	r3, r3, r1
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f96d 	bl	80014fe <HAL_SYSTICK_Config>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10f      	bne.n	800124a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b0f      	cmp	r3, #15
 800122e:	d809      	bhi.n	8001244 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001230:	2200      	movs	r2, #0
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001238:	f000 f937 	bl	80014aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800123c:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <HAL_InitTick+0x74>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e007      	b.n	8001254 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	e004      	b.n	8001254 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	73fb      	strb	r3, [r7, #15]
 800124e:	e001      	b.n	8001254 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001254:	7bfb      	ldrb	r3, [r7, #15]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000008 	.word	0x20000008
 8001264:	20000000 	.word	0x20000000
 8001268:	20000004 	.word	0x20000004

0800126c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_IncTick+0x20>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_IncTick+0x24>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4413      	add	r3, r2
 800127c:	4a04      	ldr	r2, [pc, #16]	; (8001290 <HAL_IncTick+0x24>)
 800127e:	6013      	str	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000008 	.word	0x20000008
 8001290:	200002b8 	.word	0x200002b8

08001294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return uwTick;
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <HAL_GetTick+0x14>)
 800129a:	681b      	ldr	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	200002b8 	.word	0x200002b8

080012ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b4:	f7ff ffee 	bl	8001294 <HAL_GetTick>
 80012b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012c4:	d005      	beq.n	80012d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <HAL_Delay+0x44>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4413      	add	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012d2:	bf00      	nop
 80012d4:	f7ff ffde 	bl	8001294 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d8f7      	bhi.n	80012d4 <HAL_Delay+0x28>
  {
  }
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000008 	.word	0x20000008

080012f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001310:	4013      	ands	r3, r2
 8001312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800131c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001326:	4a04      	ldr	r2, [pc, #16]	; (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	60d3      	str	r3, [r2, #12]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <__NVIC_GetPriorityGrouping+0x18>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	f003 0307 	and.w	r3, r3, #7
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	2b00      	cmp	r3, #0
 8001368:	db0b      	blt.n	8001382 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	f003 021f 	and.w	r2, r3, #31
 8001370:	4907      	ldr	r1, [pc, #28]	; (8001390 <__NVIC_EnableIRQ+0x38>)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	095b      	lsrs	r3, r3, #5
 8001378:	2001      	movs	r0, #1
 800137a:	fa00 f202 	lsl.w	r2, r0, r2
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000e100 	.word	0xe000e100

08001394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	6039      	str	r1, [r7, #0]
 800139e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	db0a      	blt.n	80013be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	490c      	ldr	r1, [pc, #48]	; (80013e0 <__NVIC_SetPriority+0x4c>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	0112      	lsls	r2, r2, #4
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	440b      	add	r3, r1
 80013b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013bc:	e00a      	b.n	80013d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4908      	ldr	r1, [pc, #32]	; (80013e4 <__NVIC_SetPriority+0x50>)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	3b04      	subs	r3, #4
 80013cc:	0112      	lsls	r2, r2, #4
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	440b      	add	r3, r1
 80013d2:	761a      	strb	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000e100 	.word	0xe000e100
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	; 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f1c3 0307 	rsb	r3, r3, #7
 8001402:	2b04      	cmp	r3, #4
 8001404:	bf28      	it	cs
 8001406:	2304      	movcs	r3, #4
 8001408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3304      	adds	r3, #4
 800140e:	2b06      	cmp	r3, #6
 8001410:	d902      	bls.n	8001418 <NVIC_EncodePriority+0x30>
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3b03      	subs	r3, #3
 8001416:	e000      	b.n	800141a <NVIC_EncodePriority+0x32>
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	401a      	ands	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001430:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	43d9      	mvns	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	4313      	orrs	r3, r2
         );
}
 8001442:	4618      	mov	r0, r3
 8001444:	3724      	adds	r7, #36	; 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
	...

08001450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001460:	d301      	bcc.n	8001466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001462:	2301      	movs	r3, #1
 8001464:	e00f      	b.n	8001486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <SysTick_Config+0x40>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146e:	210f      	movs	r1, #15
 8001470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001474:	f7ff ff8e 	bl	8001394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <SysTick_Config+0x40>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147e:	4b04      	ldr	r3, [pc, #16]	; (8001490 <SysTick_Config+0x40>)
 8001480:	2207      	movs	r2, #7
 8001482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	e000e010 	.word	0xe000e010

08001494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff ff29 	bl	80012f4 <__NVIC_SetPriorityGrouping>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
 80014b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014bc:	f7ff ff3e 	bl	800133c <__NVIC_GetPriorityGrouping>
 80014c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	6978      	ldr	r0, [r7, #20]
 80014c8:	f7ff ff8e 	bl	80013e8 <NVIC_EncodePriority>
 80014cc:	4602      	mov	r2, r0
 80014ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff5d 	bl	8001394 <__NVIC_SetPriority>
}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff31 	bl	8001358 <__NVIC_EnableIRQ>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ffa2 	bl	8001450 <SysTick_Config>
 800150c:	4603      	mov	r3, r0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e098      	b.n	800165c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	4b4d      	ldr	r3, [pc, #308]	; (8001668 <HAL_DMA_Init+0x150>)
 8001532:	429a      	cmp	r2, r3
 8001534:	d80f      	bhi.n	8001556 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	4b4b      	ldr	r3, [pc, #300]	; (800166c <HAL_DMA_Init+0x154>)
 800153e:	4413      	add	r3, r2
 8001540:	4a4b      	ldr	r2, [pc, #300]	; (8001670 <HAL_DMA_Init+0x158>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	091b      	lsrs	r3, r3, #4
 8001548:	009a      	lsls	r2, r3, #2
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a48      	ldr	r2, [pc, #288]	; (8001674 <HAL_DMA_Init+0x15c>)
 8001552:	641a      	str	r2, [r3, #64]	; 0x40
 8001554:	e00e      	b.n	8001574 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	4b46      	ldr	r3, [pc, #280]	; (8001678 <HAL_DMA_Init+0x160>)
 800155e:	4413      	add	r3, r2
 8001560:	4a43      	ldr	r2, [pc, #268]	; (8001670 <HAL_DMA_Init+0x158>)
 8001562:	fba2 2303 	umull	r2, r3, r2, r3
 8001566:	091b      	lsrs	r3, r3, #4
 8001568:	009a      	lsls	r2, r3, #2
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a42      	ldr	r2, [pc, #264]	; (800167c <HAL_DMA_Init+0x164>)
 8001572:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2202      	movs	r2, #2
 8001578:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800158a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800158e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001598:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015ce:	d039      	beq.n	8001644 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	4a27      	ldr	r2, [pc, #156]	; (8001674 <HAL_DMA_Init+0x15c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d11a      	bne.n	8001610 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80015da:	4b29      	ldr	r3, [pc, #164]	; (8001680 <HAL_DMA_Init+0x168>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	f003 031c 	and.w	r3, r3, #28
 80015e6:	210f      	movs	r1, #15
 80015e8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	4924      	ldr	r1, [pc, #144]	; (8001680 <HAL_DMA_Init+0x168>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80015f4:	4b22      	ldr	r3, [pc, #136]	; (8001680 <HAL_DMA_Init+0x168>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6859      	ldr	r1, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001600:	f003 031c 	and.w	r3, r3, #28
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	491d      	ldr	r1, [pc, #116]	; (8001680 <HAL_DMA_Init+0x168>)
 800160a:	4313      	orrs	r3, r2
 800160c:	600b      	str	r3, [r1, #0]
 800160e:	e019      	b.n	8001644 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001610:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <HAL_DMA_Init+0x16c>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001618:	f003 031c 	and.w	r3, r3, #28
 800161c:	210f      	movs	r1, #15
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	4917      	ldr	r1, [pc, #92]	; (8001684 <HAL_DMA_Init+0x16c>)
 8001626:	4013      	ands	r3, r2
 8001628:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <HAL_DMA_Init+0x16c>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6859      	ldr	r1, [r3, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f003 031c 	and.w	r3, r3, #28
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	4911      	ldr	r1, [pc, #68]	; (8001684 <HAL_DMA_Init+0x16c>)
 8001640:	4313      	orrs	r3, r2
 8001642:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	40020407 	.word	0x40020407
 800166c:	bffdfff8 	.word	0xbffdfff8
 8001670:	cccccccd 	.word	0xcccccccd
 8001674:	40020000 	.word	0x40020000
 8001678:	bffdfbf8 	.word	0xbffdfbf8
 800167c:	40020400 	.word	0x40020400
 8001680:	400200a8 	.word	0x400200a8
 8001684:	400204a8 	.word	0x400204a8

08001688 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d008      	beq.n	80016b2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2204      	movs	r2, #4
 80016a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e022      	b.n	80016f8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 020e 	bic.w	r2, r2, #14
 80016c0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0201 	bic.w	r2, r2, #1
 80016d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	f003 021c 	and.w	r2, r3, #28
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	2101      	movs	r1, #1
 80016e0:	fa01 f202 	lsl.w	r2, r1, r2
 80016e4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d005      	beq.n	8001728 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2204      	movs	r2, #4
 8001720:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	73fb      	strb	r3, [r7, #15]
 8001726:	e029      	b.n	800177c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 020e 	bic.w	r2, r2, #14
 8001736:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0201 	bic.w	r2, r2, #1
 8001746:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174c:	f003 021c 	and.w	r2, r3, #28
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	2101      	movs	r1, #1
 8001756:	fa01 f202 	lsl.w	r2, r1, r2
 800175a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	4798      	blx	r3
    }
  }
  return status;
 800177c:	7bfb      	ldrb	r3, [r7, #15]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b084      	sub	sp, #16
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	f003 031c 	and.w	r3, r3, #28
 80017a6:	2204      	movs	r2, #4
 80017a8:	409a      	lsls	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d026      	beq.n	8001800 <HAL_DMA_IRQHandler+0x7a>
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d021      	beq.n	8001800 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0320 	and.w	r3, r3, #32
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d107      	bne.n	80017da <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 0204 	bic.w	r2, r2, #4
 80017d8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	f003 021c 	and.w	r2, r3, #28
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	2104      	movs	r1, #4
 80017e8:	fa01 f202 	lsl.w	r2, r1, r2
 80017ec:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d071      	beq.n	80018da <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80017fe:	e06c      	b.n	80018da <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001804:	f003 031c 	and.w	r3, r3, #28
 8001808:	2202      	movs	r2, #2
 800180a:	409a      	lsls	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4013      	ands	r3, r2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d02e      	beq.n	8001872 <HAL_DMA_IRQHandler+0xec>
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d029      	beq.n	8001872 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0320 	and.w	r3, r3, #32
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10b      	bne.n	8001844 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 020a 	bic.w	r2, r2, #10
 800183a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001848:	f003 021c 	and.w	r2, r3, #28
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	2102      	movs	r1, #2
 8001852:	fa01 f202 	lsl.w	r2, r1, r2
 8001856:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	2b00      	cmp	r3, #0
 8001866:	d038      	beq.n	80018da <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001870:	e033      	b.n	80018da <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	f003 031c 	and.w	r3, r3, #28
 800187a:	2208      	movs	r2, #8
 800187c:	409a      	lsls	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4013      	ands	r3, r2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d02a      	beq.n	80018dc <HAL_DMA_IRQHandler+0x156>
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	2b00      	cmp	r3, #0
 800188e:	d025      	beq.n	80018dc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 020e 	bic.w	r2, r2, #14
 800189e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a4:	f003 021c 	and.w	r2, r3, #28
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	2101      	movs	r1, #1
 80018ae:	fa01 f202 	lsl.w	r2, r1, r2
 80018b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d004      	beq.n	80018dc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018da:	bf00      	nop
 80018dc:	bf00      	nop
}
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b087      	sub	sp, #28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f2:	e17f      	b.n	8001bf4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	2101      	movs	r1, #1
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001900:	4013      	ands	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 8171 	beq.w	8001bee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	2b01      	cmp	r3, #1
 8001916:	d005      	beq.n	8001924 <HAL_GPIO_Init+0x40>
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d130      	bne.n	8001986 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800195a:	2201      	movs	r2, #1
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	091b      	lsrs	r3, r3, #4
 8001970:	f003 0201 	and.w	r2, r3, #1
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	2b03      	cmp	r3, #3
 8001990:	d118      	bne.n	80019c4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001998:	2201      	movs	r2, #1
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	08db      	lsrs	r3, r3, #3
 80019ae:	f003 0201 	and.w	r2, r3, #1
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d017      	beq.n	8001a00 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	2203      	movs	r2, #3
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d123      	bne.n	8001a54 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	08da      	lsrs	r2, r3, #3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3208      	adds	r2, #8
 8001a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a18:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	220f      	movs	r2, #15
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	08da      	lsrs	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3208      	adds	r2, #8
 8001a4e:	6939      	ldr	r1, [r7, #16]
 8001a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	2203      	movs	r2, #3
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0203 	and.w	r2, r3, #3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 80ac 	beq.w	8001bee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	4b5f      	ldr	r3, [pc, #380]	; (8001c14 <HAL_GPIO_Init+0x330>)
 8001a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9a:	4a5e      	ldr	r2, [pc, #376]	; (8001c14 <HAL_GPIO_Init+0x330>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6613      	str	r3, [r2, #96]	; 0x60
 8001aa2:	4b5c      	ldr	r3, [pc, #368]	; (8001c14 <HAL_GPIO_Init+0x330>)
 8001aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001aae:	4a5a      	ldr	r2, [pc, #360]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	220f      	movs	r2, #15
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ad8:	d025      	beq.n	8001b26 <HAL_GPIO_Init+0x242>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4f      	ldr	r2, [pc, #316]	; (8001c1c <HAL_GPIO_Init+0x338>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d01f      	beq.n	8001b22 <HAL_GPIO_Init+0x23e>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4e      	ldr	r2, [pc, #312]	; (8001c20 <HAL_GPIO_Init+0x33c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d019      	beq.n	8001b1e <HAL_GPIO_Init+0x23a>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4d      	ldr	r2, [pc, #308]	; (8001c24 <HAL_GPIO_Init+0x340>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d013      	beq.n	8001b1a <HAL_GPIO_Init+0x236>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4c      	ldr	r2, [pc, #304]	; (8001c28 <HAL_GPIO_Init+0x344>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d00d      	beq.n	8001b16 <HAL_GPIO_Init+0x232>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a4b      	ldr	r2, [pc, #300]	; (8001c2c <HAL_GPIO_Init+0x348>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d007      	beq.n	8001b12 <HAL_GPIO_Init+0x22e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a4a      	ldr	r2, [pc, #296]	; (8001c30 <HAL_GPIO_Init+0x34c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d101      	bne.n	8001b0e <HAL_GPIO_Init+0x22a>
 8001b0a:	2306      	movs	r3, #6
 8001b0c:	e00c      	b.n	8001b28 <HAL_GPIO_Init+0x244>
 8001b0e:	2307      	movs	r3, #7
 8001b10:	e00a      	b.n	8001b28 <HAL_GPIO_Init+0x244>
 8001b12:	2305      	movs	r3, #5
 8001b14:	e008      	b.n	8001b28 <HAL_GPIO_Init+0x244>
 8001b16:	2304      	movs	r3, #4
 8001b18:	e006      	b.n	8001b28 <HAL_GPIO_Init+0x244>
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e004      	b.n	8001b28 <HAL_GPIO_Init+0x244>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e002      	b.n	8001b28 <HAL_GPIO_Init+0x244>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <HAL_GPIO_Init+0x244>
 8001b26:	2300      	movs	r3, #0
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	f002 0203 	and.w	r2, r2, #3
 8001b2e:	0092      	lsls	r2, r2, #2
 8001b30:	4093      	lsls	r3, r2
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b38:	4937      	ldr	r1, [pc, #220]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	089b      	lsrs	r3, r3, #2
 8001b3e:	3302      	adds	r3, #2
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b46:	4b3b      	ldr	r3, [pc, #236]	; (8001c34 <HAL_GPIO_Init+0x350>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4013      	ands	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b6a:	4a32      	ldr	r2, [pc, #200]	; (8001c34 <HAL_GPIO_Init+0x350>)
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b70:	4b30      	ldr	r3, [pc, #192]	; (8001c34 <HAL_GPIO_Init+0x350>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b94:	4a27      	ldr	r2, [pc, #156]	; (8001c34 <HAL_GPIO_Init+0x350>)
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b9a:	4b26      	ldr	r3, [pc, #152]	; (8001c34 <HAL_GPIO_Init+0x350>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bbe:	4a1d      	ldr	r2, [pc, #116]	; (8001c34 <HAL_GPIO_Init+0x350>)
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <HAL_GPIO_Init+0x350>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001be8:	4a12      	ldr	r2, [pc, #72]	; (8001c34 <HAL_GPIO_Init+0x350>)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f47f ae78 	bne.w	80018f4 <HAL_GPIO_Init+0x10>
  }
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	371c      	adds	r7, #28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40010000 	.word	0x40010000
 8001c1c:	48000400 	.word	0x48000400
 8001c20:	48000800 	.word	0x48000800
 8001c24:	48000c00 	.word	0x48000c00
 8001c28:	48001000 	.word	0x48001000
 8001c2c:	48001400 	.word	0x48001400
 8001c30:	48001800 	.word	0x48001800
 8001c34:	40010400 	.word	0x40010400

08001c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	807b      	strh	r3, [r7, #2]
 8001c44:	4613      	mov	r3, r2
 8001c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c48:	787b      	ldrb	r3, [r7, #1]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c4e:	887a      	ldrh	r2, [r7, #2]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c54:	e002      	b.n	8001c5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40007000 	.word	0x40007000

08001c84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c92:	d130      	bne.n	8001cf6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c94:	4b23      	ldr	r3, [pc, #140]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ca0:	d038      	beq.n	8001d14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ca2:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001caa:	4a1e      	ldr	r2, [pc, #120]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cb0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cb2:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2232      	movs	r2, #50	; 0x32
 8001cb8:	fb02 f303 	mul.w	r3, r2, r3
 8001cbc:	4a1b      	ldr	r2, [pc, #108]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc2:	0c9b      	lsrs	r3, r3, #18
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cc8:	e002      	b.n	8001cd0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cd0:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cdc:	d102      	bne.n	8001ce4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1f2      	bne.n	8001cca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf0:	d110      	bne.n	8001d14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e00f      	b.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d02:	d007      	beq.n	8001d14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d04:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d0c:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40007000 	.word	0x40007000
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	431bde83 	.word	0x431bde83

08001d30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e3d8      	b.n	80024f4 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d42:	4b97      	ldr	r3, [pc, #604]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d4c:	4b94      	ldr	r3, [pc, #592]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0310 	and.w	r3, r3, #16
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 80e4 	beq.w	8001f2c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d007      	beq.n	8001d7a <HAL_RCC_OscConfig+0x4a>
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	2b0c      	cmp	r3, #12
 8001d6e:	f040 808b 	bne.w	8001e88 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	f040 8087 	bne.w	8001e88 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d7a:	4b89      	ldr	r3, [pc, #548]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d005      	beq.n	8001d92 <HAL_RCC_OscConfig+0x62>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e3b0      	b.n	80024f4 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1a      	ldr	r2, [r3, #32]
 8001d96:	4b82      	ldr	r3, [pc, #520]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d004      	beq.n	8001dac <HAL_RCC_OscConfig+0x7c>
 8001da2:	4b7f      	ldr	r3, [pc, #508]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001daa:	e005      	b.n	8001db8 <HAL_RCC_OscConfig+0x88>
 8001dac:	4b7c      	ldr	r3, [pc, #496]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db2:	091b      	lsrs	r3, r3, #4
 8001db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d223      	bcs.n	8001e04 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 fd43 	bl	800284c <RCC_SetFlashLatencyFromMSIRange>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e391      	b.n	80024f4 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dd0:	4b73      	ldr	r3, [pc, #460]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a72      	ldr	r2, [pc, #456]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	f043 0308 	orr.w	r3, r3, #8
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	4b70      	ldr	r3, [pc, #448]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	496d      	ldr	r1, [pc, #436]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dee:	4b6c      	ldr	r3, [pc, #432]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	021b      	lsls	r3, r3, #8
 8001dfc:	4968      	ldr	r1, [pc, #416]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	604b      	str	r3, [r1, #4]
 8001e02:	e025      	b.n	8001e50 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e04:	4b66      	ldr	r3, [pc, #408]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a65      	ldr	r2, [pc, #404]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001e0a:	f043 0308 	orr.w	r3, r3, #8
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	4b63      	ldr	r3, [pc, #396]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	4960      	ldr	r1, [pc, #384]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e22:	4b5f      	ldr	r3, [pc, #380]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	495b      	ldr	r1, [pc, #364]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d109      	bne.n	8001e50 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 fd03 	bl	800284c <RCC_SetFlashLatencyFromMSIRange>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e351      	b.n	80024f4 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e50:	f000 fc38 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8001e54:	4602      	mov	r2, r0
 8001e56:	4b52      	ldr	r3, [pc, #328]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	091b      	lsrs	r3, r3, #4
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	4950      	ldr	r1, [pc, #320]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001e62:	5ccb      	ldrb	r3, [r1, r3]
 8001e64:	f003 031f 	and.w	r3, r3, #31
 8001e68:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6c:	4a4e      	ldr	r2, [pc, #312]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001e6e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e70:	4b4e      	ldr	r3, [pc, #312]	; (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff f9bd 	bl	80011f4 <HAL_InitTick>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d052      	beq.n	8001f2a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	e335      	b.n	80024f4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d032      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e90:	4b43      	ldr	r3, [pc, #268]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a42      	ldr	r2, [pc, #264]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e9c:	f7ff f9fa 	bl	8001294 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ea4:	f7ff f9f6 	bl	8001294 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e31e      	b.n	80024f4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eb6:	4b3a      	ldr	r3, [pc, #232]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ec2:	4b37      	ldr	r3, [pc, #220]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a36      	ldr	r2, [pc, #216]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001ec8:	f043 0308 	orr.w	r3, r3, #8
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4b34      	ldr	r3, [pc, #208]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	4931      	ldr	r1, [pc, #196]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ee0:	4b2f      	ldr	r3, [pc, #188]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	021b      	lsls	r3, r3, #8
 8001eee:	492c      	ldr	r1, [pc, #176]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
 8001ef4:	e01a      	b.n	8001f2c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ef6:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a29      	ldr	r2, [pc, #164]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001efc:	f023 0301 	bic.w	r3, r3, #1
 8001f00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f02:	f7ff f9c7 	bl	8001294 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f0a:	f7ff f9c3 	bl	8001294 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e2eb      	b.n	80024f4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f1c:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f0      	bne.n	8001f0a <HAL_RCC_OscConfig+0x1da>
 8001f28:	e000      	b.n	8001f2c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f2a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d074      	beq.n	8002022 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d005      	beq.n	8001f4a <HAL_RCC_OscConfig+0x21a>
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	2b0c      	cmp	r3, #12
 8001f42:	d10e      	bne.n	8001f62 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	d10b      	bne.n	8001f62 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d064      	beq.n	8002020 <HAL_RCC_OscConfig+0x2f0>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d160      	bne.n	8002020 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e2c8      	b.n	80024f4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f6a:	d106      	bne.n	8001f7a <HAL_RCC_OscConfig+0x24a>
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0b      	ldr	r2, [pc, #44]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	e026      	b.n	8001fc8 <HAL_RCC_OscConfig+0x298>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f82:	d115      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x280>
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a05      	ldr	r2, [pc, #20]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001f8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a02      	ldr	r2, [pc, #8]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	e014      	b.n	8001fc8 <HAL_RCC_OscConfig+0x298>
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	080056b0 	.word	0x080056b0
 8001fa8:	20000000 	.word	0x20000000
 8001fac:	20000004 	.word	0x20000004
 8001fb0:	4ba0      	ldr	r3, [pc, #640]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a9f      	ldr	r2, [pc, #636]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 8001fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	4b9d      	ldr	r3, [pc, #628]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a9c      	ldr	r2, [pc, #624]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 8001fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d013      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7ff f960 	bl	8001294 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd8:	f7ff f95c 	bl	8001294 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b64      	cmp	r3, #100	; 0x64
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e284      	b.n	80024f4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fea:	4b92      	ldr	r3, [pc, #584]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x2a8>
 8001ff6:	e014      	b.n	8002022 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff8:	f7ff f94c 	bl	8001294 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002000:	f7ff f948 	bl	8001294 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	; 0x64
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e270      	b.n	80024f4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002012:	4b88      	ldr	r3, [pc, #544]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x2d0>
 800201e:	e000      	b.n	8002022 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d060      	beq.n	80020f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	2b04      	cmp	r3, #4
 8002032:	d005      	beq.n	8002040 <HAL_RCC_OscConfig+0x310>
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2b0c      	cmp	r3, #12
 8002038:	d119      	bne.n	800206e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d116      	bne.n	800206e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002040:	4b7c      	ldr	r3, [pc, #496]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_OscConfig+0x328>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e24d      	b.n	80024f4 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002058:	4b76      	ldr	r3, [pc, #472]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	061b      	lsls	r3, r3, #24
 8002066:	4973      	ldr	r1, [pc, #460]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800206c:	e040      	b.n	80020f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d023      	beq.n	80020be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002076:	4b6f      	ldr	r3, [pc, #444]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a6e      	ldr	r2, [pc, #440]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 800207c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002082:	f7ff f907 	bl	8001294 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208a:	f7ff f903 	bl	8001294 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e22b      	b.n	80024f4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800209c:	4b65      	ldr	r3, [pc, #404]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f0      	beq.n	800208a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a8:	4b62      	ldr	r3, [pc, #392]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	061b      	lsls	r3, r3, #24
 80020b6:	495f      	ldr	r1, [pc, #380]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]
 80020bc:	e018      	b.n	80020f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020be:	4b5d      	ldr	r3, [pc, #372]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a5c      	ldr	r2, [pc, #368]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 80020c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ca:	f7ff f8e3 	bl	8001294 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d2:	f7ff f8df 	bl	8001294 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e207      	b.n	80024f4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020e4:	4b53      	ldr	r3, [pc, #332]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f0      	bne.n	80020d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d03c      	beq.n	8002176 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d01c      	beq.n	800213e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002104:	4b4b      	ldr	r3, [pc, #300]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 8002106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800210a:	4a4a      	ldr	r2, [pc, #296]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002114:	f7ff f8be 	bl	8001294 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800211c:	f7ff f8ba 	bl	8001294 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e1e2      	b.n	80024f4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800212e:	4b41      	ldr	r3, [pc, #260]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 8002130:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0ef      	beq.n	800211c <HAL_RCC_OscConfig+0x3ec>
 800213c:	e01b      	b.n	8002176 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800213e:	4b3d      	ldr	r3, [pc, #244]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 8002140:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002144:	4a3b      	ldr	r2, [pc, #236]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 8002146:	f023 0301 	bic.w	r3, r3, #1
 800214a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214e:	f7ff f8a1 	bl	8001294 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002156:	f7ff f89d 	bl	8001294 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e1c5      	b.n	80024f4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002168:	4b32      	ldr	r3, [pc, #200]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 800216a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1ef      	bne.n	8002156 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80a6 	beq.w	80022d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002184:	2300      	movs	r3, #0
 8002186:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002188:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 800218a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10d      	bne.n	80021b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002194:	4b27      	ldr	r3, [pc, #156]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 8002196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002198:	4a26      	ldr	r2, [pc, #152]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 800219a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219e:	6593      	str	r3, [r2, #88]	; 0x58
 80021a0:	4b24      	ldr	r3, [pc, #144]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 80021a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ac:	2301      	movs	r3, #1
 80021ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b0:	4b21      	ldr	r3, [pc, #132]	; (8002238 <HAL_RCC_OscConfig+0x508>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d118      	bne.n	80021ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021bc:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <HAL_RCC_OscConfig+0x508>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <HAL_RCC_OscConfig+0x508>)
 80021c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021c8:	f7ff f864 	bl	8001294 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d0:	f7ff f860 	bl	8001294 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e188      	b.n	80024f4 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <HAL_RCC_OscConfig+0x508>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d108      	bne.n	8002208 <HAL_RCC_OscConfig+0x4d8>
 80021f6:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 80021f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fc:	4a0d      	ldr	r2, [pc, #52]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002206:	e029      	b.n	800225c <HAL_RCC_OscConfig+0x52c>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b05      	cmp	r3, #5
 800220e:	d115      	bne.n	800223c <HAL_RCC_OscConfig+0x50c>
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 8002212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002216:	4a07      	ldr	r2, [pc, #28]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 8002218:	f043 0304 	orr.w	r3, r3, #4
 800221c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002220:	4b04      	ldr	r3, [pc, #16]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 8002222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002226:	4a03      	ldr	r2, [pc, #12]	; (8002234 <HAL_RCC_OscConfig+0x504>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002230:	e014      	b.n	800225c <HAL_RCC_OscConfig+0x52c>
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	40007000 	.word	0x40007000
 800223c:	4b91      	ldr	r3, [pc, #580]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 800223e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002242:	4a90      	ldr	r2, [pc, #576]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 8002244:	f023 0301 	bic.w	r3, r3, #1
 8002248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800224c:	4b8d      	ldr	r3, [pc, #564]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 800224e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002252:	4a8c      	ldr	r2, [pc, #560]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 8002254:	f023 0304 	bic.w	r3, r3, #4
 8002258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d016      	beq.n	8002292 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002264:	f7ff f816 	bl	8001294 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800226a:	e00a      	b.n	8002282 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226c:	f7ff f812 	bl	8001294 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e138      	b.n	80024f4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002282:	4b80      	ldr	r3, [pc, #512]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 8002284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0ed      	beq.n	800226c <HAL_RCC_OscConfig+0x53c>
 8002290:	e015      	b.n	80022be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002292:	f7fe ffff 	bl	8001294 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002298:	e00a      	b.n	80022b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229a:	f7fe fffb 	bl	8001294 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e121      	b.n	80024f4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022b0:	4b74      	ldr	r3, [pc, #464]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 80022b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1ed      	bne.n	800229a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022be:	7ffb      	ldrb	r3, [r7, #31]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d105      	bne.n	80022d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c4:	4b6f      	ldr	r3, [pc, #444]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 80022c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c8:	4a6e      	ldr	r2, [pc, #440]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 80022ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 810c 	beq.w	80024f2 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022de:	2b02      	cmp	r3, #2
 80022e0:	f040 80d4 	bne.w	800248c <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022e4:	4b67      	ldr	r3, [pc, #412]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f003 0203 	and.w	r2, r3, #3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d130      	bne.n	800235a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	3b01      	subs	r3, #1
 8002304:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002306:	429a      	cmp	r2, r3
 8002308:	d127      	bne.n	800235a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002314:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002316:	429a      	cmp	r2, r3
 8002318:	d11f      	bne.n	800235a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002324:	2a07      	cmp	r2, #7
 8002326:	bf14      	ite	ne
 8002328:	2201      	movne	r2, #1
 800232a:	2200      	moveq	r2, #0
 800232c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800232e:	4293      	cmp	r3, r2
 8002330:	d113      	bne.n	800235a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233c:	085b      	lsrs	r3, r3, #1
 800233e:	3b01      	subs	r3, #1
 8002340:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002342:	429a      	cmp	r2, r3
 8002344:	d109      	bne.n	800235a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	085b      	lsrs	r3, r3, #1
 8002352:	3b01      	subs	r3, #1
 8002354:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002356:	429a      	cmp	r2, r3
 8002358:	d06e      	beq.n	8002438 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	2b0c      	cmp	r3, #12
 800235e:	d069      	beq.n	8002434 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002360:	4b48      	ldr	r3, [pc, #288]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d105      	bne.n	8002378 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800236c:	4b45      	ldr	r3, [pc, #276]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0bb      	b.n	80024f4 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800237c:	4b41      	ldr	r3, [pc, #260]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a40      	ldr	r2, [pc, #256]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 8002382:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002386:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002388:	f7fe ff84 	bl	8001294 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002390:	f7fe ff80 	bl	8001294 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e0a8      	b.n	80024f4 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a2:	4b38      	ldr	r3, [pc, #224]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ae:	4b35      	ldr	r3, [pc, #212]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	4b35      	ldr	r3, [pc, #212]	; (8002488 <HAL_RCC_OscConfig+0x758>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023be:	3a01      	subs	r2, #1
 80023c0:	0112      	lsls	r2, r2, #4
 80023c2:	4311      	orrs	r1, r2
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023c8:	0212      	lsls	r2, r2, #8
 80023ca:	4311      	orrs	r1, r2
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023d0:	0852      	lsrs	r2, r2, #1
 80023d2:	3a01      	subs	r2, #1
 80023d4:	0552      	lsls	r2, r2, #21
 80023d6:	4311      	orrs	r1, r2
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023dc:	0852      	lsrs	r2, r2, #1
 80023de:	3a01      	subs	r2, #1
 80023e0:	0652      	lsls	r2, r2, #25
 80023e2:	4311      	orrs	r1, r2
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023e8:	0912      	lsrs	r2, r2, #4
 80023ea:	0452      	lsls	r2, r2, #17
 80023ec:	430a      	orrs	r2, r1
 80023ee:	4925      	ldr	r1, [pc, #148]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023f4:	4b23      	ldr	r3, [pc, #140]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a22      	ldr	r2, [pc, #136]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 80023fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002400:	4b20      	ldr	r3, [pc, #128]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	4a1f      	ldr	r2, [pc, #124]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 8002406:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800240a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800240c:	f7fe ff42 	bl	8001294 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002414:	f7fe ff3e 	bl	8001294 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e066      	b.n	80024f4 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002426:	4b17      	ldr	r3, [pc, #92]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f0      	beq.n	8002414 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002432:	e05e      	b.n	80024f2 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e05d      	b.n	80024f4 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d156      	bne.n	80024f2 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002444:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 800244a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800244e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 8002456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800245a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800245c:	f7fe ff1a 	bl	8001294 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002464:	f7fe ff16 	bl	8001294 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e03e      	b.n	80024f4 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002476:	4b03      	ldr	r3, [pc, #12]	; (8002484 <HAL_RCC_OscConfig+0x754>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0x734>
 8002482:	e036      	b.n	80024f2 <HAL_RCC_OscConfig+0x7c2>
 8002484:	40021000 	.word	0x40021000
 8002488:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	2b0c      	cmp	r3, #12
 8002490:	d02d      	beq.n	80024ee <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002492:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <HAL_RCC_OscConfig+0x7cc>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a19      	ldr	r2, [pc, #100]	; (80024fc <HAL_RCC_OscConfig+0x7cc>)
 8002498:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800249c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800249e:	4b17      	ldr	r3, [pc, #92]	; (80024fc <HAL_RCC_OscConfig+0x7cc>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d105      	bne.n	80024b6 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80024aa:	4b14      	ldr	r3, [pc, #80]	; (80024fc <HAL_RCC_OscConfig+0x7cc>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	4a13      	ldr	r2, [pc, #76]	; (80024fc <HAL_RCC_OscConfig+0x7cc>)
 80024b0:	f023 0303 	bic.w	r3, r3, #3
 80024b4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024b6:	4b11      	ldr	r3, [pc, #68]	; (80024fc <HAL_RCC_OscConfig+0x7cc>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	4a10      	ldr	r2, [pc, #64]	; (80024fc <HAL_RCC_OscConfig+0x7cc>)
 80024bc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80024c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c6:	f7fe fee5 	bl	8001294 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ce:	f7fe fee1 	bl	8001294 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e009      	b.n	80024f4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_RCC_OscConfig+0x7cc>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1f0      	bne.n	80024ce <HAL_RCC_OscConfig+0x79e>
 80024ec:	e001      	b.n	80024f2 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3720      	adds	r7, #32
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40021000 	.word	0x40021000

08002500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0c8      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002514:	4b66      	ldr	r3, [pc, #408]	; (80026b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	d910      	bls.n	8002544 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002522:	4b63      	ldr	r3, [pc, #396]	; (80026b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 0207 	bic.w	r2, r3, #7
 800252a:	4961      	ldr	r1, [pc, #388]	; (80026b0 <HAL_RCC_ClockConfig+0x1b0>)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	4313      	orrs	r3, r2
 8002530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	4b5f      	ldr	r3, [pc, #380]	; (80026b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d001      	beq.n	8002544 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0b0      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b00      	cmp	r3, #0
 800254e:	d04c      	beq.n	80025ea <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b03      	cmp	r3, #3
 8002556:	d107      	bne.n	8002568 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002558:	4b56      	ldr	r3, [pc, #344]	; (80026b4 <HAL_RCC_ClockConfig+0x1b4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d121      	bne.n	80025a8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e09e      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d107      	bne.n	8002580 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002570:	4b50      	ldr	r3, [pc, #320]	; (80026b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d115      	bne.n	80025a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e092      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d107      	bne.n	8002598 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002588:	4b4a      	ldr	r3, [pc, #296]	; (80026b4 <HAL_RCC_ClockConfig+0x1b4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d109      	bne.n	80025a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e086      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002598:	4b46      	ldr	r3, [pc, #280]	; (80026b4 <HAL_RCC_ClockConfig+0x1b4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e07e      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025a8:	4b42      	ldr	r3, [pc, #264]	; (80026b4 <HAL_RCC_ClockConfig+0x1b4>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f023 0203 	bic.w	r2, r3, #3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	493f      	ldr	r1, [pc, #252]	; (80026b4 <HAL_RCC_ClockConfig+0x1b4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ba:	f7fe fe6b 	bl	8001294 <HAL_GetTick>
 80025be:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c0:	e00a      	b.n	80025d8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c2:	f7fe fe67 	bl	8001294 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e066      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d8:	4b36      	ldr	r3, [pc, #216]	; (80026b4 <HAL_RCC_ClockConfig+0x1b4>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 020c 	and.w	r2, r3, #12
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d1eb      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d008      	beq.n	8002608 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f6:	4b2f      	ldr	r3, [pc, #188]	; (80026b4 <HAL_RCC_ClockConfig+0x1b4>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	492c      	ldr	r1, [pc, #176]	; (80026b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002604:	4313      	orrs	r3, r2
 8002606:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002608:	4b29      	ldr	r3, [pc, #164]	; (80026b0 <HAL_RCC_ClockConfig+0x1b0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d210      	bcs.n	8002638 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002616:	4b26      	ldr	r3, [pc, #152]	; (80026b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 0207 	bic.w	r2, r3, #7
 800261e:	4924      	ldr	r1, [pc, #144]	; (80026b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002626:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d001      	beq.n	8002638 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e036      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002644:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	4918      	ldr	r1, [pc, #96]	; (80026b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d009      	beq.n	8002676 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002662:	4b14      	ldr	r3, [pc, #80]	; (80026b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4910      	ldr	r1, [pc, #64]	; (80026b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002676:	f000 f825 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 800267a:	4602      	mov	r2, r0
 800267c:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <HAL_RCC_ClockConfig+0x1b4>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	490c      	ldr	r1, [pc, #48]	; (80026b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002688:	5ccb      	ldrb	r3, [r1, r3]
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	fa22 f303 	lsr.w	r3, r2, r3
 8002692:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fdaa 	bl	80011f4 <HAL_InitTick>
 80026a0:	4603      	mov	r3, r0
 80026a2:	72fb      	strb	r3, [r7, #11]

  return status;
 80026a4:	7afb      	ldrb	r3, [r7, #11]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40022000 	.word	0x40022000
 80026b4:	40021000 	.word	0x40021000
 80026b8:	080056b0 	.word	0x080056b0
 80026bc:	20000000 	.word	0x20000000
 80026c0:	20000004 	.word	0x20000004

080026c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	; 0x24
 80026c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
 80026ce:	2300      	movs	r3, #0
 80026d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026d2:	4b3e      	ldr	r3, [pc, #248]	; (80027cc <HAL_RCC_GetSysClockFreq+0x108>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026dc:	4b3b      	ldr	r3, [pc, #236]	; (80027cc <HAL_RCC_GetSysClockFreq+0x108>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x34>
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	2b0c      	cmp	r3, #12
 80026f0:	d121      	bne.n	8002736 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d11e      	bne.n	8002736 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026f8:	4b34      	ldr	r3, [pc, #208]	; (80027cc <HAL_RCC_GetSysClockFreq+0x108>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	2b00      	cmp	r3, #0
 8002702:	d107      	bne.n	8002714 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002704:	4b31      	ldr	r3, [pc, #196]	; (80027cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800270a:	0a1b      	lsrs	r3, r3, #8
 800270c:	f003 030f 	and.w	r3, r3, #15
 8002710:	61fb      	str	r3, [r7, #28]
 8002712:	e005      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002714:	4b2d      	ldr	r3, [pc, #180]	; (80027cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	091b      	lsrs	r3, r3, #4
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002720:	4a2b      	ldr	r2, [pc, #172]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002728:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10d      	bne.n	800274c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002734:	e00a      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	2b04      	cmp	r3, #4
 800273a:	d102      	bne.n	8002742 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800273c:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800273e:	61bb      	str	r3, [r7, #24]
 8002740:	e004      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	2b08      	cmp	r3, #8
 8002746:	d101      	bne.n	800274c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002748:	4b23      	ldr	r3, [pc, #140]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800274a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	2b0c      	cmp	r3, #12
 8002750:	d134      	bne.n	80027bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002752:	4b1e      	ldr	r3, [pc, #120]	; (80027cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d003      	beq.n	800276a <HAL_RCC_GetSysClockFreq+0xa6>
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2b03      	cmp	r3, #3
 8002766:	d003      	beq.n	8002770 <HAL_RCC_GetSysClockFreq+0xac>
 8002768:	e005      	b.n	8002776 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800276a:	4b1a      	ldr	r3, [pc, #104]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800276c:	617b      	str	r3, [r7, #20]
      break;
 800276e:	e005      	b.n	800277c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002770:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002772:	617b      	str	r3, [r7, #20]
      break;
 8002774:	e002      	b.n	800277c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	617b      	str	r3, [r7, #20]
      break;
 800277a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800277c:	4b13      	ldr	r3, [pc, #76]	; (80027cc <HAL_RCC_GetSysClockFreq+0x108>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	3301      	adds	r3, #1
 8002788:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <HAL_RCC_GetSysClockFreq+0x108>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	0a1b      	lsrs	r3, r3, #8
 8002790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	fb03 f202 	mul.w	r2, r3, r2
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <HAL_RCC_GetSysClockFreq+0x108>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	0e5b      	lsrs	r3, r3, #25
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	3301      	adds	r3, #1
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027bc:	69bb      	ldr	r3, [r7, #24]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3724      	adds	r7, #36	; 0x24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
 80027d0:	080056c8 	.word	0x080056c8
 80027d4:	00f42400 	.word	0x00f42400
 80027d8:	007a1200 	.word	0x007a1200

080027dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e0:	4b03      	ldr	r3, [pc, #12]	; (80027f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027e2:	681b      	ldr	r3, [r3, #0]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	20000000 	.word	0x20000000

080027f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027f8:	f7ff fff0 	bl	80027dc <HAL_RCC_GetHCLKFreq>
 80027fc:	4602      	mov	r2, r0
 80027fe:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	0a1b      	lsrs	r3, r3, #8
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	4904      	ldr	r1, [pc, #16]	; (800281c <HAL_RCC_GetPCLK1Freq+0x28>)
 800280a:	5ccb      	ldrb	r3, [r1, r3]
 800280c:	f003 031f 	and.w	r3, r3, #31
 8002810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002814:	4618      	mov	r0, r3
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40021000 	.word	0x40021000
 800281c:	080056c0 	.word	0x080056c0

08002820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002824:	f7ff ffda 	bl	80027dc <HAL_RCC_GetHCLKFreq>
 8002828:	4602      	mov	r2, r0
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_RCC_GetPCLK2Freq+0x24>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	0adb      	lsrs	r3, r3, #11
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	4904      	ldr	r1, [pc, #16]	; (8002848 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002836:	5ccb      	ldrb	r3, [r1, r3]
 8002838:	f003 031f 	and.w	r3, r3, #31
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40021000 	.word	0x40021000
 8002848:	080056c0 	.word	0x080056c0

0800284c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002854:	2300      	movs	r3, #0
 8002856:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002858:	4b2a      	ldr	r3, [pc, #168]	; (8002904 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800285a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002864:	f7ff fa00 	bl	8001c68 <HAL_PWREx_GetVoltageRange>
 8002868:	6178      	str	r0, [r7, #20]
 800286a:	e014      	b.n	8002896 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800286c:	4b25      	ldr	r3, [pc, #148]	; (8002904 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800286e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002870:	4a24      	ldr	r2, [pc, #144]	; (8002904 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002876:	6593      	str	r3, [r2, #88]	; 0x58
 8002878:	4b22      	ldr	r3, [pc, #136]	; (8002904 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800287a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002884:	f7ff f9f0 	bl	8001c68 <HAL_PWREx_GetVoltageRange>
 8002888:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800288a:	4b1e      	ldr	r3, [pc, #120]	; (8002904 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800288c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288e:	4a1d      	ldr	r2, [pc, #116]	; (8002904 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002894:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800289c:	d10b      	bne.n	80028b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b80      	cmp	r3, #128	; 0x80
 80028a2:	d919      	bls.n	80028d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2ba0      	cmp	r3, #160	; 0xa0
 80028a8:	d902      	bls.n	80028b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028aa:	2302      	movs	r3, #2
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	e013      	b.n	80028d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028b0:	2301      	movs	r3, #1
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	e010      	b.n	80028d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b80      	cmp	r3, #128	; 0x80
 80028ba:	d902      	bls.n	80028c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80028bc:	2303      	movs	r3, #3
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	e00a      	b.n	80028d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b80      	cmp	r3, #128	; 0x80
 80028c6:	d102      	bne.n	80028ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028c8:	2302      	movs	r3, #2
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	e004      	b.n	80028d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b70      	cmp	r3, #112	; 0x70
 80028d2:	d101      	bne.n	80028d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028d4:	2301      	movs	r3, #1
 80028d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f023 0207 	bic.w	r2, r3, #7
 80028e0:	4909      	ldr	r1, [pc, #36]	; (8002908 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028e8:	4b07      	ldr	r3, [pc, #28]	; (8002908 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d001      	beq.n	80028fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40021000 	.word	0x40021000
 8002908:	40022000 	.word	0x40022000

0800290c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002914:	2300      	movs	r3, #0
 8002916:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002918:	2300      	movs	r3, #0
 800291a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002924:	2b00      	cmp	r3, #0
 8002926:	d041      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800292c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002930:	d02a      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002932:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002936:	d824      	bhi.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002938:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800293c:	d008      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800293e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002942:	d81e      	bhi.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00a      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800294c:	d010      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800294e:	e018      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002950:	4b86      	ldr	r3, [pc, #536]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	4a85      	ldr	r2, [pc, #532]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800295c:	e015      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3304      	adds	r3, #4
 8002962:	2100      	movs	r1, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f000 fabb 	bl	8002ee0 <RCCEx_PLLSAI1_Config>
 800296a:	4603      	mov	r3, r0
 800296c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800296e:	e00c      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3320      	adds	r3, #32
 8002974:	2100      	movs	r1, #0
 8002976:	4618      	mov	r0, r3
 8002978:	f000 fba6 	bl	80030c8 <RCCEx_PLLSAI2_Config>
 800297c:	4603      	mov	r3, r0
 800297e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002980:	e003      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	74fb      	strb	r3, [r7, #19]
      break;
 8002986:	e000      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002988:	bf00      	nop
    }

    if(ret == HAL_OK)
 800298a:	7cfb      	ldrb	r3, [r7, #19]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10b      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002990:	4b76      	ldr	r3, [pc, #472]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002996:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800299e:	4973      	ldr	r1, [pc, #460]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029a6:	e001      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a8:	7cfb      	ldrb	r3, [r7, #19]
 80029aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d041      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029c0:	d02a      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80029c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029c6:	d824      	bhi.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029cc:	d008      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80029ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029d2:	d81e      	bhi.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00a      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80029d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029dc:	d010      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029de:	e018      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029e0:	4b62      	ldr	r3, [pc, #392]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4a61      	ldr	r2, [pc, #388]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029ec:	e015      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3304      	adds	r3, #4
 80029f2:	2100      	movs	r1, #0
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 fa73 	bl	8002ee0 <RCCEx_PLLSAI1_Config>
 80029fa:	4603      	mov	r3, r0
 80029fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029fe:	e00c      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3320      	adds	r3, #32
 8002a04:	2100      	movs	r1, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 fb5e 	bl	80030c8 <RCCEx_PLLSAI2_Config>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a10:	e003      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	74fb      	strb	r3, [r7, #19]
      break;
 8002a16:	e000      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002a18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a1a:	7cfb      	ldrb	r3, [r7, #19]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10b      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a20:	4b52      	ldr	r3, [pc, #328]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a26:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a2e:	494f      	ldr	r1, [pc, #316]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a36:	e001      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a38:	7cfb      	ldrb	r3, [r7, #19]
 8002a3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 80a0 	beq.w	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a4e:	4b47      	ldr	r3, [pc, #284]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00d      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a64:	4b41      	ldr	r3, [pc, #260]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a68:	4a40      	ldr	r2, [pc, #256]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a70:	4b3e      	ldr	r3, [pc, #248]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a80:	4b3b      	ldr	r3, [pc, #236]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a3a      	ldr	r2, [pc, #232]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a8c:	f7fe fc02 	bl	8001294 <HAL_GetTick>
 8002a90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a92:	e009      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a94:	f7fe fbfe 	bl	8001294 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d902      	bls.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	74fb      	strb	r3, [r7, #19]
        break;
 8002aa6:	e005      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002aa8:	4b31      	ldr	r3, [pc, #196]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0ef      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002ab4:	7cfb      	ldrb	r3, [r7, #19]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d15c      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002aba:	4b2c      	ldr	r3, [pc, #176]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d01f      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d019      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ad8:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ae4:	4b21      	ldr	r3, [pc, #132]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aea:	4a20      	ldr	r2, [pc, #128]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002af4:	4b1d      	ldr	r3, [pc, #116]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afa:	4a1c      	ldr	r2, [pc, #112]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b04:	4a19      	ldr	r2, [pc, #100]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d016      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b16:	f7fe fbbd 	bl	8001294 <HAL_GetTick>
 8002b1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b1c:	e00b      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1e:	f7fe fbb9 	bl	8001294 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d902      	bls.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	74fb      	strb	r3, [r7, #19]
            break;
 8002b34:	e006      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b36:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0ec      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002b44:	7cfb      	ldrb	r3, [r7, #19]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10c      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b4a:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b5a:	4904      	ldr	r1, [pc, #16]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b62:	e009      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b64:	7cfb      	ldrb	r3, [r7, #19]
 8002b66:	74bb      	strb	r3, [r7, #18]
 8002b68:	e006      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002b6a:	bf00      	nop
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b74:	7cfb      	ldrb	r3, [r7, #19]
 8002b76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b78:	7c7b      	ldrb	r3, [r7, #17]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d105      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b7e:	4b9e      	ldr	r3, [pc, #632]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b82:	4a9d      	ldr	r2, [pc, #628]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b88:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b96:	4b98      	ldr	r3, [pc, #608]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9c:	f023 0203 	bic.w	r2, r3, #3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba4:	4994      	ldr	r1, [pc, #592]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bb8:	4b8f      	ldr	r3, [pc, #572]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbe:	f023 020c 	bic.w	r2, r3, #12
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc6:	498c      	ldr	r1, [pc, #560]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bda:	4b87      	ldr	r3, [pc, #540]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	4983      	ldr	r1, [pc, #524]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bfc:	4b7e      	ldr	r3, [pc, #504]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	497b      	ldr	r1, [pc, #492]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0310 	and.w	r3, r3, #16
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c1e:	4b76      	ldr	r3, [pc, #472]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2c:	4972      	ldr	r1, [pc, #456]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c40:	4b6d      	ldr	r3, [pc, #436]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4e:	496a      	ldr	r1, [pc, #424]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c62:	4b65      	ldr	r3, [pc, #404]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c70:	4961      	ldr	r1, [pc, #388]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c84:	4b5c      	ldr	r3, [pc, #368]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c92:	4959      	ldr	r1, [pc, #356]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ca6:	4b54      	ldr	r3, [pc, #336]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb4:	4950      	ldr	r1, [pc, #320]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cc8:	4b4b      	ldr	r3, [pc, #300]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd6:	4948      	ldr	r1, [pc, #288]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cea:	4b43      	ldr	r3, [pc, #268]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf8:	493f      	ldr	r1, [pc, #252]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d028      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d0c:	4b3a      	ldr	r3, [pc, #232]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d1a:	4937      	ldr	r1, [pc, #220]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d2c:	4b32      	ldr	r3, [pc, #200]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4a31      	ldr	r2, [pc, #196]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d36:	60d3      	str	r3, [r2, #12]
 8002d38:	e011      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d42:	d10c      	bne.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3304      	adds	r3, #4
 8002d48:	2101      	movs	r1, #1
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 f8c8 	bl	8002ee0 <RCCEx_PLLSAI1_Config>
 8002d50:	4603      	mov	r3, r0
 8002d52:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d54:	7cfb      	ldrb	r3, [r7, #19]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002d5a:	7cfb      	ldrb	r3, [r7, #19]
 8002d5c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d028      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d6a:	4b23      	ldr	r3, [pc, #140]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d78:	491f      	ldr	r1, [pc, #124]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d88:	d106      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d8a:	4b1b      	ldr	r3, [pc, #108]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	4a1a      	ldr	r2, [pc, #104]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d94:	60d3      	str	r3, [r2, #12]
 8002d96:	e011      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3304      	adds	r3, #4
 8002da6:	2101      	movs	r1, #1
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 f899 	bl	8002ee0 <RCCEx_PLLSAI1_Config>
 8002dae:	4603      	mov	r3, r0
 8002db0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002db2:	7cfb      	ldrb	r3, [r7, #19]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002db8:	7cfb      	ldrb	r3, [r7, #19]
 8002dba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d02b      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd6:	4908      	ldr	r1, [pc, #32]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002de6:	d109      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002de8:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	4a02      	ldr	r2, [pc, #8]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002df2:	60d3      	str	r3, [r2, #12]
 8002df4:	e014      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e04:	d10c      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 f867 	bl	8002ee0 <RCCEx_PLLSAI1_Config>
 8002e12:	4603      	mov	r3, r0
 8002e14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e16:	7cfb      	ldrb	r3, [r7, #19]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002e1c:	7cfb      	ldrb	r3, [r7, #19]
 8002e1e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d02f      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e2c:	4b2b      	ldr	r3, [pc, #172]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e3a:	4928      	ldr	r1, [pc, #160]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e4a:	d10d      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	2102      	movs	r1, #2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 f844 	bl	8002ee0 <RCCEx_PLLSAI1_Config>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e5c:	7cfb      	ldrb	r3, [r7, #19]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d014      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e62:	7cfb      	ldrb	r3, [r7, #19]
 8002e64:	74bb      	strb	r3, [r7, #18]
 8002e66:	e011      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3320      	adds	r3, #32
 8002e76:	2102      	movs	r1, #2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 f925 	bl	80030c8 <RCCEx_PLLSAI2_Config>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e82:	7cfb      	ldrb	r3, [r7, #19]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e88:	7cfb      	ldrb	r3, [r7, #19]
 8002e8a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00a      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e98:	4b10      	ldr	r3, [pc, #64]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ea6:	490d      	ldr	r1, [pc, #52]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00b      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002eba:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eca:	4904      	ldr	r1, [pc, #16]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ed2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40021000 	.word	0x40021000

08002ee0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eee:	4b75      	ldr	r3, [pc, #468]	; (80030c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d018      	beq.n	8002f2c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002efa:	4b72      	ldr	r3, [pc, #456]	; (80030c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f003 0203 	and.w	r2, r3, #3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d10d      	bne.n	8002f26 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
       ||
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d009      	beq.n	8002f26 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f12:	4b6c      	ldr	r3, [pc, #432]	; (80030c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	091b      	lsrs	r3, r3, #4
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
       ||
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d047      	beq.n	8002fb6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
 8002f2a:	e044      	b.n	8002fb6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d018      	beq.n	8002f66 <RCCEx_PLLSAI1_Config+0x86>
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d825      	bhi.n	8002f84 <RCCEx_PLLSAI1_Config+0xa4>
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d002      	beq.n	8002f42 <RCCEx_PLLSAI1_Config+0x62>
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d009      	beq.n	8002f54 <RCCEx_PLLSAI1_Config+0x74>
 8002f40:	e020      	b.n	8002f84 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f42:	4b60      	ldr	r3, [pc, #384]	; (80030c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d11d      	bne.n	8002f8a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f52:	e01a      	b.n	8002f8a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f54:	4b5b      	ldr	r3, [pc, #364]	; (80030c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d116      	bne.n	8002f8e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f64:	e013      	b.n	8002f8e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f66:	4b57      	ldr	r3, [pc, #348]	; (80030c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10f      	bne.n	8002f92 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f72:	4b54      	ldr	r3, [pc, #336]	; (80030c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d109      	bne.n	8002f92 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f82:	e006      	b.n	8002f92 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
      break;
 8002f88:	e004      	b.n	8002f94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f8a:	bf00      	nop
 8002f8c:	e002      	b.n	8002f94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f8e:	bf00      	nop
 8002f90:	e000      	b.n	8002f94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f92:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10d      	bne.n	8002fb6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f9a:	4b4a      	ldr	r3, [pc, #296]	; (80030c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6819      	ldr	r1, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	430b      	orrs	r3, r1
 8002fb0:	4944      	ldr	r1, [pc, #272]	; (80030c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d17d      	bne.n	80030b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002fbc:	4b41      	ldr	r3, [pc, #260]	; (80030c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a40      	ldr	r2, [pc, #256]	; (80030c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fc8:	f7fe f964 	bl	8001294 <HAL_GetTick>
 8002fcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fce:	e009      	b.n	8002fe4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fd0:	f7fe f960 	bl	8001294 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d902      	bls.n	8002fe4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	73fb      	strb	r3, [r7, #15]
        break;
 8002fe2:	e005      	b.n	8002ff0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fe4:	4b37      	ldr	r3, [pc, #220]	; (80030c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1ef      	bne.n	8002fd0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d160      	bne.n	80030b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d111      	bne.n	8003020 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ffc:	4b31      	ldr	r3, [pc, #196]	; (80030c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6892      	ldr	r2, [r2, #8]
 800300c:	0211      	lsls	r1, r2, #8
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68d2      	ldr	r2, [r2, #12]
 8003012:	0912      	lsrs	r2, r2, #4
 8003014:	0452      	lsls	r2, r2, #17
 8003016:	430a      	orrs	r2, r1
 8003018:	492a      	ldr	r1, [pc, #168]	; (80030c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800301a:	4313      	orrs	r3, r2
 800301c:	610b      	str	r3, [r1, #16]
 800301e:	e027      	b.n	8003070 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d112      	bne.n	800304c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003026:	4b27      	ldr	r3, [pc, #156]	; (80030c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800302e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6892      	ldr	r2, [r2, #8]
 8003036:	0211      	lsls	r1, r2, #8
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6912      	ldr	r2, [r2, #16]
 800303c:	0852      	lsrs	r2, r2, #1
 800303e:	3a01      	subs	r2, #1
 8003040:	0552      	lsls	r2, r2, #21
 8003042:	430a      	orrs	r2, r1
 8003044:	491f      	ldr	r1, [pc, #124]	; (80030c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003046:	4313      	orrs	r3, r2
 8003048:	610b      	str	r3, [r1, #16]
 800304a:	e011      	b.n	8003070 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800304c:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003054:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6892      	ldr	r2, [r2, #8]
 800305c:	0211      	lsls	r1, r2, #8
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6952      	ldr	r2, [r2, #20]
 8003062:	0852      	lsrs	r2, r2, #1
 8003064:	3a01      	subs	r2, #1
 8003066:	0652      	lsls	r2, r2, #25
 8003068:	430a      	orrs	r2, r1
 800306a:	4916      	ldr	r1, [pc, #88]	; (80030c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800306c:	4313      	orrs	r3, r2
 800306e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003070:	4b14      	ldr	r3, [pc, #80]	; (80030c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a13      	ldr	r2, [pc, #76]	; (80030c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003076:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800307a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307c:	f7fe f90a 	bl	8001294 <HAL_GetTick>
 8003080:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003082:	e009      	b.n	8003098 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003084:	f7fe f906 	bl	8001294 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d902      	bls.n	8003098 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	73fb      	strb	r3, [r7, #15]
          break;
 8003096:	e005      	b.n	80030a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003098:	4b0a      	ldr	r3, [pc, #40]	; (80030c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0ef      	beq.n	8003084 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030aa:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ac:	691a      	ldr	r2, [r3, #16]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	4904      	ldr	r1, [pc, #16]	; (80030c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40021000 	.word	0x40021000

080030c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030d6:	4b6a      	ldr	r3, [pc, #424]	; (8003280 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d018      	beq.n	8003114 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80030e2:	4b67      	ldr	r3, [pc, #412]	; (8003280 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f003 0203 	and.w	r2, r3, #3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d10d      	bne.n	800310e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
       ||
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d009      	beq.n	800310e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80030fa:	4b61      	ldr	r3, [pc, #388]	; (8003280 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	091b      	lsrs	r3, r3, #4
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	1c5a      	adds	r2, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
       ||
 800310a:	429a      	cmp	r2, r3
 800310c:	d047      	beq.n	800319e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	73fb      	strb	r3, [r7, #15]
 8003112:	e044      	b.n	800319e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b03      	cmp	r3, #3
 800311a:	d018      	beq.n	800314e <RCCEx_PLLSAI2_Config+0x86>
 800311c:	2b03      	cmp	r3, #3
 800311e:	d825      	bhi.n	800316c <RCCEx_PLLSAI2_Config+0xa4>
 8003120:	2b01      	cmp	r3, #1
 8003122:	d002      	beq.n	800312a <RCCEx_PLLSAI2_Config+0x62>
 8003124:	2b02      	cmp	r3, #2
 8003126:	d009      	beq.n	800313c <RCCEx_PLLSAI2_Config+0x74>
 8003128:	e020      	b.n	800316c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800312a:	4b55      	ldr	r3, [pc, #340]	; (8003280 <RCCEx_PLLSAI2_Config+0x1b8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d11d      	bne.n	8003172 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800313a:	e01a      	b.n	8003172 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800313c:	4b50      	ldr	r3, [pc, #320]	; (8003280 <RCCEx_PLLSAI2_Config+0x1b8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003144:	2b00      	cmp	r3, #0
 8003146:	d116      	bne.n	8003176 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800314c:	e013      	b.n	8003176 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800314e:	4b4c      	ldr	r3, [pc, #304]	; (8003280 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10f      	bne.n	800317a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800315a:	4b49      	ldr	r3, [pc, #292]	; (8003280 <RCCEx_PLLSAI2_Config+0x1b8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d109      	bne.n	800317a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800316a:	e006      	b.n	800317a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
      break;
 8003170:	e004      	b.n	800317c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003172:	bf00      	nop
 8003174:	e002      	b.n	800317c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003176:	bf00      	nop
 8003178:	e000      	b.n	800317c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800317a:	bf00      	nop
    }

    if(status == HAL_OK)
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10d      	bne.n	800319e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003182:	4b3f      	ldr	r3, [pc, #252]	; (8003280 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6819      	ldr	r1, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	3b01      	subs	r3, #1
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	430b      	orrs	r3, r1
 8003198:	4939      	ldr	r1, [pc, #228]	; (8003280 <RCCEx_PLLSAI2_Config+0x1b8>)
 800319a:	4313      	orrs	r3, r2
 800319c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800319e:	7bfb      	ldrb	r3, [r7, #15]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d167      	bne.n	8003274 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80031a4:	4b36      	ldr	r3, [pc, #216]	; (8003280 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a35      	ldr	r2, [pc, #212]	; (8003280 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031b0:	f7fe f870 	bl	8001294 <HAL_GetTick>
 80031b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031b6:	e009      	b.n	80031cc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031b8:	f7fe f86c 	bl	8001294 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d902      	bls.n	80031cc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	73fb      	strb	r3, [r7, #15]
        break;
 80031ca:	e005      	b.n	80031d8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031cc:	4b2c      	ldr	r3, [pc, #176]	; (8003280 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1ef      	bne.n	80031b8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d14a      	bne.n	8003274 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d111      	bne.n	8003208 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031e4:	4b26      	ldr	r3, [pc, #152]	; (8003280 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80031ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6892      	ldr	r2, [r2, #8]
 80031f4:	0211      	lsls	r1, r2, #8
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	68d2      	ldr	r2, [r2, #12]
 80031fa:	0912      	lsrs	r2, r2, #4
 80031fc:	0452      	lsls	r2, r2, #17
 80031fe:	430a      	orrs	r2, r1
 8003200:	491f      	ldr	r1, [pc, #124]	; (8003280 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003202:	4313      	orrs	r3, r2
 8003204:	614b      	str	r3, [r1, #20]
 8003206:	e011      	b.n	800322c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003208:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <RCCEx_PLLSAI2_Config+0x1b8>)
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003210:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6892      	ldr	r2, [r2, #8]
 8003218:	0211      	lsls	r1, r2, #8
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6912      	ldr	r2, [r2, #16]
 800321e:	0852      	lsrs	r2, r2, #1
 8003220:	3a01      	subs	r2, #1
 8003222:	0652      	lsls	r2, r2, #25
 8003224:	430a      	orrs	r2, r1
 8003226:	4916      	ldr	r1, [pc, #88]	; (8003280 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003228:	4313      	orrs	r3, r2
 800322a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800322c:	4b14      	ldr	r3, [pc, #80]	; (8003280 <RCCEx_PLLSAI2_Config+0x1b8>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a13      	ldr	r2, [pc, #76]	; (8003280 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003236:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003238:	f7fe f82c 	bl	8001294 <HAL_GetTick>
 800323c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800323e:	e009      	b.n	8003254 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003240:	f7fe f828 	bl	8001294 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d902      	bls.n	8003254 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	73fb      	strb	r3, [r7, #15]
          break;
 8003252:	e005      	b.n	8003260 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003254:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0ef      	beq.n	8003240 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003266:	4b06      	ldr	r3, [pc, #24]	; (8003280 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	4904      	ldr	r1, [pc, #16]	; (8003280 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003270:	4313      	orrs	r3, r2
 8003272:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003274:	7bfb      	ldrb	r3, [r7, #15]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000

08003284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e049      	b.n	800332a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d106      	bne.n	80032b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7fd fdc2 	bl	8000e34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3304      	adds	r3, #4
 80032c0:	4619      	mov	r1, r3
 80032c2:	4610      	mov	r0, r2
 80032c4:	f000 fc9e 	bl	8003c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e049      	b.n	80033d8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d106      	bne.n	800335e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7fd fca7 	bl	8000cac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2202      	movs	r2, #2
 8003362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3304      	adds	r3, #4
 800336e:	4619      	mov	r1, r3
 8003370:	4610      	mov	r0, r2
 8003372:	f000 fc47 	bl	8003c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d109      	bne.n	8003404 <HAL_TIM_PWM_Start+0x24>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	bf14      	ite	ne
 80033fc:	2301      	movne	r3, #1
 80033fe:	2300      	moveq	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	e03c      	b.n	800347e <HAL_TIM_PWM_Start+0x9e>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	2b04      	cmp	r3, #4
 8003408:	d109      	bne.n	800341e <HAL_TIM_PWM_Start+0x3e>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b01      	cmp	r3, #1
 8003414:	bf14      	ite	ne
 8003416:	2301      	movne	r3, #1
 8003418:	2300      	moveq	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	e02f      	b.n	800347e <HAL_TIM_PWM_Start+0x9e>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b08      	cmp	r3, #8
 8003422:	d109      	bne.n	8003438 <HAL_TIM_PWM_Start+0x58>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b01      	cmp	r3, #1
 800342e:	bf14      	ite	ne
 8003430:	2301      	movne	r3, #1
 8003432:	2300      	moveq	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	e022      	b.n	800347e <HAL_TIM_PWM_Start+0x9e>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	2b0c      	cmp	r3, #12
 800343c:	d109      	bne.n	8003452 <HAL_TIM_PWM_Start+0x72>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b01      	cmp	r3, #1
 8003448:	bf14      	ite	ne
 800344a:	2301      	movne	r3, #1
 800344c:	2300      	moveq	r3, #0
 800344e:	b2db      	uxtb	r3, r3
 8003450:	e015      	b.n	800347e <HAL_TIM_PWM_Start+0x9e>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b10      	cmp	r3, #16
 8003456:	d109      	bne.n	800346c <HAL_TIM_PWM_Start+0x8c>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b01      	cmp	r3, #1
 8003462:	bf14      	ite	ne
 8003464:	2301      	movne	r3, #1
 8003466:	2300      	moveq	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	e008      	b.n	800347e <HAL_TIM_PWM_Start+0x9e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b01      	cmp	r3, #1
 8003476:	bf14      	ite	ne
 8003478:	2301      	movne	r3, #1
 800347a:	2300      	moveq	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e09c      	b.n	80035c0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d104      	bne.n	8003496 <HAL_TIM_PWM_Start+0xb6>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003494:	e023      	b.n	80034de <HAL_TIM_PWM_Start+0xfe>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b04      	cmp	r3, #4
 800349a:	d104      	bne.n	80034a6 <HAL_TIM_PWM_Start+0xc6>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034a4:	e01b      	b.n	80034de <HAL_TIM_PWM_Start+0xfe>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d104      	bne.n	80034b6 <HAL_TIM_PWM_Start+0xd6>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034b4:	e013      	b.n	80034de <HAL_TIM_PWM_Start+0xfe>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b0c      	cmp	r3, #12
 80034ba:	d104      	bne.n	80034c6 <HAL_TIM_PWM_Start+0xe6>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034c4:	e00b      	b.n	80034de <HAL_TIM_PWM_Start+0xfe>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b10      	cmp	r3, #16
 80034ca:	d104      	bne.n	80034d6 <HAL_TIM_PWM_Start+0xf6>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034d4:	e003      	b.n	80034de <HAL_TIM_PWM_Start+0xfe>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2202      	movs	r2, #2
 80034da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2201      	movs	r2, #1
 80034e4:	6839      	ldr	r1, [r7, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fefc 	bl	80042e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a35      	ldr	r2, [pc, #212]	; (80035c8 <HAL_TIM_PWM_Start+0x1e8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d013      	beq.n	800351e <HAL_TIM_PWM_Start+0x13e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a34      	ldr	r2, [pc, #208]	; (80035cc <HAL_TIM_PWM_Start+0x1ec>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d00e      	beq.n	800351e <HAL_TIM_PWM_Start+0x13e>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a32      	ldr	r2, [pc, #200]	; (80035d0 <HAL_TIM_PWM_Start+0x1f0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d009      	beq.n	800351e <HAL_TIM_PWM_Start+0x13e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a31      	ldr	r2, [pc, #196]	; (80035d4 <HAL_TIM_PWM_Start+0x1f4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d004      	beq.n	800351e <HAL_TIM_PWM_Start+0x13e>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a2f      	ldr	r2, [pc, #188]	; (80035d8 <HAL_TIM_PWM_Start+0x1f8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d101      	bne.n	8003522 <HAL_TIM_PWM_Start+0x142>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <HAL_TIM_PWM_Start+0x144>
 8003522:	2300      	movs	r3, #0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d007      	beq.n	8003538 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003536:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a22      	ldr	r2, [pc, #136]	; (80035c8 <HAL_TIM_PWM_Start+0x1e8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d01d      	beq.n	800357e <HAL_TIM_PWM_Start+0x19e>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354a:	d018      	beq.n	800357e <HAL_TIM_PWM_Start+0x19e>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a22      	ldr	r2, [pc, #136]	; (80035dc <HAL_TIM_PWM_Start+0x1fc>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d013      	beq.n	800357e <HAL_TIM_PWM_Start+0x19e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a21      	ldr	r2, [pc, #132]	; (80035e0 <HAL_TIM_PWM_Start+0x200>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00e      	beq.n	800357e <HAL_TIM_PWM_Start+0x19e>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1f      	ldr	r2, [pc, #124]	; (80035e4 <HAL_TIM_PWM_Start+0x204>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d009      	beq.n	800357e <HAL_TIM_PWM_Start+0x19e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a17      	ldr	r2, [pc, #92]	; (80035cc <HAL_TIM_PWM_Start+0x1ec>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d004      	beq.n	800357e <HAL_TIM_PWM_Start+0x19e>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a15      	ldr	r2, [pc, #84]	; (80035d0 <HAL_TIM_PWM_Start+0x1f0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d115      	bne.n	80035aa <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	4b18      	ldr	r3, [pc, #96]	; (80035e8 <HAL_TIM_PWM_Start+0x208>)
 8003586:	4013      	ands	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2b06      	cmp	r3, #6
 800358e:	d015      	beq.n	80035bc <HAL_TIM_PWM_Start+0x1dc>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003596:	d011      	beq.n	80035bc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a8:	e008      	b.n	80035bc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0201 	orr.w	r2, r2, #1
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	e000      	b.n	80035be <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40012c00 	.word	0x40012c00
 80035cc:	40013400 	.word	0x40013400
 80035d0:	40014000 	.word	0x40014000
 80035d4:	40014400 	.word	0x40014400
 80035d8:	40014800 	.word	0x40014800
 80035dc:	40000400 	.word	0x40000400
 80035e0:	40000800 	.word	0x40000800
 80035e4:	40000c00 	.word	0x40000c00
 80035e8:	00010007 	.word	0x00010007

080035ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e097      	b.n	8003730 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d106      	bne.n	800361a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7fd fb8b 	bl	8000d30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2202      	movs	r2, #2
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003630:	f023 0307 	bic.w	r3, r3, #7
 8003634:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3304      	adds	r3, #4
 800363e:	4619      	mov	r1, r3
 8003640:	4610      	mov	r0, r2
 8003642:	f000 fadf 	bl	8003c04 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	4313      	orrs	r3, r2
 8003666:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366e:	f023 0303 	bic.w	r3, r3, #3
 8003672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	4313      	orrs	r3, r2
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800368c:	f023 030c 	bic.w	r3, r3, #12
 8003690:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003698:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800369c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	021b      	lsls	r3, r3, #8
 80036a8:	4313      	orrs	r3, r2
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	011a      	lsls	r2, r3, #4
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	031b      	lsls	r3, r3, #12
 80036bc:	4313      	orrs	r3, r2
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80036ca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80036d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	4313      	orrs	r3, r2
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b02      	cmp	r3, #2
 800374c:	d122      	bne.n	8003794 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b02      	cmp	r3, #2
 800375a:	d11b      	bne.n	8003794 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0202 	mvn.w	r2, #2
 8003764:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fa24 	bl	8003bc8 <HAL_TIM_IC_CaptureCallback>
 8003780:	e005      	b.n	800378e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fa16 	bl	8003bb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 fa27 	bl	8003bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d122      	bne.n	80037e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b04      	cmp	r3, #4
 80037ae:	d11b      	bne.n	80037e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0204 	mvn.w	r2, #4
 80037b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2202      	movs	r2, #2
 80037be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f9fa 	bl	8003bc8 <HAL_TIM_IC_CaptureCallback>
 80037d4:	e005      	b.n	80037e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f9ec 	bl	8003bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f9fd 	bl	8003bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d122      	bne.n	800383c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b08      	cmp	r3, #8
 8003802:	d11b      	bne.n	800383c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0208 	mvn.w	r2, #8
 800380c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2204      	movs	r2, #4
 8003812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f9d0 	bl	8003bc8 <HAL_TIM_IC_CaptureCallback>
 8003828:	e005      	b.n	8003836 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f9c2 	bl	8003bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f9d3 	bl	8003bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f003 0310 	and.w	r3, r3, #16
 8003846:	2b10      	cmp	r3, #16
 8003848:	d122      	bne.n	8003890 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0310 	and.w	r3, r3, #16
 8003854:	2b10      	cmp	r3, #16
 8003856:	d11b      	bne.n	8003890 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0210 	mvn.w	r2, #16
 8003860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2208      	movs	r2, #8
 8003866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f9a6 	bl	8003bc8 <HAL_TIM_IC_CaptureCallback>
 800387c:	e005      	b.n	800388a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f998 	bl	8003bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f9a9 	bl	8003bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b01      	cmp	r3, #1
 800389c:	d10e      	bne.n	80038bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d107      	bne.n	80038bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0201 	mvn.w	r2, #1
 80038b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f972 	bl	8003ba0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c6:	2b80      	cmp	r3, #128	; 0x80
 80038c8:	d10e      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d4:	2b80      	cmp	r3, #128	; 0x80
 80038d6:	d107      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fe34 	bl	8004550 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038f6:	d10e      	bne.n	8003916 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003902:	2b80      	cmp	r3, #128	; 0x80
 8003904:	d107      	bne.n	8003916 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800390e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 fe27 	bl	8004564 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003920:	2b40      	cmp	r3, #64	; 0x40
 8003922:	d10e      	bne.n	8003942 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392e:	2b40      	cmp	r3, #64	; 0x40
 8003930:	d107      	bne.n	8003942 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800393a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f957 	bl	8003bf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b20      	cmp	r3, #32
 800394e:	d10e      	bne.n	800396e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b20      	cmp	r3, #32
 800395c:	d107      	bne.n	800396e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f06f 0220 	mvn.w	r2, #32
 8003966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 fde7 	bl	800453c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800396e:	bf00      	nop
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800398e:	2b01      	cmp	r3, #1
 8003990:	d101      	bne.n	8003996 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003992:	2302      	movs	r3, #2
 8003994:	e0ff      	b.n	8003b96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b14      	cmp	r3, #20
 80039a2:	f200 80f0 	bhi.w	8003b86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80039a6:	a201      	add	r2, pc, #4	; (adr r2, 80039ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ac:	08003a01 	.word	0x08003a01
 80039b0:	08003b87 	.word	0x08003b87
 80039b4:	08003b87 	.word	0x08003b87
 80039b8:	08003b87 	.word	0x08003b87
 80039bc:	08003a41 	.word	0x08003a41
 80039c0:	08003b87 	.word	0x08003b87
 80039c4:	08003b87 	.word	0x08003b87
 80039c8:	08003b87 	.word	0x08003b87
 80039cc:	08003a83 	.word	0x08003a83
 80039d0:	08003b87 	.word	0x08003b87
 80039d4:	08003b87 	.word	0x08003b87
 80039d8:	08003b87 	.word	0x08003b87
 80039dc:	08003ac3 	.word	0x08003ac3
 80039e0:	08003b87 	.word	0x08003b87
 80039e4:	08003b87 	.word	0x08003b87
 80039e8:	08003b87 	.word	0x08003b87
 80039ec:	08003b05 	.word	0x08003b05
 80039f0:	08003b87 	.word	0x08003b87
 80039f4:	08003b87 	.word	0x08003b87
 80039f8:	08003b87 	.word	0x08003b87
 80039fc:	08003b45 	.word	0x08003b45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68b9      	ldr	r1, [r7, #8]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 f996 	bl	8003d38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0208 	orr.w	r2, r2, #8
 8003a1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699a      	ldr	r2, [r3, #24]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0204 	bic.w	r2, r2, #4
 8003a2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6999      	ldr	r1, [r3, #24]
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	691a      	ldr	r2, [r3, #16]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	619a      	str	r2, [r3, #24]
      break;
 8003a3e:	e0a5      	b.n	8003b8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68b9      	ldr	r1, [r7, #8]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 fa06 	bl	8003e58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699a      	ldr	r2, [r3, #24]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6999      	ldr	r1, [r3, #24]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	021a      	lsls	r2, r3, #8
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	619a      	str	r2, [r3, #24]
      break;
 8003a80:	e084      	b.n	8003b8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68b9      	ldr	r1, [r7, #8]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 fa6f 	bl	8003f6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69da      	ldr	r2, [r3, #28]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f042 0208 	orr.w	r2, r2, #8
 8003a9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69da      	ldr	r2, [r3, #28]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0204 	bic.w	r2, r2, #4
 8003aac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69d9      	ldr	r1, [r3, #28]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	61da      	str	r2, [r3, #28]
      break;
 8003ac0:	e064      	b.n	8003b8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fad7 	bl	800407c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69da      	ldr	r2, [r3, #28]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69da      	ldr	r2, [r3, #28]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	69d9      	ldr	r1, [r3, #28]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	021a      	lsls	r2, r3, #8
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	61da      	str	r2, [r3, #28]
      break;
 8003b02:	e043      	b.n	8003b8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68b9      	ldr	r1, [r7, #8]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 fb20 	bl	8004150 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0208 	orr.w	r2, r2, #8
 8003b1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0204 	bic.w	r2, r2, #4
 8003b2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	691a      	ldr	r2, [r3, #16]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b42:	e023      	b.n	8003b8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 fb64 	bl	8004218 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	021a      	lsls	r2, r3, #8
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b84:	e002      	b.n	8003b8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	75fb      	strb	r3, [r7, #23]
      break;
 8003b8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop

08003ba0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a40      	ldr	r2, [pc, #256]	; (8003d18 <TIM_Base_SetConfig+0x114>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d013      	beq.n	8003c44 <TIM_Base_SetConfig+0x40>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c22:	d00f      	beq.n	8003c44 <TIM_Base_SetConfig+0x40>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a3d      	ldr	r2, [pc, #244]	; (8003d1c <TIM_Base_SetConfig+0x118>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00b      	beq.n	8003c44 <TIM_Base_SetConfig+0x40>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a3c      	ldr	r2, [pc, #240]	; (8003d20 <TIM_Base_SetConfig+0x11c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d007      	beq.n	8003c44 <TIM_Base_SetConfig+0x40>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a3b      	ldr	r2, [pc, #236]	; (8003d24 <TIM_Base_SetConfig+0x120>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d003      	beq.n	8003c44 <TIM_Base_SetConfig+0x40>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a3a      	ldr	r2, [pc, #232]	; (8003d28 <TIM_Base_SetConfig+0x124>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d108      	bne.n	8003c56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a2f      	ldr	r2, [pc, #188]	; (8003d18 <TIM_Base_SetConfig+0x114>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d01f      	beq.n	8003c9e <TIM_Base_SetConfig+0x9a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c64:	d01b      	beq.n	8003c9e <TIM_Base_SetConfig+0x9a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a2c      	ldr	r2, [pc, #176]	; (8003d1c <TIM_Base_SetConfig+0x118>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d017      	beq.n	8003c9e <TIM_Base_SetConfig+0x9a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a2b      	ldr	r2, [pc, #172]	; (8003d20 <TIM_Base_SetConfig+0x11c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d013      	beq.n	8003c9e <TIM_Base_SetConfig+0x9a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a2a      	ldr	r2, [pc, #168]	; (8003d24 <TIM_Base_SetConfig+0x120>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00f      	beq.n	8003c9e <TIM_Base_SetConfig+0x9a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a29      	ldr	r2, [pc, #164]	; (8003d28 <TIM_Base_SetConfig+0x124>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d00b      	beq.n	8003c9e <TIM_Base_SetConfig+0x9a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a28      	ldr	r2, [pc, #160]	; (8003d2c <TIM_Base_SetConfig+0x128>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d007      	beq.n	8003c9e <TIM_Base_SetConfig+0x9a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a27      	ldr	r2, [pc, #156]	; (8003d30 <TIM_Base_SetConfig+0x12c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d003      	beq.n	8003c9e <TIM_Base_SetConfig+0x9a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a26      	ldr	r2, [pc, #152]	; (8003d34 <TIM_Base_SetConfig+0x130>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d108      	bne.n	8003cb0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a10      	ldr	r2, [pc, #64]	; (8003d18 <TIM_Base_SetConfig+0x114>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00f      	beq.n	8003cfc <TIM_Base_SetConfig+0xf8>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a12      	ldr	r2, [pc, #72]	; (8003d28 <TIM_Base_SetConfig+0x124>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d00b      	beq.n	8003cfc <TIM_Base_SetConfig+0xf8>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a11      	ldr	r2, [pc, #68]	; (8003d2c <TIM_Base_SetConfig+0x128>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d007      	beq.n	8003cfc <TIM_Base_SetConfig+0xf8>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a10      	ldr	r2, [pc, #64]	; (8003d30 <TIM_Base_SetConfig+0x12c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d003      	beq.n	8003cfc <TIM_Base_SetConfig+0xf8>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a0f      	ldr	r2, [pc, #60]	; (8003d34 <TIM_Base_SetConfig+0x130>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d103      	bne.n	8003d04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	615a      	str	r2, [r3, #20]
}
 8003d0a:	bf00      	nop
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40012c00 	.word	0x40012c00
 8003d1c:	40000400 	.word	0x40000400
 8003d20:	40000800 	.word	0x40000800
 8003d24:	40000c00 	.word	0x40000c00
 8003d28:	40013400 	.word	0x40013400
 8003d2c:	40014000 	.word	0x40014000
 8003d30:	40014400 	.word	0x40014400
 8003d34:	40014800 	.word	0x40014800

08003d38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	f023 0201 	bic.w	r2, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f023 0303 	bic.w	r3, r3, #3
 8003d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f023 0302 	bic.w	r3, r3, #2
 8003d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a2c      	ldr	r2, [pc, #176]	; (8003e44 <TIM_OC1_SetConfig+0x10c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00f      	beq.n	8003db8 <TIM_OC1_SetConfig+0x80>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a2b      	ldr	r2, [pc, #172]	; (8003e48 <TIM_OC1_SetConfig+0x110>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d00b      	beq.n	8003db8 <TIM_OC1_SetConfig+0x80>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a2a      	ldr	r2, [pc, #168]	; (8003e4c <TIM_OC1_SetConfig+0x114>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d007      	beq.n	8003db8 <TIM_OC1_SetConfig+0x80>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a29      	ldr	r2, [pc, #164]	; (8003e50 <TIM_OC1_SetConfig+0x118>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d003      	beq.n	8003db8 <TIM_OC1_SetConfig+0x80>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a28      	ldr	r2, [pc, #160]	; (8003e54 <TIM_OC1_SetConfig+0x11c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d10c      	bne.n	8003dd2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f023 0308 	bic.w	r3, r3, #8
 8003dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f023 0304 	bic.w	r3, r3, #4
 8003dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a1b      	ldr	r2, [pc, #108]	; (8003e44 <TIM_OC1_SetConfig+0x10c>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00f      	beq.n	8003dfa <TIM_OC1_SetConfig+0xc2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a1a      	ldr	r2, [pc, #104]	; (8003e48 <TIM_OC1_SetConfig+0x110>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00b      	beq.n	8003dfa <TIM_OC1_SetConfig+0xc2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a19      	ldr	r2, [pc, #100]	; (8003e4c <TIM_OC1_SetConfig+0x114>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d007      	beq.n	8003dfa <TIM_OC1_SetConfig+0xc2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a18      	ldr	r2, [pc, #96]	; (8003e50 <TIM_OC1_SetConfig+0x118>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d003      	beq.n	8003dfa <TIM_OC1_SetConfig+0xc2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a17      	ldr	r2, [pc, #92]	; (8003e54 <TIM_OC1_SetConfig+0x11c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d111      	bne.n	8003e1e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	621a      	str	r2, [r3, #32]
}
 8003e38:	bf00      	nop
 8003e3a:	371c      	adds	r7, #28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	40012c00 	.word	0x40012c00
 8003e48:	40013400 	.word	0x40013400
 8003e4c:	40014000 	.word	0x40014000
 8003e50:	40014400 	.word	0x40014400
 8003e54:	40014800 	.word	0x40014800

08003e58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	f023 0210 	bic.w	r2, r3, #16
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	021b      	lsls	r3, r3, #8
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f023 0320 	bic.w	r3, r3, #32
 8003ea6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a28      	ldr	r2, [pc, #160]	; (8003f58 <TIM_OC2_SetConfig+0x100>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d003      	beq.n	8003ec4 <TIM_OC2_SetConfig+0x6c>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a27      	ldr	r2, [pc, #156]	; (8003f5c <TIM_OC2_SetConfig+0x104>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d10d      	bne.n	8003ee0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ede:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a1d      	ldr	r2, [pc, #116]	; (8003f58 <TIM_OC2_SetConfig+0x100>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d00f      	beq.n	8003f08 <TIM_OC2_SetConfig+0xb0>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a1c      	ldr	r2, [pc, #112]	; (8003f5c <TIM_OC2_SetConfig+0x104>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d00b      	beq.n	8003f08 <TIM_OC2_SetConfig+0xb0>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a1b      	ldr	r2, [pc, #108]	; (8003f60 <TIM_OC2_SetConfig+0x108>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d007      	beq.n	8003f08 <TIM_OC2_SetConfig+0xb0>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a1a      	ldr	r2, [pc, #104]	; (8003f64 <TIM_OC2_SetConfig+0x10c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d003      	beq.n	8003f08 <TIM_OC2_SetConfig+0xb0>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a19      	ldr	r2, [pc, #100]	; (8003f68 <TIM_OC2_SetConfig+0x110>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d113      	bne.n	8003f30 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	621a      	str	r2, [r3, #32]
}
 8003f4a:	bf00      	nop
 8003f4c:	371c      	adds	r7, #28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40012c00 	.word	0x40012c00
 8003f5c:	40013400 	.word	0x40013400
 8003f60:	40014000 	.word	0x40014000
 8003f64:	40014400 	.word	0x40014400
 8003f68:	40014800 	.word	0x40014800

08003f6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0303 	bic.w	r3, r3, #3
 8003fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	021b      	lsls	r3, r3, #8
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a27      	ldr	r2, [pc, #156]	; (8004068 <TIM_OC3_SetConfig+0xfc>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d003      	beq.n	8003fd6 <TIM_OC3_SetConfig+0x6a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a26      	ldr	r2, [pc, #152]	; (800406c <TIM_OC3_SetConfig+0x100>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d10d      	bne.n	8003ff2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	021b      	lsls	r3, r3, #8
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a1c      	ldr	r2, [pc, #112]	; (8004068 <TIM_OC3_SetConfig+0xfc>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d00f      	beq.n	800401a <TIM_OC3_SetConfig+0xae>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a1b      	ldr	r2, [pc, #108]	; (800406c <TIM_OC3_SetConfig+0x100>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00b      	beq.n	800401a <TIM_OC3_SetConfig+0xae>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a1a      	ldr	r2, [pc, #104]	; (8004070 <TIM_OC3_SetConfig+0x104>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d007      	beq.n	800401a <TIM_OC3_SetConfig+0xae>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a19      	ldr	r2, [pc, #100]	; (8004074 <TIM_OC3_SetConfig+0x108>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d003      	beq.n	800401a <TIM_OC3_SetConfig+0xae>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a18      	ldr	r2, [pc, #96]	; (8004078 <TIM_OC3_SetConfig+0x10c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d113      	bne.n	8004042 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4313      	orrs	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	621a      	str	r2, [r3, #32]
}
 800405c:	bf00      	nop
 800405e:	371c      	adds	r7, #28
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40013400 	.word	0x40013400
 8004070:	40014000 	.word	0x40014000
 8004074:	40014400 	.word	0x40014400
 8004078:	40014800 	.word	0x40014800

0800407c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	021b      	lsls	r3, r3, #8
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	031b      	lsls	r3, r3, #12
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a18      	ldr	r2, [pc, #96]	; (800413c <TIM_OC4_SetConfig+0xc0>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d00f      	beq.n	8004100 <TIM_OC4_SetConfig+0x84>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a17      	ldr	r2, [pc, #92]	; (8004140 <TIM_OC4_SetConfig+0xc4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d00b      	beq.n	8004100 <TIM_OC4_SetConfig+0x84>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a16      	ldr	r2, [pc, #88]	; (8004144 <TIM_OC4_SetConfig+0xc8>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d007      	beq.n	8004100 <TIM_OC4_SetConfig+0x84>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a15      	ldr	r2, [pc, #84]	; (8004148 <TIM_OC4_SetConfig+0xcc>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d003      	beq.n	8004100 <TIM_OC4_SetConfig+0x84>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a14      	ldr	r2, [pc, #80]	; (800414c <TIM_OC4_SetConfig+0xd0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d109      	bne.n	8004114 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004106:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	019b      	lsls	r3, r3, #6
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	4313      	orrs	r3, r2
 8004112:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	621a      	str	r2, [r3, #32]
}
 800412e:	bf00      	nop
 8004130:	371c      	adds	r7, #28
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	40012c00 	.word	0x40012c00
 8004140:	40013400 	.word	0x40013400
 8004144:	40014000 	.word	0x40014000
 8004148:	40014400 	.word	0x40014400
 800414c:	40014800 	.word	0x40014800

08004150 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800417e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004194:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	041b      	lsls	r3, r3, #16
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a17      	ldr	r2, [pc, #92]	; (8004204 <TIM_OC5_SetConfig+0xb4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00f      	beq.n	80041ca <TIM_OC5_SetConfig+0x7a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a16      	ldr	r2, [pc, #88]	; (8004208 <TIM_OC5_SetConfig+0xb8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d00b      	beq.n	80041ca <TIM_OC5_SetConfig+0x7a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a15      	ldr	r2, [pc, #84]	; (800420c <TIM_OC5_SetConfig+0xbc>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d007      	beq.n	80041ca <TIM_OC5_SetConfig+0x7a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a14      	ldr	r2, [pc, #80]	; (8004210 <TIM_OC5_SetConfig+0xc0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d003      	beq.n	80041ca <TIM_OC5_SetConfig+0x7a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a13      	ldr	r2, [pc, #76]	; (8004214 <TIM_OC5_SetConfig+0xc4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d109      	bne.n	80041de <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	021b      	lsls	r3, r3, #8
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	621a      	str	r2, [r3, #32]
}
 80041f8:	bf00      	nop
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	40012c00 	.word	0x40012c00
 8004208:	40013400 	.word	0x40013400
 800420c:	40014000 	.word	0x40014000
 8004210:	40014400 	.word	0x40014400
 8004214:	40014800 	.word	0x40014800

08004218 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800424a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	021b      	lsls	r3, r3, #8
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800425e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	051b      	lsls	r3, r3, #20
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a18      	ldr	r2, [pc, #96]	; (80042d0 <TIM_OC6_SetConfig+0xb8>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00f      	beq.n	8004294 <TIM_OC6_SetConfig+0x7c>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a17      	ldr	r2, [pc, #92]	; (80042d4 <TIM_OC6_SetConfig+0xbc>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d00b      	beq.n	8004294 <TIM_OC6_SetConfig+0x7c>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a16      	ldr	r2, [pc, #88]	; (80042d8 <TIM_OC6_SetConfig+0xc0>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d007      	beq.n	8004294 <TIM_OC6_SetConfig+0x7c>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a15      	ldr	r2, [pc, #84]	; (80042dc <TIM_OC6_SetConfig+0xc4>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d003      	beq.n	8004294 <TIM_OC6_SetConfig+0x7c>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a14      	ldr	r2, [pc, #80]	; (80042e0 <TIM_OC6_SetConfig+0xc8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d109      	bne.n	80042a8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800429a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	029b      	lsls	r3, r3, #10
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	621a      	str	r2, [r3, #32]
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40012c00 	.word	0x40012c00
 80042d4:	40013400 	.word	0x40013400
 80042d8:	40014000 	.word	0x40014000
 80042dc:	40014400 	.word	0x40014400
 80042e0:	40014800 	.word	0x40014800

080042e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	2201      	movs	r2, #1
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a1a      	ldr	r2, [r3, #32]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	43db      	mvns	r3, r3
 8004306:	401a      	ands	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a1a      	ldr	r2, [r3, #32]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	fa01 f303 	lsl.w	r3, r1, r3
 800431c:	431a      	orrs	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	621a      	str	r2, [r3, #32]
}
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
	...

08004330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004344:	2302      	movs	r3, #2
 8004346:	e068      	b.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a2e      	ldr	r2, [pc, #184]	; (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d004      	beq.n	800437c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a2d      	ldr	r2, [pc, #180]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d108      	bne.n	800438e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004382:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	4313      	orrs	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004394:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	4313      	orrs	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1e      	ldr	r2, [pc, #120]	; (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d01d      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ba:	d018      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1b      	ldr	r2, [pc, #108]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d013      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a1a      	ldr	r2, [pc, #104]	; (8004434 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00e      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a18      	ldr	r2, [pc, #96]	; (8004438 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d009      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a13      	ldr	r2, [pc, #76]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d004      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a14      	ldr	r2, [pc, #80]	; (800443c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d10c      	bne.n	8004408 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40012c00 	.word	0x40012c00
 800442c:	40013400 	.word	0x40013400
 8004430:	40000400 	.word	0x40000400
 8004434:	40000800 	.word	0x40000800
 8004438:	40000c00 	.word	0x40000c00
 800443c:	40014000 	.word	0x40014000

08004440 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004458:	2302      	movs	r3, #2
 800445a:	e065      	b.n	8004528 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	041b      	lsls	r3, r3, #16
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a16      	ldr	r2, [pc, #88]	; (8004534 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d004      	beq.n	80044ea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a14      	ldr	r2, [pc, #80]	; (8004538 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d115      	bne.n	8004516 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	051b      	lsls	r3, r3, #20
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	4313      	orrs	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	4313      	orrs	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	40012c00 	.word	0x40012c00
 8004538:	40013400 	.word	0x40013400

0800453c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e040      	b.n	800460c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7fc fcfe 	bl	8000f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2224      	movs	r2, #36	; 0x24
 80045a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0201 	bic.w	r2, r2, #1
 80045b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fb2e 	bl	8004c18 <UART_SetConfig>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d101      	bne.n	80045c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e022      	b.n	800460c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fdda 	bl	8005188 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 fe61 	bl	80052cc <UART_CheckIdleState>
 800460a:	4603      	mov	r3, r0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b0ba      	sub	sp, #232	; 0xe8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800463a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800463e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004642:	4013      	ands	r3, r2
 8004644:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004648:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800464c:	2b00      	cmp	r3, #0
 800464e:	d115      	bne.n	800467c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00f      	beq.n	800467c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800465c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b00      	cmp	r3, #0
 8004666:	d009      	beq.n	800467c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 82a6 	beq.w	8004bbe <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	4798      	blx	r3
      }
      return;
 800467a:	e2a0      	b.n	8004bbe <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800467c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 8117 	beq.w	80048b4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004692:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004696:	4b85      	ldr	r3, [pc, #532]	; (80048ac <HAL_UART_IRQHandler+0x298>)
 8004698:	4013      	ands	r3, r2
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 810a 	beq.w	80048b4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d011      	beq.n	80046d0 <HAL_UART_IRQHandler+0xbc>
 80046ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00b      	beq.n	80046d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2201      	movs	r2, #1
 80046be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046c6:	f043 0201 	orr.w	r2, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d011      	beq.n	8004700 <HAL_UART_IRQHandler+0xec>
 80046dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00b      	beq.n	8004700 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2202      	movs	r2, #2
 80046ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046f6:	f043 0204 	orr.w	r2, r3, #4
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	d011      	beq.n	8004730 <HAL_UART_IRQHandler+0x11c>
 800470c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00b      	beq.n	8004730 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2204      	movs	r2, #4
 800471e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004726:	f043 0202 	orr.w	r2, r3, #2
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	2b00      	cmp	r3, #0
 800473a:	d017      	beq.n	800476c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800473c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004740:	f003 0320 	and.w	r3, r3, #32
 8004744:	2b00      	cmp	r3, #0
 8004746:	d105      	bne.n	8004754 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800474c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00b      	beq.n	800476c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2208      	movs	r2, #8
 800475a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004762:	f043 0208 	orr.w	r2, r3, #8
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800476c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004774:	2b00      	cmp	r3, #0
 8004776:	d012      	beq.n	800479e <HAL_UART_IRQHandler+0x18a>
 8004778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800477c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00c      	beq.n	800479e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800478c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004794:	f043 0220 	orr.w	r2, r3, #32
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 820c 	beq.w	8004bc2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80047aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00d      	beq.n	80047d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d007      	beq.n	80047d2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e6:	2b40      	cmp	r3, #64	; 0x40
 80047e8:	d005      	beq.n	80047f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d04f      	beq.n	8004896 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fe75 	bl	80054e6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004806:	2b40      	cmp	r3, #64	; 0x40
 8004808:	d141      	bne.n	800488e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3308      	adds	r3, #8
 8004810:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004820:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004828:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3308      	adds	r3, #8
 8004832:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004836:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800483a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004842:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004846:	e841 2300 	strex	r3, r2, [r1]
 800484a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800484e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1d9      	bne.n	800480a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485a:	2b00      	cmp	r3, #0
 800485c:	d013      	beq.n	8004886 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	4a13      	ldr	r2, [pc, #76]	; (80048b0 <HAL_UART_IRQHandler+0x29c>)
 8004864:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486a:	4618      	mov	r0, r3
 800486c:	f7fc ff4a 	bl	8001704 <HAL_DMA_Abort_IT>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d017      	beq.n	80048a6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004880:	4610      	mov	r0, r2
 8004882:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004884:	e00f      	b.n	80048a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f9b0 	bl	8004bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800488c:	e00b      	b.n	80048a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f9ac 	bl	8004bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004894:	e007      	b.n	80048a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f9a8 	bl	8004bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80048a4:	e18d      	b.n	8004bc2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a6:	bf00      	nop
    return;
 80048a8:	e18b      	b.n	8004bc2 <HAL_UART_IRQHandler+0x5ae>
 80048aa:	bf00      	nop
 80048ac:	04000120 	.word	0x04000120
 80048b0:	080055ad 	.word	0x080055ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	f040 8146 	bne.w	8004b4a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80048be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048c2:	f003 0310 	and.w	r3, r3, #16
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 813f 	beq.w	8004b4a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80048cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048d0:	f003 0310 	and.w	r3, r3, #16
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 8138 	beq.w	8004b4a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2210      	movs	r2, #16
 80048e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ec:	2b40      	cmp	r3, #64	; 0x40
 80048ee:	f040 80b4 	bne.w	8004a5a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 815f 	beq.w	8004bc6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800490e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004912:	429a      	cmp	r2, r3
 8004914:	f080 8157 	bcs.w	8004bc6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800491e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	2b00      	cmp	r3, #0
 8004930:	f040 8085 	bne.w	8004a3e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004940:	e853 3f00 	ldrex	r3, [r3]
 8004944:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004948:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800494c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004950:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800495e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004962:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800496a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800496e:	e841 2300 	strex	r3, r2, [r1]
 8004972:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004976:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1da      	bne.n	8004934 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3308      	adds	r3, #8
 8004984:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800498e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004990:	f023 0301 	bic.w	r3, r3, #1
 8004994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3308      	adds	r3, #8
 800499e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1e1      	bne.n	800497e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3308      	adds	r3, #8
 80049c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3308      	adds	r3, #8
 80049da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e3      	bne.n	80049ba <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2220      	movs	r2, #32
 80049f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a06:	e853 3f00 	ldrex	r3, [r3]
 8004a0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a0e:	f023 0310 	bic.w	r3, r3, #16
 8004a12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a20:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a22:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a28:	e841 2300 	strex	r3, r2, [r1]
 8004a2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e4      	bne.n	80049fe <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fc fe25 	bl	8001688 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	4619      	mov	r1, r3
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f8d4 	bl	8004c00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a58:	e0b5      	b.n	8004bc6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 80a7 	beq.w	8004bca <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004a7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 80a2 	beq.w	8004bca <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8e:	e853 3f00 	ldrex	r3, [r3]
 8004a92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004aa8:	647b      	str	r3, [r7, #68]	; 0x44
 8004aaa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004aae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ab0:	e841 2300 	strex	r3, r2, [r1]
 8004ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1e4      	bne.n	8004a86 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3308      	adds	r3, #8
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	e853 3f00 	ldrex	r3, [r3]
 8004aca:	623b      	str	r3, [r7, #32]
   return(result);
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	f023 0301 	bic.w	r3, r3, #1
 8004ad2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3308      	adds	r3, #8
 8004adc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ae0:	633a      	str	r2, [r7, #48]	; 0x30
 8004ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ae8:	e841 2300 	strex	r3, r2, [r1]
 8004aec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e3      	bne.n	8004abc <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2220      	movs	r2, #32
 8004af8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	e853 3f00 	ldrex	r3, [r3]
 8004b12:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0310 	bic.w	r3, r3, #16
 8004b1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	461a      	mov	r2, r3
 8004b24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b28:	61fb      	str	r3, [r7, #28]
 8004b2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2c:	69b9      	ldr	r1, [r7, #24]
 8004b2e:	69fa      	ldr	r2, [r7, #28]
 8004b30:	e841 2300 	strex	r3, r2, [r1]
 8004b34:	617b      	str	r3, [r7, #20]
   return(result);
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1e4      	bne.n	8004b06 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b40:	4619      	mov	r1, r3
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f85c 	bl	8004c00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b48:	e03f      	b.n	8004bca <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00e      	beq.n	8004b74 <HAL_UART_IRQHandler+0x560>
 8004b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d008      	beq.n	8004b74 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fd5d 	bl	800562c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b72:	e02d      	b.n	8004bd0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00e      	beq.n	8004b9e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d008      	beq.n	8004b9e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01c      	beq.n	8004bce <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	4798      	blx	r3
    }
    return;
 8004b9c:	e017      	b.n	8004bce <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d012      	beq.n	8004bd0 <HAL_UART_IRQHandler+0x5bc>
 8004baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00c      	beq.n	8004bd0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fd0e 	bl	80055d8 <UART_EndTransmit_IT>
    return;
 8004bbc:	e008      	b.n	8004bd0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004bbe:	bf00      	nop
 8004bc0:	e006      	b.n	8004bd0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004bc2:	bf00      	nop
 8004bc4:	e004      	b.n	8004bd0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004bc6:	bf00      	nop
 8004bc8:	e002      	b.n	8004bd0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004bca:	bf00      	nop
 8004bcc:	e000      	b.n	8004bd0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004bce:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004bd0:	37e8      	adds	r7, #232	; 0xe8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop

08004bd8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	460b      	mov	r3, r1
 8004c0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c1c:	b08a      	sub	sp, #40	; 0x28
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c22:	2300      	movs	r3, #0
 8004c24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	431a      	orrs	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	4ba4      	ldr	r3, [pc, #656]	; (8004ed8 <UART_SetConfig+0x2c0>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	6812      	ldr	r2, [r2, #0]
 8004c4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c50:	430b      	orrs	r3, r1
 8004c52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a99      	ldr	r2, [pc, #612]	; (8004edc <UART_SetConfig+0x2c4>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d004      	beq.n	8004c84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c80:	4313      	orrs	r3, r2
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c94:	430a      	orrs	r2, r1
 8004c96:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a90      	ldr	r2, [pc, #576]	; (8004ee0 <UART_SetConfig+0x2c8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d126      	bne.n	8004cf0 <UART_SetConfig+0xd8>
 8004ca2:	4b90      	ldr	r3, [pc, #576]	; (8004ee4 <UART_SetConfig+0x2cc>)
 8004ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca8:	f003 0303 	and.w	r3, r3, #3
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d81b      	bhi.n	8004ce8 <UART_SetConfig+0xd0>
 8004cb0:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <UART_SetConfig+0xa0>)
 8004cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb6:	bf00      	nop
 8004cb8:	08004cc9 	.word	0x08004cc9
 8004cbc:	08004cd9 	.word	0x08004cd9
 8004cc0:	08004cd1 	.word	0x08004cd1
 8004cc4:	08004ce1 	.word	0x08004ce1
 8004cc8:	2301      	movs	r3, #1
 8004cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cce:	e116      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd6:	e112      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004cd8:	2304      	movs	r3, #4
 8004cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cde:	e10e      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004ce0:	2308      	movs	r3, #8
 8004ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce6:	e10a      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004ce8:	2310      	movs	r3, #16
 8004cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cee:	e106      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a7c      	ldr	r2, [pc, #496]	; (8004ee8 <UART_SetConfig+0x2d0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d138      	bne.n	8004d6c <UART_SetConfig+0x154>
 8004cfa:	4b7a      	ldr	r3, [pc, #488]	; (8004ee4 <UART_SetConfig+0x2cc>)
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d00:	f003 030c 	and.w	r3, r3, #12
 8004d04:	2b0c      	cmp	r3, #12
 8004d06:	d82d      	bhi.n	8004d64 <UART_SetConfig+0x14c>
 8004d08:	a201      	add	r2, pc, #4	; (adr r2, 8004d10 <UART_SetConfig+0xf8>)
 8004d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0e:	bf00      	nop
 8004d10:	08004d45 	.word	0x08004d45
 8004d14:	08004d65 	.word	0x08004d65
 8004d18:	08004d65 	.word	0x08004d65
 8004d1c:	08004d65 	.word	0x08004d65
 8004d20:	08004d55 	.word	0x08004d55
 8004d24:	08004d65 	.word	0x08004d65
 8004d28:	08004d65 	.word	0x08004d65
 8004d2c:	08004d65 	.word	0x08004d65
 8004d30:	08004d4d 	.word	0x08004d4d
 8004d34:	08004d65 	.word	0x08004d65
 8004d38:	08004d65 	.word	0x08004d65
 8004d3c:	08004d65 	.word	0x08004d65
 8004d40:	08004d5d 	.word	0x08004d5d
 8004d44:	2300      	movs	r3, #0
 8004d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d4a:	e0d8      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d52:	e0d4      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004d54:	2304      	movs	r3, #4
 8004d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d5a:	e0d0      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004d5c:	2308      	movs	r3, #8
 8004d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d62:	e0cc      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004d64:	2310      	movs	r3, #16
 8004d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d6a:	e0c8      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a5e      	ldr	r2, [pc, #376]	; (8004eec <UART_SetConfig+0x2d4>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d125      	bne.n	8004dc2 <UART_SetConfig+0x1aa>
 8004d76:	4b5b      	ldr	r3, [pc, #364]	; (8004ee4 <UART_SetConfig+0x2cc>)
 8004d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d80:	2b30      	cmp	r3, #48	; 0x30
 8004d82:	d016      	beq.n	8004db2 <UART_SetConfig+0x19a>
 8004d84:	2b30      	cmp	r3, #48	; 0x30
 8004d86:	d818      	bhi.n	8004dba <UART_SetConfig+0x1a2>
 8004d88:	2b20      	cmp	r3, #32
 8004d8a:	d00a      	beq.n	8004da2 <UART_SetConfig+0x18a>
 8004d8c:	2b20      	cmp	r3, #32
 8004d8e:	d814      	bhi.n	8004dba <UART_SetConfig+0x1a2>
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <UART_SetConfig+0x182>
 8004d94:	2b10      	cmp	r3, #16
 8004d96:	d008      	beq.n	8004daa <UART_SetConfig+0x192>
 8004d98:	e00f      	b.n	8004dba <UART_SetConfig+0x1a2>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da0:	e0ad      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004da2:	2302      	movs	r3, #2
 8004da4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da8:	e0a9      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004daa:	2304      	movs	r3, #4
 8004dac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004db0:	e0a5      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004db2:	2308      	movs	r3, #8
 8004db4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004db8:	e0a1      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004dba:	2310      	movs	r3, #16
 8004dbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dc0:	e09d      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a4a      	ldr	r2, [pc, #296]	; (8004ef0 <UART_SetConfig+0x2d8>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d125      	bne.n	8004e18 <UART_SetConfig+0x200>
 8004dcc:	4b45      	ldr	r3, [pc, #276]	; (8004ee4 <UART_SetConfig+0x2cc>)
 8004dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004dd6:	2bc0      	cmp	r3, #192	; 0xc0
 8004dd8:	d016      	beq.n	8004e08 <UART_SetConfig+0x1f0>
 8004dda:	2bc0      	cmp	r3, #192	; 0xc0
 8004ddc:	d818      	bhi.n	8004e10 <UART_SetConfig+0x1f8>
 8004dde:	2b80      	cmp	r3, #128	; 0x80
 8004de0:	d00a      	beq.n	8004df8 <UART_SetConfig+0x1e0>
 8004de2:	2b80      	cmp	r3, #128	; 0x80
 8004de4:	d814      	bhi.n	8004e10 <UART_SetConfig+0x1f8>
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <UART_SetConfig+0x1d8>
 8004dea:	2b40      	cmp	r3, #64	; 0x40
 8004dec:	d008      	beq.n	8004e00 <UART_SetConfig+0x1e8>
 8004dee:	e00f      	b.n	8004e10 <UART_SetConfig+0x1f8>
 8004df0:	2300      	movs	r3, #0
 8004df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df6:	e082      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfe:	e07e      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004e00:	2304      	movs	r3, #4
 8004e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e06:	e07a      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004e08:	2308      	movs	r3, #8
 8004e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e0e:	e076      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004e10:	2310      	movs	r3, #16
 8004e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e16:	e072      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a35      	ldr	r2, [pc, #212]	; (8004ef4 <UART_SetConfig+0x2dc>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d12a      	bne.n	8004e78 <UART_SetConfig+0x260>
 8004e22:	4b30      	ldr	r3, [pc, #192]	; (8004ee4 <UART_SetConfig+0x2cc>)
 8004e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e30:	d01a      	beq.n	8004e68 <UART_SetConfig+0x250>
 8004e32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e36:	d81b      	bhi.n	8004e70 <UART_SetConfig+0x258>
 8004e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e3c:	d00c      	beq.n	8004e58 <UART_SetConfig+0x240>
 8004e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e42:	d815      	bhi.n	8004e70 <UART_SetConfig+0x258>
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <UART_SetConfig+0x238>
 8004e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e4c:	d008      	beq.n	8004e60 <UART_SetConfig+0x248>
 8004e4e:	e00f      	b.n	8004e70 <UART_SetConfig+0x258>
 8004e50:	2300      	movs	r3, #0
 8004e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e56:	e052      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5e:	e04e      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004e60:	2304      	movs	r3, #4
 8004e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e66:	e04a      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004e68:	2308      	movs	r3, #8
 8004e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e6e:	e046      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004e70:	2310      	movs	r3, #16
 8004e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e76:	e042      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a17      	ldr	r2, [pc, #92]	; (8004edc <UART_SetConfig+0x2c4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d13a      	bne.n	8004ef8 <UART_SetConfig+0x2e0>
 8004e82:	4b18      	ldr	r3, [pc, #96]	; (8004ee4 <UART_SetConfig+0x2cc>)
 8004e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e90:	d01a      	beq.n	8004ec8 <UART_SetConfig+0x2b0>
 8004e92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e96:	d81b      	bhi.n	8004ed0 <UART_SetConfig+0x2b8>
 8004e98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e9c:	d00c      	beq.n	8004eb8 <UART_SetConfig+0x2a0>
 8004e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ea2:	d815      	bhi.n	8004ed0 <UART_SetConfig+0x2b8>
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <UART_SetConfig+0x298>
 8004ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eac:	d008      	beq.n	8004ec0 <UART_SetConfig+0x2a8>
 8004eae:	e00f      	b.n	8004ed0 <UART_SetConfig+0x2b8>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eb6:	e022      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ebe:	e01e      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004ec0:	2304      	movs	r3, #4
 8004ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ec6:	e01a      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004ec8:	2308      	movs	r3, #8
 8004eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ece:	e016      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004ed0:	2310      	movs	r3, #16
 8004ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ed6:	e012      	b.n	8004efe <UART_SetConfig+0x2e6>
 8004ed8:	efff69f3 	.word	0xefff69f3
 8004edc:	40008000 	.word	0x40008000
 8004ee0:	40013800 	.word	0x40013800
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	40004400 	.word	0x40004400
 8004eec:	40004800 	.word	0x40004800
 8004ef0:	40004c00 	.word	0x40004c00
 8004ef4:	40005000 	.word	0x40005000
 8004ef8:	2310      	movs	r3, #16
 8004efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a9f      	ldr	r2, [pc, #636]	; (8005180 <UART_SetConfig+0x568>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d17a      	bne.n	8004ffe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d824      	bhi.n	8004f5a <UART_SetConfig+0x342>
 8004f10:	a201      	add	r2, pc, #4	; (adr r2, 8004f18 <UART_SetConfig+0x300>)
 8004f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f16:	bf00      	nop
 8004f18:	08004f3d 	.word	0x08004f3d
 8004f1c:	08004f5b 	.word	0x08004f5b
 8004f20:	08004f45 	.word	0x08004f45
 8004f24:	08004f5b 	.word	0x08004f5b
 8004f28:	08004f4b 	.word	0x08004f4b
 8004f2c:	08004f5b 	.word	0x08004f5b
 8004f30:	08004f5b 	.word	0x08004f5b
 8004f34:	08004f5b 	.word	0x08004f5b
 8004f38:	08004f53 	.word	0x08004f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f3c:	f7fd fc5a 	bl	80027f4 <HAL_RCC_GetPCLK1Freq>
 8004f40:	61f8      	str	r0, [r7, #28]
        break;
 8004f42:	e010      	b.n	8004f66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f44:	4b8f      	ldr	r3, [pc, #572]	; (8005184 <UART_SetConfig+0x56c>)
 8004f46:	61fb      	str	r3, [r7, #28]
        break;
 8004f48:	e00d      	b.n	8004f66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f4a:	f7fd fbbb 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8004f4e:	61f8      	str	r0, [r7, #28]
        break;
 8004f50:	e009      	b.n	8004f66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f56:	61fb      	str	r3, [r7, #28]
        break;
 8004f58:	e005      	b.n	8004f66 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 80fb 	beq.w	8005164 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	4613      	mov	r3, r2
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	4413      	add	r3, r2
 8004f78:	69fa      	ldr	r2, [r7, #28]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d305      	bcc.n	8004f8a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f84:	69fa      	ldr	r2, [r7, #28]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d903      	bls.n	8004f92 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f90:	e0e8      	b.n	8005164 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	2200      	movs	r2, #0
 8004f96:	461c      	mov	r4, r3
 8004f98:	4615      	mov	r5, r2
 8004f9a:	f04f 0200 	mov.w	r2, #0
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	022b      	lsls	r3, r5, #8
 8004fa4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004fa8:	0222      	lsls	r2, r4, #8
 8004faa:	68f9      	ldr	r1, [r7, #12]
 8004fac:	6849      	ldr	r1, [r1, #4]
 8004fae:	0849      	lsrs	r1, r1, #1
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	4688      	mov	r8, r1
 8004fb4:	4681      	mov	r9, r0
 8004fb6:	eb12 0a08 	adds.w	sl, r2, r8
 8004fba:	eb43 0b09 	adc.w	fp, r3, r9
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	603b      	str	r3, [r7, #0]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fcc:	4650      	mov	r0, sl
 8004fce:	4659      	mov	r1, fp
 8004fd0:	f7fb f8fa 	bl	80001c8 <__aeabi_uldivmod>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4613      	mov	r3, r2
 8004fda:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fe2:	d308      	bcc.n	8004ff6 <UART_SetConfig+0x3de>
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fea:	d204      	bcs.n	8004ff6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	60da      	str	r2, [r3, #12]
 8004ff4:	e0b6      	b.n	8005164 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ffc:	e0b2      	b.n	8005164 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005006:	d15e      	bne.n	80050c6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005008:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800500c:	2b08      	cmp	r3, #8
 800500e:	d828      	bhi.n	8005062 <UART_SetConfig+0x44a>
 8005010:	a201      	add	r2, pc, #4	; (adr r2, 8005018 <UART_SetConfig+0x400>)
 8005012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005016:	bf00      	nop
 8005018:	0800503d 	.word	0x0800503d
 800501c:	08005045 	.word	0x08005045
 8005020:	0800504d 	.word	0x0800504d
 8005024:	08005063 	.word	0x08005063
 8005028:	08005053 	.word	0x08005053
 800502c:	08005063 	.word	0x08005063
 8005030:	08005063 	.word	0x08005063
 8005034:	08005063 	.word	0x08005063
 8005038:	0800505b 	.word	0x0800505b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800503c:	f7fd fbda 	bl	80027f4 <HAL_RCC_GetPCLK1Freq>
 8005040:	61f8      	str	r0, [r7, #28]
        break;
 8005042:	e014      	b.n	800506e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005044:	f7fd fbec 	bl	8002820 <HAL_RCC_GetPCLK2Freq>
 8005048:	61f8      	str	r0, [r7, #28]
        break;
 800504a:	e010      	b.n	800506e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800504c:	4b4d      	ldr	r3, [pc, #308]	; (8005184 <UART_SetConfig+0x56c>)
 800504e:	61fb      	str	r3, [r7, #28]
        break;
 8005050:	e00d      	b.n	800506e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005052:	f7fd fb37 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8005056:	61f8      	str	r0, [r7, #28]
        break;
 8005058:	e009      	b.n	800506e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800505a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800505e:	61fb      	str	r3, [r7, #28]
        break;
 8005060:	e005      	b.n	800506e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005062:	2300      	movs	r3, #0
 8005064:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800506c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d077      	beq.n	8005164 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	005a      	lsls	r2, r3, #1
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	085b      	lsrs	r3, r3, #1
 800507e:	441a      	add	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	fbb2 f3f3 	udiv	r3, r2, r3
 8005088:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	2b0f      	cmp	r3, #15
 800508e:	d916      	bls.n	80050be <UART_SetConfig+0x4a6>
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005096:	d212      	bcs.n	80050be <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	b29b      	uxth	r3, r3
 800509c:	f023 030f 	bic.w	r3, r3, #15
 80050a0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	085b      	lsrs	r3, r3, #1
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	8afb      	ldrh	r3, [r7, #22]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	8afa      	ldrh	r2, [r7, #22]
 80050ba:	60da      	str	r2, [r3, #12]
 80050bc:	e052      	b.n	8005164 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050c4:	e04e      	b.n	8005164 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050ca:	2b08      	cmp	r3, #8
 80050cc:	d827      	bhi.n	800511e <UART_SetConfig+0x506>
 80050ce:	a201      	add	r2, pc, #4	; (adr r2, 80050d4 <UART_SetConfig+0x4bc>)
 80050d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d4:	080050f9 	.word	0x080050f9
 80050d8:	08005101 	.word	0x08005101
 80050dc:	08005109 	.word	0x08005109
 80050e0:	0800511f 	.word	0x0800511f
 80050e4:	0800510f 	.word	0x0800510f
 80050e8:	0800511f 	.word	0x0800511f
 80050ec:	0800511f 	.word	0x0800511f
 80050f0:	0800511f 	.word	0x0800511f
 80050f4:	08005117 	.word	0x08005117
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050f8:	f7fd fb7c 	bl	80027f4 <HAL_RCC_GetPCLK1Freq>
 80050fc:	61f8      	str	r0, [r7, #28]
        break;
 80050fe:	e014      	b.n	800512a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005100:	f7fd fb8e 	bl	8002820 <HAL_RCC_GetPCLK2Freq>
 8005104:	61f8      	str	r0, [r7, #28]
        break;
 8005106:	e010      	b.n	800512a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005108:	4b1e      	ldr	r3, [pc, #120]	; (8005184 <UART_SetConfig+0x56c>)
 800510a:	61fb      	str	r3, [r7, #28]
        break;
 800510c:	e00d      	b.n	800512a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800510e:	f7fd fad9 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8005112:	61f8      	str	r0, [r7, #28]
        break;
 8005114:	e009      	b.n	800512a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800511a:	61fb      	str	r3, [r7, #28]
        break;
 800511c:	e005      	b.n	800512a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800511e:	2300      	movs	r3, #0
 8005120:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005128:	bf00      	nop
    }

    if (pclk != 0U)
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d019      	beq.n	8005164 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	085a      	lsrs	r2, r3, #1
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	441a      	add	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005142:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	2b0f      	cmp	r3, #15
 8005148:	d909      	bls.n	800515e <UART_SetConfig+0x546>
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005150:	d205      	bcs.n	800515e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60da      	str	r2, [r3, #12]
 800515c:	e002      	b.n	8005164 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005170:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005174:	4618      	mov	r0, r3
 8005176:	3728      	adds	r7, #40	; 0x28
 8005178:	46bd      	mov	sp, r7
 800517a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800517e:	bf00      	nop
 8005180:	40008000 	.word	0x40008000
 8005184:	00f42400 	.word	0x00f42400

08005188 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00a      	beq.n	80051f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	f003 0310 	and.w	r3, r3, #16
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01a      	beq.n	800529e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005286:	d10a      	bne.n	800529e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	605a      	str	r2, [r3, #4]
  }
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052dc:	f7fb ffda 	bl	8001294 <HAL_GetTick>
 80052e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0308 	and.w	r3, r3, #8
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d10e      	bne.n	800530e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f82d 	bl	800535e <UART_WaitOnFlagUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e023      	b.n	8005356 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b04      	cmp	r3, #4
 800531a:	d10e      	bne.n	800533a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800531c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f817 	bl	800535e <UART_WaitOnFlagUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e00d      	b.n	8005356 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2220      	movs	r2, #32
 8005344:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b09c      	sub	sp, #112	; 0x70
 8005362:	af00      	add	r7, sp, #0
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	603b      	str	r3, [r7, #0]
 800536a:	4613      	mov	r3, r2
 800536c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800536e:	e0a5      	b.n	80054bc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005376:	f000 80a1 	beq.w	80054bc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800537a:	f7fb ff8b 	bl	8001294 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005386:	429a      	cmp	r2, r3
 8005388:	d302      	bcc.n	8005390 <UART_WaitOnFlagUntilTimeout+0x32>
 800538a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800538c:	2b00      	cmp	r3, #0
 800538e:	d13e      	bne.n	800540e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800539e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053a4:	667b      	str	r3, [r7, #100]	; 0x64
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053b0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053b6:	e841 2300 	strex	r3, r2, [r1]
 80053ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80053bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1e6      	bne.n	8005390 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3308      	adds	r3, #8
 80053c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053cc:	e853 3f00 	ldrex	r3, [r3]
 80053d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d4:	f023 0301 	bic.w	r3, r3, #1
 80053d8:	663b      	str	r3, [r7, #96]	; 0x60
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3308      	adds	r3, #8
 80053e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80053e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053ea:	e841 2300 	strex	r3, r2, [r1]
 80053ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1e5      	bne.n	80053c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2220      	movs	r2, #32
 80053fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2220      	movs	r2, #32
 8005400:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e067      	b.n	80054de <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b00      	cmp	r3, #0
 800541a:	d04f      	beq.n	80054bc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800542a:	d147      	bne.n	80054bc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005434:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543e:	e853 3f00 	ldrex	r3, [r3]
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800544a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005454:	637b      	str	r3, [r7, #52]	; 0x34
 8005456:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005458:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800545a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800545c:	e841 2300 	strex	r3, r2, [r1]
 8005460:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e6      	bne.n	8005436 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3308      	adds	r3, #8
 800546e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	e853 3f00 	ldrex	r3, [r3]
 8005476:	613b      	str	r3, [r7, #16]
   return(result);
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f023 0301 	bic.w	r3, r3, #1
 800547e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3308      	adds	r3, #8
 8005486:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005488:	623a      	str	r2, [r7, #32]
 800548a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548c:	69f9      	ldr	r1, [r7, #28]
 800548e:	6a3a      	ldr	r2, [r7, #32]
 8005490:	e841 2300 	strex	r3, r2, [r1]
 8005494:	61bb      	str	r3, [r7, #24]
   return(result);
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1e5      	bne.n	8005468 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2220      	movs	r2, #32
 80054a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2220      	movs	r2, #32
 80054a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2220      	movs	r2, #32
 80054ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e010      	b.n	80054de <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	69da      	ldr	r2, [r3, #28]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	4013      	ands	r3, r2
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	bf0c      	ite	eq
 80054cc:	2301      	moveq	r3, #1
 80054ce:	2300      	movne	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	461a      	mov	r2, r3
 80054d4:	79fb      	ldrb	r3, [r7, #7]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	f43f af4a 	beq.w	8005370 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3770      	adds	r7, #112	; 0x70
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b095      	sub	sp, #84	; 0x54
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f6:	e853 3f00 	ldrex	r3, [r3]
 80054fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	461a      	mov	r2, r3
 800550a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800550c:	643b      	str	r3, [r7, #64]	; 0x40
 800550e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005510:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005512:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005514:	e841 2300 	strex	r3, r2, [r1]
 8005518:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800551a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1e6      	bne.n	80054ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	3308      	adds	r3, #8
 8005526:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	e853 3f00 	ldrex	r3, [r3]
 800552e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	f023 0301 	bic.w	r3, r3, #1
 8005536:	64bb      	str	r3, [r7, #72]	; 0x48
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3308      	adds	r3, #8
 800553e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005540:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005542:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005544:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005548:	e841 2300 	strex	r3, r2, [r1]
 800554c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1e5      	bne.n	8005520 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005558:	2b01      	cmp	r3, #1
 800555a:	d118      	bne.n	800558e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	e853 3f00 	ldrex	r3, [r3]
 8005568:	60bb      	str	r3, [r7, #8]
   return(result);
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	f023 0310 	bic.w	r3, r3, #16
 8005570:	647b      	str	r3, [r7, #68]	; 0x44
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	461a      	mov	r2, r3
 8005578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800557a:	61bb      	str	r3, [r7, #24]
 800557c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557e:	6979      	ldr	r1, [r7, #20]
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	e841 2300 	strex	r3, r2, [r1]
 8005586:	613b      	str	r3, [r7, #16]
   return(result);
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1e6      	bne.n	800555c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2220      	movs	r2, #32
 8005592:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	665a      	str	r2, [r3, #100]	; 0x64
}
 80055a0:	bf00      	nop
 80055a2:	3754      	adds	r7, #84	; 0x54
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f7ff fb0e 	bl	8004bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055d0:	bf00      	nop
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b088      	sub	sp, #32
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	e853 3f00 	ldrex	r3, [r3]
 80055ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f4:	61fb      	str	r3, [r7, #28]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	61bb      	str	r3, [r7, #24]
 8005600:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005602:	6979      	ldr	r1, [r7, #20]
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	e841 2300 	strex	r3, r2, [r1]
 800560a:	613b      	str	r3, [r7, #16]
   return(result);
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1e6      	bne.n	80055e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2220      	movs	r2, #32
 8005616:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7ff fada 	bl	8004bd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005624:	bf00      	nop
 8005626:	3720      	adds	r7, #32
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <__libc_init_array>:
 8005640:	b570      	push	{r4, r5, r6, lr}
 8005642:	4d0d      	ldr	r5, [pc, #52]	; (8005678 <__libc_init_array+0x38>)
 8005644:	4c0d      	ldr	r4, [pc, #52]	; (800567c <__libc_init_array+0x3c>)
 8005646:	1b64      	subs	r4, r4, r5
 8005648:	10a4      	asrs	r4, r4, #2
 800564a:	2600      	movs	r6, #0
 800564c:	42a6      	cmp	r6, r4
 800564e:	d109      	bne.n	8005664 <__libc_init_array+0x24>
 8005650:	4d0b      	ldr	r5, [pc, #44]	; (8005680 <__libc_init_array+0x40>)
 8005652:	4c0c      	ldr	r4, [pc, #48]	; (8005684 <__libc_init_array+0x44>)
 8005654:	f000 f820 	bl	8005698 <_init>
 8005658:	1b64      	subs	r4, r4, r5
 800565a:	10a4      	asrs	r4, r4, #2
 800565c:	2600      	movs	r6, #0
 800565e:	42a6      	cmp	r6, r4
 8005660:	d105      	bne.n	800566e <__libc_init_array+0x2e>
 8005662:	bd70      	pop	{r4, r5, r6, pc}
 8005664:	f855 3b04 	ldr.w	r3, [r5], #4
 8005668:	4798      	blx	r3
 800566a:	3601      	adds	r6, #1
 800566c:	e7ee      	b.n	800564c <__libc_init_array+0xc>
 800566e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005672:	4798      	blx	r3
 8005674:	3601      	adds	r6, #1
 8005676:	e7f2      	b.n	800565e <__libc_init_array+0x1e>
 8005678:	08005700 	.word	0x08005700
 800567c:	08005700 	.word	0x08005700
 8005680:	08005700 	.word	0x08005700
 8005684:	08005704 	.word	0x08005704

08005688 <memset>:
 8005688:	4402      	add	r2, r0
 800568a:	4603      	mov	r3, r0
 800568c:	4293      	cmp	r3, r2
 800568e:	d100      	bne.n	8005692 <memset+0xa>
 8005690:	4770      	bx	lr
 8005692:	f803 1b01 	strb.w	r1, [r3], #1
 8005696:	e7f9      	b.n	800568c <memset+0x4>

08005698 <_init>:
 8005698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569a:	bf00      	nop
 800569c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800569e:	bc08      	pop	{r3}
 80056a0:	469e      	mov	lr, r3
 80056a2:	4770      	bx	lr

080056a4 <_fini>:
 80056a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a6:	bf00      	nop
 80056a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056aa:	bc08      	pop	{r3}
 80056ac:	469e      	mov	lr, r3
 80056ae:	4770      	bx	lr
