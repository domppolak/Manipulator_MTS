
Manipulator_MTS_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007024  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080071b4  080071b4  000171b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072d8  080072d8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080072d8  080072d8  000172d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072e0  080072e0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072e0  080072e0  000172e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072e4  080072e4  000172e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080072e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  2000007c  08007364  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08007364  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e95  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae3  00000000  00000000  00033f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  00036a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  00037b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000341f  00000000  00000000  00038b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147f1  00000000  00000000  0003bf6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5ed4  00000000  00000000  00050760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00146634  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e40  00000000  00000000  00146684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800719c 	.word	0x0800719c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800719c 	.word	0x0800719c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <MX_DMA_Init+0x48>)
 800057c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800057e:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <MX_DMA_Init+0x48>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6493      	str	r3, [r2, #72]	; 0x48
 8000586:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <MX_DMA_Init+0x48>)
 8000588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	2010      	movs	r0, #16
 8000598:	f001 f9d1 	bl	800193e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800059c:	2010      	movs	r0, #16
 800059e:	f001 f9ea 	bl	8001976 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	2011      	movs	r0, #17
 80005a8:	f001 f9c9 	bl	800193e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80005ac:	2011      	movs	r0, #17
 80005ae:	f001 f9e2 	bl	8001976 <HAL_NVIC_EnableIRQ>

}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000

080005c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	; 0x28
 80005c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d6:	4b2a      	ldr	r3, [pc, #168]	; (8000680 <MX_GPIO_Init+0xc0>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	4a29      	ldr	r2, [pc, #164]	; (8000680 <MX_GPIO_Init+0xc0>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e2:	4b27      	ldr	r3, [pc, #156]	; (8000680 <MX_GPIO_Init+0xc0>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	4b24      	ldr	r3, [pc, #144]	; (8000680 <MX_GPIO_Init+0xc0>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	4a23      	ldr	r2, [pc, #140]	; (8000680 <MX_GPIO_Init+0xc0>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fa:	4b21      	ldr	r3, [pc, #132]	; (8000680 <MX_GPIO_Init+0xc0>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000606:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <MX_GPIO_Init+0xc0>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	4a1d      	ldr	r2, [pc, #116]	; (8000680 <MX_GPIO_Init+0xc0>)
 800060c:	f043 0310 	orr.w	r3, r3, #16
 8000610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000612:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <MX_GPIO_Init+0xc0>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	f003 0310 	and.w	r3, r3, #16
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <MX_GPIO_Init+0xc0>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	4a17      	ldr	r2, [pc, #92]	; (8000680 <MX_GPIO_Init+0xc0>)
 8000624:	f043 0308 	orr.w	r3, r3, #8
 8000628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_GPIO_Init+0xc0>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_GPIO_Init+0xc0>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	4a11      	ldr	r2, [pc, #68]	; (8000680 <MX_GPIO_Init+0xc0>)
 800063c:	f043 0302 	orr.w	r3, r3, #2
 8000640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_GPIO_Init+0xc0>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AIN2_Pin|AIN1_Pin|BIN2_Pin|BIN1_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 8000654:	480b      	ldr	r0, [pc, #44]	; (8000684 <MX_GPIO_Init+0xc4>)
 8000656:	f001 fd39 	bl	80020cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN2_Pin|BIN1_Pin;
 800065a:	f44f 4334 	mov.w	r3, #46080	; 0xb400
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	2301      	movs	r3, #1
 8000662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2300      	movs	r3, #0
 800066a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4619      	mov	r1, r3
 8000672:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_GPIO_Init+0xc4>)
 8000674:	f001 fb80 	bl	8001d78 <HAL_GPIO_Init>

}
 8000678:	bf00      	nop
 800067a:	3728      	adds	r7, #40	; 0x28
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40021000 	.word	0x40021000
 8000684:	48001000 	.word	0x48001000

08000688 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 50);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	b29a      	uxth	r2, r3
 8000698:	2332      	movs	r3, #50	; 0x32
 800069a:	68b9      	ldr	r1, [r7, #8]
 800069c:	4803      	ldr	r0, [pc, #12]	; (80006ac <_write+0x24>)
 800069e:	f004 fa91 	bl	8004bc4 <HAL_UART_Transmit>
	return len;
 80006a2:	687b      	ldr	r3, [r7, #4]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000230 	.word	0x20000230

080006b0 <menu>:

void menu()
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	printf("Manipulator MTS\n\r");
 80006b4:	4817      	ldr	r0, [pc, #92]	; (8000714 <menu+0x64>)
 80006b6:	f005 fde3 	bl	8006280 <iprintf>
	printf("q1 %d", Pos.q1);
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <menu+0x68>)
 80006bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006c0:	4619      	mov	r1, r3
 80006c2:	4816      	ldr	r0, [pc, #88]	; (800071c <menu+0x6c>)
 80006c4:	f005 fddc 	bl	8006280 <iprintf>
	printf("q2 %d", Pos.q2);
 80006c8:	4b13      	ldr	r3, [pc, #76]	; (8000718 <menu+0x68>)
 80006ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80006ce:	4619      	mov	r1, r3
 80006d0:	4813      	ldr	r0, [pc, #76]	; (8000720 <menu+0x70>)
 80006d2:	f005 fdd5 	bl	8006280 <iprintf>
	printf("q3 %d", Pos.q3);
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <menu+0x68>)
 80006d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80006dc:	4619      	mov	r1, r3
 80006de:	4811      	ldr	r0, [pc, #68]	; (8000724 <menu+0x74>)
 80006e0:	f005 fdce 	bl	8006280 <iprintf>
	printf("X %d", Pos.x);
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <menu+0x68>)
 80006e6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80006ea:	4619      	mov	r1, r3
 80006ec:	480e      	ldr	r0, [pc, #56]	; (8000728 <menu+0x78>)
 80006ee:	f005 fdc7 	bl	8006280 <iprintf>
	printf("Y %d", Pos.y);
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <menu+0x68>)
 80006f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80006f8:	4619      	mov	r1, r3
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <menu+0x7c>)
 80006fc:	f005 fdc0 	bl	8006280 <iprintf>
	printf("Z %d", Pos.z);
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <menu+0x68>)
 8000702:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000706:	4619      	mov	r1, r3
 8000708:	4809      	ldr	r0, [pc, #36]	; (8000730 <menu+0x80>)
 800070a:	f005 fdb9 	bl	8006280 <iprintf>
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	080071b4 	.word	0x080071b4
 8000718:	200000a0 	.word	0x200000a0
 800071c:	080071c8 	.word	0x080071c8
 8000720:	080071d0 	.word	0x080071d0
 8000724:	080071d8 	.word	0x080071d8
 8000728:	080071e0 	.word	0x080071e0
 800072c:	080071e8 	.word	0x080071e8
 8000730:	080071f0 	.word	0x080071f0

08000734 <motorB_Direction>:
		HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_SET);
	}
}

void motorB_Direction(MotorDirection dir){
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	if(dir == CW){
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d10b      	bne.n	800075c <motorB_Direction+0x28>
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800074a:	480e      	ldr	r0, [pc, #56]	; (8000784 <motorB_Direction+0x50>)
 800074c:	f001 fcbe 	bl	80020cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000756:	480b      	ldr	r0, [pc, #44]	; (8000784 <motorB_Direction+0x50>)
 8000758:	f001 fcb8 	bl	80020cc <HAL_GPIO_WritePin>
	}

	if(dir == CCW){
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d10b      	bne.n	800077a <motorB_Direction+0x46>
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000768:	4806      	ldr	r0, [pc, #24]	; (8000784 <motorB_Direction+0x50>)
 800076a:	f001 fcaf 	bl	80020cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000774:	4803      	ldr	r0, [pc, #12]	; (8000784 <motorB_Direction+0x50>)
 8000776:	f001 fca9 	bl	80020cc <HAL_GPIO_WritePin>
	}
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	48001000 	.word	0x48001000

08000788 <motorB_move>:
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, abs(pwm));
}

void motorB_move(int32_t pwm){
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	if(pwm > 100){
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b64      	cmp	r3, #100	; 0x64
 8000794:	dd02      	ble.n	800079c <motorB_move+0x14>
		pwm = 100;
 8000796:	2364      	movs	r3, #100	; 0x64
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	e006      	b.n	80007aa <motorB_move+0x22>
	}
	else if(pwm < -100){
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80007a2:	da02      	bge.n	80007aa <motorB_move+0x22>
		pwm = -100;
 80007a4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80007a8:	607b      	str	r3, [r7, #4]
	}

	if(pwm >= 0){
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	db03      	blt.n	80007b8 <motorB_move+0x30>
		motorB_Direction(CW);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f7ff ffbf 	bl	8000734 <motorB_Direction>
 80007b6:	e002      	b.n	80007be <motorB_move+0x36>
	}else{
		motorB_Direction(CCW);
 80007b8:	2000      	movs	r0, #0
 80007ba:	f7ff ffbb 	bl	8000734 <motorB_Direction>
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, abs(pwm));
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80007c4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <motorB_move+0x50>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000b4 	.word	0x200000b4

080007dc <motorB_stopMotor>:
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
	HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_RESET);
}

void motorB_stopMotor(){
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <motorB_stopMotor+0x28>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2200      	movs	r2, #0
 80007e6:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ee:	4806      	ldr	r0, [pc, #24]	; (8000808 <motorB_stopMotor+0x2c>)
 80007f0:	f001 fc6c 	bl	80020cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007fa:	4803      	ldr	r0, [pc, #12]	; (8000808 <motorB_stopMotor+0x2c>)
 80007fc:	f001 fc66 	bl	80020cc <HAL_GPIO_WritePin>
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200000b4 	.word	0x200000b4
 8000808:	48001000 	.word	0x48001000

0800080c <servo_moveAngel>:

// 45 = 450
// step ((1000*(PWM_MAX - PWM_MIN) / (MAX_ANGEL - MIN_ANGEL));
void servo_moveAngel(uint16_t angel, MotorDirection dir){
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	460a      	mov	r2, r1
 8000816:	80fb      	strh	r3, [r7, #6]
 8000818:	4613      	mov	r3, r2
 800081a:	717b      	strb	r3, [r7, #5]
	uint16_t pwm;
	if(angel > MAX_ANGEL){
 800081c:	88fb      	ldrh	r3, [r7, #6]
 800081e:	2bb4      	cmp	r3, #180	; 0xb4
 8000820:	d901      	bls.n	8000826 <servo_moveAngel+0x1a>
		angel = MAX_ANGEL;
 8000822:	23b4      	movs	r3, #180	; 0xb4
 8000824:	80fb      	strh	r3, [r7, #6]
	}
	else if(angel < MIN_ANGEL){
		angel = MIN_ANGEL;
	}

	if(dir == CW){
 8000826:	797b      	ldrb	r3, [r7, #5]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d110      	bne.n	800084e <servo_moveAngel+0x42>
		pwm = PWM_MIN + (angel*(PWM_MAX - PWM_MIN)/MAX_ANGEL); // excel mowi ze wylicza dobrze
 800082c:	88fb      	ldrh	r3, [r7, #6]
 800082e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000832:	fb02 f303 	mul.w	r3, r2, r3
 8000836:	4a14      	ldr	r2, [pc, #80]	; (8000888 <servo_moveAngel+0x7c>)
 8000838:	fb82 1203 	smull	r1, r2, r2, r3
 800083c:	441a      	add	r2, r3
 800083e:	11d2      	asrs	r2, r2, #7
 8000840:	17db      	asrs	r3, r3, #31
 8000842:	1ad3      	subs	r3, r2, r3
 8000844:	b29b      	uxth	r3, r3
 8000846:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800084a:	81fb      	strh	r3, [r7, #14]
 800084c:	e00f      	b.n	800086e <servo_moveAngel+0x62>
		// pwm = PWM_MIN + ((angel - MIN_ANGEL) * step) / 1000;
	}
	else{
		pwm = PWM_MAX - (angel*(PWM_MAX - PWM_MIN)/MAX_ANGEL);
 800084e:	88fb      	ldrh	r3, [r7, #6]
 8000850:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000854:	fb02 f303 	mul.w	r3, r2, r3
 8000858:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <servo_moveAngel+0x7c>)
 800085a:	fb82 1203 	smull	r1, r2, r2, r3
 800085e:	441a      	add	r2, r3
 8000860:	11d2      	asrs	r2, r2, #7
 8000862:	17db      	asrs	r3, r3, #31
 8000864:	1a9b      	subs	r3, r3, r2
 8000866:	b29b      	uxth	r3, r3
 8000868:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 800086c:	81fb      	strh	r3, [r7, #14]
	}

	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, pwm + 50);
 800086e:	89fb      	ldrh	r3, [r7, #14]
 8000870:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <servo_moveAngel+0x80>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	635a      	str	r2, [r3, #52]	; 0x34
}
 800087a:	bf00      	nop
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	b60b60b7 	.word	0xb60b60b7
 800088c:	200001e4 	.word	0x200001e4

08000890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000896:	f000 fed7 	bl	8001648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089a:	f000 f88f 	bl	80009bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089e:	f7ff fe8f 	bl	80005c0 <MX_GPIO_Init>
  MX_TIM1_Init();
 80008a2:	f000 fa4d 	bl	8000d40 <MX_TIM1_Init>
  MX_TIM2_Init();
 80008a6:	f000 fae5 	bl	8000e74 <MX_TIM2_Init>
  MX_TIM15_Init();
 80008aa:	f000 fbc5 	bl	8001038 <MX_TIM15_Init>
  MX_DMA_Init();
 80008ae:	f7ff fe61 	bl	8000574 <MX_DMA_Init>
  MX_TIM4_Init();
 80008b2:	f000 fb33 	bl	8000f1c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80008b6:	f000 fd8b 	bl	80013d0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80008ba:	f000 fb85 	bl	8000fc8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &znak, 1);
 80008be:	2201      	movs	r2, #1
 80008c0:	4934      	ldr	r1, [pc, #208]	; (8000994 <main+0x104>)
 80008c2:	4835      	ldr	r0, [pc, #212]	; (8000998 <main+0x108>)
 80008c4:	f004 fa12 	bl	8004cec <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1); //servo   		q3
 80008c8:	2100      	movs	r1, #0
 80008ca:	4834      	ldr	r0, [pc, #208]	; (800099c <main+0x10c>)
 80008cc:	f002 ffd2 	bl	8003874 <HAL_TIM_PWM_Start>
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // silnik 1 	q1
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // silnik 2		q2
 80008d0:	210c      	movs	r1, #12
 80008d2:	4833      	ldr	r0, [pc, #204]	; (80009a0 <main+0x110>)
 80008d4:	f002 ffce 	bl	8003874 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000); // serwo pozycja startowa
 80008d8:	4b30      	ldr	r3, [pc, #192]	; (800099c <main+0x10c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008e0:	635a      	str	r2, [r3, #52]	; 0x34
  //pid_init(pid1, kp, ki, kd); / silnik 1
  pid_init(pid2, kp, ki, kd);
 80008e2:	4b30      	ldr	r3, [pc, #192]	; (80009a4 <main+0x114>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a30      	ldr	r2, [pc, #192]	; (80009a8 <main+0x118>)
 80008e8:	edd2 7a00 	vldr	s15, [r2]
 80008ec:	4a2f      	ldr	r2, [pc, #188]	; (80009ac <main+0x11c>)
 80008ee:	ed92 7a00 	vldr	s14, [r2]
 80008f2:	4a2f      	ldr	r2, [pc, #188]	; (80009b0 <main+0x120>)
 80008f4:	edd2 6a00 	vldr	s13, [r2]
 80008f8:	eeb0 1a66 	vmov.f32	s2, s13
 80008fc:	eef0 0a47 	vmov.f32	s1, s14
 8000900:	eeb0 0a67 	vmov.f32	s0, s15
 8000904:	4618      	mov	r0, r3
 8000906:	f000 f8ca 	bl	8000a9e <pid_init>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //silnik 2
 800090a:	213c      	movs	r1, #60	; 0x3c
 800090c:	4829      	ldr	r0, [pc, #164]	; (80009b4 <main+0x124>)
 800090e:	f003 f95d 	bl	8003bcc <HAL_TIM_Encoder_Start>
  //HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //silnik 1

	//HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_SET);
  motorB_Direction(CW);
 8000912:	2001      	movs	r0, #1
 8000914:	f7ff ff0e 	bl	8000734 <motorB_Direction>
  for(int i=0; i<20; i++){
 8000918:	2300      	movs	r3, #0
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	e00b      	b.n	8000936 <main+0xa6>
	  motorB_move(50-i);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff2f 	bl	8000788 <motorB_move>
	  HAL_Delay(10);
 800092a:	200a      	movs	r0, #10
 800092c:	f000 ff08 	bl	8001740 <HAL_Delay>
  for(int i=0; i<20; i++){
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3301      	adds	r3, #1
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b13      	cmp	r3, #19
 800093a:	ddf0      	ble.n	800091e <main+0x8e>

  }
  HAL_Delay(200);
 800093c:	20c8      	movs	r0, #200	; 0xc8
 800093e:	f000 feff 	bl	8001740 <HAL_Delay>
  motorB_stopMotor();
 8000942:	f7ff ff4b 	bl	80007dc <motorB_stopMotor>
  //__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
	//HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_RESET);
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  menu();
 8000946:	f7ff feb3 	bl	80006b0 <menu>
	  HAL_Delay(500);
	  servo_move(90, CW);
	  HAL_Delay(500);*/


	  if(moveFlag){
 800094a:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <main+0x128>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d0fb      	beq.n	800094a <main+0xba>
		  servo_moveAngel(0, CW);
 8000952:	2101      	movs	r1, #1
 8000954:	2000      	movs	r0, #0
 8000956:	f7ff ff59 	bl	800080c <servo_moveAngel>
		  HAL_Delay(1000);
 800095a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800095e:	f000 feef 	bl	8001740 <HAL_Delay>
		  servo_moveAngel(45, CW);
 8000962:	2101      	movs	r1, #1
 8000964:	202d      	movs	r0, #45	; 0x2d
 8000966:	f7ff ff51 	bl	800080c <servo_moveAngel>
		  HAL_Delay(1000);
 800096a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800096e:	f000 fee7 	bl	8001740 <HAL_Delay>
		  servo_moveAngel(90, CW);
 8000972:	2101      	movs	r1, #1
 8000974:	205a      	movs	r0, #90	; 0x5a
 8000976:	f7ff ff49 	bl	800080c <servo_moveAngel>
		  HAL_Delay(1000);
 800097a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800097e:	f000 fedf 	bl	8001740 <HAL_Delay>
		  servo_moveAngel(180, CW);
 8000982:	2101      	movs	r1, #1
 8000984:	20b4      	movs	r0, #180	; 0xb4
 8000986:	f7ff ff41 	bl	800080c <servo_moveAngel>
		  HAL_Delay(1000);
 800098a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800098e:	f000 fed7 	bl	8001740 <HAL_Delay>
	  if(moveFlag){
 8000992:	e7da      	b.n	800094a <main+0xba>
 8000994:	200000ac 	.word	0x200000ac
 8000998:	20000230 	.word	0x20000230
 800099c:	200001e4 	.word	0x200001e4
 80009a0:	200000b4 	.word	0x200000b4
 80009a4:	2000009c 	.word	0x2000009c
 80009a8:	20000000 	.word	0x20000000
 80009ac:	20000004 	.word	0x20000004
 80009b0:	20000008 	.word	0x20000008
 80009b4:	20000100 	.word	0x20000100
 80009b8:	20000098 	.word	0x20000098

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b096      	sub	sp, #88	; 0x58
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	2244      	movs	r2, #68	; 0x44
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f005 fc50 	bl	8006270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	463b      	mov	r3, r7
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009e2:	f001 fb99 	bl	8002118 <HAL_PWREx_ControlVoltageScaling>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009ec:	f000 f852 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009f0:	2310      	movs	r3, #16
 80009f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009f4:	2301      	movs	r3, #1
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009fc:	2360      	movs	r3, #96	; 0x60
 80009fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a00:	2302      	movs	r3, #2
 8000a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a04:	2301      	movs	r3, #1
 8000a06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000a0c:	2328      	movs	r3, #40	; 0x28
 8000a0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a10:	2307      	movs	r3, #7
 8000a12:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a14:	2302      	movs	r3, #2
 8000a16:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 fbcf 	bl	80021c4 <HAL_RCC_OscConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000a2c:	f000 f832 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a30:	230f      	movs	r3, #15
 8000a32:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a34:	2303      	movs	r3, #3
 8000a36:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	2104      	movs	r1, #4
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 ffa3 	bl	8002994 <HAL_RCC_ClockConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a54:	f000 f81e 	bl	8000a94 <Error_Handler>
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3758      	adds	r7, #88	; 0x58
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	if(znak == 'm'){
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <HAL_UART_RxCpltCallback+0x28>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b6d      	cmp	r3, #109	; 0x6d
 8000a6e:	d102      	bne.n	8000a76 <HAL_UART_RxCpltCallback+0x16>
		moveFlag = 1;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_UART_RxCpltCallback+0x2c>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	601a      	str	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, &znak, 1);
 8000a76:	2201      	movs	r2, #1
 8000a78:	4903      	ldr	r1, [pc, #12]	; (8000a88 <HAL_UART_RxCpltCallback+0x28>)
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <HAL_UART_RxCpltCallback+0x30>)
 8000a7c:	f004 f936 	bl	8004cec <HAL_UART_Receive_IT>
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200000ac 	.word	0x200000ac
 8000a8c:	20000098 	.word	0x20000098
 8000a90:	20000230 	.word	0x20000230

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <Error_Handler+0x8>

08000a9e <pid_init>:
#include "pid.h"

#define ERR_TOTAL_MAX 255

void pid_init(PidStruct *pid, float kp, float ki, float kd)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b085      	sub	sp, #20
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	60f8      	str	r0, [r7, #12]
 8000aa6:	ed87 0a02 	vstr	s0, [r7, #8]
 8000aaa:	edc7 0a01 	vstr	s1, [r7, #4]
 8000aae:	ed87 1a00 	vstr	s2, [r7]
	pid->previous_error = 0;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
	pid->total_error = 0;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]

	pid->kp = kp;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	68ba      	ldr	r2, [r7, #8]
 8000ac2:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	683a      	ldr	r2, [r7, #0]
 8000ace:	609a      	str	r2, [r3, #8]

}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <HAL_MspInit+0x44>)
 8000ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <HAL_MspInit+0x44>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6613      	str	r3, [r2, #96]	; 0x60
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <HAL_MspInit+0x44>)
 8000af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_MspInit+0x44>)
 8000afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x44>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	6593      	str	r3, [r2, #88]	; 0x58
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x44>)
 8000b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <NMI_Handler+0x4>

08000b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <HardFault_Handler+0x4>

08000b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <MemManage_Handler+0x4>

08000b36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b70:	f000 fdc6 	bl	8001700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <DMA1_Channel6_IRQHandler+0x10>)
 8000b7e:	f001 f84c 	bl	8001c1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200002b4 	.word	0x200002b4

08000b8c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000b90:	4802      	ldr	r0, [pc, #8]	; (8000b9c <DMA1_Channel7_IRQHandler+0x10>)
 8000b92:	f001 f842 	bl	8001c1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200002fc 	.word	0x200002fc

08000ba0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ba4:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8000ba6:	f003 f89f 	bl	8003ce8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8000baa:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8000bac:	f003 f89c 	bl	8003ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200000b4 	.word	0x200000b4
 8000bb8:	200001e4 	.word	0x200001e4

08000bbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <TIM2_IRQHandler+0x10>)
 8000bc2:	f003 f891 	bl	8003ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000100 	.word	0x20000100

08000bd0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <TIM4_IRQHandler+0x10>)
 8000bd6:	f003 f887 	bl	8003ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	2000014c 	.word	0x2000014c

08000be4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <USART2_IRQHandler+0x10>)
 8000bea:	f004 f8d5 	bl	8004d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000230 	.word	0x20000230

08000bf8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <TIM6_DAC_IRQHandler+0x10>)
 8000bfe:	f003 f873 	bl	8003ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000198 	.word	0x20000198

08000c0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	e00a      	b.n	8000c34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c1e:	f3af 8000 	nop.w
 8000c22:	4601      	mov	r1, r0
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	1c5a      	adds	r2, r3, #1
 8000c28:	60ba      	str	r2, [r7, #8]
 8000c2a:	b2ca      	uxtb	r2, r1
 8000c2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	3301      	adds	r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697a      	ldr	r2, [r7, #20]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	dbf0      	blt.n	8000c1e <_read+0x12>
	}

return len;
 8000c3c:	687b      	ldr	r3, [r7, #4]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
	return -1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c6e:	605a      	str	r2, [r3, #4]
	return 0;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <_isatty>:

int _isatty(int file)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
	return 1;
 8000c86:	2301      	movs	r3, #1
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
	return 0;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
	...

08000cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb8:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <_sbrk+0x5c>)
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <_sbrk+0x60>)
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d102      	bne.n	8000cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <_sbrk+0x64>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <_sbrk+0x68>)
 8000cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d207      	bcs.n	8000cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce0:	f005 fa9c 	bl	800621c <__errno>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
 8000cee:	e009      	b.n	8000d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <_sbrk+0x64>)
 8000d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d02:	68fb      	ldr	r3, [r7, #12]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20018000 	.word	0x20018000
 8000d10:	00000400 	.word	0x00000400
 8000d14:	200000b0 	.word	0x200000b0
 8000d18:	20000358 	.word	0x20000358

08000d1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <SystemInit+0x20>)
 8000d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d26:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <SystemInit+0x20>)
 8000d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b096      	sub	sp, #88	; 0x58
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]
 8000d62:	615a      	str	r2, [r3, #20]
 8000d64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	222c      	movs	r2, #44	; 0x2c
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f005 fa7f 	bl	8006270 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d72:	4b3e      	ldr	r3, [pc, #248]	; (8000e6c <MX_TIM1_Init+0x12c>)
 8000d74:	4a3e      	ldr	r2, [pc, #248]	; (8000e70 <MX_TIM1_Init+0x130>)
 8000d76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 39;
 8000d78:	4b3c      	ldr	r3, [pc, #240]	; (8000e6c <MX_TIM1_Init+0x12c>)
 8000d7a:	2227      	movs	r2, #39	; 0x27
 8000d7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7e:	4b3b      	ldr	r3, [pc, #236]	; (8000e6c <MX_TIM1_Init+0x12c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000d84:	4b39      	ldr	r3, [pc, #228]	; (8000e6c <MX_TIM1_Init+0x12c>)
 8000d86:	2263      	movs	r2, #99	; 0x63
 8000d88:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8a:	4b38      	ldr	r3, [pc, #224]	; (8000e6c <MX_TIM1_Init+0x12c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d90:	4b36      	ldr	r3, [pc, #216]	; (8000e6c <MX_TIM1_Init+0x12c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d96:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <MX_TIM1_Init+0x12c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d9c:	4833      	ldr	r0, [pc, #204]	; (8000e6c <MX_TIM1_Init+0x12c>)
 8000d9e:	f002 fd12 	bl	80037c6 <HAL_TIM_PWM_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000da8:	f7ff fe74 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dac:	2300      	movs	r3, #0
 8000dae:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000db0:	2300      	movs	r3, #0
 8000db2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000db8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	482b      	ldr	r0, [pc, #172]	; (8000e6c <MX_TIM1_Init+0x12c>)
 8000dc0:	f003 fd8e 	bl	80048e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000dca:	f7ff fe63 	bl	8000a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dce:	2360      	movs	r3, #96	; 0x60
 8000dd0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000de2:	2300      	movs	r3, #0
 8000de4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000de6:	2300      	movs	r3, #0
 8000de8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dee:	2204      	movs	r2, #4
 8000df0:	4619      	mov	r1, r3
 8000df2:	481e      	ldr	r0, [pc, #120]	; (8000e6c <MX_TIM1_Init+0x12c>)
 8000df4:	f003 f898 	bl	8003f28 <HAL_TIM_PWM_ConfigChannel>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000dfe:	f7ff fe49 	bl	8000a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e06:	220c      	movs	r2, #12
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4818      	ldr	r0, [pc, #96]	; (8000e6c <MX_TIM1_Init+0x12c>)
 8000e0c:	f003 f88c 	bl	8003f28 <HAL_TIM_PWM_ConfigChannel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000e16:	f7ff fe3d 	bl	8000a94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e32:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4807      	ldr	r0, [pc, #28]	; (8000e6c <MX_TIM1_Init+0x12c>)
 8000e50:	f003 fdce 	bl	80049f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000e5a:	f7ff fe1b 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e5e:	4803      	ldr	r0, [pc, #12]	; (8000e6c <MX_TIM1_Init+0x12c>)
 8000e60:	f000 fa58 	bl	8001314 <HAL_TIM_MspPostInit>

}
 8000e64:	bf00      	nop
 8000e66:	3758      	adds	r7, #88	; 0x58
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200000b4 	.word	0x200000b4
 8000e70:	40012c00 	.word	0x40012c00

08000e74 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08c      	sub	sp, #48	; 0x30
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	2224      	movs	r2, #36	; 0x24
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f005 f9f4 	bl	8006270 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e88:	463b      	mov	r3, r7
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <MX_TIM2_Init+0xa4>)
 8000e94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e9a:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <MX_TIM2_Init+0xa4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <MX_TIM2_Init+0xa4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <MX_TIM2_Init+0xa4>)
 8000ea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_TIM2_Init+0xa4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <MX_TIM2_Init+0xa4>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000eca:	230f      	movs	r3, #15
 8000ecc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000eda:	230f      	movs	r3, #15
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	480c      	ldr	r0, [pc, #48]	; (8000f18 <MX_TIM2_Init+0xa4>)
 8000ee6:	f002 fdcb 	bl	8003a80 <HAL_TIM_Encoder_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000ef0:	f7ff fdd0 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000efc:	463b      	mov	r3, r7
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_TIM2_Init+0xa4>)
 8000f02:	f003 fced 	bl	80048e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000f0c:	f7ff fdc2 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	3730      	adds	r7, #48	; 0x30
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000100 	.word	0x20000100

08000f1c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	; 0x30
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	2224      	movs	r2, #36	; 0x24
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f005 f9a0 	bl	8006270 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f30:	463b      	mov	r3, r7
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f3a:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <MX_TIM4_Init+0xa4>)
 8000f3c:	4a21      	ldr	r2, [pc, #132]	; (8000fc4 <MX_TIM4_Init+0xa8>)
 8000f3e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f40:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <MX_TIM4_Init+0xa4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <MX_TIM4_Init+0xa4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <MX_TIM4_Init+0xa4>)
 8000f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f52:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <MX_TIM4_Init+0xa4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <MX_TIM4_Init+0xa4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f60:	2303      	movs	r3, #3
 8000f62:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000f70:	230f      	movs	r3, #15
 8000f72:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f74:	2300      	movs	r3, #0
 8000f76:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000f80:	230f      	movs	r3, #15
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <MX_TIM4_Init+0xa4>)
 8000f8c:	f002 fd78 	bl	8003a80 <HAL_TIM_Encoder_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000f96:	f7ff fd7d 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <MX_TIM4_Init+0xa4>)
 8000fa8:	f003 fc9a 	bl	80048e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000fb2:	f7ff fd6f 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	3730      	adds	r7, #48	; 0x30
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000014c 	.word	0x2000014c
 8000fc4:	40000800 	.word	0x40000800

08000fc8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <MX_TIM6_Init+0x68>)
 8000fda:	4a16      	ldr	r2, [pc, #88]	; (8001034 <MX_TIM6_Init+0x6c>)
 8000fdc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_TIM6_Init+0x68>)
 8000fe0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000fe4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <MX_TIM6_Init+0x68>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000fec:	4b10      	ldr	r3, [pc, #64]	; (8001030 <MX_TIM6_Init+0x68>)
 8000fee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ff2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <MX_TIM6_Init+0x68>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ffa:	480d      	ldr	r0, [pc, #52]	; (8001030 <MX_TIM6_Init+0x68>)
 8000ffc:	f002 fb8c 	bl	8003718 <HAL_TIM_Base_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001006:	f7ff fd45 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	4619      	mov	r1, r3
 8001016:	4806      	ldr	r0, [pc, #24]	; (8001030 <MX_TIM6_Init+0x68>)
 8001018:	f003 fc62 	bl	80048e0 <HAL_TIMEx_MasterConfigSynchronization>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001022:	f7ff fd37 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000198 	.word	0x20000198
 8001034:	40001000 	.word	0x40001000

08001038 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b096      	sub	sp, #88	; 0x58
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800104a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]
 800105a:	615a      	str	r2, [r3, #20]
 800105c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	222c      	movs	r2, #44	; 0x2c
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f005 f903 	bl	8006270 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800106a:	4b33      	ldr	r3, [pc, #204]	; (8001138 <MX_TIM15_Init+0x100>)
 800106c:	4a33      	ldr	r2, [pc, #204]	; (800113c <MX_TIM15_Init+0x104>)
 800106e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 79;
 8001070:	4b31      	ldr	r3, [pc, #196]	; (8001138 <MX_TIM15_Init+0x100>)
 8001072:	224f      	movs	r2, #79	; 0x4f
 8001074:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001076:	4b30      	ldr	r3, [pc, #192]	; (8001138 <MX_TIM15_Init+0x100>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 800107c:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <MX_TIM15_Init+0x100>)
 800107e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001082:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001084:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <MX_TIM15_Init+0x100>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800108a:	4b2b      	ldr	r3, [pc, #172]	; (8001138 <MX_TIM15_Init+0x100>)
 800108c:	2200      	movs	r2, #0
 800108e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001090:	4b29      	ldr	r3, [pc, #164]	; (8001138 <MX_TIM15_Init+0x100>)
 8001092:	2280      	movs	r2, #128	; 0x80
 8001094:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001096:	4828      	ldr	r0, [pc, #160]	; (8001138 <MX_TIM15_Init+0x100>)
 8001098:	f002 fb95 	bl	80037c6 <HAL_TIM_PWM_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80010a2:	f7ff fcf7 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a6:	2300      	movs	r3, #0
 80010a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80010ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010b2:	4619      	mov	r1, r3
 80010b4:	4820      	ldr	r0, [pc, #128]	; (8001138 <MX_TIM15_Init+0x100>)
 80010b6:	f003 fc13 	bl	80048e0 <HAL_TIMEx_MasterConfigSynchronization>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80010c0:	f7ff fce8 	bl	8000a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c4:	2360      	movs	r3, #96	; 0x60
 80010c6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010cc:	2300      	movs	r3, #0
 80010ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010d0:	2300      	movs	r3, #0
 80010d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010dc:	2300      	movs	r3, #0
 80010de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e4:	2200      	movs	r2, #0
 80010e6:	4619      	mov	r1, r3
 80010e8:	4813      	ldr	r0, [pc, #76]	; (8001138 <MX_TIM15_Init+0x100>)
 80010ea:	f002 ff1d 	bl	8003f28 <HAL_TIM_PWM_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80010f4:	f7ff fcce 	bl	8000a94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800110c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001110:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	4619      	mov	r1, r3
 800111a:	4807      	ldr	r0, [pc, #28]	; (8001138 <MX_TIM15_Init+0x100>)
 800111c:	f003 fc68 	bl	80049f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8001126:	f7ff fcb5 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800112a:	4803      	ldr	r0, [pc, #12]	; (8001138 <MX_TIM15_Init+0x100>)
 800112c:	f000 f8f2 	bl	8001314 <HAL_TIM_MspPostInit>

}
 8001130:	bf00      	nop
 8001132:	3758      	adds	r7, #88	; 0x58
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200001e4 	.word	0x200001e4
 800113c:	40014000 	.word	0x40014000

08001140 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a1a      	ldr	r2, [pc, #104]	; (80011b8 <HAL_TIM_PWM_MspInit+0x78>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d114      	bne.n	800117c <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001152:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <HAL_TIM_PWM_MspInit+0x7c>)
 8001154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001156:	4a19      	ldr	r2, [pc, #100]	; (80011bc <HAL_TIM_PWM_MspInit+0x7c>)
 8001158:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800115c:	6613      	str	r3, [r2, #96]	; 0x60
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <HAL_TIM_PWM_MspInit+0x7c>)
 8001160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	2018      	movs	r0, #24
 8001170:	f000 fbe5 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001174:	2018      	movs	r0, #24
 8001176:	f000 fbfe 	bl	8001976 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800117a:	e018      	b.n	80011ae <HAL_TIM_PWM_MspInit+0x6e>
  else if(tim_pwmHandle->Instance==TIM15)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0f      	ldr	r2, [pc, #60]	; (80011c0 <HAL_TIM_PWM_MspInit+0x80>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d113      	bne.n	80011ae <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <HAL_TIM_PWM_MspInit+0x7c>)
 8001188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118a:	4a0c      	ldr	r2, [pc, #48]	; (80011bc <HAL_TIM_PWM_MspInit+0x7c>)
 800118c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001190:	6613      	str	r3, [r2, #96]	; 0x60
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_TIM_PWM_MspInit+0x7c>)
 8001194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	2018      	movs	r0, #24
 80011a4:	f000 fbcb 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80011a8:	2018      	movs	r0, #24
 80011aa:	f000 fbe4 	bl	8001976 <HAL_NVIC_EnableIRQ>
}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40012c00 	.word	0x40012c00
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40014000 	.word	0x40014000

080011c4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08c      	sub	sp, #48	; 0x30
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011e4:	d131      	bne.n	800124a <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011e6:	4b35      	ldr	r3, [pc, #212]	; (80012bc <HAL_TIM_Encoder_MspInit+0xf8>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ea:	4a34      	ldr	r2, [pc, #208]	; (80012bc <HAL_TIM_Encoder_MspInit+0xf8>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6593      	str	r3, [r2, #88]	; 0x58
 80011f2:	4b32      	ldr	r3, [pc, #200]	; (80012bc <HAL_TIM_Encoder_MspInit+0xf8>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	61bb      	str	r3, [r7, #24]
 80011fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	4b2f      	ldr	r3, [pc, #188]	; (80012bc <HAL_TIM_Encoder_MspInit+0xf8>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	4a2e      	ldr	r2, [pc, #184]	; (80012bc <HAL_TIM_Encoder_MspInit+0xf8>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120a:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <HAL_TIM_Encoder_MspInit+0xf8>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC2_A2_Pin|ENC2_B2_Pin;
 8001216:	2303      	movs	r3, #3
 8001218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001226:	2301      	movs	r3, #1
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	4619      	mov	r1, r3
 8001230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001234:	f000 fda0 	bl	8001d78 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	2100      	movs	r1, #0
 800123c:	201c      	movs	r0, #28
 800123e:	f000 fb7e 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001242:	201c      	movs	r0, #28
 8001244:	f000 fb97 	bl	8001976 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001248:	e034      	b.n	80012b4 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(tim_encoderHandle->Instance==TIM4)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a1c      	ldr	r2, [pc, #112]	; (80012c0 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d12f      	bne.n	80012b4 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001254:	4b19      	ldr	r3, [pc, #100]	; (80012bc <HAL_TIM_Encoder_MspInit+0xf8>)
 8001256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001258:	4a18      	ldr	r2, [pc, #96]	; (80012bc <HAL_TIM_Encoder_MspInit+0xf8>)
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	6593      	str	r3, [r2, #88]	; 0x58
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <HAL_TIM_Encoder_MspInit+0xf8>)
 8001262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <HAL_TIM_Encoder_MspInit+0xf8>)
 800126e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001270:	4a12      	ldr	r2, [pc, #72]	; (80012bc <HAL_TIM_Encoder_MspInit+0xf8>)
 8001272:	f043 0302 	orr.w	r3, r3, #2
 8001276:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001278:	4b10      	ldr	r3, [pc, #64]	; (80012bc <HAL_TIM_Encoder_MspInit+0xf8>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC1_B1_Pin|ENC1_A1_Pin;
 8001284:	23c0      	movs	r3, #192	; 0xc0
 8001286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001294:	2302      	movs	r3, #2
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	4619      	mov	r1, r3
 800129e:	4809      	ldr	r0, [pc, #36]	; (80012c4 <HAL_TIM_Encoder_MspInit+0x100>)
 80012a0:	f000 fd6a 	bl	8001d78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	201e      	movs	r0, #30
 80012aa:	f000 fb48 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80012ae:	201e      	movs	r0, #30
 80012b0:	f000 fb61 	bl	8001976 <HAL_NVIC_EnableIRQ>
}
 80012b4:	bf00      	nop
 80012b6:	3730      	adds	r7, #48	; 0x30
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40000800 	.word	0x40000800
 80012c4:	48000400 	.word	0x48000400

080012c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0d      	ldr	r2, [pc, #52]	; (800130c <HAL_TIM_Base_MspInit+0x44>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d113      	bne.n	8001302 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <HAL_TIM_Base_MspInit+0x48>)
 80012dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012de:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <HAL_TIM_Base_MspInit+0x48>)
 80012e0:	f043 0310 	orr.w	r3, r3, #16
 80012e4:	6593      	str	r3, [r2, #88]	; 0x58
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_TIM_Base_MspInit+0x48>)
 80012e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ea:	f003 0310 	and.w	r3, r3, #16
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	2036      	movs	r0, #54	; 0x36
 80012f8:	f000 fb21 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012fc:	2036      	movs	r0, #54	; 0x36
 80012fe:	f000 fb3a 	bl	8001976 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40001000 	.word	0x40001000
 8001310:	40021000 	.word	0x40021000

08001314 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a23      	ldr	r2, [pc, #140]	; (80013c0 <HAL_TIM_MspPostInit+0xac>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d11d      	bne.n	8001372 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001336:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <HAL_TIM_MspPostInit+0xb0>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	4a22      	ldr	r2, [pc, #136]	; (80013c4 <HAL_TIM_MspPostInit+0xb0>)
 800133c:	f043 0310 	orr.w	r3, r3, #16
 8001340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <HAL_TIM_MspPostInit+0xb0>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	f003 0310 	and.w	r3, r3, #16
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 800134e:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8001352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001360:	2301      	movs	r3, #1
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	4817      	ldr	r0, [pc, #92]	; (80013c8 <HAL_TIM_MspPostInit+0xb4>)
 800136c:	f000 fd04 	bl	8001d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001370:	e021      	b.n	80013b6 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM15)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a15      	ldr	r2, [pc, #84]	; (80013cc <HAL_TIM_MspPostInit+0xb8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d11c      	bne.n	80013b6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <HAL_TIM_MspPostInit+0xb0>)
 800137e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001380:	4a10      	ldr	r2, [pc, #64]	; (80013c4 <HAL_TIM_MspPostInit+0xb0>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_TIM_MspPostInit+0xb0>)
 800138a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8001394:	2304      	movs	r3, #4
 8001396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80013a4:	230e      	movs	r3, #14
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b2:	f000 fce1 	bl	8001d78 <HAL_GPIO_Init>
}
 80013b6:	bf00      	nop
 80013b8:	3728      	adds	r7, #40	; 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40012c00 	.word	0x40012c00
 80013c4:	40021000 	.word	0x40021000
 80013c8:	48001000 	.word	0x48001000
 80013cc:	40014000 	.word	0x40014000

080013d0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <MX_USART2_UART_Init+0x58>)
 80013d6:	4a15      	ldr	r2, [pc, #84]	; (800142c <MX_USART2_UART_Init+0x5c>)
 80013d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <MX_USART2_UART_Init+0x58>)
 80013dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_USART2_UART_Init+0x58>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <MX_USART2_UART_Init+0x58>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <MX_USART2_UART_Init+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MX_USART2_UART_Init+0x58>)
 80013f6:	220c      	movs	r2, #12
 80013f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <MX_USART2_UART_Init+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_USART2_UART_Init+0x58>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <MX_USART2_UART_Init+0x58>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MX_USART2_UART_Init+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_USART2_UART_Init+0x58>)
 8001414:	f003 fb88 	bl	8004b28 <HAL_UART_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800141e:	f7ff fb39 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000230 	.word	0x20000230
 800142c:	40004400 	.word	0x40004400

08001430 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b0ac      	sub	sp, #176	; 0xb0
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	2288      	movs	r2, #136	; 0x88
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f004 ff0d 	bl	8006270 <memset>
  if(uartHandle->Instance==USART2)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a5f      	ldr	r2, [pc, #380]	; (80015d8 <HAL_UART_MspInit+0x1a8>)
 800145c:	4293      	cmp	r3, r2
 800145e:	f040 80b7 	bne.w	80015d0 <HAL_UART_MspInit+0x1a0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001462:	2302      	movs	r3, #2
 8001464:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001466:	2300      	movs	r3, #0
 8001468:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4618      	mov	r0, r3
 8001470:	f001 fc96 	bl	8002da0 <HAL_RCCEx_PeriphCLKConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800147a:	f7ff fb0b 	bl	8000a94 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800147e:	4b57      	ldr	r3, [pc, #348]	; (80015dc <HAL_UART_MspInit+0x1ac>)
 8001480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001482:	4a56      	ldr	r2, [pc, #344]	; (80015dc <HAL_UART_MspInit+0x1ac>)
 8001484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001488:	6593      	str	r3, [r2, #88]	; 0x58
 800148a:	4b54      	ldr	r3, [pc, #336]	; (80015dc <HAL_UART_MspInit+0x1ac>)
 800148c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	4b51      	ldr	r3, [pc, #324]	; (80015dc <HAL_UART_MspInit+0x1ac>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	4a50      	ldr	r2, [pc, #320]	; (80015dc <HAL_UART_MspInit+0x1ac>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a2:	4b4e      	ldr	r3, [pc, #312]	; (80015dc <HAL_UART_MspInit+0x1ac>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ae:	4b4b      	ldr	r3, [pc, #300]	; (80015dc <HAL_UART_MspInit+0x1ac>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	4a4a      	ldr	r2, [pc, #296]	; (80015dc <HAL_UART_MspInit+0x1ac>)
 80014b4:	f043 0308 	orr.w	r3, r3, #8
 80014b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ba:	4b48      	ldr	r3, [pc, #288]	; (80015dc <HAL_UART_MspInit+0x1ac>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014c6:	2308      	movs	r3, #8
 80014c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014de:	2307      	movs	r3, #7
 80014e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014e8:	4619      	mov	r1, r3
 80014ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ee:	f000 fc43 	bl	8001d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014f2:	2320      	movs	r3, #32
 80014f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001504:	2303      	movs	r3, #3
 8001506:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800150a:	2307      	movs	r3, #7
 800150c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001510:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001514:	4619      	mov	r1, r3
 8001516:	4832      	ldr	r0, [pc, #200]	; (80015e0 <HAL_UART_MspInit+0x1b0>)
 8001518:	f000 fc2e 	bl	8001d78 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800151c:	4b31      	ldr	r3, [pc, #196]	; (80015e4 <HAL_UART_MspInit+0x1b4>)
 800151e:	4a32      	ldr	r2, [pc, #200]	; (80015e8 <HAL_UART_MspInit+0x1b8>)
 8001520:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001522:	4b30      	ldr	r3, [pc, #192]	; (80015e4 <HAL_UART_MspInit+0x1b4>)
 8001524:	2202      	movs	r2, #2
 8001526:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001528:	4b2e      	ldr	r3, [pc, #184]	; (80015e4 <HAL_UART_MspInit+0x1b4>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800152e:	4b2d      	ldr	r3, [pc, #180]	; (80015e4 <HAL_UART_MspInit+0x1b4>)
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001534:	4b2b      	ldr	r3, [pc, #172]	; (80015e4 <HAL_UART_MspInit+0x1b4>)
 8001536:	2280      	movs	r2, #128	; 0x80
 8001538:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800153a:	4b2a      	ldr	r3, [pc, #168]	; (80015e4 <HAL_UART_MspInit+0x1b4>)
 800153c:	2200      	movs	r2, #0
 800153e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001540:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <HAL_UART_MspInit+0x1b4>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001546:	4b27      	ldr	r3, [pc, #156]	; (80015e4 <HAL_UART_MspInit+0x1b4>)
 8001548:	2200      	movs	r2, #0
 800154a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800154c:	4b25      	ldr	r3, [pc, #148]	; (80015e4 <HAL_UART_MspInit+0x1b4>)
 800154e:	2200      	movs	r2, #0
 8001550:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001552:	4824      	ldr	r0, [pc, #144]	; (80015e4 <HAL_UART_MspInit+0x1b4>)
 8001554:	f000 fa2a 	bl	80019ac <HAL_DMA_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 800155e:	f7ff fa99 	bl	8000a94 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a1f      	ldr	r2, [pc, #124]	; (80015e4 <HAL_UART_MspInit+0x1b4>)
 8001566:	671a      	str	r2, [r3, #112]	; 0x70
 8001568:	4a1e      	ldr	r2, [pc, #120]	; (80015e4 <HAL_UART_MspInit+0x1b4>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800156e:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <HAL_UART_MspInit+0x1bc>)
 8001570:	4a1f      	ldr	r2, [pc, #124]	; (80015f0 <HAL_UART_MspInit+0x1c0>)
 8001572:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HAL_UART_MspInit+0x1bc>)
 8001576:	2202      	movs	r2, #2
 8001578:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800157a:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <HAL_UART_MspInit+0x1bc>)
 800157c:	2210      	movs	r2, #16
 800157e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001580:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <HAL_UART_MspInit+0x1bc>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001586:	4b19      	ldr	r3, [pc, #100]	; (80015ec <HAL_UART_MspInit+0x1bc>)
 8001588:	2280      	movs	r2, #128	; 0x80
 800158a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800158c:	4b17      	ldr	r3, [pc, #92]	; (80015ec <HAL_UART_MspInit+0x1bc>)
 800158e:	2200      	movs	r2, #0
 8001590:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001592:	4b16      	ldr	r3, [pc, #88]	; (80015ec <HAL_UART_MspInit+0x1bc>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001598:	4b14      	ldr	r3, [pc, #80]	; (80015ec <HAL_UART_MspInit+0x1bc>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800159e:	4b13      	ldr	r3, [pc, #76]	; (80015ec <HAL_UART_MspInit+0x1bc>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80015a4:	4811      	ldr	r0, [pc, #68]	; (80015ec <HAL_UART_MspInit+0x1bc>)
 80015a6:	f000 fa01 	bl	80019ac <HAL_DMA_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_UART_MspInit+0x184>
    {
      Error_Handler();
 80015b0:	f7ff fa70 	bl	8000a94 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <HAL_UART_MspInit+0x1bc>)
 80015b8:	66da      	str	r2, [r3, #108]	; 0x6c
 80015ba:	4a0c      	ldr	r2, [pc, #48]	; (80015ec <HAL_UART_MspInit+0x1bc>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2100      	movs	r1, #0
 80015c4:	2026      	movs	r0, #38	; 0x26
 80015c6:	f000 f9ba 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015ca:	2026      	movs	r0, #38	; 0x26
 80015cc:	f000 f9d3 	bl	8001976 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015d0:	bf00      	nop
 80015d2:	37b0      	adds	r7, #176	; 0xb0
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40004400 	.word	0x40004400
 80015dc:	40021000 	.word	0x40021000
 80015e0:	48000c00 	.word	0x48000c00
 80015e4:	200002b4 	.word	0x200002b4
 80015e8:	4002006c 	.word	0x4002006c
 80015ec:	200002fc 	.word	0x200002fc
 80015f0:	40020080 	.word	0x40020080

080015f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800162c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015f8:	f7ff fb90 	bl	8000d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015fc:	480c      	ldr	r0, [pc, #48]	; (8001630 <LoopForever+0x6>)
  ldr r1, =_edata
 80015fe:	490d      	ldr	r1, [pc, #52]	; (8001634 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001600:	4a0d      	ldr	r2, [pc, #52]	; (8001638 <LoopForever+0xe>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001604:	e002      	b.n	800160c <LoopCopyDataInit>

08001606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160a:	3304      	adds	r3, #4

0800160c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800160c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001610:	d3f9      	bcc.n	8001606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001614:	4c0a      	ldr	r4, [pc, #40]	; (8001640 <LoopForever+0x16>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001618:	e001      	b.n	800161e <LoopFillZerobss>

0800161a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800161c:	3204      	adds	r2, #4

0800161e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001620:	d3fb      	bcc.n	800161a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001622:	f004 fe01 	bl	8006228 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001626:	f7ff f933 	bl	8000890 <main>

0800162a <LoopForever>:

LoopForever:
    b LoopForever
 800162a:	e7fe      	b.n	800162a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800162c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001634:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001638:	080072e8 	.word	0x080072e8
  ldr r2, =_sbss
 800163c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001640:	20000358 	.word	0x20000358

08001644 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001644:	e7fe      	b.n	8001644 <ADC1_2_IRQHandler>
	...

08001648 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <HAL_Init+0x3c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <HAL_Init+0x3c>)
 8001658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165e:	2003      	movs	r0, #3
 8001660:	f000 f962 	bl	8001928 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001664:	2000      	movs	r0, #0
 8001666:	f000 f80f 	bl	8001688 <HAL_InitTick>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d002      	beq.n	8001676 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	71fb      	strb	r3, [r7, #7]
 8001674:	e001      	b.n	800167a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001676:	f7ff fa31 	bl	8000adc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800167a:	79fb      	ldrb	r3, [r7, #7]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40022000 	.word	0x40022000

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001694:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <HAL_InitTick+0x6c>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d023      	beq.n	80016e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_InitTick+0x70>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <HAL_InitTick+0x6c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 f96d 	bl	8001992 <HAL_SYSTICK_Config>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10f      	bne.n	80016de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b0f      	cmp	r3, #15
 80016c2:	d809      	bhi.n	80016d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c4:	2200      	movs	r2, #0
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	f000 f937 	bl	800193e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016d0:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <HAL_InitTick+0x74>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e007      	b.n	80016e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
 80016dc:	e004      	b.n	80016e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
 80016e2:	e001      	b.n	80016e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000014 	.word	0x20000014
 80016f8:	2000000c 	.word	0x2000000c
 80016fc:	20000010 	.word	0x20000010

08001700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_IncTick+0x20>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x24>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <HAL_IncTick+0x24>)
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000014 	.word	0x20000014
 8001724:	20000344 	.word	0x20000344

08001728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_GetTick+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000344 	.word	0x20000344

08001740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001748:	f7ff ffee 	bl	8001728 <HAL_GetTick>
 800174c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001758:	d005      	beq.n	8001766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <HAL_Delay+0x44>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001766:	bf00      	nop
 8001768:	f7ff ffde 	bl	8001728 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	429a      	cmp	r2, r3
 8001776:	d8f7      	bhi.n	8001768 <HAL_Delay+0x28>
  {
  }
}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000014 	.word	0x20000014

08001788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a4:	4013      	ands	r3, r2
 80017a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ba:	4a04      	ldr	r2, [pc, #16]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	60d3      	str	r3, [r2, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <__NVIC_GetPriorityGrouping+0x18>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	f003 0307 	and.w	r3, r3, #7
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	db0b      	blt.n	8001816 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	f003 021f 	and.w	r2, r3, #31
 8001804:	4907      	ldr	r1, [pc, #28]	; (8001824 <__NVIC_EnableIRQ+0x38>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	095b      	lsrs	r3, r3, #5
 800180c:	2001      	movs	r0, #1
 800180e:	fa00 f202 	lsl.w	r2, r0, r2
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000e100 	.word	0xe000e100

08001828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db0a      	blt.n	8001852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	490c      	ldr	r1, [pc, #48]	; (8001874 <__NVIC_SetPriority+0x4c>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001850:	e00a      	b.n	8001868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	; (8001878 <__NVIC_SetPriority+0x50>)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	3b04      	subs	r3, #4
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	440b      	add	r3, r1
 8001866:	761a      	strb	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f1c3 0307 	rsb	r3, r3, #7
 8001896:	2b04      	cmp	r3, #4
 8001898:	bf28      	it	cs
 800189a:	2304      	movcs	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d902      	bls.n	80018ac <NVIC_EncodePriority+0x30>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b03      	subs	r3, #3
 80018aa:	e000      	b.n	80018ae <NVIC_EncodePriority+0x32>
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	4313      	orrs	r3, r2
         );
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	; 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f4:	d301      	bcc.n	80018fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00f      	b.n	800191a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <SysTick_Config+0x40>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001902:	210f      	movs	r1, #15
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f7ff ff8e 	bl	8001828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <SysTick_Config+0x40>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001912:	4b04      	ldr	r3, [pc, #16]	; (8001924 <SysTick_Config+0x40>)
 8001914:	2207      	movs	r2, #7
 8001916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	e000e010 	.word	0xe000e010

08001928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff29 	bl	8001788 <__NVIC_SetPriorityGrouping>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001950:	f7ff ff3e 	bl	80017d0 <__NVIC_GetPriorityGrouping>
 8001954:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	6978      	ldr	r0, [r7, #20]
 800195c:	f7ff ff8e 	bl	800187c <NVIC_EncodePriority>
 8001960:	4602      	mov	r2, r0
 8001962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff5d 	bl	8001828 <__NVIC_SetPriority>
}
 800196e:	bf00      	nop
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff31 	bl	80017ec <__NVIC_EnableIRQ>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ffa2 	bl	80018e4 <SysTick_Config>
 80019a0:	4603      	mov	r3, r0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e098      	b.n	8001af0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	4b4d      	ldr	r3, [pc, #308]	; (8001afc <HAL_DMA_Init+0x150>)
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d80f      	bhi.n	80019ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	4b4b      	ldr	r3, [pc, #300]	; (8001b00 <HAL_DMA_Init+0x154>)
 80019d2:	4413      	add	r3, r2
 80019d4:	4a4b      	ldr	r2, [pc, #300]	; (8001b04 <HAL_DMA_Init+0x158>)
 80019d6:	fba2 2303 	umull	r2, r3, r2, r3
 80019da:	091b      	lsrs	r3, r3, #4
 80019dc:	009a      	lsls	r2, r3, #2
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a48      	ldr	r2, [pc, #288]	; (8001b08 <HAL_DMA_Init+0x15c>)
 80019e6:	641a      	str	r2, [r3, #64]	; 0x40
 80019e8:	e00e      	b.n	8001a08 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	4b46      	ldr	r3, [pc, #280]	; (8001b0c <HAL_DMA_Init+0x160>)
 80019f2:	4413      	add	r3, r2
 80019f4:	4a43      	ldr	r2, [pc, #268]	; (8001b04 <HAL_DMA_Init+0x158>)
 80019f6:	fba2 2303 	umull	r2, r3, r2, r3
 80019fa:	091b      	lsrs	r3, r3, #4
 80019fc:	009a      	lsls	r2, r3, #2
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a42      	ldr	r2, [pc, #264]	; (8001b10 <HAL_DMA_Init+0x164>)
 8001a06:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a62:	d039      	beq.n	8001ad8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	4a27      	ldr	r2, [pc, #156]	; (8001b08 <HAL_DMA_Init+0x15c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d11a      	bne.n	8001aa4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a6e:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <HAL_DMA_Init+0x168>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f003 031c 	and.w	r3, r3, #28
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	4924      	ldr	r1, [pc, #144]	; (8001b14 <HAL_DMA_Init+0x168>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a88:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <HAL_DMA_Init+0x168>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6859      	ldr	r1, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a94:	f003 031c 	and.w	r3, r3, #28
 8001a98:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9c:	491d      	ldr	r1, [pc, #116]	; (8001b14 <HAL_DMA_Init+0x168>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]
 8001aa2:	e019      	b.n	8001ad8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001aa4:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <HAL_DMA_Init+0x16c>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aac:	f003 031c 	and.w	r3, r3, #28
 8001ab0:	210f      	movs	r1, #15
 8001ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	4917      	ldr	r1, [pc, #92]	; (8001b18 <HAL_DMA_Init+0x16c>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001abe:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <HAL_DMA_Init+0x16c>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6859      	ldr	r1, [r3, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f003 031c 	and.w	r3, r3, #28
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	4911      	ldr	r1, [pc, #68]	; (8001b18 <HAL_DMA_Init+0x16c>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	40020407 	.word	0x40020407
 8001b00:	bffdfff8 	.word	0xbffdfff8
 8001b04:	cccccccd 	.word	0xcccccccd
 8001b08:	40020000 	.word	0x40020000
 8001b0c:	bffdfbf8 	.word	0xbffdfbf8
 8001b10:	40020400 	.word	0x40020400
 8001b14:	400200a8 	.word	0x400200a8
 8001b18:	400204a8 	.word	0x400204a8

08001b1c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d008      	beq.n	8001b46 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2204      	movs	r2, #4
 8001b38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e022      	b.n	8001b8c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 020e 	bic.w	r2, r2, #14
 8001b54:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0201 	bic.w	r2, r2, #1
 8001b64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	f003 021c 	and.w	r2, r3, #28
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	2101      	movs	r1, #1
 8001b74:	fa01 f202 	lsl.w	r2, r1, r2
 8001b78:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d005      	beq.n	8001bbc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	73fb      	strb	r3, [r7, #15]
 8001bba:	e029      	b.n	8001c10 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 020e 	bic.w	r2, r2, #14
 8001bca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0201 	bic.w	r2, r2, #1
 8001bda:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be0:	f003 021c 	and.w	r2, r3, #28
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	2101      	movs	r1, #1
 8001bea:	fa01 f202 	lsl.w	r2, r1, r2
 8001bee:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	4798      	blx	r3
    }
  }
  return status;
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b084      	sub	sp, #16
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	f003 031c 	and.w	r3, r3, #28
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4013      	ands	r3, r2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d026      	beq.n	8001c94 <HAL_DMA_IRQHandler+0x7a>
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d021      	beq.n	8001c94 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0320 	and.w	r3, r3, #32
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d107      	bne.n	8001c6e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0204 	bic.w	r2, r2, #4
 8001c6c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	f003 021c 	and.w	r2, r3, #28
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	2104      	movs	r1, #4
 8001c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c80:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d071      	beq.n	8001d6e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001c92:	e06c      	b.n	8001d6e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c98:	f003 031c 	and.w	r3, r3, #28
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d02e      	beq.n	8001d06 <HAL_DMA_IRQHandler+0xec>
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d029      	beq.n	8001d06 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0320 	and.w	r3, r3, #32
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10b      	bne.n	8001cd8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 020a 	bic.w	r2, r2, #10
 8001cce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cdc:	f003 021c 	and.w	r2, r3, #28
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d038      	beq.n	8001d6e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d04:	e033      	b.n	8001d6e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	f003 031c 	and.w	r3, r3, #28
 8001d0e:	2208      	movs	r2, #8
 8001d10:	409a      	lsls	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4013      	ands	r3, r2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d02a      	beq.n	8001d70 <HAL_DMA_IRQHandler+0x156>
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d025      	beq.n	8001d70 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 020e 	bic.w	r2, r2, #14
 8001d32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d38:	f003 021c 	and.w	r2, r3, #28
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	2101      	movs	r1, #1
 8001d42:	fa01 f202 	lsl.w	r2, r1, r2
 8001d46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d004      	beq.n	8001d70 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
}
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b087      	sub	sp, #28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d86:	e17f      	b.n	8002088 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	fa01 f303 	lsl.w	r3, r1, r3
 8001d94:	4013      	ands	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 8171 	beq.w	8002082 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d005      	beq.n	8001db8 <HAL_GPIO_Init+0x40>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 0303 	and.w	r3, r3, #3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d130      	bne.n	8001e1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dee:	2201      	movs	r2, #1
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	091b      	lsrs	r3, r3, #4
 8001e04:	f003 0201 	and.w	r2, r3, #1
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d118      	bne.n	8001e58 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	08db      	lsrs	r3, r3, #3
 8001e42:	f003 0201 	and.w	r2, r3, #1
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d017      	beq.n	8001e94 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d123      	bne.n	8001ee8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	08da      	lsrs	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3208      	adds	r2, #8
 8001ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	08da      	lsrs	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3208      	adds	r2, #8
 8001ee2:	6939      	ldr	r1, [r7, #16]
 8001ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 80ac 	beq.w	8002082 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2a:	4b5f      	ldr	r3, [pc, #380]	; (80020a8 <HAL_GPIO_Init+0x330>)
 8001f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f2e:	4a5e      	ldr	r2, [pc, #376]	; (80020a8 <HAL_GPIO_Init+0x330>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6613      	str	r3, [r2, #96]	; 0x60
 8001f36:	4b5c      	ldr	r3, [pc, #368]	; (80020a8 <HAL_GPIO_Init+0x330>)
 8001f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f42:	4a5a      	ldr	r2, [pc, #360]	; (80020ac <HAL_GPIO_Init+0x334>)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	3302      	adds	r3, #2
 8001f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	220f      	movs	r2, #15
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f6c:	d025      	beq.n	8001fba <HAL_GPIO_Init+0x242>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a4f      	ldr	r2, [pc, #316]	; (80020b0 <HAL_GPIO_Init+0x338>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d01f      	beq.n	8001fb6 <HAL_GPIO_Init+0x23e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a4e      	ldr	r2, [pc, #312]	; (80020b4 <HAL_GPIO_Init+0x33c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d019      	beq.n	8001fb2 <HAL_GPIO_Init+0x23a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a4d      	ldr	r2, [pc, #308]	; (80020b8 <HAL_GPIO_Init+0x340>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d013      	beq.n	8001fae <HAL_GPIO_Init+0x236>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a4c      	ldr	r2, [pc, #304]	; (80020bc <HAL_GPIO_Init+0x344>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00d      	beq.n	8001faa <HAL_GPIO_Init+0x232>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a4b      	ldr	r2, [pc, #300]	; (80020c0 <HAL_GPIO_Init+0x348>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d007      	beq.n	8001fa6 <HAL_GPIO_Init+0x22e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a4a      	ldr	r2, [pc, #296]	; (80020c4 <HAL_GPIO_Init+0x34c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d101      	bne.n	8001fa2 <HAL_GPIO_Init+0x22a>
 8001f9e:	2306      	movs	r3, #6
 8001fa0:	e00c      	b.n	8001fbc <HAL_GPIO_Init+0x244>
 8001fa2:	2307      	movs	r3, #7
 8001fa4:	e00a      	b.n	8001fbc <HAL_GPIO_Init+0x244>
 8001fa6:	2305      	movs	r3, #5
 8001fa8:	e008      	b.n	8001fbc <HAL_GPIO_Init+0x244>
 8001faa:	2304      	movs	r3, #4
 8001fac:	e006      	b.n	8001fbc <HAL_GPIO_Init+0x244>
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e004      	b.n	8001fbc <HAL_GPIO_Init+0x244>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e002      	b.n	8001fbc <HAL_GPIO_Init+0x244>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <HAL_GPIO_Init+0x244>
 8001fba:	2300      	movs	r3, #0
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	f002 0203 	and.w	r2, r2, #3
 8001fc2:	0092      	lsls	r2, r2, #2
 8001fc4:	4093      	lsls	r3, r2
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fcc:	4937      	ldr	r1, [pc, #220]	; (80020ac <HAL_GPIO_Init+0x334>)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	089b      	lsrs	r3, r3, #2
 8001fd2:	3302      	adds	r3, #2
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fda:	4b3b      	ldr	r3, [pc, #236]	; (80020c8 <HAL_GPIO_Init+0x350>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ffe:	4a32      	ldr	r2, [pc, #200]	; (80020c8 <HAL_GPIO_Init+0x350>)
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002004:	4b30      	ldr	r3, [pc, #192]	; (80020c8 <HAL_GPIO_Init+0x350>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	43db      	mvns	r3, r3
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002028:	4a27      	ldr	r2, [pc, #156]	; (80020c8 <HAL_GPIO_Init+0x350>)
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800202e:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <HAL_GPIO_Init+0x350>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	43db      	mvns	r3, r3
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4013      	ands	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002052:	4a1d      	ldr	r2, [pc, #116]	; (80020c8 <HAL_GPIO_Init+0x350>)
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002058:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <HAL_GPIO_Init+0x350>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	43db      	mvns	r3, r3
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800207c:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <HAL_GPIO_Init+0x350>)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	3301      	adds	r3, #1
 8002086:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	fa22 f303 	lsr.w	r3, r2, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	f47f ae78 	bne.w	8001d88 <HAL_GPIO_Init+0x10>
  }
}
 8002098:	bf00      	nop
 800209a:	bf00      	nop
 800209c:	371c      	adds	r7, #28
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40010000 	.word	0x40010000
 80020b0:	48000400 	.word	0x48000400
 80020b4:	48000800 	.word	0x48000800
 80020b8:	48000c00 	.word	0x48000c00
 80020bc:	48001000 	.word	0x48001000
 80020c0:	48001400 	.word	0x48001400
 80020c4:	48001800 	.word	0x48001800
 80020c8:	40010400 	.word	0x40010400

080020cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	807b      	strh	r3, [r7, #2]
 80020d8:	4613      	mov	r3, r2
 80020da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020dc:	787b      	ldrb	r3, [r7, #1]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020e8:	e002      	b.n	80020f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020ea:	887a      	ldrh	r2, [r7, #2]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002100:	4b04      	ldr	r3, [pc, #16]	; (8002114 <HAL_PWREx_GetVoltageRange+0x18>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40007000 	.word	0x40007000

08002118 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002126:	d130      	bne.n	800218a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002128:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002134:	d038      	beq.n	80021a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002136:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800213e:	4a1e      	ldr	r2, [pc, #120]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002140:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002144:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002146:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2232      	movs	r2, #50	; 0x32
 800214c:	fb02 f303 	mul.w	r3, r2, r3
 8002150:	4a1b      	ldr	r2, [pc, #108]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002152:	fba2 2303 	umull	r2, r3, r2, r3
 8002156:	0c9b      	lsrs	r3, r3, #18
 8002158:	3301      	adds	r3, #1
 800215a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800215c:	e002      	b.n	8002164 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3b01      	subs	r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002164:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002170:	d102      	bne.n	8002178 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1f2      	bne.n	800215e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002178:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002184:	d110      	bne.n	80021a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e00f      	b.n	80021aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002196:	d007      	beq.n	80021a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002198:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021a0:	4a05      	ldr	r2, [pc, #20]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40007000 	.word	0x40007000
 80021bc:	2000000c 	.word	0x2000000c
 80021c0:	431bde83 	.word	0x431bde83

080021c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e3d8      	b.n	8002988 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021d6:	4b97      	ldr	r3, [pc, #604]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021e0:	4b94      	ldr	r3, [pc, #592]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0310 	and.w	r3, r3, #16
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 80e4 	beq.w	80023c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d007      	beq.n	800220e <HAL_RCC_OscConfig+0x4a>
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	2b0c      	cmp	r3, #12
 8002202:	f040 808b 	bne.w	800231c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2b01      	cmp	r3, #1
 800220a:	f040 8087 	bne.w	800231c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800220e:	4b89      	ldr	r3, [pc, #548]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d005      	beq.n	8002226 <HAL_RCC_OscConfig+0x62>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e3b0      	b.n	8002988 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a1a      	ldr	r2, [r3, #32]
 800222a:	4b82      	ldr	r3, [pc, #520]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d004      	beq.n	8002240 <HAL_RCC_OscConfig+0x7c>
 8002236:	4b7f      	ldr	r3, [pc, #508]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800223e:	e005      	b.n	800224c <HAL_RCC_OscConfig+0x88>
 8002240:	4b7c      	ldr	r3, [pc, #496]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 8002242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002246:	091b      	lsrs	r3, r3, #4
 8002248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800224c:	4293      	cmp	r3, r2
 800224e:	d223      	bcs.n	8002298 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	4618      	mov	r0, r3
 8002256:	f000 fd43 	bl	8002ce0 <RCC_SetFlashLatencyFromMSIRange>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e391      	b.n	8002988 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002264:	4b73      	ldr	r3, [pc, #460]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a72      	ldr	r2, [pc, #456]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 800226a:	f043 0308 	orr.w	r3, r3, #8
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	4b70      	ldr	r3, [pc, #448]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	496d      	ldr	r1, [pc, #436]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002282:	4b6c      	ldr	r3, [pc, #432]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	021b      	lsls	r3, r3, #8
 8002290:	4968      	ldr	r1, [pc, #416]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 8002292:	4313      	orrs	r3, r2
 8002294:	604b      	str	r3, [r1, #4]
 8002296:	e025      	b.n	80022e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002298:	4b66      	ldr	r3, [pc, #408]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a65      	ldr	r2, [pc, #404]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 800229e:	f043 0308 	orr.w	r3, r3, #8
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	4b63      	ldr	r3, [pc, #396]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4960      	ldr	r1, [pc, #384]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022b6:	4b5f      	ldr	r3, [pc, #380]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	495b      	ldr	r1, [pc, #364]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d109      	bne.n	80022e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 fd03 	bl	8002ce0 <RCC_SetFlashLatencyFromMSIRange>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e351      	b.n	8002988 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022e4:	f000 fc38 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 80022e8:	4602      	mov	r2, r0
 80022ea:	4b52      	ldr	r3, [pc, #328]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	091b      	lsrs	r3, r3, #4
 80022f0:	f003 030f 	and.w	r3, r3, #15
 80022f4:	4950      	ldr	r1, [pc, #320]	; (8002438 <HAL_RCC_OscConfig+0x274>)
 80022f6:	5ccb      	ldrb	r3, [r1, r3]
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002300:	4a4e      	ldr	r2, [pc, #312]	; (800243c <HAL_RCC_OscConfig+0x278>)
 8002302:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002304:	4b4e      	ldr	r3, [pc, #312]	; (8002440 <HAL_RCC_OscConfig+0x27c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff f9bd 	bl	8001688 <HAL_InitTick>
 800230e:	4603      	mov	r3, r0
 8002310:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d052      	beq.n	80023be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	e335      	b.n	8002988 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d032      	beq.n	800238a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002324:	4b43      	ldr	r3, [pc, #268]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a42      	ldr	r2, [pc, #264]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002330:	f7ff f9fa 	bl	8001728 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002338:	f7ff f9f6 	bl	8001728 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e31e      	b.n	8002988 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800234a:	4b3a      	ldr	r3, [pc, #232]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002356:	4b37      	ldr	r3, [pc, #220]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a36      	ldr	r2, [pc, #216]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 800235c:	f043 0308 	orr.w	r3, r3, #8
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	4b34      	ldr	r3, [pc, #208]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4931      	ldr	r1, [pc, #196]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 8002370:	4313      	orrs	r3, r2
 8002372:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002374:	4b2f      	ldr	r3, [pc, #188]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	021b      	lsls	r3, r3, #8
 8002382:	492c      	ldr	r1, [pc, #176]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 8002384:	4313      	orrs	r3, r2
 8002386:	604b      	str	r3, [r1, #4]
 8002388:	e01a      	b.n	80023c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800238a:	4b2a      	ldr	r3, [pc, #168]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a29      	ldr	r2, [pc, #164]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 8002390:	f023 0301 	bic.w	r3, r3, #1
 8002394:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002396:	f7ff f9c7 	bl	8001728 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800239e:	f7ff f9c3 	bl	8001728 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e2eb      	b.n	8002988 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023b0:	4b20      	ldr	r3, [pc, #128]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f0      	bne.n	800239e <HAL_RCC_OscConfig+0x1da>
 80023bc:	e000      	b.n	80023c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d074      	beq.n	80024b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d005      	beq.n	80023de <HAL_RCC_OscConfig+0x21a>
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	2b0c      	cmp	r3, #12
 80023d6:	d10e      	bne.n	80023f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	2b03      	cmp	r3, #3
 80023dc:	d10b      	bne.n	80023f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023de:	4b15      	ldr	r3, [pc, #84]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d064      	beq.n	80024b4 <HAL_RCC_OscConfig+0x2f0>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d160      	bne.n	80024b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e2c8      	b.n	8002988 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023fe:	d106      	bne.n	800240e <HAL_RCC_OscConfig+0x24a>
 8002400:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 8002406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	e026      	b.n	800245c <HAL_RCC_OscConfig+0x298>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002416:	d115      	bne.n	8002444 <HAL_RCC_OscConfig+0x280>
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a05      	ldr	r2, [pc, #20]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 800241e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	4b03      	ldr	r3, [pc, #12]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a02      	ldr	r2, [pc, #8]	; (8002434 <HAL_RCC_OscConfig+0x270>)
 800242a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	e014      	b.n	800245c <HAL_RCC_OscConfig+0x298>
 8002432:	bf00      	nop
 8002434:	40021000 	.word	0x40021000
 8002438:	080071f8 	.word	0x080071f8
 800243c:	2000000c 	.word	0x2000000c
 8002440:	20000010 	.word	0x20000010
 8002444:	4ba0      	ldr	r3, [pc, #640]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a9f      	ldr	r2, [pc, #636]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 800244a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	4b9d      	ldr	r3, [pc, #628]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a9c      	ldr	r2, [pc, #624]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 8002456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800245a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d013      	beq.n	800248c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7ff f960 	bl	8001728 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800246c:	f7ff f95c 	bl	8001728 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b64      	cmp	r3, #100	; 0x64
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e284      	b.n	8002988 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800247e:	4b92      	ldr	r3, [pc, #584]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0x2a8>
 800248a:	e014      	b.n	80024b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7ff f94c 	bl	8001728 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002494:	f7ff f948 	bl	8001728 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	; 0x64
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e270      	b.n	8002988 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024a6:	4b88      	ldr	r3, [pc, #544]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x2d0>
 80024b2:	e000      	b.n	80024b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d060      	beq.n	8002584 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_OscConfig+0x310>
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	2b0c      	cmp	r3, #12
 80024cc:	d119      	bne.n	8002502 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d116      	bne.n	8002502 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024d4:	4b7c      	ldr	r3, [pc, #496]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_OscConfig+0x328>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e24d      	b.n	8002988 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ec:	4b76      	ldr	r3, [pc, #472]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	061b      	lsls	r3, r3, #24
 80024fa:	4973      	ldr	r1, [pc, #460]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002500:	e040      	b.n	8002584 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d023      	beq.n	8002552 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800250a:	4b6f      	ldr	r3, [pc, #444]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a6e      	ldr	r2, [pc, #440]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 8002510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002516:	f7ff f907 	bl	8001728 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800251e:	f7ff f903 	bl	8001728 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e22b      	b.n	8002988 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002530:	4b65      	ldr	r3, [pc, #404]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0f0      	beq.n	800251e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253c:	4b62      	ldr	r3, [pc, #392]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	061b      	lsls	r3, r3, #24
 800254a:	495f      	ldr	r1, [pc, #380]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 800254c:	4313      	orrs	r3, r2
 800254e:	604b      	str	r3, [r1, #4]
 8002550:	e018      	b.n	8002584 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002552:	4b5d      	ldr	r3, [pc, #372]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a5c      	ldr	r2, [pc, #368]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 8002558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800255c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255e:	f7ff f8e3 	bl	8001728 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002566:	f7ff f8df 	bl	8001728 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e207      	b.n	8002988 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002578:	4b53      	ldr	r3, [pc, #332]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d03c      	beq.n	800260a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d01c      	beq.n	80025d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002598:	4b4b      	ldr	r3, [pc, #300]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 800259a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800259e:	4a4a      	ldr	r2, [pc, #296]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a8:	f7ff f8be 	bl	8001728 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b0:	f7ff f8ba 	bl	8001728 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e1e2      	b.n	8002988 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025c2:	4b41      	ldr	r3, [pc, #260]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 80025c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0ef      	beq.n	80025b0 <HAL_RCC_OscConfig+0x3ec>
 80025d0:	e01b      	b.n	800260a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025d2:	4b3d      	ldr	r3, [pc, #244]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 80025d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d8:	4a3b      	ldr	r2, [pc, #236]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 80025da:	f023 0301 	bic.w	r3, r3, #1
 80025de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e2:	f7ff f8a1 	bl	8001728 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ea:	f7ff f89d 	bl	8001728 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e1c5      	b.n	8002988 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025fc:	4b32      	ldr	r3, [pc, #200]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 80025fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1ef      	bne.n	80025ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 80a6 	beq.w	8002764 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002618:	2300      	movs	r3, #0
 800261a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800261c:	4b2a      	ldr	r3, [pc, #168]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 800261e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10d      	bne.n	8002644 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002628:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 800262a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262c:	4a26      	ldr	r2, [pc, #152]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 800262e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002632:	6593      	str	r3, [r2, #88]	; 0x58
 8002634:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002640:	2301      	movs	r3, #1
 8002642:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002644:	4b21      	ldr	r3, [pc, #132]	; (80026cc <HAL_RCC_OscConfig+0x508>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d118      	bne.n	8002682 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002650:	4b1e      	ldr	r3, [pc, #120]	; (80026cc <HAL_RCC_OscConfig+0x508>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a1d      	ldr	r2, [pc, #116]	; (80026cc <HAL_RCC_OscConfig+0x508>)
 8002656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800265c:	f7ff f864 	bl	8001728 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002664:	f7ff f860 	bl	8001728 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e188      	b.n	8002988 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <HAL_RCC_OscConfig+0x508>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d108      	bne.n	800269c <HAL_RCC_OscConfig+0x4d8>
 800268a:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 800268c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002690:	4a0d      	ldr	r2, [pc, #52]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800269a:	e029      	b.n	80026f0 <HAL_RCC_OscConfig+0x52c>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b05      	cmp	r3, #5
 80026a2:	d115      	bne.n	80026d0 <HAL_RCC_OscConfig+0x50c>
 80026a4:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 80026a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026aa:	4a07      	ldr	r2, [pc, #28]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 80026ac:	f043 0304 	orr.w	r3, r3, #4
 80026b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026b4:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ba:	4a03      	ldr	r2, [pc, #12]	; (80026c8 <HAL_RCC_OscConfig+0x504>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026c4:	e014      	b.n	80026f0 <HAL_RCC_OscConfig+0x52c>
 80026c6:	bf00      	nop
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40007000 	.word	0x40007000
 80026d0:	4b91      	ldr	r3, [pc, #580]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d6:	4a90      	ldr	r2, [pc, #576]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 80026d8:	f023 0301 	bic.w	r3, r3, #1
 80026dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026e0:	4b8d      	ldr	r3, [pc, #564]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e6:	4a8c      	ldr	r2, [pc, #560]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 80026e8:	f023 0304 	bic.w	r3, r3, #4
 80026ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d016      	beq.n	8002726 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f8:	f7ff f816 	bl	8001728 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026fe:	e00a      	b.n	8002716 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002700:	f7ff f812 	bl	8001728 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	; 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e138      	b.n	8002988 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002716:	4b80      	ldr	r3, [pc, #512]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 8002718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0ed      	beq.n	8002700 <HAL_RCC_OscConfig+0x53c>
 8002724:	e015      	b.n	8002752 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002726:	f7fe ffff 	bl	8001728 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800272c:	e00a      	b.n	8002744 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272e:	f7fe fffb 	bl	8001728 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	f241 3288 	movw	r2, #5000	; 0x1388
 800273c:	4293      	cmp	r3, r2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e121      	b.n	8002988 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002744:	4b74      	ldr	r3, [pc, #464]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 8002746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1ed      	bne.n	800272e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002752:	7ffb      	ldrb	r3, [r7, #31]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d105      	bne.n	8002764 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002758:	4b6f      	ldr	r3, [pc, #444]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 800275a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275c:	4a6e      	ldr	r2, [pc, #440]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 800275e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002762:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 810c 	beq.w	8002986 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002772:	2b02      	cmp	r3, #2
 8002774:	f040 80d4 	bne.w	8002920 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002778:	4b67      	ldr	r3, [pc, #412]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f003 0203 	and.w	r2, r3, #3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	429a      	cmp	r2, r3
 800278a:	d130      	bne.n	80027ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	3b01      	subs	r3, #1
 8002798:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800279a:	429a      	cmp	r2, r3
 800279c:	d127      	bne.n	80027ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d11f      	bne.n	80027ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027b8:	2a07      	cmp	r2, #7
 80027ba:	bf14      	ite	ne
 80027bc:	2201      	movne	r2, #1
 80027be:	2200      	moveq	r2, #0
 80027c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d113      	bne.n	80027ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d0:	085b      	lsrs	r3, r3, #1
 80027d2:	3b01      	subs	r3, #1
 80027d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d109      	bne.n	80027ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	085b      	lsrs	r3, r3, #1
 80027e6:	3b01      	subs	r3, #1
 80027e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d06e      	beq.n	80028cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	2b0c      	cmp	r3, #12
 80027f2:	d069      	beq.n	80028c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027f4:	4b48      	ldr	r3, [pc, #288]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d105      	bne.n	800280c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002800:	4b45      	ldr	r3, [pc, #276]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0bb      	b.n	8002988 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002810:	4b41      	ldr	r3, [pc, #260]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a40      	ldr	r2, [pc, #256]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 8002816:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800281a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800281c:	f7fe ff84 	bl	8001728 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002824:	f7fe ff80 	bl	8001728 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e0a8      	b.n	8002988 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002836:	4b38      	ldr	r3, [pc, #224]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002842:	4b35      	ldr	r3, [pc, #212]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	4b35      	ldr	r3, [pc, #212]	; (800291c <HAL_RCC_OscConfig+0x758>)
 8002848:	4013      	ands	r3, r2
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002852:	3a01      	subs	r2, #1
 8002854:	0112      	lsls	r2, r2, #4
 8002856:	4311      	orrs	r1, r2
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800285c:	0212      	lsls	r2, r2, #8
 800285e:	4311      	orrs	r1, r2
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002864:	0852      	lsrs	r2, r2, #1
 8002866:	3a01      	subs	r2, #1
 8002868:	0552      	lsls	r2, r2, #21
 800286a:	4311      	orrs	r1, r2
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002870:	0852      	lsrs	r2, r2, #1
 8002872:	3a01      	subs	r2, #1
 8002874:	0652      	lsls	r2, r2, #25
 8002876:	4311      	orrs	r1, r2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800287c:	0912      	lsrs	r2, r2, #4
 800287e:	0452      	lsls	r2, r2, #17
 8002880:	430a      	orrs	r2, r1
 8002882:	4925      	ldr	r1, [pc, #148]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 8002884:	4313      	orrs	r3, r2
 8002886:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002888:	4b23      	ldr	r3, [pc, #140]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a22      	ldr	r2, [pc, #136]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 800288e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002892:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002894:	4b20      	ldr	r3, [pc, #128]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	4a1f      	ldr	r2, [pc, #124]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 800289a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800289e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028a0:	f7fe ff42 	bl	8001728 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a8:	f7fe ff3e 	bl	8001728 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e066      	b.n	8002988 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ba:	4b17      	ldr	r3, [pc, #92]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028c6:	e05e      	b.n	8002986 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e05d      	b.n	8002988 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028cc:	4b12      	ldr	r3, [pc, #72]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d156      	bne.n	8002986 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028d8:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a0e      	ldr	r2, [pc, #56]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 80028de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4a0b      	ldr	r2, [pc, #44]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 80028ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028f0:	f7fe ff1a 	bl	8001728 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f8:	f7fe ff16 	bl	8001728 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e03e      	b.n	8002988 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290a:	4b03      	ldr	r3, [pc, #12]	; (8002918 <HAL_RCC_OscConfig+0x754>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x734>
 8002916:	e036      	b.n	8002986 <HAL_RCC_OscConfig+0x7c2>
 8002918:	40021000 	.word	0x40021000
 800291c:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	2b0c      	cmp	r3, #12
 8002924:	d02d      	beq.n	8002982 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002926:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <HAL_RCC_OscConfig+0x7cc>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a19      	ldr	r2, [pc, #100]	; (8002990 <HAL_RCC_OscConfig+0x7cc>)
 800292c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002930:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002932:	4b17      	ldr	r3, [pc, #92]	; (8002990 <HAL_RCC_OscConfig+0x7cc>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d105      	bne.n	800294a <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800293e:	4b14      	ldr	r3, [pc, #80]	; (8002990 <HAL_RCC_OscConfig+0x7cc>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	4a13      	ldr	r2, [pc, #76]	; (8002990 <HAL_RCC_OscConfig+0x7cc>)
 8002944:	f023 0303 	bic.w	r3, r3, #3
 8002948:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800294a:	4b11      	ldr	r3, [pc, #68]	; (8002990 <HAL_RCC_OscConfig+0x7cc>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	4a10      	ldr	r2, [pc, #64]	; (8002990 <HAL_RCC_OscConfig+0x7cc>)
 8002950:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002958:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295a:	f7fe fee5 	bl	8001728 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002962:	f7fe fee1 	bl	8001728 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e009      	b.n	8002988 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_RCC_OscConfig+0x7cc>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f0      	bne.n	8002962 <HAL_RCC_OscConfig+0x79e>
 8002980:	e001      	b.n	8002986 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3720      	adds	r7, #32
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40021000 	.word	0x40021000

08002994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0c8      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a8:	4b66      	ldr	r3, [pc, #408]	; (8002b44 <HAL_RCC_ClockConfig+0x1b0>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d910      	bls.n	80029d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b6:	4b63      	ldr	r3, [pc, #396]	; (8002b44 <HAL_RCC_ClockConfig+0x1b0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f023 0207 	bic.w	r2, r3, #7
 80029be:	4961      	ldr	r1, [pc, #388]	; (8002b44 <HAL_RCC_ClockConfig+0x1b0>)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c6:	4b5f      	ldr	r3, [pc, #380]	; (8002b44 <HAL_RCC_ClockConfig+0x1b0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d001      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0b0      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d04c      	beq.n	8002a7e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d107      	bne.n	80029fc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ec:	4b56      	ldr	r3, [pc, #344]	; (8002b48 <HAL_RCC_ClockConfig+0x1b4>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d121      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e09e      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d107      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a04:	4b50      	ldr	r3, [pc, #320]	; (8002b48 <HAL_RCC_ClockConfig+0x1b4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d115      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e092      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d107      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a1c:	4b4a      	ldr	r3, [pc, #296]	; (8002b48 <HAL_RCC_ClockConfig+0x1b4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d109      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e086      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a2c:	4b46      	ldr	r3, [pc, #280]	; (8002b48 <HAL_RCC_ClockConfig+0x1b4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e07e      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a3c:	4b42      	ldr	r3, [pc, #264]	; (8002b48 <HAL_RCC_ClockConfig+0x1b4>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f023 0203 	bic.w	r2, r3, #3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	493f      	ldr	r1, [pc, #252]	; (8002b48 <HAL_RCC_ClockConfig+0x1b4>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a4e:	f7fe fe6b 	bl	8001728 <HAL_GetTick>
 8002a52:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a54:	e00a      	b.n	8002a6c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a56:	f7fe fe67 	bl	8001728 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e066      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6c:	4b36      	ldr	r3, [pc, #216]	; (8002b48 <HAL_RCC_ClockConfig+0x1b4>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 020c 	and.w	r2, r3, #12
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d1eb      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d008      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a8a:	4b2f      	ldr	r3, [pc, #188]	; (8002b48 <HAL_RCC_ClockConfig+0x1b4>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	492c      	ldr	r1, [pc, #176]	; (8002b48 <HAL_RCC_ClockConfig+0x1b4>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a9c:	4b29      	ldr	r3, [pc, #164]	; (8002b44 <HAL_RCC_ClockConfig+0x1b0>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d210      	bcs.n	8002acc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aaa:	4b26      	ldr	r3, [pc, #152]	; (8002b44 <HAL_RCC_ClockConfig+0x1b0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 0207 	bic.w	r2, r3, #7
 8002ab2:	4924      	ldr	r1, [pc, #144]	; (8002b44 <HAL_RCC_ClockConfig+0x1b0>)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <HAL_RCC_ClockConfig+0x1b0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e036      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <HAL_RCC_ClockConfig+0x1b4>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4918      	ldr	r1, [pc, #96]	; (8002b48 <HAL_RCC_ClockConfig+0x1b4>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002af6:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <HAL_RCC_ClockConfig+0x1b4>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4910      	ldr	r1, [pc, #64]	; (8002b48 <HAL_RCC_ClockConfig+0x1b4>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b0a:	f000 f825 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <HAL_RCC_ClockConfig+0x1b4>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	490c      	ldr	r1, [pc, #48]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 8002b1c:	5ccb      	ldrb	r3, [r1, r3]
 8002b1e:	f003 031f 	and.w	r3, r3, #31
 8002b22:	fa22 f303 	lsr.w	r3, r2, r3
 8002b26:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe fdaa 	bl	8001688 <HAL_InitTick>
 8002b34:	4603      	mov	r3, r0
 8002b36:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b38:	7afb      	ldrb	r3, [r7, #11]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40022000 	.word	0x40022000
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	080071f8 	.word	0x080071f8
 8002b50:	2000000c 	.word	0x2000000c
 8002b54:	20000010 	.word	0x20000010

08002b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b089      	sub	sp, #36	; 0x24
 8002b5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	2300      	movs	r3, #0
 8002b64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b66:	4b3e      	ldr	r3, [pc, #248]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b70:	4b3b      	ldr	r3, [pc, #236]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0x34>
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	2b0c      	cmp	r3, #12
 8002b84:	d121      	bne.n	8002bca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d11e      	bne.n	8002bca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b8c:	4b34      	ldr	r3, [pc, #208]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d107      	bne.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b98:	4b31      	ldr	r3, [pc, #196]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b9e:	0a1b      	lsrs	r3, r3, #8
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	e005      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ba8:	4b2d      	ldr	r3, [pc, #180]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	091b      	lsrs	r3, r3, #4
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bb4:	4a2b      	ldr	r2, [pc, #172]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10d      	bne.n	8002be0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bc8:	e00a      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d102      	bne.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bd0:	4b25      	ldr	r3, [pc, #148]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bd2:	61bb      	str	r3, [r7, #24]
 8002bd4:	e004      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d101      	bne.n	8002be0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bdc:	4b23      	ldr	r3, [pc, #140]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002bde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	2b0c      	cmp	r3, #12
 8002be4:	d134      	bne.n	8002c50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002be6:	4b1e      	ldr	r3, [pc, #120]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d003      	beq.n	8002bfe <HAL_RCC_GetSysClockFreq+0xa6>
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	d003      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0xac>
 8002bfc:	e005      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002bfe:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c00:	617b      	str	r3, [r7, #20]
      break;
 8002c02:	e005      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c04:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002c06:	617b      	str	r3, [r7, #20]
      break;
 8002c08:	e002      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	617b      	str	r3, [r7, #20]
      break;
 8002c0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c10:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	0a1b      	lsrs	r3, r3, #8
 8002c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	fb03 f202 	mul.w	r2, r3, r2
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c36:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	0e5b      	lsrs	r3, r3, #25
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	3301      	adds	r3, #1
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c50:	69bb      	ldr	r3, [r7, #24]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3724      	adds	r7, #36	; 0x24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40021000 	.word	0x40021000
 8002c64:	08007210 	.word	0x08007210
 8002c68:	00f42400 	.word	0x00f42400
 8002c6c:	007a1200 	.word	0x007a1200

08002c70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c74:	4b03      	ldr	r3, [pc, #12]	; (8002c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c76:	681b      	ldr	r3, [r3, #0]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	2000000c 	.word	0x2000000c

08002c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c8c:	f7ff fff0 	bl	8002c70 <HAL_RCC_GetHCLKFreq>
 8002c90:	4602      	mov	r2, r0
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	4904      	ldr	r1, [pc, #16]	; (8002cb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ca0:	f003 031f 	and.w	r3, r3, #31
 8002ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	08007208 	.word	0x08007208

08002cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cb8:	f7ff ffda 	bl	8002c70 <HAL_RCC_GetHCLKFreq>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	0adb      	lsrs	r3, r3, #11
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	4904      	ldr	r1, [pc, #16]	; (8002cdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cca:	5ccb      	ldrb	r3, [r1, r3]
 8002ccc:	f003 031f 	and.w	r3, r3, #31
 8002cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	08007208 	.word	0x08007208

08002ce0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ce8:	2300      	movs	r3, #0
 8002cea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cec:	4b2a      	ldr	r3, [pc, #168]	; (8002d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cf8:	f7ff fa00 	bl	80020fc <HAL_PWREx_GetVoltageRange>
 8002cfc:	6178      	str	r0, [r7, #20]
 8002cfe:	e014      	b.n	8002d2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d00:	4b25      	ldr	r3, [pc, #148]	; (8002d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d04:	4a24      	ldr	r2, [pc, #144]	; (8002d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d0c:	4b22      	ldr	r3, [pc, #136]	; (8002d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d18:	f7ff f9f0 	bl	80020fc <HAL_PWREx_GetVoltageRange>
 8002d1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d1e:	4b1e      	ldr	r3, [pc, #120]	; (8002d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d22:	4a1d      	ldr	r2, [pc, #116]	; (8002d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d30:	d10b      	bne.n	8002d4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b80      	cmp	r3, #128	; 0x80
 8002d36:	d919      	bls.n	8002d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2ba0      	cmp	r3, #160	; 0xa0
 8002d3c:	d902      	bls.n	8002d44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d3e:	2302      	movs	r3, #2
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	e013      	b.n	8002d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d44:	2301      	movs	r3, #1
 8002d46:	613b      	str	r3, [r7, #16]
 8002d48:	e010      	b.n	8002d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b80      	cmp	r3, #128	; 0x80
 8002d4e:	d902      	bls.n	8002d56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d50:	2303      	movs	r3, #3
 8002d52:	613b      	str	r3, [r7, #16]
 8002d54:	e00a      	b.n	8002d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b80      	cmp	r3, #128	; 0x80
 8002d5a:	d102      	bne.n	8002d62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	e004      	b.n	8002d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b70      	cmp	r3, #112	; 0x70
 8002d66:	d101      	bne.n	8002d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d68:	2301      	movs	r3, #1
 8002d6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 0207 	bic.w	r2, r3, #7
 8002d74:	4909      	ldr	r1, [pc, #36]	; (8002d9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d7c:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d001      	beq.n	8002d8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40022000 	.word	0x40022000

08002da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002da8:	2300      	movs	r3, #0
 8002daa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002dac:	2300      	movs	r3, #0
 8002dae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d041      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dc0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002dc4:	d02a      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002dc6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002dca:	d824      	bhi.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002dcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dd0:	d008      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002dd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dd6:	d81e      	bhi.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00a      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ddc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002de0:	d010      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002de2:	e018      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002de4:	4b86      	ldr	r3, [pc, #536]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4a85      	ldr	r2, [pc, #532]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002df0:	e015      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3304      	adds	r3, #4
 8002df6:	2100      	movs	r1, #0
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 fabb 	bl	8003374 <RCCEx_PLLSAI1_Config>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e02:	e00c      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3320      	adds	r3, #32
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fba6 	bl	800355c <RCCEx_PLLSAI2_Config>
 8002e10:	4603      	mov	r3, r0
 8002e12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e14:	e003      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	74fb      	strb	r3, [r7, #19]
      break;
 8002e1a:	e000      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e1e:	7cfb      	ldrb	r3, [r7, #19]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10b      	bne.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e24:	4b76      	ldr	r3, [pc, #472]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e32:	4973      	ldr	r1, [pc, #460]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e3a:	e001      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e3c:	7cfb      	ldrb	r3, [r7, #19]
 8002e3e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d041      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e54:	d02a      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002e56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e5a:	d824      	bhi.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e60:	d008      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e66:	d81e      	bhi.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00a      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e70:	d010      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e72:	e018      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e74:	4b62      	ldr	r3, [pc, #392]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	4a61      	ldr	r2, [pc, #388]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e80:	e015      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3304      	adds	r3, #4
 8002e86:	2100      	movs	r1, #0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fa73 	bl	8003374 <RCCEx_PLLSAI1_Config>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e92:	e00c      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3320      	adds	r3, #32
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fb5e 	bl	800355c <RCCEx_PLLSAI2_Config>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ea4:	e003      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	74fb      	strb	r3, [r7, #19]
      break;
 8002eaa:	e000      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eae:	7cfb      	ldrb	r3, [r7, #19]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10b      	bne.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002eb4:	4b52      	ldr	r3, [pc, #328]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ec2:	494f      	ldr	r1, [pc, #316]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002eca:	e001      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ecc:	7cfb      	ldrb	r3, [r7, #19]
 8002ece:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80a0 	beq.w	800301e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ee2:	4b47      	ldr	r3, [pc, #284]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00d      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef8:	4b41      	ldr	r3, [pc, #260]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efc:	4a40      	ldr	r2, [pc, #256]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f02:	6593      	str	r3, [r2, #88]	; 0x58
 8002f04:	4b3e      	ldr	r3, [pc, #248]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f10:	2301      	movs	r3, #1
 8002f12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f14:	4b3b      	ldr	r3, [pc, #236]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a3a      	ldr	r2, [pc, #232]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f20:	f7fe fc02 	bl	8001728 <HAL_GetTick>
 8002f24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f26:	e009      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f28:	f7fe fbfe 	bl	8001728 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d902      	bls.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	74fb      	strb	r3, [r7, #19]
        break;
 8002f3a:	e005      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f3c:	4b31      	ldr	r3, [pc, #196]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0ef      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002f48:	7cfb      	ldrb	r3, [r7, #19]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d15c      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f4e:	4b2c      	ldr	r3, [pc, #176]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d01f      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d019      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f6c:	4b24      	ldr	r3, [pc, #144]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f78:	4b21      	ldr	r3, [pc, #132]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7e:	4a20      	ldr	r2, [pc, #128]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f88:	4b1d      	ldr	r3, [pc, #116]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8e:	4a1c      	ldr	r2, [pc, #112]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f98:	4a19      	ldr	r2, [pc, #100]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d016      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002faa:	f7fe fbbd 	bl	8001728 <HAL_GetTick>
 8002fae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fb0:	e00b      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb2:	f7fe fbb9 	bl	8001728 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d902      	bls.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	74fb      	strb	r3, [r7, #19]
            break;
 8002fc8:	e006      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fca:	4b0d      	ldr	r3, [pc, #52]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0ec      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002fd8:	7cfb      	ldrb	r3, [r7, #19]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fde:	4b08      	ldr	r3, [pc, #32]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fee:	4904      	ldr	r1, [pc, #16]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ff6:	e009      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ff8:	7cfb      	ldrb	r3, [r7, #19]
 8002ffa:	74bb      	strb	r3, [r7, #18]
 8002ffc:	e006      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002ffe:	bf00      	nop
 8003000:	40021000 	.word	0x40021000
 8003004:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003008:	7cfb      	ldrb	r3, [r7, #19]
 800300a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800300c:	7c7b      	ldrb	r3, [r7, #17]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d105      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003012:	4b9e      	ldr	r3, [pc, #632]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003016:	4a9d      	ldr	r2, [pc, #628]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800301c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800302a:	4b98      	ldr	r3, [pc, #608]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003030:	f023 0203 	bic.w	r2, r3, #3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003038:	4994      	ldr	r1, [pc, #592]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800304c:	4b8f      	ldr	r3, [pc, #572]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003052:	f023 020c 	bic.w	r2, r3, #12
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305a:	498c      	ldr	r1, [pc, #560]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800306e:	4b87      	ldr	r3, [pc, #540]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003074:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	4983      	ldr	r1, [pc, #524]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003090:	4b7e      	ldr	r3, [pc, #504]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003096:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	497b      	ldr	r1, [pc, #492]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0310 	and.w	r3, r3, #16
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030b2:	4b76      	ldr	r3, [pc, #472]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c0:	4972      	ldr	r1, [pc, #456]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0320 	and.w	r3, r3, #32
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030d4:	4b6d      	ldr	r3, [pc, #436]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e2:	496a      	ldr	r1, [pc, #424]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030f6:	4b65      	ldr	r3, [pc, #404]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003104:	4961      	ldr	r1, [pc, #388]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003118:	4b5c      	ldr	r3, [pc, #368]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800311a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003126:	4959      	ldr	r1, [pc, #356]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800313a:	4b54      	ldr	r3, [pc, #336]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003140:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003148:	4950      	ldr	r1, [pc, #320]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800315c:	4b4b      	ldr	r3, [pc, #300]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003162:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316a:	4948      	ldr	r1, [pc, #288]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800317e:	4b43      	ldr	r3, [pc, #268]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003184:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318c:	493f      	ldr	r1, [pc, #252]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d028      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031a0:	4b3a      	ldr	r3, [pc, #232]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031ae:	4937      	ldr	r1, [pc, #220]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031be:	d106      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031c0:	4b32      	ldr	r3, [pc, #200]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	4a31      	ldr	r2, [pc, #196]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031ca:	60d3      	str	r3, [r2, #12]
 80031cc:	e011      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031d6:	d10c      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3304      	adds	r3, #4
 80031dc:	2101      	movs	r1, #1
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 f8c8 	bl	8003374 <RCCEx_PLLSAI1_Config>
 80031e4:	4603      	mov	r3, r0
 80031e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80031e8:	7cfb      	ldrb	r3, [r7, #19]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80031ee:	7cfb      	ldrb	r3, [r7, #19]
 80031f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d028      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031fe:	4b23      	ldr	r3, [pc, #140]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003204:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320c:	491f      	ldr	r1, [pc, #124]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003218:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800321c:	d106      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800321e:	4b1b      	ldr	r3, [pc, #108]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	4a1a      	ldr	r2, [pc, #104]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003228:	60d3      	str	r3, [r2, #12]
 800322a:	e011      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003230:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003234:	d10c      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3304      	adds	r3, #4
 800323a:	2101      	movs	r1, #1
 800323c:	4618      	mov	r0, r3
 800323e:	f000 f899 	bl	8003374 <RCCEx_PLLSAI1_Config>
 8003242:	4603      	mov	r3, r0
 8003244:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003246:	7cfb      	ldrb	r3, [r7, #19]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800324c:	7cfb      	ldrb	r3, [r7, #19]
 800324e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d02b      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003262:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800326a:	4908      	ldr	r1, [pc, #32]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326c:	4313      	orrs	r3, r2
 800326e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003276:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800327a:	d109      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800327c:	4b03      	ldr	r3, [pc, #12]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	4a02      	ldr	r2, [pc, #8]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003286:	60d3      	str	r3, [r2, #12]
 8003288:	e014      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800328a:	bf00      	nop
 800328c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003294:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003298:	d10c      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3304      	adds	r3, #4
 800329e:	2101      	movs	r1, #1
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 f867 	bl	8003374 <RCCEx_PLLSAI1_Config>
 80032a6:	4603      	mov	r3, r0
 80032a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032aa:	7cfb      	ldrb	r3, [r7, #19]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80032b0:	7cfb      	ldrb	r3, [r7, #19]
 80032b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d02f      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032c0:	4b2b      	ldr	r3, [pc, #172]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032ce:	4928      	ldr	r1, [pc, #160]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032de:	d10d      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3304      	adds	r3, #4
 80032e4:	2102      	movs	r1, #2
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 f844 	bl	8003374 <RCCEx_PLLSAI1_Config>
 80032ec:	4603      	mov	r3, r0
 80032ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032f0:	7cfb      	ldrb	r3, [r7, #19]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d014      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80032f6:	7cfb      	ldrb	r3, [r7, #19]
 80032f8:	74bb      	strb	r3, [r7, #18]
 80032fa:	e011      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003304:	d10c      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3320      	adds	r3, #32
 800330a:	2102      	movs	r1, #2
 800330c:	4618      	mov	r0, r3
 800330e:	f000 f925 	bl	800355c <RCCEx_PLLSAI2_Config>
 8003312:	4603      	mov	r3, r0
 8003314:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003316:	7cfb      	ldrb	r3, [r7, #19]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800331c:	7cfb      	ldrb	r3, [r7, #19]
 800331e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800332c:	4b10      	ldr	r3, [pc, #64]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003332:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800333a:	490d      	ldr	r1, [pc, #52]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00b      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800334e:	4b08      	ldr	r3, [pc, #32]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003354:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800335e:	4904      	ldr	r1, [pc, #16]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003366:	7cbb      	ldrb	r3, [r7, #18]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000

08003374 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003382:	4b75      	ldr	r3, [pc, #468]	; (8003558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d018      	beq.n	80033c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800338e:	4b72      	ldr	r3, [pc, #456]	; (8003558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f003 0203 	and.w	r2, r3, #3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d10d      	bne.n	80033ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
       ||
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d009      	beq.n	80033ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033a6:	4b6c      	ldr	r3, [pc, #432]	; (8003558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	091b      	lsrs	r3, r3, #4
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
       ||
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d047      	beq.n	800344a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	73fb      	strb	r3, [r7, #15]
 80033be:	e044      	b.n	800344a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d018      	beq.n	80033fa <RCCEx_PLLSAI1_Config+0x86>
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d825      	bhi.n	8003418 <RCCEx_PLLSAI1_Config+0xa4>
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d002      	beq.n	80033d6 <RCCEx_PLLSAI1_Config+0x62>
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d009      	beq.n	80033e8 <RCCEx_PLLSAI1_Config+0x74>
 80033d4:	e020      	b.n	8003418 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033d6:	4b60      	ldr	r3, [pc, #384]	; (8003558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d11d      	bne.n	800341e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033e6:	e01a      	b.n	800341e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033e8:	4b5b      	ldr	r3, [pc, #364]	; (8003558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d116      	bne.n	8003422 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033f8:	e013      	b.n	8003422 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033fa:	4b57      	ldr	r3, [pc, #348]	; (8003558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10f      	bne.n	8003426 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003406:	4b54      	ldr	r3, [pc, #336]	; (8003558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d109      	bne.n	8003426 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003416:	e006      	b.n	8003426 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	73fb      	strb	r3, [r7, #15]
      break;
 800341c:	e004      	b.n	8003428 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800341e:	bf00      	nop
 8003420:	e002      	b.n	8003428 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003422:	bf00      	nop
 8003424:	e000      	b.n	8003428 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003426:	bf00      	nop
    }

    if(status == HAL_OK)
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10d      	bne.n	800344a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800342e:	4b4a      	ldr	r3, [pc, #296]	; (8003558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6819      	ldr	r1, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	3b01      	subs	r3, #1
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	430b      	orrs	r3, r1
 8003444:	4944      	ldr	r1, [pc, #272]	; (8003558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003446:	4313      	orrs	r3, r2
 8003448:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d17d      	bne.n	800354c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003450:	4b41      	ldr	r3, [pc, #260]	; (8003558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a40      	ldr	r2, [pc, #256]	; (8003558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003456:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800345a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800345c:	f7fe f964 	bl	8001728 <HAL_GetTick>
 8003460:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003462:	e009      	b.n	8003478 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003464:	f7fe f960 	bl	8001728 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d902      	bls.n	8003478 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	73fb      	strb	r3, [r7, #15]
        break;
 8003476:	e005      	b.n	8003484 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003478:	4b37      	ldr	r3, [pc, #220]	; (8003558 <RCCEx_PLLSAI1_Config+0x1e4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1ef      	bne.n	8003464 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d160      	bne.n	800354c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d111      	bne.n	80034b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003490:	4b31      	ldr	r3, [pc, #196]	; (8003558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6892      	ldr	r2, [r2, #8]
 80034a0:	0211      	lsls	r1, r2, #8
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	68d2      	ldr	r2, [r2, #12]
 80034a6:	0912      	lsrs	r2, r2, #4
 80034a8:	0452      	lsls	r2, r2, #17
 80034aa:	430a      	orrs	r2, r1
 80034ac:	492a      	ldr	r1, [pc, #168]	; (8003558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	610b      	str	r3, [r1, #16]
 80034b2:	e027      	b.n	8003504 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d112      	bne.n	80034e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034ba:	4b27      	ldr	r3, [pc, #156]	; (8003558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80034c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6892      	ldr	r2, [r2, #8]
 80034ca:	0211      	lsls	r1, r2, #8
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6912      	ldr	r2, [r2, #16]
 80034d0:	0852      	lsrs	r2, r2, #1
 80034d2:	3a01      	subs	r2, #1
 80034d4:	0552      	lsls	r2, r2, #21
 80034d6:	430a      	orrs	r2, r1
 80034d8:	491f      	ldr	r1, [pc, #124]	; (8003558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	610b      	str	r3, [r1, #16]
 80034de:	e011      	b.n	8003504 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034e0:	4b1d      	ldr	r3, [pc, #116]	; (8003558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6892      	ldr	r2, [r2, #8]
 80034f0:	0211      	lsls	r1, r2, #8
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6952      	ldr	r2, [r2, #20]
 80034f6:	0852      	lsrs	r2, r2, #1
 80034f8:	3a01      	subs	r2, #1
 80034fa:	0652      	lsls	r2, r2, #25
 80034fc:	430a      	orrs	r2, r1
 80034fe:	4916      	ldr	r1, [pc, #88]	; (8003558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003500:	4313      	orrs	r3, r2
 8003502:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003504:	4b14      	ldr	r3, [pc, #80]	; (8003558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a13      	ldr	r2, [pc, #76]	; (8003558 <RCCEx_PLLSAI1_Config+0x1e4>)
 800350a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800350e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003510:	f7fe f90a 	bl	8001728 <HAL_GetTick>
 8003514:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003516:	e009      	b.n	800352c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003518:	f7fe f906 	bl	8001728 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d902      	bls.n	800352c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	73fb      	strb	r3, [r7, #15]
          break;
 800352a:	e005      	b.n	8003538 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800352c:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <RCCEx_PLLSAI1_Config+0x1e4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0ef      	beq.n	8003518 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003538:	7bfb      	ldrb	r3, [r7, #15]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800353e:	4b06      	ldr	r3, [pc, #24]	; (8003558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	4904      	ldr	r1, [pc, #16]	; (8003558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003548:	4313      	orrs	r3, r2
 800354a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800354c:	7bfb      	ldrb	r3, [r7, #15]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40021000 	.word	0x40021000

0800355c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800356a:	4b6a      	ldr	r3, [pc, #424]	; (8003714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d018      	beq.n	80035a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003576:	4b67      	ldr	r3, [pc, #412]	; (8003714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f003 0203 	and.w	r2, r3, #3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d10d      	bne.n	80035a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
       ||
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800358e:	4b61      	ldr	r3, [pc, #388]	; (8003714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
       ||
 800359e:	429a      	cmp	r2, r3
 80035a0:	d047      	beq.n	8003632 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	73fb      	strb	r3, [r7, #15]
 80035a6:	e044      	b.n	8003632 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d018      	beq.n	80035e2 <RCCEx_PLLSAI2_Config+0x86>
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d825      	bhi.n	8003600 <RCCEx_PLLSAI2_Config+0xa4>
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d002      	beq.n	80035be <RCCEx_PLLSAI2_Config+0x62>
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d009      	beq.n	80035d0 <RCCEx_PLLSAI2_Config+0x74>
 80035bc:	e020      	b.n	8003600 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035be:	4b55      	ldr	r3, [pc, #340]	; (8003714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d11d      	bne.n	8003606 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ce:	e01a      	b.n	8003606 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035d0:	4b50      	ldr	r3, [pc, #320]	; (8003714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d116      	bne.n	800360a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e0:	e013      	b.n	800360a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035e2:	4b4c      	ldr	r3, [pc, #304]	; (8003714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10f      	bne.n	800360e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035ee:	4b49      	ldr	r3, [pc, #292]	; (8003714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035fe:	e006      	b.n	800360e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	73fb      	strb	r3, [r7, #15]
      break;
 8003604:	e004      	b.n	8003610 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003606:	bf00      	nop
 8003608:	e002      	b.n	8003610 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800360a:	bf00      	nop
 800360c:	e000      	b.n	8003610 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800360e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10d      	bne.n	8003632 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003616:	4b3f      	ldr	r3, [pc, #252]	; (8003714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6819      	ldr	r1, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	3b01      	subs	r3, #1
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	430b      	orrs	r3, r1
 800362c:	4939      	ldr	r1, [pc, #228]	; (8003714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800362e:	4313      	orrs	r3, r2
 8003630:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d167      	bne.n	8003708 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003638:	4b36      	ldr	r3, [pc, #216]	; (8003714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a35      	ldr	r2, [pc, #212]	; (8003714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800363e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003642:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003644:	f7fe f870 	bl	8001728 <HAL_GetTick>
 8003648:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800364a:	e009      	b.n	8003660 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800364c:	f7fe f86c 	bl	8001728 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d902      	bls.n	8003660 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	73fb      	strb	r3, [r7, #15]
        break;
 800365e:	e005      	b.n	800366c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003660:	4b2c      	ldr	r3, [pc, #176]	; (8003714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1ef      	bne.n	800364c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d14a      	bne.n	8003708 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d111      	bne.n	800369c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003678:	4b26      	ldr	r3, [pc, #152]	; (8003714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6892      	ldr	r2, [r2, #8]
 8003688:	0211      	lsls	r1, r2, #8
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68d2      	ldr	r2, [r2, #12]
 800368e:	0912      	lsrs	r2, r2, #4
 8003690:	0452      	lsls	r2, r2, #17
 8003692:	430a      	orrs	r2, r1
 8003694:	491f      	ldr	r1, [pc, #124]	; (8003714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003696:	4313      	orrs	r3, r2
 8003698:	614b      	str	r3, [r1, #20]
 800369a:	e011      	b.n	80036c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800369c:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6892      	ldr	r2, [r2, #8]
 80036ac:	0211      	lsls	r1, r2, #8
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6912      	ldr	r2, [r2, #16]
 80036b2:	0852      	lsrs	r2, r2, #1
 80036b4:	3a01      	subs	r2, #1
 80036b6:	0652      	lsls	r2, r2, #25
 80036b8:	430a      	orrs	r2, r1
 80036ba:	4916      	ldr	r1, [pc, #88]	; (8003714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80036c0:	4b14      	ldr	r3, [pc, #80]	; (8003714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a13      	ldr	r2, [pc, #76]	; (8003714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036cc:	f7fe f82c 	bl	8001728 <HAL_GetTick>
 80036d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036d2:	e009      	b.n	80036e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036d4:	f7fe f828 	bl	8001728 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d902      	bls.n	80036e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	73fb      	strb	r3, [r7, #15]
          break;
 80036e6:	e005      	b.n	80036f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036e8:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0ef      	beq.n	80036d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80036fa:	4b06      	ldr	r3, [pc, #24]	; (8003714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	4904      	ldr	r1, [pc, #16]	; (8003714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003704:	4313      	orrs	r3, r2
 8003706:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003708:	7bfb      	ldrb	r3, [r7, #15]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40021000 	.word	0x40021000

08003718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e049      	b.n	80037be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fd fdc2 	bl	80012c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3304      	adds	r3, #4
 8003754:	4619      	mov	r1, r3
 8003756:	4610      	mov	r0, r2
 8003758:	f000 fd2c 	bl	80041b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e049      	b.n	800386c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d106      	bne.n	80037f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7fd fca7 	bl	8001140 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2202      	movs	r2, #2
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3304      	adds	r3, #4
 8003802:	4619      	mov	r1, r3
 8003804:	4610      	mov	r0, r2
 8003806:	f000 fcd5 	bl	80041b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d109      	bne.n	8003898 <HAL_TIM_PWM_Start+0x24>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b01      	cmp	r3, #1
 800388e:	bf14      	ite	ne
 8003890:	2301      	movne	r3, #1
 8003892:	2300      	moveq	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	e03c      	b.n	8003912 <HAL_TIM_PWM_Start+0x9e>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2b04      	cmp	r3, #4
 800389c:	d109      	bne.n	80038b2 <HAL_TIM_PWM_Start+0x3e>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	bf14      	ite	ne
 80038aa:	2301      	movne	r3, #1
 80038ac:	2300      	moveq	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	e02f      	b.n	8003912 <HAL_TIM_PWM_Start+0x9e>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d109      	bne.n	80038cc <HAL_TIM_PWM_Start+0x58>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	bf14      	ite	ne
 80038c4:	2301      	movne	r3, #1
 80038c6:	2300      	moveq	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	e022      	b.n	8003912 <HAL_TIM_PWM_Start+0x9e>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b0c      	cmp	r3, #12
 80038d0:	d109      	bne.n	80038e6 <HAL_TIM_PWM_Start+0x72>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b01      	cmp	r3, #1
 80038dc:	bf14      	ite	ne
 80038de:	2301      	movne	r3, #1
 80038e0:	2300      	moveq	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	e015      	b.n	8003912 <HAL_TIM_PWM_Start+0x9e>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b10      	cmp	r3, #16
 80038ea:	d109      	bne.n	8003900 <HAL_TIM_PWM_Start+0x8c>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	bf14      	ite	ne
 80038f8:	2301      	movne	r3, #1
 80038fa:	2300      	moveq	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	e008      	b.n	8003912 <HAL_TIM_PWM_Start+0x9e>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b01      	cmp	r3, #1
 800390a:	bf14      	ite	ne
 800390c:	2301      	movne	r3, #1
 800390e:	2300      	moveq	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e09c      	b.n	8003a54 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d104      	bne.n	800392a <HAL_TIM_PWM_Start+0xb6>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003928:	e023      	b.n	8003972 <HAL_TIM_PWM_Start+0xfe>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b04      	cmp	r3, #4
 800392e:	d104      	bne.n	800393a <HAL_TIM_PWM_Start+0xc6>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003938:	e01b      	b.n	8003972 <HAL_TIM_PWM_Start+0xfe>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b08      	cmp	r3, #8
 800393e:	d104      	bne.n	800394a <HAL_TIM_PWM_Start+0xd6>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003948:	e013      	b.n	8003972 <HAL_TIM_PWM_Start+0xfe>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b0c      	cmp	r3, #12
 800394e:	d104      	bne.n	800395a <HAL_TIM_PWM_Start+0xe6>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003958:	e00b      	b.n	8003972 <HAL_TIM_PWM_Start+0xfe>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b10      	cmp	r3, #16
 800395e:	d104      	bne.n	800396a <HAL_TIM_PWM_Start+0xf6>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003968:	e003      	b.n	8003972 <HAL_TIM_PWM_Start+0xfe>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2202      	movs	r2, #2
 800396e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2201      	movs	r2, #1
 8003978:	6839      	ldr	r1, [r7, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f000 ff8a 	bl	8004894 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a35      	ldr	r2, [pc, #212]	; (8003a5c <HAL_TIM_PWM_Start+0x1e8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d013      	beq.n	80039b2 <HAL_TIM_PWM_Start+0x13e>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a34      	ldr	r2, [pc, #208]	; (8003a60 <HAL_TIM_PWM_Start+0x1ec>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d00e      	beq.n	80039b2 <HAL_TIM_PWM_Start+0x13e>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a32      	ldr	r2, [pc, #200]	; (8003a64 <HAL_TIM_PWM_Start+0x1f0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d009      	beq.n	80039b2 <HAL_TIM_PWM_Start+0x13e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a31      	ldr	r2, [pc, #196]	; (8003a68 <HAL_TIM_PWM_Start+0x1f4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d004      	beq.n	80039b2 <HAL_TIM_PWM_Start+0x13e>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a2f      	ldr	r2, [pc, #188]	; (8003a6c <HAL_TIM_PWM_Start+0x1f8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d101      	bne.n	80039b6 <HAL_TIM_PWM_Start+0x142>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <HAL_TIM_PWM_Start+0x144>
 80039b6:	2300      	movs	r3, #0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d007      	beq.n	80039cc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a22      	ldr	r2, [pc, #136]	; (8003a5c <HAL_TIM_PWM_Start+0x1e8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d01d      	beq.n	8003a12 <HAL_TIM_PWM_Start+0x19e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039de:	d018      	beq.n	8003a12 <HAL_TIM_PWM_Start+0x19e>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a22      	ldr	r2, [pc, #136]	; (8003a70 <HAL_TIM_PWM_Start+0x1fc>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d013      	beq.n	8003a12 <HAL_TIM_PWM_Start+0x19e>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a21      	ldr	r2, [pc, #132]	; (8003a74 <HAL_TIM_PWM_Start+0x200>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d00e      	beq.n	8003a12 <HAL_TIM_PWM_Start+0x19e>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a1f      	ldr	r2, [pc, #124]	; (8003a78 <HAL_TIM_PWM_Start+0x204>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d009      	beq.n	8003a12 <HAL_TIM_PWM_Start+0x19e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a17      	ldr	r2, [pc, #92]	; (8003a60 <HAL_TIM_PWM_Start+0x1ec>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d004      	beq.n	8003a12 <HAL_TIM_PWM_Start+0x19e>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a15      	ldr	r2, [pc, #84]	; (8003a64 <HAL_TIM_PWM_Start+0x1f0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d115      	bne.n	8003a3e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	4b18      	ldr	r3, [pc, #96]	; (8003a7c <HAL_TIM_PWM_Start+0x208>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b06      	cmp	r3, #6
 8003a22:	d015      	beq.n	8003a50 <HAL_TIM_PWM_Start+0x1dc>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a2a:	d011      	beq.n	8003a50 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0201 	orr.w	r2, r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a3c:	e008      	b.n	8003a50 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f042 0201 	orr.w	r2, r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	e000      	b.n	8003a52 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40012c00 	.word	0x40012c00
 8003a60:	40013400 	.word	0x40013400
 8003a64:	40014000 	.word	0x40014000
 8003a68:	40014400 	.word	0x40014400
 8003a6c:	40014800 	.word	0x40014800
 8003a70:	40000400 	.word	0x40000400
 8003a74:	40000800 	.word	0x40000800
 8003a78:	40000c00 	.word	0x40000c00
 8003a7c:	00010007 	.word	0x00010007

08003a80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e097      	b.n	8003bc4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d106      	bne.n	8003aae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7fd fb8b 	bl	80011c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003ac4:	f023 0307 	bic.w	r3, r3, #7
 8003ac8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	f000 fb6d 	bl	80041b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b02:	f023 0303 	bic.w	r3, r3, #3
 8003b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	021b      	lsls	r3, r3, #8
 8003b12:	4313      	orrs	r3, r2
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003b20:	f023 030c 	bic.w	r3, r3, #12
 8003b24:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	021b      	lsls	r3, r3, #8
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	011a      	lsls	r2, r3, #4
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	031b      	lsls	r3, r3, #12
 8003b50:	4313      	orrs	r3, r2
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003b5e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003b66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	4313      	orrs	r3, r2
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bdc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003be4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bf4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d110      	bne.n	8003c1e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d102      	bne.n	8003c08 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c02:	7b7b      	ldrb	r3, [r7, #13]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d001      	beq.n	8003c0c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e069      	b.n	8003ce0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c1c:	e031      	b.n	8003c82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d110      	bne.n	8003c46 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c24:	7bbb      	ldrb	r3, [r7, #14]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d102      	bne.n	8003c30 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c2a:	7b3b      	ldrb	r3, [r7, #12]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d001      	beq.n	8003c34 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e055      	b.n	8003ce0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c44:	e01d      	b.n	8003c82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d108      	bne.n	8003c5e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c4c:	7bbb      	ldrb	r3, [r7, #14]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d105      	bne.n	8003c5e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c52:	7b7b      	ldrb	r3, [r7, #13]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d102      	bne.n	8003c5e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c58:	7b3b      	ldrb	r3, [r7, #12]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d001      	beq.n	8003c62 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e03e      	b.n	8003ce0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2202      	movs	r2, #2
 8003c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2202      	movs	r2, #2
 8003c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_TIM_Encoder_Start+0xc4>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d008      	beq.n	8003ca0 <HAL_TIM_Encoder_Start+0xd4>
 8003c8e:	e00f      	b.n	8003cb0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2201      	movs	r2, #1
 8003c96:	2100      	movs	r1, #0
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 fdfb 	bl	8004894 <TIM_CCxChannelCmd>
      break;
 8003c9e:	e016      	b.n	8003cce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	2104      	movs	r1, #4
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fdf3 	bl	8004894 <TIM_CCxChannelCmd>
      break;
 8003cae:	e00e      	b.n	8003cce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fdeb 	bl	8004894 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	2104      	movs	r1, #4
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 fde4 	bl	8004894 <TIM_CCxChannelCmd>
      break;
 8003ccc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0201 	orr.w	r2, r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d122      	bne.n	8003d44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d11b      	bne.n	8003d44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0202 	mvn.w	r2, #2
 8003d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 fa24 	bl	8004178 <HAL_TIM_IC_CaptureCallback>
 8003d30:	e005      	b.n	8003d3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fa16 	bl	8004164 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fa27 	bl	800418c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d122      	bne.n	8003d98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d11b      	bne.n	8003d98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f06f 0204 	mvn.w	r2, #4
 8003d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f9fa 	bl	8004178 <HAL_TIM_IC_CaptureCallback>
 8003d84:	e005      	b.n	8003d92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f9ec 	bl	8004164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f9fd 	bl	800418c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d122      	bne.n	8003dec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d11b      	bne.n	8003dec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0208 	mvn.w	r2, #8
 8003dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2204      	movs	r2, #4
 8003dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f9d0 	bl	8004178 <HAL_TIM_IC_CaptureCallback>
 8003dd8:	e005      	b.n	8003de6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f9c2 	bl	8004164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f9d3 	bl	800418c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0310 	and.w	r3, r3, #16
 8003df6:	2b10      	cmp	r3, #16
 8003df8:	d122      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	2b10      	cmp	r3, #16
 8003e06:	d11b      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0210 	mvn.w	r2, #16
 8003e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2208      	movs	r2, #8
 8003e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f9a6 	bl	8004178 <HAL_TIM_IC_CaptureCallback>
 8003e2c:	e005      	b.n	8003e3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f998 	bl	8004164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f9a9 	bl	800418c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d10e      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d107      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0201 	mvn.w	r2, #1
 8003e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f972 	bl	8004150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e76:	2b80      	cmp	r3, #128	; 0x80
 8003e78:	d10e      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e84:	2b80      	cmp	r3, #128	; 0x80
 8003e86:	d107      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fe34 	bl	8004b00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea6:	d10e      	bne.n	8003ec6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb2:	2b80      	cmp	r3, #128	; 0x80
 8003eb4:	d107      	bne.n	8003ec6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 fe27 	bl	8004b14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed0:	2b40      	cmp	r3, #64	; 0x40
 8003ed2:	d10e      	bne.n	8003ef2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ede:	2b40      	cmp	r3, #64	; 0x40
 8003ee0:	d107      	bne.n	8003ef2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f957 	bl	80041a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f003 0320 	and.w	r3, r3, #32
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	d10e      	bne.n	8003f1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f003 0320 	and.w	r3, r3, #32
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	d107      	bne.n	8003f1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f06f 0220 	mvn.w	r2, #32
 8003f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 fde7 	bl	8004aec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e0ff      	b.n	8004146 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b14      	cmp	r3, #20
 8003f52:	f200 80f0 	bhi.w	8004136 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003f56:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5c:	08003fb1 	.word	0x08003fb1
 8003f60:	08004137 	.word	0x08004137
 8003f64:	08004137 	.word	0x08004137
 8003f68:	08004137 	.word	0x08004137
 8003f6c:	08003ff1 	.word	0x08003ff1
 8003f70:	08004137 	.word	0x08004137
 8003f74:	08004137 	.word	0x08004137
 8003f78:	08004137 	.word	0x08004137
 8003f7c:	08004033 	.word	0x08004033
 8003f80:	08004137 	.word	0x08004137
 8003f84:	08004137 	.word	0x08004137
 8003f88:	08004137 	.word	0x08004137
 8003f8c:	08004073 	.word	0x08004073
 8003f90:	08004137 	.word	0x08004137
 8003f94:	08004137 	.word	0x08004137
 8003f98:	08004137 	.word	0x08004137
 8003f9c:	080040b5 	.word	0x080040b5
 8003fa0:	08004137 	.word	0x08004137
 8003fa4:	08004137 	.word	0x08004137
 8003fa8:	08004137 	.word	0x08004137
 8003fac:	080040f5 	.word	0x080040f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68b9      	ldr	r1, [r7, #8]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 f996 	bl	80042e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699a      	ldr	r2, [r3, #24]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0208 	orr.w	r2, r2, #8
 8003fca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0204 	bic.w	r2, r2, #4
 8003fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6999      	ldr	r1, [r3, #24]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	619a      	str	r2, [r3, #24]
      break;
 8003fee:	e0a5      	b.n	800413c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fa06 	bl	8004408 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800400a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699a      	ldr	r2, [r3, #24]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800401a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6999      	ldr	r1, [r3, #24]
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	021a      	lsls	r2, r3, #8
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	619a      	str	r2, [r3, #24]
      break;
 8004030:	e084      	b.n	800413c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68b9      	ldr	r1, [r7, #8]
 8004038:	4618      	mov	r0, r3
 800403a:	f000 fa6f 	bl	800451c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69da      	ldr	r2, [r3, #28]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f042 0208 	orr.w	r2, r2, #8
 800404c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	69da      	ldr	r2, [r3, #28]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0204 	bic.w	r2, r2, #4
 800405c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	69d9      	ldr	r1, [r3, #28]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	61da      	str	r2, [r3, #28]
      break;
 8004070:	e064      	b.n	800413c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68b9      	ldr	r1, [r7, #8]
 8004078:	4618      	mov	r0, r3
 800407a:	f000 fad7 	bl	800462c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	69da      	ldr	r2, [r3, #28]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800408c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	69da      	ldr	r2, [r3, #28]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800409c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	69d9      	ldr	r1, [r3, #28]
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	021a      	lsls	r2, r3, #8
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	61da      	str	r2, [r3, #28]
      break;
 80040b2:	e043      	b.n	800413c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fb20 	bl	8004700 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0208 	orr.w	r2, r2, #8
 80040ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0204 	bic.w	r2, r2, #4
 80040de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	691a      	ldr	r2, [r3, #16]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040f2:	e023      	b.n	800413c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68b9      	ldr	r1, [r7, #8]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fb64 	bl	80047c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800410e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800411e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	021a      	lsls	r2, r3, #8
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004134:	e002      	b.n	800413c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	75fb      	strb	r3, [r7, #23]
      break;
 800413a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004144:	7dfb      	ldrb	r3, [r7, #23]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop

08004150 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a40      	ldr	r2, [pc, #256]	; (80042c8 <TIM_Base_SetConfig+0x114>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d013      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d2:	d00f      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a3d      	ldr	r2, [pc, #244]	; (80042cc <TIM_Base_SetConfig+0x118>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00b      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a3c      	ldr	r2, [pc, #240]	; (80042d0 <TIM_Base_SetConfig+0x11c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d007      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a3b      	ldr	r2, [pc, #236]	; (80042d4 <TIM_Base_SetConfig+0x120>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d003      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a3a      	ldr	r2, [pc, #232]	; (80042d8 <TIM_Base_SetConfig+0x124>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d108      	bne.n	8004206 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a2f      	ldr	r2, [pc, #188]	; (80042c8 <TIM_Base_SetConfig+0x114>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d01f      	beq.n	800424e <TIM_Base_SetConfig+0x9a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004214:	d01b      	beq.n	800424e <TIM_Base_SetConfig+0x9a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a2c      	ldr	r2, [pc, #176]	; (80042cc <TIM_Base_SetConfig+0x118>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d017      	beq.n	800424e <TIM_Base_SetConfig+0x9a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a2b      	ldr	r2, [pc, #172]	; (80042d0 <TIM_Base_SetConfig+0x11c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d013      	beq.n	800424e <TIM_Base_SetConfig+0x9a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a2a      	ldr	r2, [pc, #168]	; (80042d4 <TIM_Base_SetConfig+0x120>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00f      	beq.n	800424e <TIM_Base_SetConfig+0x9a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a29      	ldr	r2, [pc, #164]	; (80042d8 <TIM_Base_SetConfig+0x124>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00b      	beq.n	800424e <TIM_Base_SetConfig+0x9a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a28      	ldr	r2, [pc, #160]	; (80042dc <TIM_Base_SetConfig+0x128>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d007      	beq.n	800424e <TIM_Base_SetConfig+0x9a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a27      	ldr	r2, [pc, #156]	; (80042e0 <TIM_Base_SetConfig+0x12c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d003      	beq.n	800424e <TIM_Base_SetConfig+0x9a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a26      	ldr	r2, [pc, #152]	; (80042e4 <TIM_Base_SetConfig+0x130>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d108      	bne.n	8004260 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a10      	ldr	r2, [pc, #64]	; (80042c8 <TIM_Base_SetConfig+0x114>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00f      	beq.n	80042ac <TIM_Base_SetConfig+0xf8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a12      	ldr	r2, [pc, #72]	; (80042d8 <TIM_Base_SetConfig+0x124>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00b      	beq.n	80042ac <TIM_Base_SetConfig+0xf8>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a11      	ldr	r2, [pc, #68]	; (80042dc <TIM_Base_SetConfig+0x128>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d007      	beq.n	80042ac <TIM_Base_SetConfig+0xf8>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a10      	ldr	r2, [pc, #64]	; (80042e0 <TIM_Base_SetConfig+0x12c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d003      	beq.n	80042ac <TIM_Base_SetConfig+0xf8>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a0f      	ldr	r2, [pc, #60]	; (80042e4 <TIM_Base_SetConfig+0x130>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d103      	bne.n	80042b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	615a      	str	r2, [r3, #20]
}
 80042ba:	bf00      	nop
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40012c00 	.word	0x40012c00
 80042cc:	40000400 	.word	0x40000400
 80042d0:	40000800 	.word	0x40000800
 80042d4:	40000c00 	.word	0x40000c00
 80042d8:	40013400 	.word	0x40013400
 80042dc:	40014000 	.word	0x40014000
 80042e0:	40014400 	.word	0x40014400
 80042e4:	40014800 	.word	0x40014800

080042e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	f023 0201 	bic.w	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0303 	bic.w	r3, r3, #3
 8004322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f023 0302 	bic.w	r3, r3, #2
 8004334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4313      	orrs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a2c      	ldr	r2, [pc, #176]	; (80043f4 <TIM_OC1_SetConfig+0x10c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d00f      	beq.n	8004368 <TIM_OC1_SetConfig+0x80>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a2b      	ldr	r2, [pc, #172]	; (80043f8 <TIM_OC1_SetConfig+0x110>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00b      	beq.n	8004368 <TIM_OC1_SetConfig+0x80>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a2a      	ldr	r2, [pc, #168]	; (80043fc <TIM_OC1_SetConfig+0x114>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d007      	beq.n	8004368 <TIM_OC1_SetConfig+0x80>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a29      	ldr	r2, [pc, #164]	; (8004400 <TIM_OC1_SetConfig+0x118>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d003      	beq.n	8004368 <TIM_OC1_SetConfig+0x80>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a28      	ldr	r2, [pc, #160]	; (8004404 <TIM_OC1_SetConfig+0x11c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d10c      	bne.n	8004382 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f023 0308 	bic.w	r3, r3, #8
 800436e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f023 0304 	bic.w	r3, r3, #4
 8004380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a1b      	ldr	r2, [pc, #108]	; (80043f4 <TIM_OC1_SetConfig+0x10c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00f      	beq.n	80043aa <TIM_OC1_SetConfig+0xc2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a1a      	ldr	r2, [pc, #104]	; (80043f8 <TIM_OC1_SetConfig+0x110>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00b      	beq.n	80043aa <TIM_OC1_SetConfig+0xc2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a19      	ldr	r2, [pc, #100]	; (80043fc <TIM_OC1_SetConfig+0x114>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d007      	beq.n	80043aa <TIM_OC1_SetConfig+0xc2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a18      	ldr	r2, [pc, #96]	; (8004400 <TIM_OC1_SetConfig+0x118>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d003      	beq.n	80043aa <TIM_OC1_SetConfig+0xc2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a17      	ldr	r2, [pc, #92]	; (8004404 <TIM_OC1_SetConfig+0x11c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d111      	bne.n	80043ce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	621a      	str	r2, [r3, #32]
}
 80043e8:	bf00      	nop
 80043ea:	371c      	adds	r7, #28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	40012c00 	.word	0x40012c00
 80043f8:	40013400 	.word	0x40013400
 80043fc:	40014000 	.word	0x40014000
 8004400:	40014400 	.word	0x40014400
 8004404:	40014800 	.word	0x40014800

08004408 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	f023 0210 	bic.w	r2, r3, #16
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800443a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	021b      	lsls	r3, r3, #8
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f023 0320 	bic.w	r3, r3, #32
 8004456:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	4313      	orrs	r3, r2
 8004462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a28      	ldr	r2, [pc, #160]	; (8004508 <TIM_OC2_SetConfig+0x100>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d003      	beq.n	8004474 <TIM_OC2_SetConfig+0x6c>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a27      	ldr	r2, [pc, #156]	; (800450c <TIM_OC2_SetConfig+0x104>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d10d      	bne.n	8004490 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800447a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800448e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a1d      	ldr	r2, [pc, #116]	; (8004508 <TIM_OC2_SetConfig+0x100>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d00f      	beq.n	80044b8 <TIM_OC2_SetConfig+0xb0>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a1c      	ldr	r2, [pc, #112]	; (800450c <TIM_OC2_SetConfig+0x104>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00b      	beq.n	80044b8 <TIM_OC2_SetConfig+0xb0>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a1b      	ldr	r2, [pc, #108]	; (8004510 <TIM_OC2_SetConfig+0x108>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d007      	beq.n	80044b8 <TIM_OC2_SetConfig+0xb0>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a1a      	ldr	r2, [pc, #104]	; (8004514 <TIM_OC2_SetConfig+0x10c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d003      	beq.n	80044b8 <TIM_OC2_SetConfig+0xb0>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a19      	ldr	r2, [pc, #100]	; (8004518 <TIM_OC2_SetConfig+0x110>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d113      	bne.n	80044e0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	621a      	str	r2, [r3, #32]
}
 80044fa:	bf00      	nop
 80044fc:	371c      	adds	r7, #28
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	40012c00 	.word	0x40012c00
 800450c:	40013400 	.word	0x40013400
 8004510:	40014000 	.word	0x40014000
 8004514:	40014400 	.word	0x40014400
 8004518:	40014800 	.word	0x40014800

0800451c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800454a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 0303 	bic.w	r3, r3, #3
 8004556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	021b      	lsls	r3, r3, #8
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	4313      	orrs	r3, r2
 8004574:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a27      	ldr	r2, [pc, #156]	; (8004618 <TIM_OC3_SetConfig+0xfc>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d003      	beq.n	8004586 <TIM_OC3_SetConfig+0x6a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a26      	ldr	r2, [pc, #152]	; (800461c <TIM_OC3_SetConfig+0x100>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d10d      	bne.n	80045a2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800458c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	021b      	lsls	r3, r3, #8
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a1c      	ldr	r2, [pc, #112]	; (8004618 <TIM_OC3_SetConfig+0xfc>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00f      	beq.n	80045ca <TIM_OC3_SetConfig+0xae>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a1b      	ldr	r2, [pc, #108]	; (800461c <TIM_OC3_SetConfig+0x100>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00b      	beq.n	80045ca <TIM_OC3_SetConfig+0xae>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a1a      	ldr	r2, [pc, #104]	; (8004620 <TIM_OC3_SetConfig+0x104>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d007      	beq.n	80045ca <TIM_OC3_SetConfig+0xae>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a19      	ldr	r2, [pc, #100]	; (8004624 <TIM_OC3_SetConfig+0x108>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d003      	beq.n	80045ca <TIM_OC3_SetConfig+0xae>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a18      	ldr	r2, [pc, #96]	; (8004628 <TIM_OC3_SetConfig+0x10c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d113      	bne.n	80045f2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	621a      	str	r2, [r3, #32]
}
 800460c:	bf00      	nop
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	40012c00 	.word	0x40012c00
 800461c:	40013400 	.word	0x40013400
 8004620:	40014000 	.word	0x40014000
 8004624:	40014400 	.word	0x40014400
 8004628:	40014800 	.word	0x40014800

0800462c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800465a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4313      	orrs	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800467a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	031b      	lsls	r3, r3, #12
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a18      	ldr	r2, [pc, #96]	; (80046ec <TIM_OC4_SetConfig+0xc0>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00f      	beq.n	80046b0 <TIM_OC4_SetConfig+0x84>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a17      	ldr	r2, [pc, #92]	; (80046f0 <TIM_OC4_SetConfig+0xc4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d00b      	beq.n	80046b0 <TIM_OC4_SetConfig+0x84>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a16      	ldr	r2, [pc, #88]	; (80046f4 <TIM_OC4_SetConfig+0xc8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d007      	beq.n	80046b0 <TIM_OC4_SetConfig+0x84>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a15      	ldr	r2, [pc, #84]	; (80046f8 <TIM_OC4_SetConfig+0xcc>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d003      	beq.n	80046b0 <TIM_OC4_SetConfig+0x84>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a14      	ldr	r2, [pc, #80]	; (80046fc <TIM_OC4_SetConfig+0xd0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d109      	bne.n	80046c4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	019b      	lsls	r3, r3, #6
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	621a      	str	r2, [r3, #32]
}
 80046de:	bf00      	nop
 80046e0:	371c      	adds	r7, #28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	40012c00 	.word	0x40012c00
 80046f0:	40013400 	.word	0x40013400
 80046f4:	40014000 	.word	0x40014000
 80046f8:	40014400 	.word	0x40014400
 80046fc:	40014800 	.word	0x40014800

08004700 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800472e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004744:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	041b      	lsls	r3, r3, #16
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a17      	ldr	r2, [pc, #92]	; (80047b4 <TIM_OC5_SetConfig+0xb4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d00f      	beq.n	800477a <TIM_OC5_SetConfig+0x7a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a16      	ldr	r2, [pc, #88]	; (80047b8 <TIM_OC5_SetConfig+0xb8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00b      	beq.n	800477a <TIM_OC5_SetConfig+0x7a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a15      	ldr	r2, [pc, #84]	; (80047bc <TIM_OC5_SetConfig+0xbc>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d007      	beq.n	800477a <TIM_OC5_SetConfig+0x7a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a14      	ldr	r2, [pc, #80]	; (80047c0 <TIM_OC5_SetConfig+0xc0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d003      	beq.n	800477a <TIM_OC5_SetConfig+0x7a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a13      	ldr	r2, [pc, #76]	; (80047c4 <TIM_OC5_SetConfig+0xc4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d109      	bne.n	800478e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004780:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	021b      	lsls	r3, r3, #8
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4313      	orrs	r3, r2
 800478c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	621a      	str	r2, [r3, #32]
}
 80047a8:	bf00      	nop
 80047aa:	371c      	adds	r7, #28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	40012c00 	.word	0x40012c00
 80047b8:	40013400 	.word	0x40013400
 80047bc:	40014000 	.word	0x40014000
 80047c0:	40014400 	.word	0x40014400
 80047c4:	40014800 	.word	0x40014800

080047c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	021b      	lsls	r3, r3, #8
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800480e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	051b      	lsls	r3, r3, #20
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a18      	ldr	r2, [pc, #96]	; (8004880 <TIM_OC6_SetConfig+0xb8>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00f      	beq.n	8004844 <TIM_OC6_SetConfig+0x7c>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a17      	ldr	r2, [pc, #92]	; (8004884 <TIM_OC6_SetConfig+0xbc>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00b      	beq.n	8004844 <TIM_OC6_SetConfig+0x7c>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a16      	ldr	r2, [pc, #88]	; (8004888 <TIM_OC6_SetConfig+0xc0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d007      	beq.n	8004844 <TIM_OC6_SetConfig+0x7c>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a15      	ldr	r2, [pc, #84]	; (800488c <TIM_OC6_SetConfig+0xc4>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d003      	beq.n	8004844 <TIM_OC6_SetConfig+0x7c>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a14      	ldr	r2, [pc, #80]	; (8004890 <TIM_OC6_SetConfig+0xc8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d109      	bne.n	8004858 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800484a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	029b      	lsls	r3, r3, #10
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4313      	orrs	r3, r2
 8004856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	621a      	str	r2, [r3, #32]
}
 8004872:	bf00      	nop
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40012c00 	.word	0x40012c00
 8004884:	40013400 	.word	0x40013400
 8004888:	40014000 	.word	0x40014000
 800488c:	40014400 	.word	0x40014400
 8004890:	40014800 	.word	0x40014800

08004894 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f003 031f 	and.w	r3, r3, #31
 80048a6:	2201      	movs	r2, #1
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a1a      	ldr	r2, [r3, #32]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	43db      	mvns	r3, r3
 80048b6:	401a      	ands	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a1a      	ldr	r2, [r3, #32]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f003 031f 	and.w	r3, r3, #31
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	fa01 f303 	lsl.w	r3, r1, r3
 80048cc:	431a      	orrs	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	621a      	str	r2, [r3, #32]
}
 80048d2:	bf00      	nop
 80048d4:	371c      	adds	r7, #28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
	...

080048e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d101      	bne.n	80048f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048f4:	2302      	movs	r3, #2
 80048f6:	e068      	b.n	80049ca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a2e      	ldr	r2, [pc, #184]	; (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a2d      	ldr	r2, [pc, #180]	; (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d108      	bne.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004932:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004944:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1e      	ldr	r2, [pc, #120]	; (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d01d      	beq.n	800499e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496a:	d018      	beq.n	800499e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a1b      	ldr	r2, [pc, #108]	; (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d013      	beq.n	800499e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1a      	ldr	r2, [pc, #104]	; (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d00e      	beq.n	800499e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a18      	ldr	r2, [pc, #96]	; (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d009      	beq.n	800499e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a13      	ldr	r2, [pc, #76]	; (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d004      	beq.n	800499e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a14      	ldr	r2, [pc, #80]	; (80049ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d10c      	bne.n	80049b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	40012c00 	.word	0x40012c00
 80049dc:	40013400 	.word	0x40013400
 80049e0:	40000400 	.word	0x40000400
 80049e4:	40000800 	.word	0x40000800
 80049e8:	40000c00 	.word	0x40000c00
 80049ec:	40014000 	.word	0x40014000

080049f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d101      	bne.n	8004a0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	e065      	b.n	8004ad8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	041b      	lsls	r3, r3, #16
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a16      	ldr	r2, [pc, #88]	; (8004ae4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d004      	beq.n	8004a9a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a14      	ldr	r2, [pc, #80]	; (8004ae8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d115      	bne.n	8004ac6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	051b      	lsls	r3, r3, #20
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	40012c00 	.word	0x40012c00
 8004ae8:	40013400 	.word	0x40013400

08004aec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e040      	b.n	8004bbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fc fc70 	bl	8001430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2224      	movs	r2, #36	; 0x24
 8004b54:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0201 	bic.w	r2, r2, #1
 8004b64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fc18 	bl	800539c <UART_SetConfig>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d101      	bne.n	8004b76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e022      	b.n	8004bbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fec4 	bl	800590c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ba2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 ff4b 	bl	8005a50 <UART_CheckIdleState>
 8004bba:	4603      	mov	r3, r0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08a      	sub	sp, #40	; 0x28
 8004bc8:	af02      	add	r7, sp, #8
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	603b      	str	r3, [r7, #0]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	f040 8082 	bne.w	8004ce2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <HAL_UART_Transmit+0x26>
 8004be4:	88fb      	ldrh	r3, [r7, #6]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e07a      	b.n	8004ce4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_UART_Transmit+0x38>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e073      	b.n	8004ce4 <HAL_UART_Transmit+0x120>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2221      	movs	r2, #33	; 0x21
 8004c10:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c12:	f7fc fd89 	bl	8001728 <HAL_GetTick>
 8004c16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	88fa      	ldrh	r2, [r7, #6]
 8004c1c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	88fa      	ldrh	r2, [r7, #6]
 8004c24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c30:	d108      	bne.n	8004c44 <HAL_UART_Transmit+0x80>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d104      	bne.n	8004c44 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	61bb      	str	r3, [r7, #24]
 8004c42:	e003      	b.n	8004c4c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004c54:	e02d      	b.n	8004cb2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	2180      	movs	r1, #128	; 0x80
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 ff3e 	bl	8005ae2 <UART_WaitOnFlagUntilTimeout>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e039      	b.n	8004ce4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10b      	bne.n	8004c8e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	881a      	ldrh	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c82:	b292      	uxth	r2, r2
 8004c84:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	3302      	adds	r3, #2
 8004c8a:	61bb      	str	r3, [r7, #24]
 8004c8c:	e008      	b.n	8004ca0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	781a      	ldrb	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	b292      	uxth	r2, r2
 8004c98:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1cb      	bne.n	8004c56 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2140      	movs	r1, #64	; 0x40
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f000 ff0a 	bl	8005ae2 <UART_WaitOnFlagUntilTimeout>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e005      	b.n	8004ce4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	e000      	b.n	8004ce4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004ce2:	2302      	movs	r3, #2
  }
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3720      	adds	r7, #32
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08a      	sub	sp, #40	; 0x28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	d142      	bne.n	8004d88 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <HAL_UART_Receive_IT+0x22>
 8004d08:	88fb      	ldrh	r3, [r7, #6]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e03b      	b.n	8004d8a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_UART_Receive_IT+0x34>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e034      	b.n	8004d8a <HAL_UART_Receive_IT+0x9e>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a18      	ldr	r2, [pc, #96]	; (8004d94 <HAL_UART_Receive_IT+0xa8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d01f      	beq.n	8004d78 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d018      	beq.n	8004d78 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	e853 3f00 	ldrex	r3, [r3]
 8004d52:	613b      	str	r3, [r7, #16]
   return(result);
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	461a      	mov	r2, r3
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	623b      	str	r3, [r7, #32]
 8004d66:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d68:	69f9      	ldr	r1, [r7, #28]
 8004d6a:	6a3a      	ldr	r2, [r7, #32]
 8004d6c:	e841 2300 	strex	r3, r2, [r1]
 8004d70:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1e6      	bne.n	8004d46 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d78:	88fb      	ldrh	r3, [r7, #6]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	68b9      	ldr	r1, [r7, #8]
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 ff74 	bl	8005c6c <UART_Start_Receive_IT>
 8004d84:	4603      	mov	r3, r0
 8004d86:	e000      	b.n	8004d8a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004d88:	2302      	movs	r3, #2
  }
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3728      	adds	r7, #40	; 0x28
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40008000 	.word	0x40008000

08004d98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b0ba      	sub	sp, #232	; 0xe8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004dbe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004dc2:	f640 030f 	movw	r3, #2063	; 0x80f
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004dcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d115      	bne.n	8004e00 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00f      	beq.n	8004e00 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004de4:	f003 0320 	and.w	r3, r3, #32
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d009      	beq.n	8004e00 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 82a6 	beq.w	8005342 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	4798      	blx	r3
      }
      return;
 8004dfe:	e2a0      	b.n	8005342 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004e00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 8117 	beq.w	8005038 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d106      	bne.n	8004e24 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004e16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004e1a:	4b85      	ldr	r3, [pc, #532]	; (8005030 <HAL_UART_IRQHandler+0x298>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 810a 	beq.w	8005038 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d011      	beq.n	8004e54 <HAL_UART_IRQHandler+0xbc>
 8004e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00b      	beq.n	8004e54 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2201      	movs	r2, #1
 8004e42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e4a:	f043 0201 	orr.w	r2, r3, #1
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d011      	beq.n	8004e84 <HAL_UART_IRQHandler+0xec>
 8004e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00b      	beq.n	8004e84 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2202      	movs	r2, #2
 8004e72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e7a:	f043 0204 	orr.w	r2, r3, #4
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d011      	beq.n	8004eb4 <HAL_UART_IRQHandler+0x11c>
 8004e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00b      	beq.n	8004eb4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2204      	movs	r2, #4
 8004ea2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eaa:	f043 0202 	orr.w	r2, r3, #2
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eb8:	f003 0308 	and.w	r3, r3, #8
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d017      	beq.n	8004ef0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d105      	bne.n	8004ed8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ed0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00b      	beq.n	8004ef0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2208      	movs	r2, #8
 8004ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ee6:	f043 0208 	orr.w	r2, r3, #8
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d012      	beq.n	8004f22 <HAL_UART_IRQHandler+0x18a>
 8004efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00c      	beq.n	8004f22 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f18:	f043 0220 	orr.w	r2, r3, #32
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 820c 	beq.w	8005346 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00d      	beq.n	8004f56 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f3e:	f003 0320 	and.w	r3, r3, #32
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d007      	beq.n	8004f56 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6a:	2b40      	cmp	r3, #64	; 0x40
 8004f6c:	d005      	beq.n	8004f7a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f72:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d04f      	beq.n	800501a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 ff40 	bl	8005e00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8a:	2b40      	cmp	r3, #64	; 0x40
 8004f8c:	d141      	bne.n	8005012 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3308      	adds	r3, #8
 8004f94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f9c:	e853 3f00 	ldrex	r3, [r3]
 8004fa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3308      	adds	r3, #8
 8004fb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004fba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004fc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004fca:	e841 2300 	strex	r3, r2, [r1]
 8004fce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004fd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1d9      	bne.n	8004f8e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d013      	beq.n	800500a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe6:	4a13      	ldr	r2, [pc, #76]	; (8005034 <HAL_UART_IRQHandler+0x29c>)
 8004fe8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fc fdd2 	bl	8001b98 <HAL_DMA_Abort_IT>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d017      	beq.n	800502a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005004:	4610      	mov	r0, r2
 8005006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005008:	e00f      	b.n	800502a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f9b0 	bl	8005370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005010:	e00b      	b.n	800502a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f9ac 	bl	8005370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005018:	e007      	b.n	800502a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f9a8 	bl	8005370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005028:	e18d      	b.n	8005346 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800502a:	bf00      	nop
    return;
 800502c:	e18b      	b.n	8005346 <HAL_UART_IRQHandler+0x5ae>
 800502e:	bf00      	nop
 8005030:	04000120 	.word	0x04000120
 8005034:	08005ec7 	.word	0x08005ec7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800503c:	2b01      	cmp	r3, #1
 800503e:	f040 8146 	bne.w	80052ce <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005046:	f003 0310 	and.w	r3, r3, #16
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 813f 	beq.w	80052ce <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 8138 	beq.w	80052ce <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2210      	movs	r2, #16
 8005064:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005070:	2b40      	cmp	r3, #64	; 0x40
 8005072:	f040 80b4 	bne.w	80051de <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005082:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005086:	2b00      	cmp	r3, #0
 8005088:	f000 815f 	beq.w	800534a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005096:	429a      	cmp	r2, r3
 8005098:	f080 8157 	bcs.w	800534a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f040 8085 	bne.w	80051c2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050c4:	e853 3f00 	ldrex	r3, [r3]
 80050c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80050e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80050e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80050ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80050f2:	e841 2300 	strex	r3, r2, [r1]
 80050f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80050fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1da      	bne.n	80050b8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3308      	adds	r3, #8
 8005108:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800510c:	e853 3f00 	ldrex	r3, [r3]
 8005110:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005112:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005114:	f023 0301 	bic.w	r3, r3, #1
 8005118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3308      	adds	r3, #8
 8005122:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005126:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800512a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800512e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e1      	bne.n	8005102 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3308      	adds	r3, #8
 8005144:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005148:	e853 3f00 	ldrex	r3, [r3]
 800514c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800514e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005154:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3308      	adds	r3, #8
 800515e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005162:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005164:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005166:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005168:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1e3      	bne.n	800513e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2220      	movs	r2, #32
 800517a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800518a:	e853 3f00 	ldrex	r3, [r3]
 800518e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005192:	f023 0310 	bic.w	r3, r3, #16
 8005196:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80051a6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051ac:	e841 2300 	strex	r3, r2, [r1]
 80051b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1e4      	bne.n	8005182 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fc fcad 	bl	8001b1c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	4619      	mov	r1, r3
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f8d4 	bl	8005384 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051dc:	e0b5      	b.n	800534a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 80a7 	beq.w	800534e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 80a2 	beq.w	800534e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005212:	e853 3f00 	ldrex	r3, [r3]
 8005216:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800521a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800521e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800522c:	647b      	str	r3, [r7, #68]	; 0x44
 800522e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005230:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005232:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005234:	e841 2300 	strex	r3, r2, [r1]
 8005238:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800523a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1e4      	bne.n	800520a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3308      	adds	r3, #8
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	e853 3f00 	ldrex	r3, [r3]
 800524e:	623b      	str	r3, [r7, #32]
   return(result);
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	f023 0301 	bic.w	r3, r3, #1
 8005256:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3308      	adds	r3, #8
 8005260:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005264:	633a      	str	r2, [r7, #48]	; 0x30
 8005266:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005268:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800526a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800526c:	e841 2300 	strex	r3, r2, [r1]
 8005270:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1e3      	bne.n	8005240 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2220      	movs	r2, #32
 800527c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	e853 3f00 	ldrex	r3, [r3]
 8005296:	60fb      	str	r3, [r7, #12]
   return(result);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 0310 	bic.w	r3, r3, #16
 800529e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052ac:	61fb      	str	r3, [r7, #28]
 80052ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b0:	69b9      	ldr	r1, [r7, #24]
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	e841 2300 	strex	r3, r2, [r1]
 80052b8:	617b      	str	r3, [r7, #20]
   return(result);
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1e4      	bne.n	800528a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052c4:	4619      	mov	r1, r3
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f85c 	bl	8005384 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052cc:	e03f      	b.n	800534e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80052ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00e      	beq.n	80052f8 <HAL_UART_IRQHandler+0x560>
 80052da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d008      	beq.n	80052f8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80052ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 ff88 	bl	8006206 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052f6:	e02d      	b.n	8005354 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80052f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00e      	beq.n	8005322 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530c:	2b00      	cmp	r3, #0
 800530e:	d008      	beq.n	8005322 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005314:	2b00      	cmp	r3, #0
 8005316:	d01c      	beq.n	8005352 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	4798      	blx	r3
    }
    return;
 8005320:	e017      	b.n	8005352 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532a:	2b00      	cmp	r3, #0
 800532c:	d012      	beq.n	8005354 <HAL_UART_IRQHandler+0x5bc>
 800532e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00c      	beq.n	8005354 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fdd9 	bl	8005ef2 <UART_EndTransmit_IT>
    return;
 8005340:	e008      	b.n	8005354 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005342:	bf00      	nop
 8005344:	e006      	b.n	8005354 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005346:	bf00      	nop
 8005348:	e004      	b.n	8005354 <HAL_UART_IRQHandler+0x5bc>
      return;
 800534a:	bf00      	nop
 800534c:	e002      	b.n	8005354 <HAL_UART_IRQHandler+0x5bc>
      return;
 800534e:	bf00      	nop
 8005350:	e000      	b.n	8005354 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005352:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005354:	37e8      	adds	r7, #232	; 0xe8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop

0800535c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	460b      	mov	r3, r1
 800538e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800539c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053a0:	b08a      	sub	sp, #40	; 0x28
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	431a      	orrs	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	431a      	orrs	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	4ba4      	ldr	r3, [pc, #656]	; (800565c <UART_SetConfig+0x2c0>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	6812      	ldr	r2, [r2, #0]
 80053d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053d4:	430b      	orrs	r3, r1
 80053d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a99      	ldr	r2, [pc, #612]	; (8005660 <UART_SetConfig+0x2c4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d004      	beq.n	8005408 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005404:	4313      	orrs	r3, r2
 8005406:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005418:	430a      	orrs	r2, r1
 800541a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a90      	ldr	r2, [pc, #576]	; (8005664 <UART_SetConfig+0x2c8>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d126      	bne.n	8005474 <UART_SetConfig+0xd8>
 8005426:	4b90      	ldr	r3, [pc, #576]	; (8005668 <UART_SetConfig+0x2cc>)
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542c:	f003 0303 	and.w	r3, r3, #3
 8005430:	2b03      	cmp	r3, #3
 8005432:	d81b      	bhi.n	800546c <UART_SetConfig+0xd0>
 8005434:	a201      	add	r2, pc, #4	; (adr r2, 800543c <UART_SetConfig+0xa0>)
 8005436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543a:	bf00      	nop
 800543c:	0800544d 	.word	0x0800544d
 8005440:	0800545d 	.word	0x0800545d
 8005444:	08005455 	.word	0x08005455
 8005448:	08005465 	.word	0x08005465
 800544c:	2301      	movs	r3, #1
 800544e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005452:	e116      	b.n	8005682 <UART_SetConfig+0x2e6>
 8005454:	2302      	movs	r3, #2
 8005456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800545a:	e112      	b.n	8005682 <UART_SetConfig+0x2e6>
 800545c:	2304      	movs	r3, #4
 800545e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005462:	e10e      	b.n	8005682 <UART_SetConfig+0x2e6>
 8005464:	2308      	movs	r3, #8
 8005466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800546a:	e10a      	b.n	8005682 <UART_SetConfig+0x2e6>
 800546c:	2310      	movs	r3, #16
 800546e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005472:	e106      	b.n	8005682 <UART_SetConfig+0x2e6>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a7c      	ldr	r2, [pc, #496]	; (800566c <UART_SetConfig+0x2d0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d138      	bne.n	80054f0 <UART_SetConfig+0x154>
 800547e:	4b7a      	ldr	r3, [pc, #488]	; (8005668 <UART_SetConfig+0x2cc>)
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005484:	f003 030c 	and.w	r3, r3, #12
 8005488:	2b0c      	cmp	r3, #12
 800548a:	d82d      	bhi.n	80054e8 <UART_SetConfig+0x14c>
 800548c:	a201      	add	r2, pc, #4	; (adr r2, 8005494 <UART_SetConfig+0xf8>)
 800548e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005492:	bf00      	nop
 8005494:	080054c9 	.word	0x080054c9
 8005498:	080054e9 	.word	0x080054e9
 800549c:	080054e9 	.word	0x080054e9
 80054a0:	080054e9 	.word	0x080054e9
 80054a4:	080054d9 	.word	0x080054d9
 80054a8:	080054e9 	.word	0x080054e9
 80054ac:	080054e9 	.word	0x080054e9
 80054b0:	080054e9 	.word	0x080054e9
 80054b4:	080054d1 	.word	0x080054d1
 80054b8:	080054e9 	.word	0x080054e9
 80054bc:	080054e9 	.word	0x080054e9
 80054c0:	080054e9 	.word	0x080054e9
 80054c4:	080054e1 	.word	0x080054e1
 80054c8:	2300      	movs	r3, #0
 80054ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ce:	e0d8      	b.n	8005682 <UART_SetConfig+0x2e6>
 80054d0:	2302      	movs	r3, #2
 80054d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054d6:	e0d4      	b.n	8005682 <UART_SetConfig+0x2e6>
 80054d8:	2304      	movs	r3, #4
 80054da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054de:	e0d0      	b.n	8005682 <UART_SetConfig+0x2e6>
 80054e0:	2308      	movs	r3, #8
 80054e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054e6:	e0cc      	b.n	8005682 <UART_SetConfig+0x2e6>
 80054e8:	2310      	movs	r3, #16
 80054ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ee:	e0c8      	b.n	8005682 <UART_SetConfig+0x2e6>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a5e      	ldr	r2, [pc, #376]	; (8005670 <UART_SetConfig+0x2d4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d125      	bne.n	8005546 <UART_SetConfig+0x1aa>
 80054fa:	4b5b      	ldr	r3, [pc, #364]	; (8005668 <UART_SetConfig+0x2cc>)
 80054fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005500:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005504:	2b30      	cmp	r3, #48	; 0x30
 8005506:	d016      	beq.n	8005536 <UART_SetConfig+0x19a>
 8005508:	2b30      	cmp	r3, #48	; 0x30
 800550a:	d818      	bhi.n	800553e <UART_SetConfig+0x1a2>
 800550c:	2b20      	cmp	r3, #32
 800550e:	d00a      	beq.n	8005526 <UART_SetConfig+0x18a>
 8005510:	2b20      	cmp	r3, #32
 8005512:	d814      	bhi.n	800553e <UART_SetConfig+0x1a2>
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <UART_SetConfig+0x182>
 8005518:	2b10      	cmp	r3, #16
 800551a:	d008      	beq.n	800552e <UART_SetConfig+0x192>
 800551c:	e00f      	b.n	800553e <UART_SetConfig+0x1a2>
 800551e:	2300      	movs	r3, #0
 8005520:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005524:	e0ad      	b.n	8005682 <UART_SetConfig+0x2e6>
 8005526:	2302      	movs	r3, #2
 8005528:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800552c:	e0a9      	b.n	8005682 <UART_SetConfig+0x2e6>
 800552e:	2304      	movs	r3, #4
 8005530:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005534:	e0a5      	b.n	8005682 <UART_SetConfig+0x2e6>
 8005536:	2308      	movs	r3, #8
 8005538:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800553c:	e0a1      	b.n	8005682 <UART_SetConfig+0x2e6>
 800553e:	2310      	movs	r3, #16
 8005540:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005544:	e09d      	b.n	8005682 <UART_SetConfig+0x2e6>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a4a      	ldr	r2, [pc, #296]	; (8005674 <UART_SetConfig+0x2d8>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d125      	bne.n	800559c <UART_SetConfig+0x200>
 8005550:	4b45      	ldr	r3, [pc, #276]	; (8005668 <UART_SetConfig+0x2cc>)
 8005552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005556:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800555a:	2bc0      	cmp	r3, #192	; 0xc0
 800555c:	d016      	beq.n	800558c <UART_SetConfig+0x1f0>
 800555e:	2bc0      	cmp	r3, #192	; 0xc0
 8005560:	d818      	bhi.n	8005594 <UART_SetConfig+0x1f8>
 8005562:	2b80      	cmp	r3, #128	; 0x80
 8005564:	d00a      	beq.n	800557c <UART_SetConfig+0x1e0>
 8005566:	2b80      	cmp	r3, #128	; 0x80
 8005568:	d814      	bhi.n	8005594 <UART_SetConfig+0x1f8>
 800556a:	2b00      	cmp	r3, #0
 800556c:	d002      	beq.n	8005574 <UART_SetConfig+0x1d8>
 800556e:	2b40      	cmp	r3, #64	; 0x40
 8005570:	d008      	beq.n	8005584 <UART_SetConfig+0x1e8>
 8005572:	e00f      	b.n	8005594 <UART_SetConfig+0x1f8>
 8005574:	2300      	movs	r3, #0
 8005576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800557a:	e082      	b.n	8005682 <UART_SetConfig+0x2e6>
 800557c:	2302      	movs	r3, #2
 800557e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005582:	e07e      	b.n	8005682 <UART_SetConfig+0x2e6>
 8005584:	2304      	movs	r3, #4
 8005586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800558a:	e07a      	b.n	8005682 <UART_SetConfig+0x2e6>
 800558c:	2308      	movs	r3, #8
 800558e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005592:	e076      	b.n	8005682 <UART_SetConfig+0x2e6>
 8005594:	2310      	movs	r3, #16
 8005596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800559a:	e072      	b.n	8005682 <UART_SetConfig+0x2e6>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a35      	ldr	r2, [pc, #212]	; (8005678 <UART_SetConfig+0x2dc>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d12a      	bne.n	80055fc <UART_SetConfig+0x260>
 80055a6:	4b30      	ldr	r3, [pc, #192]	; (8005668 <UART_SetConfig+0x2cc>)
 80055a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055b4:	d01a      	beq.n	80055ec <UART_SetConfig+0x250>
 80055b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ba:	d81b      	bhi.n	80055f4 <UART_SetConfig+0x258>
 80055bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055c0:	d00c      	beq.n	80055dc <UART_SetConfig+0x240>
 80055c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055c6:	d815      	bhi.n	80055f4 <UART_SetConfig+0x258>
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <UART_SetConfig+0x238>
 80055cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055d0:	d008      	beq.n	80055e4 <UART_SetConfig+0x248>
 80055d2:	e00f      	b.n	80055f4 <UART_SetConfig+0x258>
 80055d4:	2300      	movs	r3, #0
 80055d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055da:	e052      	b.n	8005682 <UART_SetConfig+0x2e6>
 80055dc:	2302      	movs	r3, #2
 80055de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055e2:	e04e      	b.n	8005682 <UART_SetConfig+0x2e6>
 80055e4:	2304      	movs	r3, #4
 80055e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ea:	e04a      	b.n	8005682 <UART_SetConfig+0x2e6>
 80055ec:	2308      	movs	r3, #8
 80055ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055f2:	e046      	b.n	8005682 <UART_SetConfig+0x2e6>
 80055f4:	2310      	movs	r3, #16
 80055f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055fa:	e042      	b.n	8005682 <UART_SetConfig+0x2e6>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a17      	ldr	r2, [pc, #92]	; (8005660 <UART_SetConfig+0x2c4>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d13a      	bne.n	800567c <UART_SetConfig+0x2e0>
 8005606:	4b18      	ldr	r3, [pc, #96]	; (8005668 <UART_SetConfig+0x2cc>)
 8005608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005610:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005614:	d01a      	beq.n	800564c <UART_SetConfig+0x2b0>
 8005616:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800561a:	d81b      	bhi.n	8005654 <UART_SetConfig+0x2b8>
 800561c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005620:	d00c      	beq.n	800563c <UART_SetConfig+0x2a0>
 8005622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005626:	d815      	bhi.n	8005654 <UART_SetConfig+0x2b8>
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <UART_SetConfig+0x298>
 800562c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005630:	d008      	beq.n	8005644 <UART_SetConfig+0x2a8>
 8005632:	e00f      	b.n	8005654 <UART_SetConfig+0x2b8>
 8005634:	2300      	movs	r3, #0
 8005636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800563a:	e022      	b.n	8005682 <UART_SetConfig+0x2e6>
 800563c:	2302      	movs	r3, #2
 800563e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005642:	e01e      	b.n	8005682 <UART_SetConfig+0x2e6>
 8005644:	2304      	movs	r3, #4
 8005646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800564a:	e01a      	b.n	8005682 <UART_SetConfig+0x2e6>
 800564c:	2308      	movs	r3, #8
 800564e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005652:	e016      	b.n	8005682 <UART_SetConfig+0x2e6>
 8005654:	2310      	movs	r3, #16
 8005656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800565a:	e012      	b.n	8005682 <UART_SetConfig+0x2e6>
 800565c:	efff69f3 	.word	0xefff69f3
 8005660:	40008000 	.word	0x40008000
 8005664:	40013800 	.word	0x40013800
 8005668:	40021000 	.word	0x40021000
 800566c:	40004400 	.word	0x40004400
 8005670:	40004800 	.word	0x40004800
 8005674:	40004c00 	.word	0x40004c00
 8005678:	40005000 	.word	0x40005000
 800567c:	2310      	movs	r3, #16
 800567e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a9f      	ldr	r2, [pc, #636]	; (8005904 <UART_SetConfig+0x568>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d17a      	bne.n	8005782 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800568c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005690:	2b08      	cmp	r3, #8
 8005692:	d824      	bhi.n	80056de <UART_SetConfig+0x342>
 8005694:	a201      	add	r2, pc, #4	; (adr r2, 800569c <UART_SetConfig+0x300>)
 8005696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569a:	bf00      	nop
 800569c:	080056c1 	.word	0x080056c1
 80056a0:	080056df 	.word	0x080056df
 80056a4:	080056c9 	.word	0x080056c9
 80056a8:	080056df 	.word	0x080056df
 80056ac:	080056cf 	.word	0x080056cf
 80056b0:	080056df 	.word	0x080056df
 80056b4:	080056df 	.word	0x080056df
 80056b8:	080056df 	.word	0x080056df
 80056bc:	080056d7 	.word	0x080056d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056c0:	f7fd fae2 	bl	8002c88 <HAL_RCC_GetPCLK1Freq>
 80056c4:	61f8      	str	r0, [r7, #28]
        break;
 80056c6:	e010      	b.n	80056ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056c8:	4b8f      	ldr	r3, [pc, #572]	; (8005908 <UART_SetConfig+0x56c>)
 80056ca:	61fb      	str	r3, [r7, #28]
        break;
 80056cc:	e00d      	b.n	80056ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ce:	f7fd fa43 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 80056d2:	61f8      	str	r0, [r7, #28]
        break;
 80056d4:	e009      	b.n	80056ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056da:	61fb      	str	r3, [r7, #28]
        break;
 80056dc:	e005      	b.n	80056ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80056de:	2300      	movs	r3, #0
 80056e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 80fb 	beq.w	80058e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	4613      	mov	r3, r2
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	4413      	add	r3, r2
 80056fc:	69fa      	ldr	r2, [r7, #28]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d305      	bcc.n	800570e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	429a      	cmp	r2, r3
 800570c:	d903      	bls.n	8005716 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005714:	e0e8      	b.n	80058e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	2200      	movs	r2, #0
 800571a:	461c      	mov	r4, r3
 800571c:	4615      	mov	r5, r2
 800571e:	f04f 0200 	mov.w	r2, #0
 8005722:	f04f 0300 	mov.w	r3, #0
 8005726:	022b      	lsls	r3, r5, #8
 8005728:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800572c:	0222      	lsls	r2, r4, #8
 800572e:	68f9      	ldr	r1, [r7, #12]
 8005730:	6849      	ldr	r1, [r1, #4]
 8005732:	0849      	lsrs	r1, r1, #1
 8005734:	2000      	movs	r0, #0
 8005736:	4688      	mov	r8, r1
 8005738:	4681      	mov	r9, r0
 800573a:	eb12 0a08 	adds.w	sl, r2, r8
 800573e:	eb43 0b09 	adc.w	fp, r3, r9
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	603b      	str	r3, [r7, #0]
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005750:	4650      	mov	r0, sl
 8005752:	4659      	mov	r1, fp
 8005754:	f7fa fd8c 	bl	8000270 <__aeabi_uldivmod>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4613      	mov	r3, r2
 800575e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005766:	d308      	bcc.n	800577a <UART_SetConfig+0x3de>
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800576e:	d204      	bcs.n	800577a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	60da      	str	r2, [r3, #12]
 8005778:	e0b6      	b.n	80058e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005780:	e0b2      	b.n	80058e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800578a:	d15e      	bne.n	800584a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800578c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005790:	2b08      	cmp	r3, #8
 8005792:	d828      	bhi.n	80057e6 <UART_SetConfig+0x44a>
 8005794:	a201      	add	r2, pc, #4	; (adr r2, 800579c <UART_SetConfig+0x400>)
 8005796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579a:	bf00      	nop
 800579c:	080057c1 	.word	0x080057c1
 80057a0:	080057c9 	.word	0x080057c9
 80057a4:	080057d1 	.word	0x080057d1
 80057a8:	080057e7 	.word	0x080057e7
 80057ac:	080057d7 	.word	0x080057d7
 80057b0:	080057e7 	.word	0x080057e7
 80057b4:	080057e7 	.word	0x080057e7
 80057b8:	080057e7 	.word	0x080057e7
 80057bc:	080057df 	.word	0x080057df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057c0:	f7fd fa62 	bl	8002c88 <HAL_RCC_GetPCLK1Freq>
 80057c4:	61f8      	str	r0, [r7, #28]
        break;
 80057c6:	e014      	b.n	80057f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057c8:	f7fd fa74 	bl	8002cb4 <HAL_RCC_GetPCLK2Freq>
 80057cc:	61f8      	str	r0, [r7, #28]
        break;
 80057ce:	e010      	b.n	80057f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057d0:	4b4d      	ldr	r3, [pc, #308]	; (8005908 <UART_SetConfig+0x56c>)
 80057d2:	61fb      	str	r3, [r7, #28]
        break;
 80057d4:	e00d      	b.n	80057f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057d6:	f7fd f9bf 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 80057da:	61f8      	str	r0, [r7, #28]
        break;
 80057dc:	e009      	b.n	80057f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057e2:	61fb      	str	r3, [r7, #28]
        break;
 80057e4:	e005      	b.n	80057f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80057f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d077      	beq.n	80058e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	005a      	lsls	r2, r3, #1
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	085b      	lsrs	r3, r3, #1
 8005802:	441a      	add	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	fbb2 f3f3 	udiv	r3, r2, r3
 800580c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	2b0f      	cmp	r3, #15
 8005812:	d916      	bls.n	8005842 <UART_SetConfig+0x4a6>
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800581a:	d212      	bcs.n	8005842 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	b29b      	uxth	r3, r3
 8005820:	f023 030f 	bic.w	r3, r3, #15
 8005824:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	085b      	lsrs	r3, r3, #1
 800582a:	b29b      	uxth	r3, r3
 800582c:	f003 0307 	and.w	r3, r3, #7
 8005830:	b29a      	uxth	r2, r3
 8005832:	8afb      	ldrh	r3, [r7, #22]
 8005834:	4313      	orrs	r3, r2
 8005836:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	8afa      	ldrh	r2, [r7, #22]
 800583e:	60da      	str	r2, [r3, #12]
 8005840:	e052      	b.n	80058e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005848:	e04e      	b.n	80058e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800584a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800584e:	2b08      	cmp	r3, #8
 8005850:	d827      	bhi.n	80058a2 <UART_SetConfig+0x506>
 8005852:	a201      	add	r2, pc, #4	; (adr r2, 8005858 <UART_SetConfig+0x4bc>)
 8005854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005858:	0800587d 	.word	0x0800587d
 800585c:	08005885 	.word	0x08005885
 8005860:	0800588d 	.word	0x0800588d
 8005864:	080058a3 	.word	0x080058a3
 8005868:	08005893 	.word	0x08005893
 800586c:	080058a3 	.word	0x080058a3
 8005870:	080058a3 	.word	0x080058a3
 8005874:	080058a3 	.word	0x080058a3
 8005878:	0800589b 	.word	0x0800589b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800587c:	f7fd fa04 	bl	8002c88 <HAL_RCC_GetPCLK1Freq>
 8005880:	61f8      	str	r0, [r7, #28]
        break;
 8005882:	e014      	b.n	80058ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005884:	f7fd fa16 	bl	8002cb4 <HAL_RCC_GetPCLK2Freq>
 8005888:	61f8      	str	r0, [r7, #28]
        break;
 800588a:	e010      	b.n	80058ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800588c:	4b1e      	ldr	r3, [pc, #120]	; (8005908 <UART_SetConfig+0x56c>)
 800588e:	61fb      	str	r3, [r7, #28]
        break;
 8005890:	e00d      	b.n	80058ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005892:	f7fd f961 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8005896:	61f8      	str	r0, [r7, #28]
        break;
 8005898:	e009      	b.n	80058ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800589a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800589e:	61fb      	str	r3, [r7, #28]
        break;
 80058a0:	e005      	b.n	80058ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80058ac:	bf00      	nop
    }

    if (pclk != 0U)
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d019      	beq.n	80058e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	085a      	lsrs	r2, r3, #1
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	441a      	add	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	2b0f      	cmp	r3, #15
 80058cc:	d909      	bls.n	80058e2 <UART_SetConfig+0x546>
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d4:	d205      	bcs.n	80058e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	b29a      	uxth	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60da      	str	r2, [r3, #12]
 80058e0:	e002      	b.n	80058e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80058f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3728      	adds	r7, #40	; 0x28
 80058fc:	46bd      	mov	sp, r7
 80058fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005902:	bf00      	nop
 8005904:	40008000 	.word	0x40008000
 8005908:	00f42400 	.word	0x00f42400

0800590c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00a      	beq.n	800597a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	f003 0308 	and.w	r3, r3, #8
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d01a      	beq.n	8005a22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a0a:	d10a      	bne.n	8005a22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	605a      	str	r2, [r3, #4]
  }
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af02      	add	r7, sp, #8
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a60:	f7fb fe62 	bl	8001728 <HAL_GetTick>
 8005a64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0308 	and.w	r3, r3, #8
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d10e      	bne.n	8005a92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f82d 	bl	8005ae2 <UART_WaitOnFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e023      	b.n	8005ada <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b04      	cmp	r3, #4
 8005a9e:	d10e      	bne.n	8005abe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f817 	bl	8005ae2 <UART_WaitOnFlagUntilTimeout>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e00d      	b.n	8005ada <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b09c      	sub	sp, #112	; 0x70
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	60f8      	str	r0, [r7, #12]
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	603b      	str	r3, [r7, #0]
 8005aee:	4613      	mov	r3, r2
 8005af0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af2:	e0a5      	b.n	8005c40 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005af4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afa:	f000 80a1 	beq.w	8005c40 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005afe:	f7fb fe13 	bl	8001728 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d302      	bcc.n	8005b14 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d13e      	bne.n	8005b92 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b1c:	e853 3f00 	ldrex	r3, [r3]
 8005b20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b28:	667b      	str	r3, [r7, #100]	; 0x64
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b34:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b3a:	e841 2300 	strex	r3, r2, [r1]
 8005b3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1e6      	bne.n	8005b14 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3308      	adds	r3, #8
 8005b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b50:	e853 3f00 	ldrex	r3, [r3]
 8005b54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b58:	f023 0301 	bic.w	r3, r3, #1
 8005b5c:	663b      	str	r3, [r7, #96]	; 0x60
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	3308      	adds	r3, #8
 8005b64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b66:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b6e:	e841 2300 	strex	r3, r2, [r1]
 8005b72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1e5      	bne.n	8005b46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2220      	movs	r2, #32
 8005b84:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e067      	b.n	8005c62 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d04f      	beq.n	8005c40 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bae:	d147      	bne.n	8005c40 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bb8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc2:	e853 3f00 	ldrex	r3, [r3]
 8005bc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8005bda:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005be0:	e841 2300 	strex	r3, r2, [r1]
 8005be4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1e6      	bne.n	8005bba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3308      	adds	r3, #8
 8005bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	e853 3f00 	ldrex	r3, [r3]
 8005bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f023 0301 	bic.w	r3, r3, #1
 8005c02:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3308      	adds	r3, #8
 8005c0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c0c:	623a      	str	r2, [r7, #32]
 8005c0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c10:	69f9      	ldr	r1, [r7, #28]
 8005c12:	6a3a      	ldr	r2, [r7, #32]
 8005c14:	e841 2300 	strex	r3, r2, [r1]
 8005c18:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1e5      	bne.n	8005bec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2220      	movs	r2, #32
 8005c24:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e010      	b.n	8005c62 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	69da      	ldr	r2, [r3, #28]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	4013      	ands	r3, r2
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	bf0c      	ite	eq
 8005c50:	2301      	moveq	r3, #1
 8005c52:	2300      	movne	r3, #0
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	461a      	mov	r2, r3
 8005c58:	79fb      	ldrb	r3, [r7, #7]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	f43f af4a 	beq.w	8005af4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3770      	adds	r7, #112	; 0x70
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
	...

08005c6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b097      	sub	sp, #92	; 0x5c
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	4613      	mov	r3, r2
 8005c78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	88fa      	ldrh	r2, [r7, #6]
 8005c84:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	88fa      	ldrh	r2, [r7, #6]
 8005c8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c9e:	d10e      	bne.n	8005cbe <UART_Start_Receive_IT+0x52>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d105      	bne.n	8005cb4 <UART_Start_Receive_IT+0x48>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005cae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cb2:	e02d      	b.n	8005d10 <UART_Start_Receive_IT+0xa4>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	22ff      	movs	r2, #255	; 0xff
 8005cb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cbc:	e028      	b.n	8005d10 <UART_Start_Receive_IT+0xa4>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10d      	bne.n	8005ce2 <UART_Start_Receive_IT+0x76>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d104      	bne.n	8005cd8 <UART_Start_Receive_IT+0x6c>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	22ff      	movs	r2, #255	; 0xff
 8005cd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cd6:	e01b      	b.n	8005d10 <UART_Start_Receive_IT+0xa4>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	227f      	movs	r2, #127	; 0x7f
 8005cdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ce0:	e016      	b.n	8005d10 <UART_Start_Receive_IT+0xa4>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cea:	d10d      	bne.n	8005d08 <UART_Start_Receive_IT+0x9c>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d104      	bne.n	8005cfe <UART_Start_Receive_IT+0x92>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	227f      	movs	r2, #127	; 0x7f
 8005cf8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cfc:	e008      	b.n	8005d10 <UART_Start_Receive_IT+0xa4>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	223f      	movs	r2, #63	; 0x3f
 8005d02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d06:	e003      	b.n	8005d10 <UART_Start_Receive_IT+0xa4>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2222      	movs	r2, #34	; 0x22
 8005d1c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3308      	adds	r3, #8
 8005d24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d28:	e853 3f00 	ldrex	r3, [r3]
 8005d2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d30:	f043 0301 	orr.w	r3, r3, #1
 8005d34:	657b      	str	r3, [r7, #84]	; 0x54
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3308      	adds	r3, #8
 8005d3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d46:	e841 2300 	strex	r3, r2, [r1]
 8005d4a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1e5      	bne.n	8005d1e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d5a:	d107      	bne.n	8005d6c <UART_Start_Receive_IT+0x100>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d103      	bne.n	8005d6c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4a24      	ldr	r2, [pc, #144]	; (8005df8 <UART_Start_Receive_IT+0x18c>)
 8005d68:	665a      	str	r2, [r3, #100]	; 0x64
 8005d6a:	e002      	b.n	8005d72 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4a23      	ldr	r2, [pc, #140]	; (8005dfc <UART_Start_Receive_IT+0x190>)
 8005d70:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d019      	beq.n	8005db6 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8a:	e853 3f00 	ldrex	r3, [r3]
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d92:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005d96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005da0:	637b      	str	r3, [r7, #52]	; 0x34
 8005da2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005da6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005da8:	e841 2300 	strex	r3, r2, [r1]
 8005dac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e6      	bne.n	8005d82 <UART_Start_Receive_IT+0x116>
 8005db4:	e018      	b.n	8005de8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	e853 3f00 	ldrex	r3, [r3]
 8005dc2:	613b      	str	r3, [r7, #16]
   return(result);
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f043 0320 	orr.w	r3, r3, #32
 8005dca:	653b      	str	r3, [r7, #80]	; 0x50
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dd4:	623b      	str	r3, [r7, #32]
 8005dd6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd8:	69f9      	ldr	r1, [r7, #28]
 8005dda:	6a3a      	ldr	r2, [r7, #32]
 8005ddc:	e841 2300 	strex	r3, r2, [r1]
 8005de0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1e6      	bne.n	8005db6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	375c      	adds	r7, #92	; 0x5c
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	080060a7 	.word	0x080060a7
 8005dfc:	08005f47 	.word	0x08005f47

08005e00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b095      	sub	sp, #84	; 0x54
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e10:	e853 3f00 	ldrex	r3, [r3]
 8005e14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e26:	643b      	str	r3, [r7, #64]	; 0x40
 8005e28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e2e:	e841 2300 	strex	r3, r2, [r1]
 8005e32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1e6      	bne.n	8005e08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3308      	adds	r3, #8
 8005e40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	e853 3f00 	ldrex	r3, [r3]
 8005e48:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	f023 0301 	bic.w	r3, r3, #1
 8005e50:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3308      	adds	r3, #8
 8005e58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e62:	e841 2300 	strex	r3, r2, [r1]
 8005e66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1e5      	bne.n	8005e3a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d118      	bne.n	8005ea8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	e853 3f00 	ldrex	r3, [r3]
 8005e82:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f023 0310 	bic.w	r3, r3, #16
 8005e8a:	647b      	str	r3, [r7, #68]	; 0x44
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	461a      	mov	r2, r3
 8005e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e94:	61bb      	str	r3, [r7, #24]
 8005e96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e98:	6979      	ldr	r1, [r7, #20]
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	e841 2300 	strex	r3, r2, [r1]
 8005ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1e6      	bne.n	8005e76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005eba:	bf00      	nop
 8005ebc:	3754      	adds	r7, #84	; 0x54
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f7ff fa43 	bl	8005370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eea:	bf00      	nop
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b088      	sub	sp, #32
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	e853 3f00 	ldrex	r3, [r3]
 8005f06:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f0e:	61fb      	str	r3, [r7, #28]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	461a      	mov	r2, r3
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	61bb      	str	r3, [r7, #24]
 8005f1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1c:	6979      	ldr	r1, [r7, #20]
 8005f1e:	69ba      	ldr	r2, [r7, #24]
 8005f20:	e841 2300 	strex	r3, r2, [r1]
 8005f24:	613b      	str	r3, [r7, #16]
   return(result);
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1e6      	bne.n	8005efa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2220      	movs	r2, #32
 8005f30:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff fa0f 	bl	800535c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f3e:	bf00      	nop
 8005f40:	3720      	adds	r7, #32
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b096      	sub	sp, #88	; 0x58
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f54:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f5c:	2b22      	cmp	r3, #34	; 0x22
 8005f5e:	f040 8094 	bne.w	800608a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005f68:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005f6c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005f70:	b2d9      	uxtb	r1, r3
 8005f72:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005f76:	b2da      	uxtb	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7c:	400a      	ands	r2, r1
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d179      	bne.n	800609e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb2:	e853 3f00 	ldrex	r3, [r3]
 8005fb6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fbe:	653b      	str	r3, [r7, #80]	; 0x50
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fc8:	647b      	str	r3, [r7, #68]	; 0x44
 8005fca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fcc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fd0:	e841 2300 	strex	r3, r2, [r1]
 8005fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1e6      	bne.n	8005faa <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3308      	adds	r3, #8
 8005fe2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe6:	e853 3f00 	ldrex	r3, [r3]
 8005fea:	623b      	str	r3, [r7, #32]
   return(result);
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	f023 0301 	bic.w	r3, r3, #1
 8005ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3308      	adds	r3, #8
 8005ffa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ffc:	633a      	str	r2, [r7, #48]	; 0x30
 8005ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006000:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006004:	e841 2300 	strex	r3, r2, [r1]
 8006008:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1e5      	bne.n	8005fdc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2220      	movs	r2, #32
 8006014:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006020:	2b01      	cmp	r3, #1
 8006022:	d12e      	bne.n	8006082 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	60fb      	str	r3, [r7, #12]
   return(result);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 0310 	bic.w	r3, r3, #16
 800603e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006048:	61fb      	str	r3, [r7, #28]
 800604a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604c:	69b9      	ldr	r1, [r7, #24]
 800604e:	69fa      	ldr	r2, [r7, #28]
 8006050:	e841 2300 	strex	r3, r2, [r1]
 8006054:	617b      	str	r3, [r7, #20]
   return(result);
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e6      	bne.n	800602a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	f003 0310 	and.w	r3, r3, #16
 8006066:	2b10      	cmp	r3, #16
 8006068:	d103      	bne.n	8006072 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2210      	movs	r2, #16
 8006070:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7ff f982 	bl	8005384 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006080:	e00d      	b.n	800609e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7fa fcec 	bl	8000a60 <HAL_UART_RxCpltCallback>
}
 8006088:	e009      	b.n	800609e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	8b1b      	ldrh	r3, [r3, #24]
 8006090:	b29a      	uxth	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f042 0208 	orr.w	r2, r2, #8
 800609a:	b292      	uxth	r2, r2
 800609c:	831a      	strh	r2, [r3, #24]
}
 800609e:	bf00      	nop
 80060a0:	3758      	adds	r7, #88	; 0x58
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b096      	sub	sp, #88	; 0x58
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060bc:	2b22      	cmp	r3, #34	; 0x22
 80060be:	f040 8094 	bne.w	80061ea <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80060c8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80060d2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80060d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80060da:	4013      	ands	r3, r2
 80060dc:	b29a      	uxth	r2, r3
 80060de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e6:	1c9a      	adds	r2, r3, #2
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	3b01      	subs	r3, #1
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d179      	bne.n	80061fe <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006112:	e853 3f00 	ldrex	r3, [r3]
 8006116:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800611e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	461a      	mov	r2, r3
 8006126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006128:	643b      	str	r3, [r7, #64]	; 0x40
 800612a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800612e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006130:	e841 2300 	strex	r3, r2, [r1]
 8006134:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1e6      	bne.n	800610a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	3308      	adds	r3, #8
 8006142:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	e853 3f00 	ldrex	r3, [r3]
 800614a:	61fb      	str	r3, [r7, #28]
   return(result);
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	f023 0301 	bic.w	r3, r3, #1
 8006152:	64bb      	str	r3, [r7, #72]	; 0x48
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3308      	adds	r3, #8
 800615a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800615c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800615e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006160:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006164:	e841 2300 	strex	r3, r2, [r1]
 8006168:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1e5      	bne.n	800613c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2220      	movs	r2, #32
 8006174:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006180:	2b01      	cmp	r3, #1
 8006182:	d12e      	bne.n	80061e2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	e853 3f00 	ldrex	r3, [r3]
 8006196:	60bb      	str	r3, [r7, #8]
   return(result);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f023 0310 	bic.w	r3, r3, #16
 800619e:	647b      	str	r3, [r7, #68]	; 0x44
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	461a      	mov	r2, r3
 80061a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061a8:	61bb      	str	r3, [r7, #24]
 80061aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ac:	6979      	ldr	r1, [r7, #20]
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	e841 2300 	strex	r3, r2, [r1]
 80061b4:	613b      	str	r3, [r7, #16]
   return(result);
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1e6      	bne.n	800618a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	f003 0310 	and.w	r3, r3, #16
 80061c6:	2b10      	cmp	r3, #16
 80061c8:	d103      	bne.n	80061d2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2210      	movs	r2, #16
 80061d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80061d8:	4619      	mov	r1, r3
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7ff f8d2 	bl	8005384 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061e0:	e00d      	b.n	80061fe <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7fa fc3c 	bl	8000a60 <HAL_UART_RxCpltCallback>
}
 80061e8:	e009      	b.n	80061fe <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	8b1b      	ldrh	r3, [r3, #24]
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f042 0208 	orr.w	r2, r2, #8
 80061fa:	b292      	uxth	r2, r2
 80061fc:	831a      	strh	r2, [r3, #24]
}
 80061fe:	bf00      	nop
 8006200:	3758      	adds	r7, #88	; 0x58
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
	...

0800621c <__errno>:
 800621c:	4b01      	ldr	r3, [pc, #4]	; (8006224 <__errno+0x8>)
 800621e:	6818      	ldr	r0, [r3, #0]
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	20000018 	.word	0x20000018

08006228 <__libc_init_array>:
 8006228:	b570      	push	{r4, r5, r6, lr}
 800622a:	4d0d      	ldr	r5, [pc, #52]	; (8006260 <__libc_init_array+0x38>)
 800622c:	4c0d      	ldr	r4, [pc, #52]	; (8006264 <__libc_init_array+0x3c>)
 800622e:	1b64      	subs	r4, r4, r5
 8006230:	10a4      	asrs	r4, r4, #2
 8006232:	2600      	movs	r6, #0
 8006234:	42a6      	cmp	r6, r4
 8006236:	d109      	bne.n	800624c <__libc_init_array+0x24>
 8006238:	4d0b      	ldr	r5, [pc, #44]	; (8006268 <__libc_init_array+0x40>)
 800623a:	4c0c      	ldr	r4, [pc, #48]	; (800626c <__libc_init_array+0x44>)
 800623c:	f000 ffae 	bl	800719c <_init>
 8006240:	1b64      	subs	r4, r4, r5
 8006242:	10a4      	asrs	r4, r4, #2
 8006244:	2600      	movs	r6, #0
 8006246:	42a6      	cmp	r6, r4
 8006248:	d105      	bne.n	8006256 <__libc_init_array+0x2e>
 800624a:	bd70      	pop	{r4, r5, r6, pc}
 800624c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006250:	4798      	blx	r3
 8006252:	3601      	adds	r6, #1
 8006254:	e7ee      	b.n	8006234 <__libc_init_array+0xc>
 8006256:	f855 3b04 	ldr.w	r3, [r5], #4
 800625a:	4798      	blx	r3
 800625c:	3601      	adds	r6, #1
 800625e:	e7f2      	b.n	8006246 <__libc_init_array+0x1e>
 8006260:	080072e0 	.word	0x080072e0
 8006264:	080072e0 	.word	0x080072e0
 8006268:	080072e0 	.word	0x080072e0
 800626c:	080072e4 	.word	0x080072e4

08006270 <memset>:
 8006270:	4402      	add	r2, r0
 8006272:	4603      	mov	r3, r0
 8006274:	4293      	cmp	r3, r2
 8006276:	d100      	bne.n	800627a <memset+0xa>
 8006278:	4770      	bx	lr
 800627a:	f803 1b01 	strb.w	r1, [r3], #1
 800627e:	e7f9      	b.n	8006274 <memset+0x4>

08006280 <iprintf>:
 8006280:	b40f      	push	{r0, r1, r2, r3}
 8006282:	4b0a      	ldr	r3, [pc, #40]	; (80062ac <iprintf+0x2c>)
 8006284:	b513      	push	{r0, r1, r4, lr}
 8006286:	681c      	ldr	r4, [r3, #0]
 8006288:	b124      	cbz	r4, 8006294 <iprintf+0x14>
 800628a:	69a3      	ldr	r3, [r4, #24]
 800628c:	b913      	cbnz	r3, 8006294 <iprintf+0x14>
 800628e:	4620      	mov	r0, r4
 8006290:	f000 f866 	bl	8006360 <__sinit>
 8006294:	ab05      	add	r3, sp, #20
 8006296:	9a04      	ldr	r2, [sp, #16]
 8006298:	68a1      	ldr	r1, [r4, #8]
 800629a:	9301      	str	r3, [sp, #4]
 800629c:	4620      	mov	r0, r4
 800629e:	f000 f9bd 	bl	800661c <_vfiprintf_r>
 80062a2:	b002      	add	sp, #8
 80062a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062a8:	b004      	add	sp, #16
 80062aa:	4770      	bx	lr
 80062ac:	20000018 	.word	0x20000018

080062b0 <std>:
 80062b0:	2300      	movs	r3, #0
 80062b2:	b510      	push	{r4, lr}
 80062b4:	4604      	mov	r4, r0
 80062b6:	e9c0 3300 	strd	r3, r3, [r0]
 80062ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062be:	6083      	str	r3, [r0, #8]
 80062c0:	8181      	strh	r1, [r0, #12]
 80062c2:	6643      	str	r3, [r0, #100]	; 0x64
 80062c4:	81c2      	strh	r2, [r0, #14]
 80062c6:	6183      	str	r3, [r0, #24]
 80062c8:	4619      	mov	r1, r3
 80062ca:	2208      	movs	r2, #8
 80062cc:	305c      	adds	r0, #92	; 0x5c
 80062ce:	f7ff ffcf 	bl	8006270 <memset>
 80062d2:	4b05      	ldr	r3, [pc, #20]	; (80062e8 <std+0x38>)
 80062d4:	6263      	str	r3, [r4, #36]	; 0x24
 80062d6:	4b05      	ldr	r3, [pc, #20]	; (80062ec <std+0x3c>)
 80062d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80062da:	4b05      	ldr	r3, [pc, #20]	; (80062f0 <std+0x40>)
 80062dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80062de:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <std+0x44>)
 80062e0:	6224      	str	r4, [r4, #32]
 80062e2:	6323      	str	r3, [r4, #48]	; 0x30
 80062e4:	bd10      	pop	{r4, pc}
 80062e6:	bf00      	nop
 80062e8:	08006bc5 	.word	0x08006bc5
 80062ec:	08006be7 	.word	0x08006be7
 80062f0:	08006c1f 	.word	0x08006c1f
 80062f4:	08006c43 	.word	0x08006c43

080062f8 <_cleanup_r>:
 80062f8:	4901      	ldr	r1, [pc, #4]	; (8006300 <_cleanup_r+0x8>)
 80062fa:	f000 b8af 	b.w	800645c <_fwalk_reent>
 80062fe:	bf00      	nop
 8006300:	08006f1d 	.word	0x08006f1d

08006304 <__sfmoreglue>:
 8006304:	b570      	push	{r4, r5, r6, lr}
 8006306:	2268      	movs	r2, #104	; 0x68
 8006308:	1e4d      	subs	r5, r1, #1
 800630a:	4355      	muls	r5, r2
 800630c:	460e      	mov	r6, r1
 800630e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006312:	f000 f8e5 	bl	80064e0 <_malloc_r>
 8006316:	4604      	mov	r4, r0
 8006318:	b140      	cbz	r0, 800632c <__sfmoreglue+0x28>
 800631a:	2100      	movs	r1, #0
 800631c:	e9c0 1600 	strd	r1, r6, [r0]
 8006320:	300c      	adds	r0, #12
 8006322:	60a0      	str	r0, [r4, #8]
 8006324:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006328:	f7ff ffa2 	bl	8006270 <memset>
 800632c:	4620      	mov	r0, r4
 800632e:	bd70      	pop	{r4, r5, r6, pc}

08006330 <__sfp_lock_acquire>:
 8006330:	4801      	ldr	r0, [pc, #4]	; (8006338 <__sfp_lock_acquire+0x8>)
 8006332:	f000 b8b3 	b.w	800649c <__retarget_lock_acquire_recursive>
 8006336:	bf00      	nop
 8006338:	20000349 	.word	0x20000349

0800633c <__sfp_lock_release>:
 800633c:	4801      	ldr	r0, [pc, #4]	; (8006344 <__sfp_lock_release+0x8>)
 800633e:	f000 b8ae 	b.w	800649e <__retarget_lock_release_recursive>
 8006342:	bf00      	nop
 8006344:	20000349 	.word	0x20000349

08006348 <__sinit_lock_acquire>:
 8006348:	4801      	ldr	r0, [pc, #4]	; (8006350 <__sinit_lock_acquire+0x8>)
 800634a:	f000 b8a7 	b.w	800649c <__retarget_lock_acquire_recursive>
 800634e:	bf00      	nop
 8006350:	2000034a 	.word	0x2000034a

08006354 <__sinit_lock_release>:
 8006354:	4801      	ldr	r0, [pc, #4]	; (800635c <__sinit_lock_release+0x8>)
 8006356:	f000 b8a2 	b.w	800649e <__retarget_lock_release_recursive>
 800635a:	bf00      	nop
 800635c:	2000034a 	.word	0x2000034a

08006360 <__sinit>:
 8006360:	b510      	push	{r4, lr}
 8006362:	4604      	mov	r4, r0
 8006364:	f7ff fff0 	bl	8006348 <__sinit_lock_acquire>
 8006368:	69a3      	ldr	r3, [r4, #24]
 800636a:	b11b      	cbz	r3, 8006374 <__sinit+0x14>
 800636c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006370:	f7ff bff0 	b.w	8006354 <__sinit_lock_release>
 8006374:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006378:	6523      	str	r3, [r4, #80]	; 0x50
 800637a:	4b13      	ldr	r3, [pc, #76]	; (80063c8 <__sinit+0x68>)
 800637c:	4a13      	ldr	r2, [pc, #76]	; (80063cc <__sinit+0x6c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	62a2      	str	r2, [r4, #40]	; 0x28
 8006382:	42a3      	cmp	r3, r4
 8006384:	bf04      	itt	eq
 8006386:	2301      	moveq	r3, #1
 8006388:	61a3      	streq	r3, [r4, #24]
 800638a:	4620      	mov	r0, r4
 800638c:	f000 f820 	bl	80063d0 <__sfp>
 8006390:	6060      	str	r0, [r4, #4]
 8006392:	4620      	mov	r0, r4
 8006394:	f000 f81c 	bl	80063d0 <__sfp>
 8006398:	60a0      	str	r0, [r4, #8]
 800639a:	4620      	mov	r0, r4
 800639c:	f000 f818 	bl	80063d0 <__sfp>
 80063a0:	2200      	movs	r2, #0
 80063a2:	60e0      	str	r0, [r4, #12]
 80063a4:	2104      	movs	r1, #4
 80063a6:	6860      	ldr	r0, [r4, #4]
 80063a8:	f7ff ff82 	bl	80062b0 <std>
 80063ac:	68a0      	ldr	r0, [r4, #8]
 80063ae:	2201      	movs	r2, #1
 80063b0:	2109      	movs	r1, #9
 80063b2:	f7ff ff7d 	bl	80062b0 <std>
 80063b6:	68e0      	ldr	r0, [r4, #12]
 80063b8:	2202      	movs	r2, #2
 80063ba:	2112      	movs	r1, #18
 80063bc:	f7ff ff78 	bl	80062b0 <std>
 80063c0:	2301      	movs	r3, #1
 80063c2:	61a3      	str	r3, [r4, #24]
 80063c4:	e7d2      	b.n	800636c <__sinit+0xc>
 80063c6:	bf00      	nop
 80063c8:	08007240 	.word	0x08007240
 80063cc:	080062f9 	.word	0x080062f9

080063d0 <__sfp>:
 80063d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d2:	4607      	mov	r7, r0
 80063d4:	f7ff ffac 	bl	8006330 <__sfp_lock_acquire>
 80063d8:	4b1e      	ldr	r3, [pc, #120]	; (8006454 <__sfp+0x84>)
 80063da:	681e      	ldr	r6, [r3, #0]
 80063dc:	69b3      	ldr	r3, [r6, #24]
 80063de:	b913      	cbnz	r3, 80063e6 <__sfp+0x16>
 80063e0:	4630      	mov	r0, r6
 80063e2:	f7ff ffbd 	bl	8006360 <__sinit>
 80063e6:	3648      	adds	r6, #72	; 0x48
 80063e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80063ec:	3b01      	subs	r3, #1
 80063ee:	d503      	bpl.n	80063f8 <__sfp+0x28>
 80063f0:	6833      	ldr	r3, [r6, #0]
 80063f2:	b30b      	cbz	r3, 8006438 <__sfp+0x68>
 80063f4:	6836      	ldr	r6, [r6, #0]
 80063f6:	e7f7      	b.n	80063e8 <__sfp+0x18>
 80063f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80063fc:	b9d5      	cbnz	r5, 8006434 <__sfp+0x64>
 80063fe:	4b16      	ldr	r3, [pc, #88]	; (8006458 <__sfp+0x88>)
 8006400:	60e3      	str	r3, [r4, #12]
 8006402:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006406:	6665      	str	r5, [r4, #100]	; 0x64
 8006408:	f000 f847 	bl	800649a <__retarget_lock_init_recursive>
 800640c:	f7ff ff96 	bl	800633c <__sfp_lock_release>
 8006410:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006414:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006418:	6025      	str	r5, [r4, #0]
 800641a:	61a5      	str	r5, [r4, #24]
 800641c:	2208      	movs	r2, #8
 800641e:	4629      	mov	r1, r5
 8006420:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006424:	f7ff ff24 	bl	8006270 <memset>
 8006428:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800642c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006430:	4620      	mov	r0, r4
 8006432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006434:	3468      	adds	r4, #104	; 0x68
 8006436:	e7d9      	b.n	80063ec <__sfp+0x1c>
 8006438:	2104      	movs	r1, #4
 800643a:	4638      	mov	r0, r7
 800643c:	f7ff ff62 	bl	8006304 <__sfmoreglue>
 8006440:	4604      	mov	r4, r0
 8006442:	6030      	str	r0, [r6, #0]
 8006444:	2800      	cmp	r0, #0
 8006446:	d1d5      	bne.n	80063f4 <__sfp+0x24>
 8006448:	f7ff ff78 	bl	800633c <__sfp_lock_release>
 800644c:	230c      	movs	r3, #12
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	e7ee      	b.n	8006430 <__sfp+0x60>
 8006452:	bf00      	nop
 8006454:	08007240 	.word	0x08007240
 8006458:	ffff0001 	.word	0xffff0001

0800645c <_fwalk_reent>:
 800645c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006460:	4606      	mov	r6, r0
 8006462:	4688      	mov	r8, r1
 8006464:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006468:	2700      	movs	r7, #0
 800646a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800646e:	f1b9 0901 	subs.w	r9, r9, #1
 8006472:	d505      	bpl.n	8006480 <_fwalk_reent+0x24>
 8006474:	6824      	ldr	r4, [r4, #0]
 8006476:	2c00      	cmp	r4, #0
 8006478:	d1f7      	bne.n	800646a <_fwalk_reent+0xe>
 800647a:	4638      	mov	r0, r7
 800647c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006480:	89ab      	ldrh	r3, [r5, #12]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d907      	bls.n	8006496 <_fwalk_reent+0x3a>
 8006486:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800648a:	3301      	adds	r3, #1
 800648c:	d003      	beq.n	8006496 <_fwalk_reent+0x3a>
 800648e:	4629      	mov	r1, r5
 8006490:	4630      	mov	r0, r6
 8006492:	47c0      	blx	r8
 8006494:	4307      	orrs	r7, r0
 8006496:	3568      	adds	r5, #104	; 0x68
 8006498:	e7e9      	b.n	800646e <_fwalk_reent+0x12>

0800649a <__retarget_lock_init_recursive>:
 800649a:	4770      	bx	lr

0800649c <__retarget_lock_acquire_recursive>:
 800649c:	4770      	bx	lr

0800649e <__retarget_lock_release_recursive>:
 800649e:	4770      	bx	lr

080064a0 <sbrk_aligned>:
 80064a0:	b570      	push	{r4, r5, r6, lr}
 80064a2:	4e0e      	ldr	r6, [pc, #56]	; (80064dc <sbrk_aligned+0x3c>)
 80064a4:	460c      	mov	r4, r1
 80064a6:	6831      	ldr	r1, [r6, #0]
 80064a8:	4605      	mov	r5, r0
 80064aa:	b911      	cbnz	r1, 80064b2 <sbrk_aligned+0x12>
 80064ac:	f000 fb7a 	bl	8006ba4 <_sbrk_r>
 80064b0:	6030      	str	r0, [r6, #0]
 80064b2:	4621      	mov	r1, r4
 80064b4:	4628      	mov	r0, r5
 80064b6:	f000 fb75 	bl	8006ba4 <_sbrk_r>
 80064ba:	1c43      	adds	r3, r0, #1
 80064bc:	d00a      	beq.n	80064d4 <sbrk_aligned+0x34>
 80064be:	1cc4      	adds	r4, r0, #3
 80064c0:	f024 0403 	bic.w	r4, r4, #3
 80064c4:	42a0      	cmp	r0, r4
 80064c6:	d007      	beq.n	80064d8 <sbrk_aligned+0x38>
 80064c8:	1a21      	subs	r1, r4, r0
 80064ca:	4628      	mov	r0, r5
 80064cc:	f000 fb6a 	bl	8006ba4 <_sbrk_r>
 80064d0:	3001      	adds	r0, #1
 80064d2:	d101      	bne.n	80064d8 <sbrk_aligned+0x38>
 80064d4:	f04f 34ff 	mov.w	r4, #4294967295
 80064d8:	4620      	mov	r0, r4
 80064da:	bd70      	pop	{r4, r5, r6, pc}
 80064dc:	20000350 	.word	0x20000350

080064e0 <_malloc_r>:
 80064e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064e4:	1ccd      	adds	r5, r1, #3
 80064e6:	f025 0503 	bic.w	r5, r5, #3
 80064ea:	3508      	adds	r5, #8
 80064ec:	2d0c      	cmp	r5, #12
 80064ee:	bf38      	it	cc
 80064f0:	250c      	movcc	r5, #12
 80064f2:	2d00      	cmp	r5, #0
 80064f4:	4607      	mov	r7, r0
 80064f6:	db01      	blt.n	80064fc <_malloc_r+0x1c>
 80064f8:	42a9      	cmp	r1, r5
 80064fa:	d905      	bls.n	8006508 <_malloc_r+0x28>
 80064fc:	230c      	movs	r3, #12
 80064fe:	603b      	str	r3, [r7, #0]
 8006500:	2600      	movs	r6, #0
 8006502:	4630      	mov	r0, r6
 8006504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006508:	4e2e      	ldr	r6, [pc, #184]	; (80065c4 <_malloc_r+0xe4>)
 800650a:	f000 fdbb 	bl	8007084 <__malloc_lock>
 800650e:	6833      	ldr	r3, [r6, #0]
 8006510:	461c      	mov	r4, r3
 8006512:	bb34      	cbnz	r4, 8006562 <_malloc_r+0x82>
 8006514:	4629      	mov	r1, r5
 8006516:	4638      	mov	r0, r7
 8006518:	f7ff ffc2 	bl	80064a0 <sbrk_aligned>
 800651c:	1c43      	adds	r3, r0, #1
 800651e:	4604      	mov	r4, r0
 8006520:	d14d      	bne.n	80065be <_malloc_r+0xde>
 8006522:	6834      	ldr	r4, [r6, #0]
 8006524:	4626      	mov	r6, r4
 8006526:	2e00      	cmp	r6, #0
 8006528:	d140      	bne.n	80065ac <_malloc_r+0xcc>
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	4631      	mov	r1, r6
 800652e:	4638      	mov	r0, r7
 8006530:	eb04 0803 	add.w	r8, r4, r3
 8006534:	f000 fb36 	bl	8006ba4 <_sbrk_r>
 8006538:	4580      	cmp	r8, r0
 800653a:	d13a      	bne.n	80065b2 <_malloc_r+0xd2>
 800653c:	6821      	ldr	r1, [r4, #0]
 800653e:	3503      	adds	r5, #3
 8006540:	1a6d      	subs	r5, r5, r1
 8006542:	f025 0503 	bic.w	r5, r5, #3
 8006546:	3508      	adds	r5, #8
 8006548:	2d0c      	cmp	r5, #12
 800654a:	bf38      	it	cc
 800654c:	250c      	movcc	r5, #12
 800654e:	4629      	mov	r1, r5
 8006550:	4638      	mov	r0, r7
 8006552:	f7ff ffa5 	bl	80064a0 <sbrk_aligned>
 8006556:	3001      	adds	r0, #1
 8006558:	d02b      	beq.n	80065b2 <_malloc_r+0xd2>
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	442b      	add	r3, r5
 800655e:	6023      	str	r3, [r4, #0]
 8006560:	e00e      	b.n	8006580 <_malloc_r+0xa0>
 8006562:	6822      	ldr	r2, [r4, #0]
 8006564:	1b52      	subs	r2, r2, r5
 8006566:	d41e      	bmi.n	80065a6 <_malloc_r+0xc6>
 8006568:	2a0b      	cmp	r2, #11
 800656a:	d916      	bls.n	800659a <_malloc_r+0xba>
 800656c:	1961      	adds	r1, r4, r5
 800656e:	42a3      	cmp	r3, r4
 8006570:	6025      	str	r5, [r4, #0]
 8006572:	bf18      	it	ne
 8006574:	6059      	strne	r1, [r3, #4]
 8006576:	6863      	ldr	r3, [r4, #4]
 8006578:	bf08      	it	eq
 800657a:	6031      	streq	r1, [r6, #0]
 800657c:	5162      	str	r2, [r4, r5]
 800657e:	604b      	str	r3, [r1, #4]
 8006580:	4638      	mov	r0, r7
 8006582:	f104 060b 	add.w	r6, r4, #11
 8006586:	f000 fd83 	bl	8007090 <__malloc_unlock>
 800658a:	f026 0607 	bic.w	r6, r6, #7
 800658e:	1d23      	adds	r3, r4, #4
 8006590:	1af2      	subs	r2, r6, r3
 8006592:	d0b6      	beq.n	8006502 <_malloc_r+0x22>
 8006594:	1b9b      	subs	r3, r3, r6
 8006596:	50a3      	str	r3, [r4, r2]
 8006598:	e7b3      	b.n	8006502 <_malloc_r+0x22>
 800659a:	6862      	ldr	r2, [r4, #4]
 800659c:	42a3      	cmp	r3, r4
 800659e:	bf0c      	ite	eq
 80065a0:	6032      	streq	r2, [r6, #0]
 80065a2:	605a      	strne	r2, [r3, #4]
 80065a4:	e7ec      	b.n	8006580 <_malloc_r+0xa0>
 80065a6:	4623      	mov	r3, r4
 80065a8:	6864      	ldr	r4, [r4, #4]
 80065aa:	e7b2      	b.n	8006512 <_malloc_r+0x32>
 80065ac:	4634      	mov	r4, r6
 80065ae:	6876      	ldr	r6, [r6, #4]
 80065b0:	e7b9      	b.n	8006526 <_malloc_r+0x46>
 80065b2:	230c      	movs	r3, #12
 80065b4:	603b      	str	r3, [r7, #0]
 80065b6:	4638      	mov	r0, r7
 80065b8:	f000 fd6a 	bl	8007090 <__malloc_unlock>
 80065bc:	e7a1      	b.n	8006502 <_malloc_r+0x22>
 80065be:	6025      	str	r5, [r4, #0]
 80065c0:	e7de      	b.n	8006580 <_malloc_r+0xa0>
 80065c2:	bf00      	nop
 80065c4:	2000034c 	.word	0x2000034c

080065c8 <__sfputc_r>:
 80065c8:	6893      	ldr	r3, [r2, #8]
 80065ca:	3b01      	subs	r3, #1
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	b410      	push	{r4}
 80065d0:	6093      	str	r3, [r2, #8]
 80065d2:	da08      	bge.n	80065e6 <__sfputc_r+0x1e>
 80065d4:	6994      	ldr	r4, [r2, #24]
 80065d6:	42a3      	cmp	r3, r4
 80065d8:	db01      	blt.n	80065de <__sfputc_r+0x16>
 80065da:	290a      	cmp	r1, #10
 80065dc:	d103      	bne.n	80065e6 <__sfputc_r+0x1e>
 80065de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065e2:	f000 bb33 	b.w	8006c4c <__swbuf_r>
 80065e6:	6813      	ldr	r3, [r2, #0]
 80065e8:	1c58      	adds	r0, r3, #1
 80065ea:	6010      	str	r0, [r2, #0]
 80065ec:	7019      	strb	r1, [r3, #0]
 80065ee:	4608      	mov	r0, r1
 80065f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <__sfputs_r>:
 80065f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f8:	4606      	mov	r6, r0
 80065fa:	460f      	mov	r7, r1
 80065fc:	4614      	mov	r4, r2
 80065fe:	18d5      	adds	r5, r2, r3
 8006600:	42ac      	cmp	r4, r5
 8006602:	d101      	bne.n	8006608 <__sfputs_r+0x12>
 8006604:	2000      	movs	r0, #0
 8006606:	e007      	b.n	8006618 <__sfputs_r+0x22>
 8006608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800660c:	463a      	mov	r2, r7
 800660e:	4630      	mov	r0, r6
 8006610:	f7ff ffda 	bl	80065c8 <__sfputc_r>
 8006614:	1c43      	adds	r3, r0, #1
 8006616:	d1f3      	bne.n	8006600 <__sfputs_r+0xa>
 8006618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800661c <_vfiprintf_r>:
 800661c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006620:	460d      	mov	r5, r1
 8006622:	b09d      	sub	sp, #116	; 0x74
 8006624:	4614      	mov	r4, r2
 8006626:	4698      	mov	r8, r3
 8006628:	4606      	mov	r6, r0
 800662a:	b118      	cbz	r0, 8006634 <_vfiprintf_r+0x18>
 800662c:	6983      	ldr	r3, [r0, #24]
 800662e:	b90b      	cbnz	r3, 8006634 <_vfiprintf_r+0x18>
 8006630:	f7ff fe96 	bl	8006360 <__sinit>
 8006634:	4b89      	ldr	r3, [pc, #548]	; (800685c <_vfiprintf_r+0x240>)
 8006636:	429d      	cmp	r5, r3
 8006638:	d11b      	bne.n	8006672 <_vfiprintf_r+0x56>
 800663a:	6875      	ldr	r5, [r6, #4]
 800663c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800663e:	07d9      	lsls	r1, r3, #31
 8006640:	d405      	bmi.n	800664e <_vfiprintf_r+0x32>
 8006642:	89ab      	ldrh	r3, [r5, #12]
 8006644:	059a      	lsls	r2, r3, #22
 8006646:	d402      	bmi.n	800664e <_vfiprintf_r+0x32>
 8006648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800664a:	f7ff ff27 	bl	800649c <__retarget_lock_acquire_recursive>
 800664e:	89ab      	ldrh	r3, [r5, #12]
 8006650:	071b      	lsls	r3, r3, #28
 8006652:	d501      	bpl.n	8006658 <_vfiprintf_r+0x3c>
 8006654:	692b      	ldr	r3, [r5, #16]
 8006656:	b9eb      	cbnz	r3, 8006694 <_vfiprintf_r+0x78>
 8006658:	4629      	mov	r1, r5
 800665a:	4630      	mov	r0, r6
 800665c:	f000 fb5a 	bl	8006d14 <__swsetup_r>
 8006660:	b1c0      	cbz	r0, 8006694 <_vfiprintf_r+0x78>
 8006662:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006664:	07dc      	lsls	r4, r3, #31
 8006666:	d50e      	bpl.n	8006686 <_vfiprintf_r+0x6a>
 8006668:	f04f 30ff 	mov.w	r0, #4294967295
 800666c:	b01d      	add	sp, #116	; 0x74
 800666e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006672:	4b7b      	ldr	r3, [pc, #492]	; (8006860 <_vfiprintf_r+0x244>)
 8006674:	429d      	cmp	r5, r3
 8006676:	d101      	bne.n	800667c <_vfiprintf_r+0x60>
 8006678:	68b5      	ldr	r5, [r6, #8]
 800667a:	e7df      	b.n	800663c <_vfiprintf_r+0x20>
 800667c:	4b79      	ldr	r3, [pc, #484]	; (8006864 <_vfiprintf_r+0x248>)
 800667e:	429d      	cmp	r5, r3
 8006680:	bf08      	it	eq
 8006682:	68f5      	ldreq	r5, [r6, #12]
 8006684:	e7da      	b.n	800663c <_vfiprintf_r+0x20>
 8006686:	89ab      	ldrh	r3, [r5, #12]
 8006688:	0598      	lsls	r0, r3, #22
 800668a:	d4ed      	bmi.n	8006668 <_vfiprintf_r+0x4c>
 800668c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800668e:	f7ff ff06 	bl	800649e <__retarget_lock_release_recursive>
 8006692:	e7e9      	b.n	8006668 <_vfiprintf_r+0x4c>
 8006694:	2300      	movs	r3, #0
 8006696:	9309      	str	r3, [sp, #36]	; 0x24
 8006698:	2320      	movs	r3, #32
 800669a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800669e:	f8cd 800c 	str.w	r8, [sp, #12]
 80066a2:	2330      	movs	r3, #48	; 0x30
 80066a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006868 <_vfiprintf_r+0x24c>
 80066a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066ac:	f04f 0901 	mov.w	r9, #1
 80066b0:	4623      	mov	r3, r4
 80066b2:	469a      	mov	sl, r3
 80066b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066b8:	b10a      	cbz	r2, 80066be <_vfiprintf_r+0xa2>
 80066ba:	2a25      	cmp	r2, #37	; 0x25
 80066bc:	d1f9      	bne.n	80066b2 <_vfiprintf_r+0x96>
 80066be:	ebba 0b04 	subs.w	fp, sl, r4
 80066c2:	d00b      	beq.n	80066dc <_vfiprintf_r+0xc0>
 80066c4:	465b      	mov	r3, fp
 80066c6:	4622      	mov	r2, r4
 80066c8:	4629      	mov	r1, r5
 80066ca:	4630      	mov	r0, r6
 80066cc:	f7ff ff93 	bl	80065f6 <__sfputs_r>
 80066d0:	3001      	adds	r0, #1
 80066d2:	f000 80aa 	beq.w	800682a <_vfiprintf_r+0x20e>
 80066d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066d8:	445a      	add	r2, fp
 80066da:	9209      	str	r2, [sp, #36]	; 0x24
 80066dc:	f89a 3000 	ldrb.w	r3, [sl]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 80a2 	beq.w	800682a <_vfiprintf_r+0x20e>
 80066e6:	2300      	movs	r3, #0
 80066e8:	f04f 32ff 	mov.w	r2, #4294967295
 80066ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066f0:	f10a 0a01 	add.w	sl, sl, #1
 80066f4:	9304      	str	r3, [sp, #16]
 80066f6:	9307      	str	r3, [sp, #28]
 80066f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066fc:	931a      	str	r3, [sp, #104]	; 0x68
 80066fe:	4654      	mov	r4, sl
 8006700:	2205      	movs	r2, #5
 8006702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006706:	4858      	ldr	r0, [pc, #352]	; (8006868 <_vfiprintf_r+0x24c>)
 8006708:	f7f9 fd62 	bl	80001d0 <memchr>
 800670c:	9a04      	ldr	r2, [sp, #16]
 800670e:	b9d8      	cbnz	r0, 8006748 <_vfiprintf_r+0x12c>
 8006710:	06d1      	lsls	r1, r2, #27
 8006712:	bf44      	itt	mi
 8006714:	2320      	movmi	r3, #32
 8006716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800671a:	0713      	lsls	r3, r2, #28
 800671c:	bf44      	itt	mi
 800671e:	232b      	movmi	r3, #43	; 0x2b
 8006720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006724:	f89a 3000 	ldrb.w	r3, [sl]
 8006728:	2b2a      	cmp	r3, #42	; 0x2a
 800672a:	d015      	beq.n	8006758 <_vfiprintf_r+0x13c>
 800672c:	9a07      	ldr	r2, [sp, #28]
 800672e:	4654      	mov	r4, sl
 8006730:	2000      	movs	r0, #0
 8006732:	f04f 0c0a 	mov.w	ip, #10
 8006736:	4621      	mov	r1, r4
 8006738:	f811 3b01 	ldrb.w	r3, [r1], #1
 800673c:	3b30      	subs	r3, #48	; 0x30
 800673e:	2b09      	cmp	r3, #9
 8006740:	d94e      	bls.n	80067e0 <_vfiprintf_r+0x1c4>
 8006742:	b1b0      	cbz	r0, 8006772 <_vfiprintf_r+0x156>
 8006744:	9207      	str	r2, [sp, #28]
 8006746:	e014      	b.n	8006772 <_vfiprintf_r+0x156>
 8006748:	eba0 0308 	sub.w	r3, r0, r8
 800674c:	fa09 f303 	lsl.w	r3, r9, r3
 8006750:	4313      	orrs	r3, r2
 8006752:	9304      	str	r3, [sp, #16]
 8006754:	46a2      	mov	sl, r4
 8006756:	e7d2      	b.n	80066fe <_vfiprintf_r+0xe2>
 8006758:	9b03      	ldr	r3, [sp, #12]
 800675a:	1d19      	adds	r1, r3, #4
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	9103      	str	r1, [sp, #12]
 8006760:	2b00      	cmp	r3, #0
 8006762:	bfbb      	ittet	lt
 8006764:	425b      	neglt	r3, r3
 8006766:	f042 0202 	orrlt.w	r2, r2, #2
 800676a:	9307      	strge	r3, [sp, #28]
 800676c:	9307      	strlt	r3, [sp, #28]
 800676e:	bfb8      	it	lt
 8006770:	9204      	strlt	r2, [sp, #16]
 8006772:	7823      	ldrb	r3, [r4, #0]
 8006774:	2b2e      	cmp	r3, #46	; 0x2e
 8006776:	d10c      	bne.n	8006792 <_vfiprintf_r+0x176>
 8006778:	7863      	ldrb	r3, [r4, #1]
 800677a:	2b2a      	cmp	r3, #42	; 0x2a
 800677c:	d135      	bne.n	80067ea <_vfiprintf_r+0x1ce>
 800677e:	9b03      	ldr	r3, [sp, #12]
 8006780:	1d1a      	adds	r2, r3, #4
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	9203      	str	r2, [sp, #12]
 8006786:	2b00      	cmp	r3, #0
 8006788:	bfb8      	it	lt
 800678a:	f04f 33ff 	movlt.w	r3, #4294967295
 800678e:	3402      	adds	r4, #2
 8006790:	9305      	str	r3, [sp, #20]
 8006792:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006878 <_vfiprintf_r+0x25c>
 8006796:	7821      	ldrb	r1, [r4, #0]
 8006798:	2203      	movs	r2, #3
 800679a:	4650      	mov	r0, sl
 800679c:	f7f9 fd18 	bl	80001d0 <memchr>
 80067a0:	b140      	cbz	r0, 80067b4 <_vfiprintf_r+0x198>
 80067a2:	2340      	movs	r3, #64	; 0x40
 80067a4:	eba0 000a 	sub.w	r0, r0, sl
 80067a8:	fa03 f000 	lsl.w	r0, r3, r0
 80067ac:	9b04      	ldr	r3, [sp, #16]
 80067ae:	4303      	orrs	r3, r0
 80067b0:	3401      	adds	r4, #1
 80067b2:	9304      	str	r3, [sp, #16]
 80067b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067b8:	482c      	ldr	r0, [pc, #176]	; (800686c <_vfiprintf_r+0x250>)
 80067ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067be:	2206      	movs	r2, #6
 80067c0:	f7f9 fd06 	bl	80001d0 <memchr>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d03f      	beq.n	8006848 <_vfiprintf_r+0x22c>
 80067c8:	4b29      	ldr	r3, [pc, #164]	; (8006870 <_vfiprintf_r+0x254>)
 80067ca:	bb1b      	cbnz	r3, 8006814 <_vfiprintf_r+0x1f8>
 80067cc:	9b03      	ldr	r3, [sp, #12]
 80067ce:	3307      	adds	r3, #7
 80067d0:	f023 0307 	bic.w	r3, r3, #7
 80067d4:	3308      	adds	r3, #8
 80067d6:	9303      	str	r3, [sp, #12]
 80067d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067da:	443b      	add	r3, r7
 80067dc:	9309      	str	r3, [sp, #36]	; 0x24
 80067de:	e767      	b.n	80066b0 <_vfiprintf_r+0x94>
 80067e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80067e4:	460c      	mov	r4, r1
 80067e6:	2001      	movs	r0, #1
 80067e8:	e7a5      	b.n	8006736 <_vfiprintf_r+0x11a>
 80067ea:	2300      	movs	r3, #0
 80067ec:	3401      	adds	r4, #1
 80067ee:	9305      	str	r3, [sp, #20]
 80067f0:	4619      	mov	r1, r3
 80067f2:	f04f 0c0a 	mov.w	ip, #10
 80067f6:	4620      	mov	r0, r4
 80067f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067fc:	3a30      	subs	r2, #48	; 0x30
 80067fe:	2a09      	cmp	r2, #9
 8006800:	d903      	bls.n	800680a <_vfiprintf_r+0x1ee>
 8006802:	2b00      	cmp	r3, #0
 8006804:	d0c5      	beq.n	8006792 <_vfiprintf_r+0x176>
 8006806:	9105      	str	r1, [sp, #20]
 8006808:	e7c3      	b.n	8006792 <_vfiprintf_r+0x176>
 800680a:	fb0c 2101 	mla	r1, ip, r1, r2
 800680e:	4604      	mov	r4, r0
 8006810:	2301      	movs	r3, #1
 8006812:	e7f0      	b.n	80067f6 <_vfiprintf_r+0x1da>
 8006814:	ab03      	add	r3, sp, #12
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	462a      	mov	r2, r5
 800681a:	4b16      	ldr	r3, [pc, #88]	; (8006874 <_vfiprintf_r+0x258>)
 800681c:	a904      	add	r1, sp, #16
 800681e:	4630      	mov	r0, r6
 8006820:	f3af 8000 	nop.w
 8006824:	4607      	mov	r7, r0
 8006826:	1c78      	adds	r0, r7, #1
 8006828:	d1d6      	bne.n	80067d8 <_vfiprintf_r+0x1bc>
 800682a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800682c:	07d9      	lsls	r1, r3, #31
 800682e:	d405      	bmi.n	800683c <_vfiprintf_r+0x220>
 8006830:	89ab      	ldrh	r3, [r5, #12]
 8006832:	059a      	lsls	r2, r3, #22
 8006834:	d402      	bmi.n	800683c <_vfiprintf_r+0x220>
 8006836:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006838:	f7ff fe31 	bl	800649e <__retarget_lock_release_recursive>
 800683c:	89ab      	ldrh	r3, [r5, #12]
 800683e:	065b      	lsls	r3, r3, #25
 8006840:	f53f af12 	bmi.w	8006668 <_vfiprintf_r+0x4c>
 8006844:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006846:	e711      	b.n	800666c <_vfiprintf_r+0x50>
 8006848:	ab03      	add	r3, sp, #12
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	462a      	mov	r2, r5
 800684e:	4b09      	ldr	r3, [pc, #36]	; (8006874 <_vfiprintf_r+0x258>)
 8006850:	a904      	add	r1, sp, #16
 8006852:	4630      	mov	r0, r6
 8006854:	f000 f880 	bl	8006958 <_printf_i>
 8006858:	e7e4      	b.n	8006824 <_vfiprintf_r+0x208>
 800685a:	bf00      	nop
 800685c:	08007264 	.word	0x08007264
 8006860:	08007284 	.word	0x08007284
 8006864:	08007244 	.word	0x08007244
 8006868:	080072a4 	.word	0x080072a4
 800686c:	080072ae 	.word	0x080072ae
 8006870:	00000000 	.word	0x00000000
 8006874:	080065f7 	.word	0x080065f7
 8006878:	080072aa 	.word	0x080072aa

0800687c <_printf_common>:
 800687c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006880:	4616      	mov	r6, r2
 8006882:	4699      	mov	r9, r3
 8006884:	688a      	ldr	r2, [r1, #8]
 8006886:	690b      	ldr	r3, [r1, #16]
 8006888:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800688c:	4293      	cmp	r3, r2
 800688e:	bfb8      	it	lt
 8006890:	4613      	movlt	r3, r2
 8006892:	6033      	str	r3, [r6, #0]
 8006894:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006898:	4607      	mov	r7, r0
 800689a:	460c      	mov	r4, r1
 800689c:	b10a      	cbz	r2, 80068a2 <_printf_common+0x26>
 800689e:	3301      	adds	r3, #1
 80068a0:	6033      	str	r3, [r6, #0]
 80068a2:	6823      	ldr	r3, [r4, #0]
 80068a4:	0699      	lsls	r1, r3, #26
 80068a6:	bf42      	ittt	mi
 80068a8:	6833      	ldrmi	r3, [r6, #0]
 80068aa:	3302      	addmi	r3, #2
 80068ac:	6033      	strmi	r3, [r6, #0]
 80068ae:	6825      	ldr	r5, [r4, #0]
 80068b0:	f015 0506 	ands.w	r5, r5, #6
 80068b4:	d106      	bne.n	80068c4 <_printf_common+0x48>
 80068b6:	f104 0a19 	add.w	sl, r4, #25
 80068ba:	68e3      	ldr	r3, [r4, #12]
 80068bc:	6832      	ldr	r2, [r6, #0]
 80068be:	1a9b      	subs	r3, r3, r2
 80068c0:	42ab      	cmp	r3, r5
 80068c2:	dc26      	bgt.n	8006912 <_printf_common+0x96>
 80068c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068c8:	1e13      	subs	r3, r2, #0
 80068ca:	6822      	ldr	r2, [r4, #0]
 80068cc:	bf18      	it	ne
 80068ce:	2301      	movne	r3, #1
 80068d0:	0692      	lsls	r2, r2, #26
 80068d2:	d42b      	bmi.n	800692c <_printf_common+0xb0>
 80068d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068d8:	4649      	mov	r1, r9
 80068da:	4638      	mov	r0, r7
 80068dc:	47c0      	blx	r8
 80068de:	3001      	adds	r0, #1
 80068e0:	d01e      	beq.n	8006920 <_printf_common+0xa4>
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	68e5      	ldr	r5, [r4, #12]
 80068e6:	6832      	ldr	r2, [r6, #0]
 80068e8:	f003 0306 	and.w	r3, r3, #6
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	bf08      	it	eq
 80068f0:	1aad      	subeq	r5, r5, r2
 80068f2:	68a3      	ldr	r3, [r4, #8]
 80068f4:	6922      	ldr	r2, [r4, #16]
 80068f6:	bf0c      	ite	eq
 80068f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068fc:	2500      	movne	r5, #0
 80068fe:	4293      	cmp	r3, r2
 8006900:	bfc4      	itt	gt
 8006902:	1a9b      	subgt	r3, r3, r2
 8006904:	18ed      	addgt	r5, r5, r3
 8006906:	2600      	movs	r6, #0
 8006908:	341a      	adds	r4, #26
 800690a:	42b5      	cmp	r5, r6
 800690c:	d11a      	bne.n	8006944 <_printf_common+0xc8>
 800690e:	2000      	movs	r0, #0
 8006910:	e008      	b.n	8006924 <_printf_common+0xa8>
 8006912:	2301      	movs	r3, #1
 8006914:	4652      	mov	r2, sl
 8006916:	4649      	mov	r1, r9
 8006918:	4638      	mov	r0, r7
 800691a:	47c0      	blx	r8
 800691c:	3001      	adds	r0, #1
 800691e:	d103      	bne.n	8006928 <_printf_common+0xac>
 8006920:	f04f 30ff 	mov.w	r0, #4294967295
 8006924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006928:	3501      	adds	r5, #1
 800692a:	e7c6      	b.n	80068ba <_printf_common+0x3e>
 800692c:	18e1      	adds	r1, r4, r3
 800692e:	1c5a      	adds	r2, r3, #1
 8006930:	2030      	movs	r0, #48	; 0x30
 8006932:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006936:	4422      	add	r2, r4
 8006938:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800693c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006940:	3302      	adds	r3, #2
 8006942:	e7c7      	b.n	80068d4 <_printf_common+0x58>
 8006944:	2301      	movs	r3, #1
 8006946:	4622      	mov	r2, r4
 8006948:	4649      	mov	r1, r9
 800694a:	4638      	mov	r0, r7
 800694c:	47c0      	blx	r8
 800694e:	3001      	adds	r0, #1
 8006950:	d0e6      	beq.n	8006920 <_printf_common+0xa4>
 8006952:	3601      	adds	r6, #1
 8006954:	e7d9      	b.n	800690a <_printf_common+0x8e>
	...

08006958 <_printf_i>:
 8006958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800695c:	7e0f      	ldrb	r7, [r1, #24]
 800695e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006960:	2f78      	cmp	r7, #120	; 0x78
 8006962:	4691      	mov	r9, r2
 8006964:	4680      	mov	r8, r0
 8006966:	460c      	mov	r4, r1
 8006968:	469a      	mov	sl, r3
 800696a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800696e:	d807      	bhi.n	8006980 <_printf_i+0x28>
 8006970:	2f62      	cmp	r7, #98	; 0x62
 8006972:	d80a      	bhi.n	800698a <_printf_i+0x32>
 8006974:	2f00      	cmp	r7, #0
 8006976:	f000 80d8 	beq.w	8006b2a <_printf_i+0x1d2>
 800697a:	2f58      	cmp	r7, #88	; 0x58
 800697c:	f000 80a3 	beq.w	8006ac6 <_printf_i+0x16e>
 8006980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006984:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006988:	e03a      	b.n	8006a00 <_printf_i+0xa8>
 800698a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800698e:	2b15      	cmp	r3, #21
 8006990:	d8f6      	bhi.n	8006980 <_printf_i+0x28>
 8006992:	a101      	add	r1, pc, #4	; (adr r1, 8006998 <_printf_i+0x40>)
 8006994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006998:	080069f1 	.word	0x080069f1
 800699c:	08006a05 	.word	0x08006a05
 80069a0:	08006981 	.word	0x08006981
 80069a4:	08006981 	.word	0x08006981
 80069a8:	08006981 	.word	0x08006981
 80069ac:	08006981 	.word	0x08006981
 80069b0:	08006a05 	.word	0x08006a05
 80069b4:	08006981 	.word	0x08006981
 80069b8:	08006981 	.word	0x08006981
 80069bc:	08006981 	.word	0x08006981
 80069c0:	08006981 	.word	0x08006981
 80069c4:	08006b11 	.word	0x08006b11
 80069c8:	08006a35 	.word	0x08006a35
 80069cc:	08006af3 	.word	0x08006af3
 80069d0:	08006981 	.word	0x08006981
 80069d4:	08006981 	.word	0x08006981
 80069d8:	08006b33 	.word	0x08006b33
 80069dc:	08006981 	.word	0x08006981
 80069e0:	08006a35 	.word	0x08006a35
 80069e4:	08006981 	.word	0x08006981
 80069e8:	08006981 	.word	0x08006981
 80069ec:	08006afb 	.word	0x08006afb
 80069f0:	682b      	ldr	r3, [r5, #0]
 80069f2:	1d1a      	adds	r2, r3, #4
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	602a      	str	r2, [r5, #0]
 80069f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a00:	2301      	movs	r3, #1
 8006a02:	e0a3      	b.n	8006b4c <_printf_i+0x1f4>
 8006a04:	6820      	ldr	r0, [r4, #0]
 8006a06:	6829      	ldr	r1, [r5, #0]
 8006a08:	0606      	lsls	r6, r0, #24
 8006a0a:	f101 0304 	add.w	r3, r1, #4
 8006a0e:	d50a      	bpl.n	8006a26 <_printf_i+0xce>
 8006a10:	680e      	ldr	r6, [r1, #0]
 8006a12:	602b      	str	r3, [r5, #0]
 8006a14:	2e00      	cmp	r6, #0
 8006a16:	da03      	bge.n	8006a20 <_printf_i+0xc8>
 8006a18:	232d      	movs	r3, #45	; 0x2d
 8006a1a:	4276      	negs	r6, r6
 8006a1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a20:	485e      	ldr	r0, [pc, #376]	; (8006b9c <_printf_i+0x244>)
 8006a22:	230a      	movs	r3, #10
 8006a24:	e019      	b.n	8006a5a <_printf_i+0x102>
 8006a26:	680e      	ldr	r6, [r1, #0]
 8006a28:	602b      	str	r3, [r5, #0]
 8006a2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a2e:	bf18      	it	ne
 8006a30:	b236      	sxthne	r6, r6
 8006a32:	e7ef      	b.n	8006a14 <_printf_i+0xbc>
 8006a34:	682b      	ldr	r3, [r5, #0]
 8006a36:	6820      	ldr	r0, [r4, #0]
 8006a38:	1d19      	adds	r1, r3, #4
 8006a3a:	6029      	str	r1, [r5, #0]
 8006a3c:	0601      	lsls	r1, r0, #24
 8006a3e:	d501      	bpl.n	8006a44 <_printf_i+0xec>
 8006a40:	681e      	ldr	r6, [r3, #0]
 8006a42:	e002      	b.n	8006a4a <_printf_i+0xf2>
 8006a44:	0646      	lsls	r6, r0, #25
 8006a46:	d5fb      	bpl.n	8006a40 <_printf_i+0xe8>
 8006a48:	881e      	ldrh	r6, [r3, #0]
 8006a4a:	4854      	ldr	r0, [pc, #336]	; (8006b9c <_printf_i+0x244>)
 8006a4c:	2f6f      	cmp	r7, #111	; 0x6f
 8006a4e:	bf0c      	ite	eq
 8006a50:	2308      	moveq	r3, #8
 8006a52:	230a      	movne	r3, #10
 8006a54:	2100      	movs	r1, #0
 8006a56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a5a:	6865      	ldr	r5, [r4, #4]
 8006a5c:	60a5      	str	r5, [r4, #8]
 8006a5e:	2d00      	cmp	r5, #0
 8006a60:	bfa2      	ittt	ge
 8006a62:	6821      	ldrge	r1, [r4, #0]
 8006a64:	f021 0104 	bicge.w	r1, r1, #4
 8006a68:	6021      	strge	r1, [r4, #0]
 8006a6a:	b90e      	cbnz	r6, 8006a70 <_printf_i+0x118>
 8006a6c:	2d00      	cmp	r5, #0
 8006a6e:	d04d      	beq.n	8006b0c <_printf_i+0x1b4>
 8006a70:	4615      	mov	r5, r2
 8006a72:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a76:	fb03 6711 	mls	r7, r3, r1, r6
 8006a7a:	5dc7      	ldrb	r7, [r0, r7]
 8006a7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a80:	4637      	mov	r7, r6
 8006a82:	42bb      	cmp	r3, r7
 8006a84:	460e      	mov	r6, r1
 8006a86:	d9f4      	bls.n	8006a72 <_printf_i+0x11a>
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	d10b      	bne.n	8006aa4 <_printf_i+0x14c>
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	07de      	lsls	r6, r3, #31
 8006a90:	d508      	bpl.n	8006aa4 <_printf_i+0x14c>
 8006a92:	6923      	ldr	r3, [r4, #16]
 8006a94:	6861      	ldr	r1, [r4, #4]
 8006a96:	4299      	cmp	r1, r3
 8006a98:	bfde      	ittt	le
 8006a9a:	2330      	movle	r3, #48	; 0x30
 8006a9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006aa0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006aa4:	1b52      	subs	r2, r2, r5
 8006aa6:	6122      	str	r2, [r4, #16]
 8006aa8:	f8cd a000 	str.w	sl, [sp]
 8006aac:	464b      	mov	r3, r9
 8006aae:	aa03      	add	r2, sp, #12
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	4640      	mov	r0, r8
 8006ab4:	f7ff fee2 	bl	800687c <_printf_common>
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d14c      	bne.n	8006b56 <_printf_i+0x1fe>
 8006abc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac0:	b004      	add	sp, #16
 8006ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac6:	4835      	ldr	r0, [pc, #212]	; (8006b9c <_printf_i+0x244>)
 8006ac8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006acc:	6829      	ldr	r1, [r5, #0]
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ad4:	6029      	str	r1, [r5, #0]
 8006ad6:	061d      	lsls	r5, r3, #24
 8006ad8:	d514      	bpl.n	8006b04 <_printf_i+0x1ac>
 8006ada:	07df      	lsls	r7, r3, #31
 8006adc:	bf44      	itt	mi
 8006ade:	f043 0320 	orrmi.w	r3, r3, #32
 8006ae2:	6023      	strmi	r3, [r4, #0]
 8006ae4:	b91e      	cbnz	r6, 8006aee <_printf_i+0x196>
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	f023 0320 	bic.w	r3, r3, #32
 8006aec:	6023      	str	r3, [r4, #0]
 8006aee:	2310      	movs	r3, #16
 8006af0:	e7b0      	b.n	8006a54 <_printf_i+0xfc>
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	f043 0320 	orr.w	r3, r3, #32
 8006af8:	6023      	str	r3, [r4, #0]
 8006afa:	2378      	movs	r3, #120	; 0x78
 8006afc:	4828      	ldr	r0, [pc, #160]	; (8006ba0 <_printf_i+0x248>)
 8006afe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b02:	e7e3      	b.n	8006acc <_printf_i+0x174>
 8006b04:	0659      	lsls	r1, r3, #25
 8006b06:	bf48      	it	mi
 8006b08:	b2b6      	uxthmi	r6, r6
 8006b0a:	e7e6      	b.n	8006ada <_printf_i+0x182>
 8006b0c:	4615      	mov	r5, r2
 8006b0e:	e7bb      	b.n	8006a88 <_printf_i+0x130>
 8006b10:	682b      	ldr	r3, [r5, #0]
 8006b12:	6826      	ldr	r6, [r4, #0]
 8006b14:	6961      	ldr	r1, [r4, #20]
 8006b16:	1d18      	adds	r0, r3, #4
 8006b18:	6028      	str	r0, [r5, #0]
 8006b1a:	0635      	lsls	r5, r6, #24
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	d501      	bpl.n	8006b24 <_printf_i+0x1cc>
 8006b20:	6019      	str	r1, [r3, #0]
 8006b22:	e002      	b.n	8006b2a <_printf_i+0x1d2>
 8006b24:	0670      	lsls	r0, r6, #25
 8006b26:	d5fb      	bpl.n	8006b20 <_printf_i+0x1c8>
 8006b28:	8019      	strh	r1, [r3, #0]
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	6123      	str	r3, [r4, #16]
 8006b2e:	4615      	mov	r5, r2
 8006b30:	e7ba      	b.n	8006aa8 <_printf_i+0x150>
 8006b32:	682b      	ldr	r3, [r5, #0]
 8006b34:	1d1a      	adds	r2, r3, #4
 8006b36:	602a      	str	r2, [r5, #0]
 8006b38:	681d      	ldr	r5, [r3, #0]
 8006b3a:	6862      	ldr	r2, [r4, #4]
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	4628      	mov	r0, r5
 8006b40:	f7f9 fb46 	bl	80001d0 <memchr>
 8006b44:	b108      	cbz	r0, 8006b4a <_printf_i+0x1f2>
 8006b46:	1b40      	subs	r0, r0, r5
 8006b48:	6060      	str	r0, [r4, #4]
 8006b4a:	6863      	ldr	r3, [r4, #4]
 8006b4c:	6123      	str	r3, [r4, #16]
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b54:	e7a8      	b.n	8006aa8 <_printf_i+0x150>
 8006b56:	6923      	ldr	r3, [r4, #16]
 8006b58:	462a      	mov	r2, r5
 8006b5a:	4649      	mov	r1, r9
 8006b5c:	4640      	mov	r0, r8
 8006b5e:	47d0      	blx	sl
 8006b60:	3001      	adds	r0, #1
 8006b62:	d0ab      	beq.n	8006abc <_printf_i+0x164>
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	079b      	lsls	r3, r3, #30
 8006b68:	d413      	bmi.n	8006b92 <_printf_i+0x23a>
 8006b6a:	68e0      	ldr	r0, [r4, #12]
 8006b6c:	9b03      	ldr	r3, [sp, #12]
 8006b6e:	4298      	cmp	r0, r3
 8006b70:	bfb8      	it	lt
 8006b72:	4618      	movlt	r0, r3
 8006b74:	e7a4      	b.n	8006ac0 <_printf_i+0x168>
 8006b76:	2301      	movs	r3, #1
 8006b78:	4632      	mov	r2, r6
 8006b7a:	4649      	mov	r1, r9
 8006b7c:	4640      	mov	r0, r8
 8006b7e:	47d0      	blx	sl
 8006b80:	3001      	adds	r0, #1
 8006b82:	d09b      	beq.n	8006abc <_printf_i+0x164>
 8006b84:	3501      	adds	r5, #1
 8006b86:	68e3      	ldr	r3, [r4, #12]
 8006b88:	9903      	ldr	r1, [sp, #12]
 8006b8a:	1a5b      	subs	r3, r3, r1
 8006b8c:	42ab      	cmp	r3, r5
 8006b8e:	dcf2      	bgt.n	8006b76 <_printf_i+0x21e>
 8006b90:	e7eb      	b.n	8006b6a <_printf_i+0x212>
 8006b92:	2500      	movs	r5, #0
 8006b94:	f104 0619 	add.w	r6, r4, #25
 8006b98:	e7f5      	b.n	8006b86 <_printf_i+0x22e>
 8006b9a:	bf00      	nop
 8006b9c:	080072b5 	.word	0x080072b5
 8006ba0:	080072c6 	.word	0x080072c6

08006ba4 <_sbrk_r>:
 8006ba4:	b538      	push	{r3, r4, r5, lr}
 8006ba6:	4d06      	ldr	r5, [pc, #24]	; (8006bc0 <_sbrk_r+0x1c>)
 8006ba8:	2300      	movs	r3, #0
 8006baa:	4604      	mov	r4, r0
 8006bac:	4608      	mov	r0, r1
 8006bae:	602b      	str	r3, [r5, #0]
 8006bb0:	f7fa f87e 	bl	8000cb0 <_sbrk>
 8006bb4:	1c43      	adds	r3, r0, #1
 8006bb6:	d102      	bne.n	8006bbe <_sbrk_r+0x1a>
 8006bb8:	682b      	ldr	r3, [r5, #0]
 8006bba:	b103      	cbz	r3, 8006bbe <_sbrk_r+0x1a>
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	bd38      	pop	{r3, r4, r5, pc}
 8006bc0:	20000354 	.word	0x20000354

08006bc4 <__sread>:
 8006bc4:	b510      	push	{r4, lr}
 8006bc6:	460c      	mov	r4, r1
 8006bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bcc:	f000 fab2 	bl	8007134 <_read_r>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	bfab      	itete	ge
 8006bd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006bd6:	89a3      	ldrhlt	r3, [r4, #12]
 8006bd8:	181b      	addge	r3, r3, r0
 8006bda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006bde:	bfac      	ite	ge
 8006be0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006be2:	81a3      	strhlt	r3, [r4, #12]
 8006be4:	bd10      	pop	{r4, pc}

08006be6 <__swrite>:
 8006be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bea:	461f      	mov	r7, r3
 8006bec:	898b      	ldrh	r3, [r1, #12]
 8006bee:	05db      	lsls	r3, r3, #23
 8006bf0:	4605      	mov	r5, r0
 8006bf2:	460c      	mov	r4, r1
 8006bf4:	4616      	mov	r6, r2
 8006bf6:	d505      	bpl.n	8006c04 <__swrite+0x1e>
 8006bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f000 f9c8 	bl	8006f94 <_lseek_r>
 8006c04:	89a3      	ldrh	r3, [r4, #12]
 8006c06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c0e:	81a3      	strh	r3, [r4, #12]
 8006c10:	4632      	mov	r2, r6
 8006c12:	463b      	mov	r3, r7
 8006c14:	4628      	mov	r0, r5
 8006c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c1a:	f000 b869 	b.w	8006cf0 <_write_r>

08006c1e <__sseek>:
 8006c1e:	b510      	push	{r4, lr}
 8006c20:	460c      	mov	r4, r1
 8006c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c26:	f000 f9b5 	bl	8006f94 <_lseek_r>
 8006c2a:	1c43      	adds	r3, r0, #1
 8006c2c:	89a3      	ldrh	r3, [r4, #12]
 8006c2e:	bf15      	itete	ne
 8006c30:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c3a:	81a3      	strheq	r3, [r4, #12]
 8006c3c:	bf18      	it	ne
 8006c3e:	81a3      	strhne	r3, [r4, #12]
 8006c40:	bd10      	pop	{r4, pc}

08006c42 <__sclose>:
 8006c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c46:	f000 b8d3 	b.w	8006df0 <_close_r>
	...

08006c4c <__swbuf_r>:
 8006c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4e:	460e      	mov	r6, r1
 8006c50:	4614      	mov	r4, r2
 8006c52:	4605      	mov	r5, r0
 8006c54:	b118      	cbz	r0, 8006c5e <__swbuf_r+0x12>
 8006c56:	6983      	ldr	r3, [r0, #24]
 8006c58:	b90b      	cbnz	r3, 8006c5e <__swbuf_r+0x12>
 8006c5a:	f7ff fb81 	bl	8006360 <__sinit>
 8006c5e:	4b21      	ldr	r3, [pc, #132]	; (8006ce4 <__swbuf_r+0x98>)
 8006c60:	429c      	cmp	r4, r3
 8006c62:	d12b      	bne.n	8006cbc <__swbuf_r+0x70>
 8006c64:	686c      	ldr	r4, [r5, #4]
 8006c66:	69a3      	ldr	r3, [r4, #24]
 8006c68:	60a3      	str	r3, [r4, #8]
 8006c6a:	89a3      	ldrh	r3, [r4, #12]
 8006c6c:	071a      	lsls	r2, r3, #28
 8006c6e:	d52f      	bpl.n	8006cd0 <__swbuf_r+0x84>
 8006c70:	6923      	ldr	r3, [r4, #16]
 8006c72:	b36b      	cbz	r3, 8006cd0 <__swbuf_r+0x84>
 8006c74:	6923      	ldr	r3, [r4, #16]
 8006c76:	6820      	ldr	r0, [r4, #0]
 8006c78:	1ac0      	subs	r0, r0, r3
 8006c7a:	6963      	ldr	r3, [r4, #20]
 8006c7c:	b2f6      	uxtb	r6, r6
 8006c7e:	4283      	cmp	r3, r0
 8006c80:	4637      	mov	r7, r6
 8006c82:	dc04      	bgt.n	8006c8e <__swbuf_r+0x42>
 8006c84:	4621      	mov	r1, r4
 8006c86:	4628      	mov	r0, r5
 8006c88:	f000 f948 	bl	8006f1c <_fflush_r>
 8006c8c:	bb30      	cbnz	r0, 8006cdc <__swbuf_r+0x90>
 8006c8e:	68a3      	ldr	r3, [r4, #8]
 8006c90:	3b01      	subs	r3, #1
 8006c92:	60a3      	str	r3, [r4, #8]
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	1c5a      	adds	r2, r3, #1
 8006c98:	6022      	str	r2, [r4, #0]
 8006c9a:	701e      	strb	r6, [r3, #0]
 8006c9c:	6963      	ldr	r3, [r4, #20]
 8006c9e:	3001      	adds	r0, #1
 8006ca0:	4283      	cmp	r3, r0
 8006ca2:	d004      	beq.n	8006cae <__swbuf_r+0x62>
 8006ca4:	89a3      	ldrh	r3, [r4, #12]
 8006ca6:	07db      	lsls	r3, r3, #31
 8006ca8:	d506      	bpl.n	8006cb8 <__swbuf_r+0x6c>
 8006caa:	2e0a      	cmp	r6, #10
 8006cac:	d104      	bne.n	8006cb8 <__swbuf_r+0x6c>
 8006cae:	4621      	mov	r1, r4
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	f000 f933 	bl	8006f1c <_fflush_r>
 8006cb6:	b988      	cbnz	r0, 8006cdc <__swbuf_r+0x90>
 8006cb8:	4638      	mov	r0, r7
 8006cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cbc:	4b0a      	ldr	r3, [pc, #40]	; (8006ce8 <__swbuf_r+0x9c>)
 8006cbe:	429c      	cmp	r4, r3
 8006cc0:	d101      	bne.n	8006cc6 <__swbuf_r+0x7a>
 8006cc2:	68ac      	ldr	r4, [r5, #8]
 8006cc4:	e7cf      	b.n	8006c66 <__swbuf_r+0x1a>
 8006cc6:	4b09      	ldr	r3, [pc, #36]	; (8006cec <__swbuf_r+0xa0>)
 8006cc8:	429c      	cmp	r4, r3
 8006cca:	bf08      	it	eq
 8006ccc:	68ec      	ldreq	r4, [r5, #12]
 8006cce:	e7ca      	b.n	8006c66 <__swbuf_r+0x1a>
 8006cd0:	4621      	mov	r1, r4
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	f000 f81e 	bl	8006d14 <__swsetup_r>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d0cb      	beq.n	8006c74 <__swbuf_r+0x28>
 8006cdc:	f04f 37ff 	mov.w	r7, #4294967295
 8006ce0:	e7ea      	b.n	8006cb8 <__swbuf_r+0x6c>
 8006ce2:	bf00      	nop
 8006ce4:	08007264 	.word	0x08007264
 8006ce8:	08007284 	.word	0x08007284
 8006cec:	08007244 	.word	0x08007244

08006cf0 <_write_r>:
 8006cf0:	b538      	push	{r3, r4, r5, lr}
 8006cf2:	4d07      	ldr	r5, [pc, #28]	; (8006d10 <_write_r+0x20>)
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	4608      	mov	r0, r1
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	602a      	str	r2, [r5, #0]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	f7f9 fcc2 	bl	8000688 <_write>
 8006d04:	1c43      	adds	r3, r0, #1
 8006d06:	d102      	bne.n	8006d0e <_write_r+0x1e>
 8006d08:	682b      	ldr	r3, [r5, #0]
 8006d0a:	b103      	cbz	r3, 8006d0e <_write_r+0x1e>
 8006d0c:	6023      	str	r3, [r4, #0]
 8006d0e:	bd38      	pop	{r3, r4, r5, pc}
 8006d10:	20000354 	.word	0x20000354

08006d14 <__swsetup_r>:
 8006d14:	4b32      	ldr	r3, [pc, #200]	; (8006de0 <__swsetup_r+0xcc>)
 8006d16:	b570      	push	{r4, r5, r6, lr}
 8006d18:	681d      	ldr	r5, [r3, #0]
 8006d1a:	4606      	mov	r6, r0
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	b125      	cbz	r5, 8006d2a <__swsetup_r+0x16>
 8006d20:	69ab      	ldr	r3, [r5, #24]
 8006d22:	b913      	cbnz	r3, 8006d2a <__swsetup_r+0x16>
 8006d24:	4628      	mov	r0, r5
 8006d26:	f7ff fb1b 	bl	8006360 <__sinit>
 8006d2a:	4b2e      	ldr	r3, [pc, #184]	; (8006de4 <__swsetup_r+0xd0>)
 8006d2c:	429c      	cmp	r4, r3
 8006d2e:	d10f      	bne.n	8006d50 <__swsetup_r+0x3c>
 8006d30:	686c      	ldr	r4, [r5, #4]
 8006d32:	89a3      	ldrh	r3, [r4, #12]
 8006d34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d38:	0719      	lsls	r1, r3, #28
 8006d3a:	d42c      	bmi.n	8006d96 <__swsetup_r+0x82>
 8006d3c:	06dd      	lsls	r5, r3, #27
 8006d3e:	d411      	bmi.n	8006d64 <__swsetup_r+0x50>
 8006d40:	2309      	movs	r3, #9
 8006d42:	6033      	str	r3, [r6, #0]
 8006d44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d48:	81a3      	strh	r3, [r4, #12]
 8006d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d4e:	e03e      	b.n	8006dce <__swsetup_r+0xba>
 8006d50:	4b25      	ldr	r3, [pc, #148]	; (8006de8 <__swsetup_r+0xd4>)
 8006d52:	429c      	cmp	r4, r3
 8006d54:	d101      	bne.n	8006d5a <__swsetup_r+0x46>
 8006d56:	68ac      	ldr	r4, [r5, #8]
 8006d58:	e7eb      	b.n	8006d32 <__swsetup_r+0x1e>
 8006d5a:	4b24      	ldr	r3, [pc, #144]	; (8006dec <__swsetup_r+0xd8>)
 8006d5c:	429c      	cmp	r4, r3
 8006d5e:	bf08      	it	eq
 8006d60:	68ec      	ldreq	r4, [r5, #12]
 8006d62:	e7e6      	b.n	8006d32 <__swsetup_r+0x1e>
 8006d64:	0758      	lsls	r0, r3, #29
 8006d66:	d512      	bpl.n	8006d8e <__swsetup_r+0x7a>
 8006d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d6a:	b141      	cbz	r1, 8006d7e <__swsetup_r+0x6a>
 8006d6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d70:	4299      	cmp	r1, r3
 8006d72:	d002      	beq.n	8006d7a <__swsetup_r+0x66>
 8006d74:	4630      	mov	r0, r6
 8006d76:	f000 f991 	bl	800709c <_free_r>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	6363      	str	r3, [r4, #52]	; 0x34
 8006d7e:	89a3      	ldrh	r3, [r4, #12]
 8006d80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d84:	81a3      	strh	r3, [r4, #12]
 8006d86:	2300      	movs	r3, #0
 8006d88:	6063      	str	r3, [r4, #4]
 8006d8a:	6923      	ldr	r3, [r4, #16]
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	89a3      	ldrh	r3, [r4, #12]
 8006d90:	f043 0308 	orr.w	r3, r3, #8
 8006d94:	81a3      	strh	r3, [r4, #12]
 8006d96:	6923      	ldr	r3, [r4, #16]
 8006d98:	b94b      	cbnz	r3, 8006dae <__swsetup_r+0x9a>
 8006d9a:	89a3      	ldrh	r3, [r4, #12]
 8006d9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006da4:	d003      	beq.n	8006dae <__swsetup_r+0x9a>
 8006da6:	4621      	mov	r1, r4
 8006da8:	4630      	mov	r0, r6
 8006daa:	f000 f92b 	bl	8007004 <__smakebuf_r>
 8006dae:	89a0      	ldrh	r0, [r4, #12]
 8006db0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006db4:	f010 0301 	ands.w	r3, r0, #1
 8006db8:	d00a      	beq.n	8006dd0 <__swsetup_r+0xbc>
 8006dba:	2300      	movs	r3, #0
 8006dbc:	60a3      	str	r3, [r4, #8]
 8006dbe:	6963      	ldr	r3, [r4, #20]
 8006dc0:	425b      	negs	r3, r3
 8006dc2:	61a3      	str	r3, [r4, #24]
 8006dc4:	6923      	ldr	r3, [r4, #16]
 8006dc6:	b943      	cbnz	r3, 8006dda <__swsetup_r+0xc6>
 8006dc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006dcc:	d1ba      	bne.n	8006d44 <__swsetup_r+0x30>
 8006dce:	bd70      	pop	{r4, r5, r6, pc}
 8006dd0:	0781      	lsls	r1, r0, #30
 8006dd2:	bf58      	it	pl
 8006dd4:	6963      	ldrpl	r3, [r4, #20]
 8006dd6:	60a3      	str	r3, [r4, #8]
 8006dd8:	e7f4      	b.n	8006dc4 <__swsetup_r+0xb0>
 8006dda:	2000      	movs	r0, #0
 8006ddc:	e7f7      	b.n	8006dce <__swsetup_r+0xba>
 8006dde:	bf00      	nop
 8006de0:	20000018 	.word	0x20000018
 8006de4:	08007264 	.word	0x08007264
 8006de8:	08007284 	.word	0x08007284
 8006dec:	08007244 	.word	0x08007244

08006df0 <_close_r>:
 8006df0:	b538      	push	{r3, r4, r5, lr}
 8006df2:	4d06      	ldr	r5, [pc, #24]	; (8006e0c <_close_r+0x1c>)
 8006df4:	2300      	movs	r3, #0
 8006df6:	4604      	mov	r4, r0
 8006df8:	4608      	mov	r0, r1
 8006dfa:	602b      	str	r3, [r5, #0]
 8006dfc:	f7f9 ff23 	bl	8000c46 <_close>
 8006e00:	1c43      	adds	r3, r0, #1
 8006e02:	d102      	bne.n	8006e0a <_close_r+0x1a>
 8006e04:	682b      	ldr	r3, [r5, #0]
 8006e06:	b103      	cbz	r3, 8006e0a <_close_r+0x1a>
 8006e08:	6023      	str	r3, [r4, #0]
 8006e0a:	bd38      	pop	{r3, r4, r5, pc}
 8006e0c:	20000354 	.word	0x20000354

08006e10 <__sflush_r>:
 8006e10:	898a      	ldrh	r2, [r1, #12]
 8006e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e16:	4605      	mov	r5, r0
 8006e18:	0710      	lsls	r0, r2, #28
 8006e1a:	460c      	mov	r4, r1
 8006e1c:	d458      	bmi.n	8006ed0 <__sflush_r+0xc0>
 8006e1e:	684b      	ldr	r3, [r1, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	dc05      	bgt.n	8006e30 <__sflush_r+0x20>
 8006e24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	dc02      	bgt.n	8006e30 <__sflush_r+0x20>
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e32:	2e00      	cmp	r6, #0
 8006e34:	d0f9      	beq.n	8006e2a <__sflush_r+0x1a>
 8006e36:	2300      	movs	r3, #0
 8006e38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e3c:	682f      	ldr	r7, [r5, #0]
 8006e3e:	602b      	str	r3, [r5, #0]
 8006e40:	d032      	beq.n	8006ea8 <__sflush_r+0x98>
 8006e42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e44:	89a3      	ldrh	r3, [r4, #12]
 8006e46:	075a      	lsls	r2, r3, #29
 8006e48:	d505      	bpl.n	8006e56 <__sflush_r+0x46>
 8006e4a:	6863      	ldr	r3, [r4, #4]
 8006e4c:	1ac0      	subs	r0, r0, r3
 8006e4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e50:	b10b      	cbz	r3, 8006e56 <__sflush_r+0x46>
 8006e52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e54:	1ac0      	subs	r0, r0, r3
 8006e56:	2300      	movs	r3, #0
 8006e58:	4602      	mov	r2, r0
 8006e5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e5c:	6a21      	ldr	r1, [r4, #32]
 8006e5e:	4628      	mov	r0, r5
 8006e60:	47b0      	blx	r6
 8006e62:	1c43      	adds	r3, r0, #1
 8006e64:	89a3      	ldrh	r3, [r4, #12]
 8006e66:	d106      	bne.n	8006e76 <__sflush_r+0x66>
 8006e68:	6829      	ldr	r1, [r5, #0]
 8006e6a:	291d      	cmp	r1, #29
 8006e6c:	d82c      	bhi.n	8006ec8 <__sflush_r+0xb8>
 8006e6e:	4a2a      	ldr	r2, [pc, #168]	; (8006f18 <__sflush_r+0x108>)
 8006e70:	40ca      	lsrs	r2, r1
 8006e72:	07d6      	lsls	r6, r2, #31
 8006e74:	d528      	bpl.n	8006ec8 <__sflush_r+0xb8>
 8006e76:	2200      	movs	r2, #0
 8006e78:	6062      	str	r2, [r4, #4]
 8006e7a:	04d9      	lsls	r1, r3, #19
 8006e7c:	6922      	ldr	r2, [r4, #16]
 8006e7e:	6022      	str	r2, [r4, #0]
 8006e80:	d504      	bpl.n	8006e8c <__sflush_r+0x7c>
 8006e82:	1c42      	adds	r2, r0, #1
 8006e84:	d101      	bne.n	8006e8a <__sflush_r+0x7a>
 8006e86:	682b      	ldr	r3, [r5, #0]
 8006e88:	b903      	cbnz	r3, 8006e8c <__sflush_r+0x7c>
 8006e8a:	6560      	str	r0, [r4, #84]	; 0x54
 8006e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e8e:	602f      	str	r7, [r5, #0]
 8006e90:	2900      	cmp	r1, #0
 8006e92:	d0ca      	beq.n	8006e2a <__sflush_r+0x1a>
 8006e94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e98:	4299      	cmp	r1, r3
 8006e9a:	d002      	beq.n	8006ea2 <__sflush_r+0x92>
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	f000 f8fd 	bl	800709c <_free_r>
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	6360      	str	r0, [r4, #52]	; 0x34
 8006ea6:	e7c1      	b.n	8006e2c <__sflush_r+0x1c>
 8006ea8:	6a21      	ldr	r1, [r4, #32]
 8006eaa:	2301      	movs	r3, #1
 8006eac:	4628      	mov	r0, r5
 8006eae:	47b0      	blx	r6
 8006eb0:	1c41      	adds	r1, r0, #1
 8006eb2:	d1c7      	bne.n	8006e44 <__sflush_r+0x34>
 8006eb4:	682b      	ldr	r3, [r5, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d0c4      	beq.n	8006e44 <__sflush_r+0x34>
 8006eba:	2b1d      	cmp	r3, #29
 8006ebc:	d001      	beq.n	8006ec2 <__sflush_r+0xb2>
 8006ebe:	2b16      	cmp	r3, #22
 8006ec0:	d101      	bne.n	8006ec6 <__sflush_r+0xb6>
 8006ec2:	602f      	str	r7, [r5, #0]
 8006ec4:	e7b1      	b.n	8006e2a <__sflush_r+0x1a>
 8006ec6:	89a3      	ldrh	r3, [r4, #12]
 8006ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ecc:	81a3      	strh	r3, [r4, #12]
 8006ece:	e7ad      	b.n	8006e2c <__sflush_r+0x1c>
 8006ed0:	690f      	ldr	r7, [r1, #16]
 8006ed2:	2f00      	cmp	r7, #0
 8006ed4:	d0a9      	beq.n	8006e2a <__sflush_r+0x1a>
 8006ed6:	0793      	lsls	r3, r2, #30
 8006ed8:	680e      	ldr	r6, [r1, #0]
 8006eda:	bf08      	it	eq
 8006edc:	694b      	ldreq	r3, [r1, #20]
 8006ede:	600f      	str	r7, [r1, #0]
 8006ee0:	bf18      	it	ne
 8006ee2:	2300      	movne	r3, #0
 8006ee4:	eba6 0807 	sub.w	r8, r6, r7
 8006ee8:	608b      	str	r3, [r1, #8]
 8006eea:	f1b8 0f00 	cmp.w	r8, #0
 8006eee:	dd9c      	ble.n	8006e2a <__sflush_r+0x1a>
 8006ef0:	6a21      	ldr	r1, [r4, #32]
 8006ef2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ef4:	4643      	mov	r3, r8
 8006ef6:	463a      	mov	r2, r7
 8006ef8:	4628      	mov	r0, r5
 8006efa:	47b0      	blx	r6
 8006efc:	2800      	cmp	r0, #0
 8006efe:	dc06      	bgt.n	8006f0e <__sflush_r+0xfe>
 8006f00:	89a3      	ldrh	r3, [r4, #12]
 8006f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f06:	81a3      	strh	r3, [r4, #12]
 8006f08:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0c:	e78e      	b.n	8006e2c <__sflush_r+0x1c>
 8006f0e:	4407      	add	r7, r0
 8006f10:	eba8 0800 	sub.w	r8, r8, r0
 8006f14:	e7e9      	b.n	8006eea <__sflush_r+0xda>
 8006f16:	bf00      	nop
 8006f18:	20400001 	.word	0x20400001

08006f1c <_fflush_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	690b      	ldr	r3, [r1, #16]
 8006f20:	4605      	mov	r5, r0
 8006f22:	460c      	mov	r4, r1
 8006f24:	b913      	cbnz	r3, 8006f2c <_fflush_r+0x10>
 8006f26:	2500      	movs	r5, #0
 8006f28:	4628      	mov	r0, r5
 8006f2a:	bd38      	pop	{r3, r4, r5, pc}
 8006f2c:	b118      	cbz	r0, 8006f36 <_fflush_r+0x1a>
 8006f2e:	6983      	ldr	r3, [r0, #24]
 8006f30:	b90b      	cbnz	r3, 8006f36 <_fflush_r+0x1a>
 8006f32:	f7ff fa15 	bl	8006360 <__sinit>
 8006f36:	4b14      	ldr	r3, [pc, #80]	; (8006f88 <_fflush_r+0x6c>)
 8006f38:	429c      	cmp	r4, r3
 8006f3a:	d11b      	bne.n	8006f74 <_fflush_r+0x58>
 8006f3c:	686c      	ldr	r4, [r5, #4]
 8006f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d0ef      	beq.n	8006f26 <_fflush_r+0xa>
 8006f46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f48:	07d0      	lsls	r0, r2, #31
 8006f4a:	d404      	bmi.n	8006f56 <_fflush_r+0x3a>
 8006f4c:	0599      	lsls	r1, r3, #22
 8006f4e:	d402      	bmi.n	8006f56 <_fflush_r+0x3a>
 8006f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f52:	f7ff faa3 	bl	800649c <__retarget_lock_acquire_recursive>
 8006f56:	4628      	mov	r0, r5
 8006f58:	4621      	mov	r1, r4
 8006f5a:	f7ff ff59 	bl	8006e10 <__sflush_r>
 8006f5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f60:	07da      	lsls	r2, r3, #31
 8006f62:	4605      	mov	r5, r0
 8006f64:	d4e0      	bmi.n	8006f28 <_fflush_r+0xc>
 8006f66:	89a3      	ldrh	r3, [r4, #12]
 8006f68:	059b      	lsls	r3, r3, #22
 8006f6a:	d4dd      	bmi.n	8006f28 <_fflush_r+0xc>
 8006f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f6e:	f7ff fa96 	bl	800649e <__retarget_lock_release_recursive>
 8006f72:	e7d9      	b.n	8006f28 <_fflush_r+0xc>
 8006f74:	4b05      	ldr	r3, [pc, #20]	; (8006f8c <_fflush_r+0x70>)
 8006f76:	429c      	cmp	r4, r3
 8006f78:	d101      	bne.n	8006f7e <_fflush_r+0x62>
 8006f7a:	68ac      	ldr	r4, [r5, #8]
 8006f7c:	e7df      	b.n	8006f3e <_fflush_r+0x22>
 8006f7e:	4b04      	ldr	r3, [pc, #16]	; (8006f90 <_fflush_r+0x74>)
 8006f80:	429c      	cmp	r4, r3
 8006f82:	bf08      	it	eq
 8006f84:	68ec      	ldreq	r4, [r5, #12]
 8006f86:	e7da      	b.n	8006f3e <_fflush_r+0x22>
 8006f88:	08007264 	.word	0x08007264
 8006f8c:	08007284 	.word	0x08007284
 8006f90:	08007244 	.word	0x08007244

08006f94 <_lseek_r>:
 8006f94:	b538      	push	{r3, r4, r5, lr}
 8006f96:	4d07      	ldr	r5, [pc, #28]	; (8006fb4 <_lseek_r+0x20>)
 8006f98:	4604      	mov	r4, r0
 8006f9a:	4608      	mov	r0, r1
 8006f9c:	4611      	mov	r1, r2
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	602a      	str	r2, [r5, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	f7f9 fe76 	bl	8000c94 <_lseek>
 8006fa8:	1c43      	adds	r3, r0, #1
 8006faa:	d102      	bne.n	8006fb2 <_lseek_r+0x1e>
 8006fac:	682b      	ldr	r3, [r5, #0]
 8006fae:	b103      	cbz	r3, 8006fb2 <_lseek_r+0x1e>
 8006fb0:	6023      	str	r3, [r4, #0]
 8006fb2:	bd38      	pop	{r3, r4, r5, pc}
 8006fb4:	20000354 	.word	0x20000354

08006fb8 <__swhatbuf_r>:
 8006fb8:	b570      	push	{r4, r5, r6, lr}
 8006fba:	460e      	mov	r6, r1
 8006fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc0:	2900      	cmp	r1, #0
 8006fc2:	b096      	sub	sp, #88	; 0x58
 8006fc4:	4614      	mov	r4, r2
 8006fc6:	461d      	mov	r5, r3
 8006fc8:	da08      	bge.n	8006fdc <__swhatbuf_r+0x24>
 8006fca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	602a      	str	r2, [r5, #0]
 8006fd2:	061a      	lsls	r2, r3, #24
 8006fd4:	d410      	bmi.n	8006ff8 <__swhatbuf_r+0x40>
 8006fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fda:	e00e      	b.n	8006ffa <__swhatbuf_r+0x42>
 8006fdc:	466a      	mov	r2, sp
 8006fde:	f000 f8bb 	bl	8007158 <_fstat_r>
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	dbf1      	blt.n	8006fca <__swhatbuf_r+0x12>
 8006fe6:	9a01      	ldr	r2, [sp, #4]
 8006fe8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006fec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ff0:	425a      	negs	r2, r3
 8006ff2:	415a      	adcs	r2, r3
 8006ff4:	602a      	str	r2, [r5, #0]
 8006ff6:	e7ee      	b.n	8006fd6 <__swhatbuf_r+0x1e>
 8006ff8:	2340      	movs	r3, #64	; 0x40
 8006ffa:	2000      	movs	r0, #0
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	b016      	add	sp, #88	; 0x58
 8007000:	bd70      	pop	{r4, r5, r6, pc}
	...

08007004 <__smakebuf_r>:
 8007004:	898b      	ldrh	r3, [r1, #12]
 8007006:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007008:	079d      	lsls	r5, r3, #30
 800700a:	4606      	mov	r6, r0
 800700c:	460c      	mov	r4, r1
 800700e:	d507      	bpl.n	8007020 <__smakebuf_r+0x1c>
 8007010:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	6123      	str	r3, [r4, #16]
 8007018:	2301      	movs	r3, #1
 800701a:	6163      	str	r3, [r4, #20]
 800701c:	b002      	add	sp, #8
 800701e:	bd70      	pop	{r4, r5, r6, pc}
 8007020:	ab01      	add	r3, sp, #4
 8007022:	466a      	mov	r2, sp
 8007024:	f7ff ffc8 	bl	8006fb8 <__swhatbuf_r>
 8007028:	9900      	ldr	r1, [sp, #0]
 800702a:	4605      	mov	r5, r0
 800702c:	4630      	mov	r0, r6
 800702e:	f7ff fa57 	bl	80064e0 <_malloc_r>
 8007032:	b948      	cbnz	r0, 8007048 <__smakebuf_r+0x44>
 8007034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007038:	059a      	lsls	r2, r3, #22
 800703a:	d4ef      	bmi.n	800701c <__smakebuf_r+0x18>
 800703c:	f023 0303 	bic.w	r3, r3, #3
 8007040:	f043 0302 	orr.w	r3, r3, #2
 8007044:	81a3      	strh	r3, [r4, #12]
 8007046:	e7e3      	b.n	8007010 <__smakebuf_r+0xc>
 8007048:	4b0d      	ldr	r3, [pc, #52]	; (8007080 <__smakebuf_r+0x7c>)
 800704a:	62b3      	str	r3, [r6, #40]	; 0x28
 800704c:	89a3      	ldrh	r3, [r4, #12]
 800704e:	6020      	str	r0, [r4, #0]
 8007050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007054:	81a3      	strh	r3, [r4, #12]
 8007056:	9b00      	ldr	r3, [sp, #0]
 8007058:	6163      	str	r3, [r4, #20]
 800705a:	9b01      	ldr	r3, [sp, #4]
 800705c:	6120      	str	r0, [r4, #16]
 800705e:	b15b      	cbz	r3, 8007078 <__smakebuf_r+0x74>
 8007060:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007064:	4630      	mov	r0, r6
 8007066:	f000 f889 	bl	800717c <_isatty_r>
 800706a:	b128      	cbz	r0, 8007078 <__smakebuf_r+0x74>
 800706c:	89a3      	ldrh	r3, [r4, #12]
 800706e:	f023 0303 	bic.w	r3, r3, #3
 8007072:	f043 0301 	orr.w	r3, r3, #1
 8007076:	81a3      	strh	r3, [r4, #12]
 8007078:	89a0      	ldrh	r0, [r4, #12]
 800707a:	4305      	orrs	r5, r0
 800707c:	81a5      	strh	r5, [r4, #12]
 800707e:	e7cd      	b.n	800701c <__smakebuf_r+0x18>
 8007080:	080062f9 	.word	0x080062f9

08007084 <__malloc_lock>:
 8007084:	4801      	ldr	r0, [pc, #4]	; (800708c <__malloc_lock+0x8>)
 8007086:	f7ff ba09 	b.w	800649c <__retarget_lock_acquire_recursive>
 800708a:	bf00      	nop
 800708c:	20000348 	.word	0x20000348

08007090 <__malloc_unlock>:
 8007090:	4801      	ldr	r0, [pc, #4]	; (8007098 <__malloc_unlock+0x8>)
 8007092:	f7ff ba04 	b.w	800649e <__retarget_lock_release_recursive>
 8007096:	bf00      	nop
 8007098:	20000348 	.word	0x20000348

0800709c <_free_r>:
 800709c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800709e:	2900      	cmp	r1, #0
 80070a0:	d044      	beq.n	800712c <_free_r+0x90>
 80070a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070a6:	9001      	str	r0, [sp, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f1a1 0404 	sub.w	r4, r1, #4
 80070ae:	bfb8      	it	lt
 80070b0:	18e4      	addlt	r4, r4, r3
 80070b2:	f7ff ffe7 	bl	8007084 <__malloc_lock>
 80070b6:	4a1e      	ldr	r2, [pc, #120]	; (8007130 <_free_r+0x94>)
 80070b8:	9801      	ldr	r0, [sp, #4]
 80070ba:	6813      	ldr	r3, [r2, #0]
 80070bc:	b933      	cbnz	r3, 80070cc <_free_r+0x30>
 80070be:	6063      	str	r3, [r4, #4]
 80070c0:	6014      	str	r4, [r2, #0]
 80070c2:	b003      	add	sp, #12
 80070c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070c8:	f7ff bfe2 	b.w	8007090 <__malloc_unlock>
 80070cc:	42a3      	cmp	r3, r4
 80070ce:	d908      	bls.n	80070e2 <_free_r+0x46>
 80070d0:	6825      	ldr	r5, [r4, #0]
 80070d2:	1961      	adds	r1, r4, r5
 80070d4:	428b      	cmp	r3, r1
 80070d6:	bf01      	itttt	eq
 80070d8:	6819      	ldreq	r1, [r3, #0]
 80070da:	685b      	ldreq	r3, [r3, #4]
 80070dc:	1949      	addeq	r1, r1, r5
 80070de:	6021      	streq	r1, [r4, #0]
 80070e0:	e7ed      	b.n	80070be <_free_r+0x22>
 80070e2:	461a      	mov	r2, r3
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	b10b      	cbz	r3, 80070ec <_free_r+0x50>
 80070e8:	42a3      	cmp	r3, r4
 80070ea:	d9fa      	bls.n	80070e2 <_free_r+0x46>
 80070ec:	6811      	ldr	r1, [r2, #0]
 80070ee:	1855      	adds	r5, r2, r1
 80070f0:	42a5      	cmp	r5, r4
 80070f2:	d10b      	bne.n	800710c <_free_r+0x70>
 80070f4:	6824      	ldr	r4, [r4, #0]
 80070f6:	4421      	add	r1, r4
 80070f8:	1854      	adds	r4, r2, r1
 80070fa:	42a3      	cmp	r3, r4
 80070fc:	6011      	str	r1, [r2, #0]
 80070fe:	d1e0      	bne.n	80070c2 <_free_r+0x26>
 8007100:	681c      	ldr	r4, [r3, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	6053      	str	r3, [r2, #4]
 8007106:	4421      	add	r1, r4
 8007108:	6011      	str	r1, [r2, #0]
 800710a:	e7da      	b.n	80070c2 <_free_r+0x26>
 800710c:	d902      	bls.n	8007114 <_free_r+0x78>
 800710e:	230c      	movs	r3, #12
 8007110:	6003      	str	r3, [r0, #0]
 8007112:	e7d6      	b.n	80070c2 <_free_r+0x26>
 8007114:	6825      	ldr	r5, [r4, #0]
 8007116:	1961      	adds	r1, r4, r5
 8007118:	428b      	cmp	r3, r1
 800711a:	bf04      	itt	eq
 800711c:	6819      	ldreq	r1, [r3, #0]
 800711e:	685b      	ldreq	r3, [r3, #4]
 8007120:	6063      	str	r3, [r4, #4]
 8007122:	bf04      	itt	eq
 8007124:	1949      	addeq	r1, r1, r5
 8007126:	6021      	streq	r1, [r4, #0]
 8007128:	6054      	str	r4, [r2, #4]
 800712a:	e7ca      	b.n	80070c2 <_free_r+0x26>
 800712c:	b003      	add	sp, #12
 800712e:	bd30      	pop	{r4, r5, pc}
 8007130:	2000034c 	.word	0x2000034c

08007134 <_read_r>:
 8007134:	b538      	push	{r3, r4, r5, lr}
 8007136:	4d07      	ldr	r5, [pc, #28]	; (8007154 <_read_r+0x20>)
 8007138:	4604      	mov	r4, r0
 800713a:	4608      	mov	r0, r1
 800713c:	4611      	mov	r1, r2
 800713e:	2200      	movs	r2, #0
 8007140:	602a      	str	r2, [r5, #0]
 8007142:	461a      	mov	r2, r3
 8007144:	f7f9 fd62 	bl	8000c0c <_read>
 8007148:	1c43      	adds	r3, r0, #1
 800714a:	d102      	bne.n	8007152 <_read_r+0x1e>
 800714c:	682b      	ldr	r3, [r5, #0]
 800714e:	b103      	cbz	r3, 8007152 <_read_r+0x1e>
 8007150:	6023      	str	r3, [r4, #0]
 8007152:	bd38      	pop	{r3, r4, r5, pc}
 8007154:	20000354 	.word	0x20000354

08007158 <_fstat_r>:
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	4d07      	ldr	r5, [pc, #28]	; (8007178 <_fstat_r+0x20>)
 800715c:	2300      	movs	r3, #0
 800715e:	4604      	mov	r4, r0
 8007160:	4608      	mov	r0, r1
 8007162:	4611      	mov	r1, r2
 8007164:	602b      	str	r3, [r5, #0]
 8007166:	f7f9 fd7a 	bl	8000c5e <_fstat>
 800716a:	1c43      	adds	r3, r0, #1
 800716c:	d102      	bne.n	8007174 <_fstat_r+0x1c>
 800716e:	682b      	ldr	r3, [r5, #0]
 8007170:	b103      	cbz	r3, 8007174 <_fstat_r+0x1c>
 8007172:	6023      	str	r3, [r4, #0]
 8007174:	bd38      	pop	{r3, r4, r5, pc}
 8007176:	bf00      	nop
 8007178:	20000354 	.word	0x20000354

0800717c <_isatty_r>:
 800717c:	b538      	push	{r3, r4, r5, lr}
 800717e:	4d06      	ldr	r5, [pc, #24]	; (8007198 <_isatty_r+0x1c>)
 8007180:	2300      	movs	r3, #0
 8007182:	4604      	mov	r4, r0
 8007184:	4608      	mov	r0, r1
 8007186:	602b      	str	r3, [r5, #0]
 8007188:	f7f9 fd79 	bl	8000c7e <_isatty>
 800718c:	1c43      	adds	r3, r0, #1
 800718e:	d102      	bne.n	8007196 <_isatty_r+0x1a>
 8007190:	682b      	ldr	r3, [r5, #0]
 8007192:	b103      	cbz	r3, 8007196 <_isatty_r+0x1a>
 8007194:	6023      	str	r3, [r4, #0]
 8007196:	bd38      	pop	{r3, r4, r5, pc}
 8007198:	20000354 	.word	0x20000354

0800719c <_init>:
 800719c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719e:	bf00      	nop
 80071a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071a2:	bc08      	pop	{r3}
 80071a4:	469e      	mov	lr, r3
 80071a6:	4770      	bx	lr

080071a8 <_fini>:
 80071a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071aa:	bf00      	nop
 80071ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ae:	bc08      	pop	{r3}
 80071b0:	469e      	mov	lr, r3
 80071b2:	4770      	bx	lr
