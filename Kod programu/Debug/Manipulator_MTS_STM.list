
Manipulator_MTS_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009278  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08009408  08009408  00019408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800986c  0800986c  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800986c  0800986c  0001986c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009874  08009874  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009874  08009874  00019874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009878  08009878  00019878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800987c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000204  08009a80  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  08009a80  00020468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139b9  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029e9  00000000  00000000  00033bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  000365d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  000376e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003269  00000000  00000000  000386c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141e5  00000000  00000000  0003b929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5f13  00000000  00000000  0004fb0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145a21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056ec  00000000  00000000  00145a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080093f0 	.word	0x080093f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	080093f0 	.word	0x080093f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ec2:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <MX_GPIO_Init+0xc0>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	4a29      	ldr	r2, [pc, #164]	; (8000f6c <MX_GPIO_Init+0xc0>)
 8000ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ece:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <MX_GPIO_Init+0xc0>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <MX_GPIO_Init+0xc0>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	4a23      	ldr	r2, [pc, #140]	; (8000f6c <MX_GPIO_Init+0xc0>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <MX_GPIO_Init+0xc0>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <MX_GPIO_Init+0xc0>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	4a1d      	ldr	r2, [pc, #116]	; (8000f6c <MX_GPIO_Init+0xc0>)
 8000ef8:	f043 0310 	orr.w	r3, r3, #16
 8000efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efe:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <MX_GPIO_Init+0xc0>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	f003 0310 	and.w	r3, r3, #16
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <MX_GPIO_Init+0xc0>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <MX_GPIO_Init+0xc0>)
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <MX_GPIO_Init+0xc0>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <MX_GPIO_Init+0xc0>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	4a11      	ldr	r2, [pc, #68]	; (8000f6c <MX_GPIO_Init+0xc0>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <MX_GPIO_Init+0xc0>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AIN2_Pin|AIN1_Pin|BIN2_Pin|BIN1_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 8000f40:	480b      	ldr	r0, [pc, #44]	; (8000f70 <MX_GPIO_Init+0xc4>)
 8000f42:	f001 fc4b 	bl	80027dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN2_Pin|BIN1_Pin;
 8000f46:	f44f 4334 	mov.w	r3, #46080	; 0xb400
 8000f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4804      	ldr	r0, [pc, #16]	; (8000f70 <MX_GPIO_Init+0xc4>)
 8000f60:	f001 fa92 	bl	8002488 <HAL_GPIO_Init>

}
 8000f64:	bf00      	nop
 8000f66:	3728      	adds	r7, #40	; 0x28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	48001000 	.word	0x48001000

08000f74 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 50);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	2332      	movs	r3, #50	; 0x32
 8000f86:	68b9      	ldr	r1, [r7, #8]
 8000f88:	4803      	ldr	r0, [pc, #12]	; (8000f98 <_write+0x24>)
 8000f8a:	f004 f9a3 	bl	80052d4 <HAL_UART_Transmit>
	return len;
 8000f8e:	687b      	ldr	r3, [r7, #4]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200003d0 	.word	0x200003d0

08000f9c <indeks>:

void indeks(uint8_t liczba){
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
	if(liczba == '0'){
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	2b30      	cmp	r3, #48	; 0x30
 8000faa:	d102      	bne.n	8000fb2 <indeks+0x16>
		value = 0;
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <indeks+0x78>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
	}
	if(liczba == '1'){
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	2b31      	cmp	r3, #49	; 0x31
 8000fb6:	d102      	bne.n	8000fbe <indeks+0x22>
		value = 1;
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <indeks+0x78>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]
	}
	if(liczba == '2'){
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	2b32      	cmp	r3, #50	; 0x32
 8000fc2:	d102      	bne.n	8000fca <indeks+0x2e>
		value = 2;
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <indeks+0x78>)
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	601a      	str	r2, [r3, #0]
	}
	if(liczba == '3'){
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b33      	cmp	r3, #51	; 0x33
 8000fce:	d102      	bne.n	8000fd6 <indeks+0x3a>
		value = 3;
 8000fd0:	4b10      	ldr	r3, [pc, #64]	; (8001014 <indeks+0x78>)
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	601a      	str	r2, [r3, #0]
	}
	if(liczba == '4'){
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	2b34      	cmp	r3, #52	; 0x34
 8000fda:	d102      	bne.n	8000fe2 <indeks+0x46>
		value = 4;
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <indeks+0x78>)
 8000fde:	2204      	movs	r2, #4
 8000fe0:	601a      	str	r2, [r3, #0]
	}
	if(liczba == '5'){
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	2b35      	cmp	r3, #53	; 0x35
 8000fe6:	d102      	bne.n	8000fee <indeks+0x52>
		value = 5;
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <indeks+0x78>)
 8000fea:	2205      	movs	r2, #5
 8000fec:	601a      	str	r2, [r3, #0]
	}
	if(liczba == '6'){
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2b36      	cmp	r3, #54	; 0x36
 8000ff2:	d102      	bne.n	8000ffa <indeks+0x5e>
		value = 6;
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <indeks+0x78>)
 8000ff6:	2206      	movs	r2, #6
 8000ff8:	601a      	str	r2, [r3, #0]
	}
	if(liczba == '7'){
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2b37      	cmp	r3, #55	; 0x37
 8000ffe:	d102      	bne.n	8001006 <indeks+0x6a>
		value = 7;
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <indeks+0x78>)
 8001002:	2207      	movs	r2, #7
 8001004:	601a      	str	r2, [r3, #0]
	}
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	2000000c 	.word	0x2000000c

08001018 <menu>:

void menu()
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	printf("Manipulator MTS\n\r");
 800101c:	4821      	ldr	r0, [pc, #132]	; (80010a4 <menu+0x8c>)
 800101e:	f006 f921 	bl	8007264 <iprintf>
	HAL_Delay(10);
 8001022:	200a      	movs	r0, #10
 8001024:	f001 f87c 	bl	8002120 <HAL_Delay>
	printf("q1 %d\n\r", Pos.q1);
 8001028:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <menu+0x90>)
 800102a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102e:	4619      	mov	r1, r3
 8001030:	481e      	ldr	r0, [pc, #120]	; (80010ac <menu+0x94>)
 8001032:	f006 f917 	bl	8007264 <iprintf>
	HAL_Delay(10);
 8001036:	200a      	movs	r0, #10
 8001038:	f001 f872 	bl	8002120 <HAL_Delay>
	printf("q2 %d\n\r", Pos.q2);
 800103c:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <menu+0x90>)
 800103e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001042:	4619      	mov	r1, r3
 8001044:	481a      	ldr	r0, [pc, #104]	; (80010b0 <menu+0x98>)
 8001046:	f006 f90d 	bl	8007264 <iprintf>
	HAL_Delay(10);
 800104a:	200a      	movs	r0, #10
 800104c:	f001 f868 	bl	8002120 <HAL_Delay>
	printf("q3 %d\n\r", Pos.q3);
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <menu+0x90>)
 8001052:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001056:	4619      	mov	r1, r3
 8001058:	4816      	ldr	r0, [pc, #88]	; (80010b4 <menu+0x9c>)
 800105a:	f006 f903 	bl	8007264 <iprintf>
	HAL_Delay(10);
 800105e:	200a      	movs	r0, #10
 8001060:	f001 f85e 	bl	8002120 <HAL_Delay>
	printf("X %d\n\r", Pos.x);
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <menu+0x90>)
 8001066:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800106a:	4619      	mov	r1, r3
 800106c:	4812      	ldr	r0, [pc, #72]	; (80010b8 <menu+0xa0>)
 800106e:	f006 f8f9 	bl	8007264 <iprintf>
	HAL_Delay(10);
 8001072:	200a      	movs	r0, #10
 8001074:	f001 f854 	bl	8002120 <HAL_Delay>
	printf("Y %d\n\r", Pos.y);
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <menu+0x90>)
 800107a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800107e:	4619      	mov	r1, r3
 8001080:	480e      	ldr	r0, [pc, #56]	; (80010bc <menu+0xa4>)
 8001082:	f006 f8ef 	bl	8007264 <iprintf>
	HAL_Delay(10);
 8001086:	200a      	movs	r0, #10
 8001088:	f001 f84a 	bl	8002120 <HAL_Delay>
	printf("Z %d\n\r", Pos.z);
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <menu+0x90>)
 800108e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001092:	4619      	mov	r1, r3
 8001094:	480a      	ldr	r0, [pc, #40]	; (80010c0 <menu+0xa8>)
 8001096:	f006 f8e5 	bl	8007264 <iprintf>
	HAL_Delay(10);
 800109a:	200a      	movs	r0, #10
 800109c:	f001 f840 	bl	8002120 <HAL_Delay>
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	08009408 	.word	0x08009408
 80010a8:	20000228 	.word	0x20000228
 80010ac:	0800941c 	.word	0x0800941c
 80010b0:	08009424 	.word	0x08009424
 80010b4:	0800942c 	.word	0x0800942c
 80010b8:	08009434 	.word	0x08009434
 80010bc:	0800943c 	.word	0x0800943c
 80010c0:	08009444 	.word	0x08009444

080010c4 <motorB_Direction>:
		HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_SET);
	}
}

void motorB_Direction(MotorDirection dir){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
	if(dir == CW){
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d10b      	bne.n	80010ec <motorB_Direction+0x28>
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010da:	480e      	ldr	r0, [pc, #56]	; (8001114 <motorB_Direction+0x50>)
 80010dc:	f001 fb7e 	bl	80027dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e6:	480b      	ldr	r0, [pc, #44]	; (8001114 <motorB_Direction+0x50>)
 80010e8:	f001 fb78 	bl	80027dc <HAL_GPIO_WritePin>
	}

	if(dir == CCW){
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10b      	bne.n	800110a <motorB_Direction+0x46>
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010f8:	4806      	ldr	r0, [pc, #24]	; (8001114 <motorB_Direction+0x50>)
 80010fa:	f001 fb6f 	bl	80027dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_SET);
 80010fe:	2201      	movs	r2, #1
 8001100:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001104:	4803      	ldr	r0, [pc, #12]	; (8001114 <motorB_Direction+0x50>)
 8001106:	f001 fb69 	bl	80027dc <HAL_GPIO_WritePin>
	}
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	48001000 	.word	0x48001000

08001118 <motorB_move>:
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, abs(pwm));
}

void motorB_move(int32_t pwm){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	if(pwm > 100){
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b64      	cmp	r3, #100	; 0x64
 8001124:	dd02      	ble.n	800112c <motorB_move+0x14>
		pwm = 100;
 8001126:	2364      	movs	r3, #100	; 0x64
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	e006      	b.n	800113a <motorB_move+0x22>
	}
	else if(pwm < -100){
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8001132:	da02      	bge.n	800113a <motorB_move+0x22>
		pwm = -100;
 8001134:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001138:	607b      	str	r3, [r7, #4]
	}

	if(pwm >= 0){
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	db03      	blt.n	8001148 <motorB_move+0x30>
		motorB_Direction(CW);
 8001140:	2001      	movs	r0, #1
 8001142:	f7ff ffbf 	bl	80010c4 <motorB_Direction>
 8001146:	e002      	b.n	800114e <motorB_move+0x36>
	}else{
		motorB_Direction(CCW);
 8001148:	2000      	movs	r0, #0
 800114a:	f7ff ffbb 	bl	80010c4 <motorB_Direction>
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, abs(pwm));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001154:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <motorB_move+0x50>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000254 	.word	0x20000254

0800116c <motorB_stopMotor>:
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
	HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_RESET);
}

void motorB_stopMotor(){
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <motorB_stopMotor+0x28>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2200      	movs	r2, #0
 8001176:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800117e:	4806      	ldr	r0, [pc, #24]	; (8001198 <motorB_stopMotor+0x2c>)
 8001180:	f001 fb2c 	bl	80027dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800118a:	4803      	ldr	r0, [pc, #12]	; (8001198 <motorB_stopMotor+0x2c>)
 800118c:	f001 fb26 	bl	80027dc <HAL_GPIO_WritePin>
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000254 	.word	0x20000254
 8001198:	48001000 	.word	0x48001000

0800119c <servo_moveAngel>:

// 45 = 450
// step ((1000*(PWM_MAX - PWM_MIN) / (MAX_ANGEL - MIN_ANGEL));
void servo_moveAngel(uint16_t angel, MotorDirection dir){
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	460a      	mov	r2, r1
 80011a6:	80fb      	strh	r3, [r7, #6]
 80011a8:	4613      	mov	r3, r2
 80011aa:	717b      	strb	r3, [r7, #5]
	uint16_t pwm;
	if(angel > MAX_ANGEL){
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	2bb4      	cmp	r3, #180	; 0xb4
 80011b0:	d901      	bls.n	80011b6 <servo_moveAngel+0x1a>
		angel = MAX_ANGEL;
 80011b2:	23b4      	movs	r3, #180	; 0xb4
 80011b4:	80fb      	strh	r3, [r7, #6]
	}
	else if(angel < MIN_ANGEL){
		angel = MIN_ANGEL;
	}

	if(dir == CW){
 80011b6:	797b      	ldrb	r3, [r7, #5]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d110      	bne.n	80011de <servo_moveAngel+0x42>
		pwm = PWM_MIN + (angel*(PWM_MAX - PWM_MIN)/MAX_ANGEL); // excel mowi ze wylicza dobrze
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80011c2:	fb02 f303 	mul.w	r3, r2, r3
 80011c6:	4a14      	ldr	r2, [pc, #80]	; (8001218 <servo_moveAngel+0x7c>)
 80011c8:	fb82 1203 	smull	r1, r2, r2, r3
 80011cc:	441a      	add	r2, r3
 80011ce:	11d2      	asrs	r2, r2, #7
 80011d0:	17db      	asrs	r3, r3, #31
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80011da:	81fb      	strh	r3, [r7, #14]
 80011dc:	e00f      	b.n	80011fe <servo_moveAngel+0x62>
		// pwm = PWM_MIN + ((angel - MIN_ANGEL) * step) / 1000;
	}
	else{
		pwm = PWM_MAX - (angel*(PWM_MAX - PWM_MIN)/MAX_ANGEL);
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80011e4:	fb02 f303 	mul.w	r3, r2, r3
 80011e8:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <servo_moveAngel+0x7c>)
 80011ea:	fb82 1203 	smull	r1, r2, r2, r3
 80011ee:	441a      	add	r2, r3
 80011f0:	11d2      	asrs	r2, r2, #7
 80011f2:	17db      	asrs	r3, r3, #31
 80011f4:	1a9b      	subs	r3, r3, r2
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 80011fc:	81fb      	strh	r3, [r7, #14]
	}

	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, pwm + 50);
 80011fe:	89fb      	ldrh	r3, [r7, #14]
 8001200:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <servo_moveAngel+0x80>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	635a      	str	r2, [r3, #52]	; 0x34
}
 800120a:	bf00      	nop
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	b60b60b7 	.word	0xb60b60b7
 800121c:	20000384 	.word	0x20000384

08001220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001226:	f000 feff 	bl	8002028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800122a:	f000 f8bb 	bl	80013a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800122e:	f7ff fe3d 	bl	8000eac <MX_GPIO_Init>
  MX_TIM1_Init();
 8001232:	f000 faf1 	bl	8001818 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001236:	f000 fb89 	bl	800194c <MX_TIM2_Init>
  MX_TIM15_Init();
 800123a:	f000 fc69 	bl	8001b10 <MX_TIM15_Init>
  MX_TIM4_Init();
 800123e:	f000 fbd9 	bl	80019f4 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001242:	f000 fc2d 	bl	8001aa0 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8001246:	f000 fe2f 	bl	8001ea8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &znak, 1);
 800124a:	2201      	movs	r2, #1
 800124c:	4944      	ldr	r1, [pc, #272]	; (8001360 <main+0x140>)
 800124e:	4845      	ldr	r0, [pc, #276]	; (8001364 <main+0x144>)
 8001250:	f004 f8d4 	bl	80053fc <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1); //servo   		q3
 8001254:	2100      	movs	r1, #0
 8001256:	4844      	ldr	r0, [pc, #272]	; (8001368 <main+0x148>)
 8001258:	f002 fe94 	bl	8003f84 <HAL_TIM_PWM_Start>
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // silnik 1 	q1
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // silnik 2		q2
 800125c:	210c      	movs	r1, #12
 800125e:	4843      	ldr	r0, [pc, #268]	; (800136c <main+0x14c>)
 8001260:	f002 fe90 	bl	8003f84 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000); // serwo pozycja startowa
 8001264:	4b40      	ldr	r3, [pc, #256]	; (8001368 <main+0x148>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800126c:	635a      	str	r2, [r3, #52]	; 0x34
  //pid_init(pid1, kp, ki, kd); / silnik 1
  pid_init(pid2, kp, ki, kd);
 800126e:	4b40      	ldr	r3, [pc, #256]	; (8001370 <main+0x150>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a40      	ldr	r2, [pc, #256]	; (8001374 <main+0x154>)
 8001274:	edd2 7a00 	vldr	s15, [r2]
 8001278:	4a3f      	ldr	r2, [pc, #252]	; (8001378 <main+0x158>)
 800127a:	ed92 7a00 	vldr	s14, [r2]
 800127e:	4a3f      	ldr	r2, [pc, #252]	; (800137c <main+0x15c>)
 8001280:	edd2 6a00 	vldr	s13, [r2]
 8001284:	eeb0 1a66 	vmov.f32	s2, s13
 8001288:	eef0 0a47 	vmov.f32	s1, s14
 800128c:	eeb0 0a67 	vmov.f32	s0, s15
 8001290:	4618      	mov	r0, r3
 8001292:	f000 f962 	bl	800155a <pid_init>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //silnik 2
 8001296:	213c      	movs	r1, #60	; 0x3c
 8001298:	4839      	ldr	r0, [pc, #228]	; (8001380 <main+0x160>)
 800129a:	f003 f81f 	bl	80042dc <HAL_TIM_Encoder_Start>
  motorB_stopMotor();*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  menu();
 800129e:	f7ff febb 	bl	8001018 <menu>
  while (1)
  {
	  if(moveFlag == 1){
 80012a2:	4b38      	ldr	r3, [pc, #224]	; (8001384 <main+0x164>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d1fb      	bne.n	80012a2 <main+0x82>
		  if(moveq == 1){
 80012aa:	4b37      	ldr	r3, [pc, #220]	; (8001388 <main+0x168>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d152      	bne.n	8001358 <main+0x138>
			  if(moveq2 == 1 && move == 1){
 80012b2:	4b36      	ldr	r3, [pc, #216]	; (800138c <main+0x16c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d137      	bne.n	800132a <main+0x10a>
 80012ba:	4b35      	ldr	r3, [pc, #212]	; (8001390 <main+0x170>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d133      	bne.n	800132a <main+0x10a>
				  for(int i=0; i<15; i++){
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	e028      	b.n	800131a <main+0xfa>
					  if(pwm_tab[value]>0)
 80012c8:	4b32      	ldr	r3, [pc, #200]	; (8001394 <main+0x174>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a32      	ldr	r2, [pc, #200]	; (8001398 <main+0x178>)
 80012ce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	dd03      	ble.n	80012de <main+0xbe>
						  motorB_Direction(CW);
 80012d6:	2001      	movs	r0, #1
 80012d8:	f7ff fef4 	bl	80010c4 <motorB_Direction>
 80012dc:	e002      	b.n	80012e4 <main+0xc4>
					  else{
						  motorB_Direction(CCW);
 80012de:	2000      	movs	r0, #0
 80012e0:	f7ff fef0 	bl	80010c4 <motorB_Direction>
					  }
					  HAL_Delay(250);
 80012e4:	20fa      	movs	r0, #250	; 0xfa
 80012e6:	f000 ff1b 	bl	8002120 <HAL_Delay>
					  motorB_move(abs(pwm_tab[value]));
 80012ea:	4b2a      	ldr	r3, [pc, #168]	; (8001394 <main+0x174>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a2a      	ldr	r2, [pc, #168]	; (8001398 <main+0x178>)
 80012f0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	bfb8      	it	lt
 80012f8:	425b      	neglt	r3, r3
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff0b 	bl	8001118 <motorB_move>
					  moveq2 = 0;
 8001302:	4b22      	ldr	r3, [pc, #136]	; (800138c <main+0x16c>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
					  moveq = 0;
 8001308:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <main+0x168>)
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
					  move = 0;
 800130e:	4b20      	ldr	r3, [pc, #128]	; (8001390 <main+0x170>)
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
				  for(int i=0; i<15; i++){
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3301      	adds	r3, #1
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b0e      	cmp	r3, #14
 800131e:	ddd3      	ble.n	80012c8 <main+0xa8>
				  }
				  HAL_Delay(200);
 8001320:	20c8      	movs	r0, #200	; 0xc8
 8001322:	f000 fefd 	bl	8002120 <HAL_Delay>
				  motorB_stopMotor();
 8001326:	f7ff ff21 	bl	800116c <motorB_stopMotor>
			  }
			  if(moveq3 == 1 && move == 1){
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <main+0x17c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d112      	bne.n	8001358 <main+0x138>
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <main+0x170>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d10e      	bne.n	8001358 <main+0x138>
					 servo_moveAngel(katy[value], CW);
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <main+0x174>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a18      	ldr	r2, [pc, #96]	; (80013a0 <main+0x180>)
 8001340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001344:	2101      	movs	r1, #1
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff28 	bl	800119c <servo_moveAngel>
					 moveq3 = 0;
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <main+0x17c>)
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
					 move = 0;
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <main+0x170>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
			  }
		  }
		  moveFlag = 0;
 8001358:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <main+0x164>)
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
	  if(moveFlag == 1){
 800135e:	e7a0      	b.n	80012a2 <main+0x82>
 8001360:	20000234 	.word	0x20000234
 8001364:	200003d0 	.word	0x200003d0
 8001368:	20000384 	.word	0x20000384
 800136c:	20000254 	.word	0x20000254
 8001370:	20000224 	.word	0x20000224
 8001374:	20000000 	.word	0x20000000
 8001378:	20000004 	.word	0x20000004
 800137c:	20000008 	.word	0x20000008
 8001380:	200002a0 	.word	0x200002a0
 8001384:	20000220 	.word	0x20000220
 8001388:	20000244 	.word	0x20000244
 800138c:	2000023c 	.word	0x2000023c
 8001390:	20000248 	.word	0x20000248
 8001394:	2000000c 	.word	0x2000000c
 8001398:	20000020 	.word	0x20000020
 800139c:	20000240 	.word	0x20000240
 80013a0:	20000010 	.word	0x20000010

080013a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b096      	sub	sp, #88	; 0x58
 80013a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	2244      	movs	r2, #68	; 0x44
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f005 fae4 	bl	8006980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b8:	463b      	mov	r3, r7
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013ca:	f001 fa2d 	bl	8002828 <HAL_PWREx_ControlVoltageScaling>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013d4:	f000 f8bc 	bl	8001550 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013d8:	2310      	movs	r3, #16
 80013da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013dc:	2301      	movs	r3, #1
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013e4:	2360      	movs	r3, #96	; 0x60
 80013e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e8:	2302      	movs	r3, #2
 80013ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013ec:	2301      	movs	r3, #1
 80013ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013f0:	2301      	movs	r3, #1
 80013f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80013f4:	2328      	movs	r3, #40	; 0x28
 80013f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013f8:	2307      	movs	r3, #7
 80013fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013fc:	2302      	movs	r3, #2
 80013fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001400:	2302      	movs	r3, #2
 8001402:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4618      	mov	r0, r3
 800140a:	f001 fa63 	bl	80028d4 <HAL_RCC_OscConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001414:	f000 f89c 	bl	8001550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001418:	230f      	movs	r3, #15
 800141a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800141c:	2303      	movs	r3, #3
 800141e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800142c:	463b      	mov	r3, r7
 800142e:	2104      	movs	r1, #4
 8001430:	4618      	mov	r0, r3
 8001432:	f001 fe37 	bl	80030a4 <HAL_RCC_ClockConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800143c:	f000 f888 	bl	8001550 <Error_Handler>
  }
}
 8001440:	bf00      	nop
 8001442:	3758      	adds	r7, #88	; 0x58
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &znak, 1, 100);
 8001450:	2364      	movs	r3, #100	; 0x64
 8001452:	2201      	movs	r2, #1
 8001454:	4935      	ldr	r1, [pc, #212]	; (800152c <HAL_UART_RxCpltCallback+0xe4>)
 8001456:	4836      	ldr	r0, [pc, #216]	; (8001530 <HAL_UART_RxCpltCallback+0xe8>)
 8001458:	f003 ff3c 	bl	80052d4 <HAL_UART_Transmit>
	itx++;
 800145c:	4b35      	ldr	r3, [pc, #212]	; (8001534 <HAL_UART_RxCpltCallback+0xec>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3301      	adds	r3, #1
 8001462:	4a34      	ldr	r2, [pc, #208]	; (8001534 <HAL_UART_RxCpltCallback+0xec>)
 8001464:	6013      	str	r3, [r2, #0]
	if(znak == 'm'){
 8001466:	4b31      	ldr	r3, [pc, #196]	; (800152c <HAL_UART_RxCpltCallback+0xe4>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b6d      	cmp	r3, #109	; 0x6d
 800146c:	d102      	bne.n	8001474 <HAL_UART_RxCpltCallback+0x2c>
		moveFlag = 1;
 800146e:	4b32      	ldr	r3, [pc, #200]	; (8001538 <HAL_UART_RxCpltCallback+0xf0>)
 8001470:	2201      	movs	r2, #1
 8001472:	601a      	str	r2, [r3, #0]
	}
	if(znak == 'q'){
 8001474:	4b2d      	ldr	r3, [pc, #180]	; (800152c <HAL_UART_RxCpltCallback+0xe4>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b71      	cmp	r3, #113	; 0x71
 800147a:	d102      	bne.n	8001482 <HAL_UART_RxCpltCallback+0x3a>
		moveq = 1;
 800147c:	4b2f      	ldr	r3, [pc, #188]	; (800153c <HAL_UART_RxCpltCallback+0xf4>)
 800147e:	2201      	movs	r2, #1
 8001480:	601a      	str	r2, [r3, #0]
	}
	if(znak == 'a'){
 8001482:	4b2a      	ldr	r3, [pc, #168]	; (800152c <HAL_UART_RxCpltCallback+0xe4>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b61      	cmp	r3, #97	; 0x61
 8001488:	d102      	bne.n	8001490 <HAL_UART_RxCpltCallback+0x48>
		moveq1 = 1;
 800148a:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <HAL_UART_RxCpltCallback+0xf8>)
 800148c:	2201      	movs	r2, #1
 800148e:	601a      	str	r2, [r3, #0]
	}
	if(znak == 'b'){
 8001490:	4b26      	ldr	r3, [pc, #152]	; (800152c <HAL_UART_RxCpltCallback+0xe4>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b62      	cmp	r3, #98	; 0x62
 8001496:	d102      	bne.n	800149e <HAL_UART_RxCpltCallback+0x56>
		moveq2 = 1;
 8001498:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <HAL_UART_RxCpltCallback+0xfc>)
 800149a:	2201      	movs	r2, #1
 800149c:	601a      	str	r2, [r3, #0]
	}
	if(znak == 'c'){
 800149e:	4b23      	ldr	r3, [pc, #140]	; (800152c <HAL_UART_RxCpltCallback+0xe4>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b63      	cmp	r3, #99	; 0x63
 80014a4:	d102      	bne.n	80014ac <HAL_UART_RxCpltCallback+0x64>
		moveq3 = 1;
 80014a6:	4b28      	ldr	r3, [pc, #160]	; (8001548 <HAL_UART_RxCpltCallback+0x100>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	601a      	str	r2, [r3, #0]
	}

	if(moveFlag == 1 && moveq == 1 && moveq2 == 1 && itx == 4){
 80014ac:	4b22      	ldr	r3, [pc, #136]	; (8001538 <HAL_UART_RxCpltCallback+0xf0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d116      	bne.n	80014e2 <HAL_UART_RxCpltCallback+0x9a>
 80014b4:	4b21      	ldr	r3, [pc, #132]	; (800153c <HAL_UART_RxCpltCallback+0xf4>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d112      	bne.n	80014e2 <HAL_UART_RxCpltCallback+0x9a>
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_UART_RxCpltCallback+0xfc>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d10e      	bne.n	80014e2 <HAL_UART_RxCpltCallback+0x9a>
 80014c4:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <HAL_UART_RxCpltCallback+0xec>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d10a      	bne.n	80014e2 <HAL_UART_RxCpltCallback+0x9a>
		indeks(znak);
 80014cc:	4b17      	ldr	r3, [pc, #92]	; (800152c <HAL_UART_RxCpltCallback+0xe4>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fd63 	bl	8000f9c <indeks>
		move = 1;
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <HAL_UART_RxCpltCallback+0x104>)
 80014d8:	2201      	movs	r2, #1
 80014da:	601a      	str	r2, [r3, #0]
		itx = 0;
 80014dc:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_UART_RxCpltCallback+0xec>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
	}
	if(moveFlag == 1 && moveq == 1 && moveq3 == 1 && itx == 4){
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <HAL_UART_RxCpltCallback+0xf0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d116      	bne.n	8001518 <HAL_UART_RxCpltCallback+0xd0>
 80014ea:	4b14      	ldr	r3, [pc, #80]	; (800153c <HAL_UART_RxCpltCallback+0xf4>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d112      	bne.n	8001518 <HAL_UART_RxCpltCallback+0xd0>
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <HAL_UART_RxCpltCallback+0x100>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d10e      	bne.n	8001518 <HAL_UART_RxCpltCallback+0xd0>
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_UART_RxCpltCallback+0xec>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b04      	cmp	r3, #4
 8001500:	d10a      	bne.n	8001518 <HAL_UART_RxCpltCallback+0xd0>
		indeks(znak);
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <HAL_UART_RxCpltCallback+0xe4>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fd48 	bl	8000f9c <indeks>
		move = 1;
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <HAL_UART_RxCpltCallback+0x104>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]
		itx = 0;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_UART_RxCpltCallback+0xec>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]

	if(data[0] == 'c'){
		moveCoordinates = 1;
	}
*/
	HAL_UART_Receive_IT(&huart2, &znak, 1);
 8001518:	2201      	movs	r2, #1
 800151a:	4904      	ldr	r1, [pc, #16]	; (800152c <HAL_UART_RxCpltCallback+0xe4>)
 800151c:	4804      	ldr	r0, [pc, #16]	; (8001530 <HAL_UART_RxCpltCallback+0xe8>)
 800151e:	f003 ff6d 	bl	80053fc <HAL_UART_Receive_IT>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000234 	.word	0x20000234
 8001530:	200003d0 	.word	0x200003d0
 8001534:	2000024c 	.word	0x2000024c
 8001538:	20000220 	.word	0x20000220
 800153c:	20000244 	.word	0x20000244
 8001540:	20000238 	.word	0x20000238
 8001544:	2000023c 	.word	0x2000023c
 8001548:	20000240 	.word	0x20000240
 800154c:	20000248 	.word	0x20000248

08001550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001554:	b672      	cpsid	i
}
 8001556:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001558:	e7fe      	b.n	8001558 <Error_Handler+0x8>

0800155a <pid_init>:
#include "pid.h"

#define ERR_TOTAL_MAX 255

void pid_init(PidStruct *pid, float kp, float ki, float kd)
{
 800155a:	b480      	push	{r7}
 800155c:	b085      	sub	sp, #20
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	ed87 0a02 	vstr	s0, [r7, #8]
 8001566:	edc7 0a01 	vstr	s1, [r7, #4]
 800156a:	ed87 1a00 	vstr	s2, [r7]
	pid->previous_error = 0;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
	pid->total_error = 0;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]

	pid->kp = kp;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	609a      	str	r2, [r3, #8]

}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <HAL_MspInit+0x44>)
 80015a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a2:	4a0e      	ldr	r2, [pc, #56]	; (80015dc <HAL_MspInit+0x44>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6613      	str	r3, [r2, #96]	; 0x60
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <HAL_MspInit+0x44>)
 80015ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_MspInit+0x44>)
 80015b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ba:	4a08      	ldr	r2, [pc, #32]	; (80015dc <HAL_MspInit+0x44>)
 80015bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c0:	6593      	str	r3, [r2, #88]	; 0x58
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_MspInit+0x44>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	603b      	str	r3, [r7, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <NMI_Handler+0x4>

080015e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <MemManage_Handler+0x4>

080015f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <BusFault_Handler+0x4>

080015f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <UsageFault_Handler+0x4>

080015fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800162c:	f000 fd58 	bl	80020e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001638:	4803      	ldr	r0, [pc, #12]	; (8001648 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800163a:	f002 fedd 	bl	80043f8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800163e:	4803      	ldr	r0, [pc, #12]	; (800164c <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8001640:	f002 feda 	bl	80043f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000254 	.word	0x20000254
 800164c:	20000384 	.word	0x20000384

08001650 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <TIM2_IRQHandler+0x10>)
 8001656:	f002 fecf 	bl	80043f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200002a0 	.word	0x200002a0

08001664 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <TIM4_IRQHandler+0x10>)
 800166a:	f002 fec5 	bl	80043f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200002ec 	.word	0x200002ec

08001678 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <USART2_IRQHandler+0x10>)
 800167e:	f003 ff13 	bl	80054a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200003d0 	.word	0x200003d0

0800168c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <TIM6_DAC_IRQHandler+0x10>)
 8001692:	f002 feb1 	bl	80043f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000338 	.word	0x20000338

080016a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
	return 1;
 80016a4:	2301      	movs	r3, #1
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <_kill>:

int _kill(int pid, int sig)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016ba:	f005 f937 	bl	800692c <__errno>
 80016be:	4603      	mov	r3, r0
 80016c0:	2216      	movs	r2, #22
 80016c2:	601a      	str	r2, [r3, #0]
	return -1;
 80016c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <_exit>:

void _exit (int status)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016d8:	f04f 31ff 	mov.w	r1, #4294967295
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ffe7 	bl	80016b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016e2:	e7fe      	b.n	80016e2 <_exit+0x12>

080016e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	e00a      	b.n	800170c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016f6:	f3af 8000 	nop.w
 80016fa:	4601      	mov	r1, r0
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	60ba      	str	r2, [r7, #8]
 8001702:	b2ca      	uxtb	r2, r1
 8001704:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	429a      	cmp	r2, r3
 8001712:	dbf0      	blt.n	80016f6 <_read+0x12>
	}

return len;
 8001714:	687b      	ldr	r3, [r7, #4]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <_close>:
	}
	return len;
}

int _close(int file)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
	return -1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001746:	605a      	str	r2, [r3, #4]
	return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_isatty>:

int _isatty(int file)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
	return 1;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
	return 0;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001790:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <_sbrk+0x5c>)
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <_sbrk+0x60>)
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <_sbrk+0x64>)
 80017a6:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <_sbrk+0x68>)
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d207      	bcs.n	80017c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b8:	f005 f8b8 	bl	800692c <__errno>
 80017bc:	4603      	mov	r3, r0
 80017be:	220c      	movs	r2, #12
 80017c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
 80017c6:	e009      	b.n	80017dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <_sbrk+0x64>)
 80017d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20018000 	.word	0x20018000
 80017e8:	00000400 	.word	0x00000400
 80017ec:	20000250 	.word	0x20000250
 80017f0:	20000468 	.word	0x20000468

080017f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <SystemInit+0x20>)
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fe:	4a05      	ldr	r2, [pc, #20]	; (8001814 <SystemInit+0x20>)
 8001800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b096      	sub	sp, #88	; 0x58
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800182a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	611a      	str	r2, [r3, #16]
 800183a:	615a      	str	r2, [r3, #20]
 800183c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	222c      	movs	r2, #44	; 0x2c
 8001842:	2100      	movs	r1, #0
 8001844:	4618      	mov	r0, r3
 8001846:	f005 f89b 	bl	8006980 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800184a:	4b3e      	ldr	r3, [pc, #248]	; (8001944 <MX_TIM1_Init+0x12c>)
 800184c:	4a3e      	ldr	r2, [pc, #248]	; (8001948 <MX_TIM1_Init+0x130>)
 800184e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 39;
 8001850:	4b3c      	ldr	r3, [pc, #240]	; (8001944 <MX_TIM1_Init+0x12c>)
 8001852:	2227      	movs	r2, #39	; 0x27
 8001854:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001856:	4b3b      	ldr	r3, [pc, #236]	; (8001944 <MX_TIM1_Init+0x12c>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800185c:	4b39      	ldr	r3, [pc, #228]	; (8001944 <MX_TIM1_Init+0x12c>)
 800185e:	2263      	movs	r2, #99	; 0x63
 8001860:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001862:	4b38      	ldr	r3, [pc, #224]	; (8001944 <MX_TIM1_Init+0x12c>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001868:	4b36      	ldr	r3, [pc, #216]	; (8001944 <MX_TIM1_Init+0x12c>)
 800186a:	2200      	movs	r2, #0
 800186c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186e:	4b35      	ldr	r3, [pc, #212]	; (8001944 <MX_TIM1_Init+0x12c>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001874:	4833      	ldr	r0, [pc, #204]	; (8001944 <MX_TIM1_Init+0x12c>)
 8001876:	f002 fb2e 	bl	8003ed6 <HAL_TIM_PWM_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001880:	f7ff fe66 	bl	8001550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001884:	2300      	movs	r3, #0
 8001886:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001890:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001894:	4619      	mov	r1, r3
 8001896:	482b      	ldr	r0, [pc, #172]	; (8001944 <MX_TIM1_Init+0x12c>)
 8001898:	f003 fbaa 	bl	8004ff0 <HAL_TIMEx_MasterConfigSynchronization>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80018a2:	f7ff fe55 	bl	8001550 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a6:	2360      	movs	r3, #96	; 0x60
 80018a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ae:	2300      	movs	r3, #0
 80018b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018b2:	2300      	movs	r3, #0
 80018b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018c6:	2204      	movs	r2, #4
 80018c8:	4619      	mov	r1, r3
 80018ca:	481e      	ldr	r0, [pc, #120]	; (8001944 <MX_TIM1_Init+0x12c>)
 80018cc:	f002 feb4 	bl	8004638 <HAL_TIM_PWM_ConfigChannel>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80018d6:	f7ff fe3b 	bl	8001550 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018de:	220c      	movs	r2, #12
 80018e0:	4619      	mov	r1, r3
 80018e2:	4818      	ldr	r0, [pc, #96]	; (8001944 <MX_TIM1_Init+0x12c>)
 80018e4:	f002 fea8 	bl	8004638 <HAL_TIM_PWM_ConfigChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 80018ee:	f7ff fe2f 	bl	8001550 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001906:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800190a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001914:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	4619      	mov	r1, r3
 8001926:	4807      	ldr	r0, [pc, #28]	; (8001944 <MX_TIM1_Init+0x12c>)
 8001928:	f003 fbea 	bl	8005100 <HAL_TIMEx_ConfigBreakDeadTime>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8001932:	f7ff fe0d 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001936:	4803      	ldr	r0, [pc, #12]	; (8001944 <MX_TIM1_Init+0x12c>)
 8001938:	f000 fa58 	bl	8001dec <HAL_TIM_MspPostInit>

}
 800193c:	bf00      	nop
 800193e:	3758      	adds	r7, #88	; 0x58
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000254 	.word	0x20000254
 8001948:	40012c00 	.word	0x40012c00

0800194c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08c      	sub	sp, #48	; 0x30
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001952:	f107 030c 	add.w	r3, r7, #12
 8001956:	2224      	movs	r2, #36	; 0x24
 8001958:	2100      	movs	r1, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f005 f810 	bl	8006980 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001960:	463b      	mov	r3, r7
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800196a:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <MX_TIM2_Init+0xa4>)
 800196c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001970:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001972:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <MX_TIM2_Init+0xa4>)
 8001974:	2200      	movs	r2, #0
 8001976:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001978:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <MX_TIM2_Init+0xa4>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800197e:	4b1c      	ldr	r3, [pc, #112]	; (80019f0 <MX_TIM2_Init+0xa4>)
 8001980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001984:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001986:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <MX_TIM2_Init+0xa4>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198c:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <MX_TIM2_Init+0xa4>)
 800198e:	2200      	movs	r2, #0
 8001990:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001992:	2303      	movs	r3, #3
 8001994:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800199a:	2301      	movs	r3, #1
 800199c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800199e:	2300      	movs	r3, #0
 80019a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80019a2:	230f      	movs	r3, #15
 80019a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019a6:	2300      	movs	r3, #0
 80019a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019aa:	2301      	movs	r3, #1
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019ae:	2300      	movs	r3, #0
 80019b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80019b2:	230f      	movs	r3, #15
 80019b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80019b6:	f107 030c 	add.w	r3, r7, #12
 80019ba:	4619      	mov	r1, r3
 80019bc:	480c      	ldr	r0, [pc, #48]	; (80019f0 <MX_TIM2_Init+0xa4>)
 80019be:	f002 fbe7 	bl	8004190 <HAL_TIM_Encoder_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80019c8:	f7ff fdc2 	bl	8001550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019cc:	2300      	movs	r3, #0
 80019ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019d4:	463b      	mov	r3, r7
 80019d6:	4619      	mov	r1, r3
 80019d8:	4805      	ldr	r0, [pc, #20]	; (80019f0 <MX_TIM2_Init+0xa4>)
 80019da:	f003 fb09 	bl	8004ff0 <HAL_TIMEx_MasterConfigSynchronization>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80019e4:	f7ff fdb4 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019e8:	bf00      	nop
 80019ea:	3730      	adds	r7, #48	; 0x30
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	200002a0 	.word	0x200002a0

080019f4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08c      	sub	sp, #48	; 0x30
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019fa:	f107 030c 	add.w	r3, r7, #12
 80019fe:	2224      	movs	r2, #36	; 0x24
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f004 ffbc 	bl	8006980 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a08:	463b      	mov	r3, r7
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <MX_TIM4_Init+0xa4>)
 8001a14:	4a21      	ldr	r2, [pc, #132]	; (8001a9c <MX_TIM4_Init+0xa8>)
 8001a16:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a18:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <MX_TIM4_Init+0xa4>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <MX_TIM4_Init+0xa4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a24:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <MX_TIM4_Init+0xa4>)
 8001a26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a2a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <MX_TIM4_Init+0xa4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a32:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <MX_TIM4_Init+0xa4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a40:	2301      	movs	r3, #1
 8001a42:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001a48:	230f      	movs	r3, #15
 8001a4a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a50:	2301      	movs	r3, #1
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001a58:	230f      	movs	r3, #15
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	4619      	mov	r1, r3
 8001a62:	480d      	ldr	r0, [pc, #52]	; (8001a98 <MX_TIM4_Init+0xa4>)
 8001a64:	f002 fb94 	bl	8004190 <HAL_TIM_Encoder_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001a6e:	f7ff fd6f 	bl	8001550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4806      	ldr	r0, [pc, #24]	; (8001a98 <MX_TIM4_Init+0xa4>)
 8001a80:	f003 fab6 	bl	8004ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001a8a:	f7ff fd61 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	3730      	adds	r7, #48	; 0x30
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200002ec 	.word	0x200002ec
 8001a9c:	40000800 	.word	0x40000800

08001aa0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ab0:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <MX_TIM6_Init+0x68>)
 8001ab2:	4a16      	ldr	r2, [pc, #88]	; (8001b0c <MX_TIM6_Init+0x6c>)
 8001ab4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8001ab6:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <MX_TIM6_Init+0x68>)
 8001ab8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001abc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abe:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <MX_TIM6_Init+0x68>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001ac4:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <MX_TIM6_Init+0x68>)
 8001ac6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aca:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001acc:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <MX_TIM6_Init+0x68>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ad2:	480d      	ldr	r0, [pc, #52]	; (8001b08 <MX_TIM6_Init+0x68>)
 8001ad4:	f002 f9a8 	bl	8003e28 <HAL_TIM_Base_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001ade:	f7ff fd37 	bl	8001550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	4619      	mov	r1, r3
 8001aee:	4806      	ldr	r0, [pc, #24]	; (8001b08 <MX_TIM6_Init+0x68>)
 8001af0:	f003 fa7e 	bl	8004ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001afa:	f7ff fd29 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000338 	.word	0x20000338
 8001b0c:	40001000 	.word	0x40001000

08001b10 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b096      	sub	sp, #88	; 0x58
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]
 8001b32:	615a      	str	r2, [r3, #20]
 8001b34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	222c      	movs	r2, #44	; 0x2c
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f004 ff1f 	bl	8006980 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001b42:	4b33      	ldr	r3, [pc, #204]	; (8001c10 <MX_TIM15_Init+0x100>)
 8001b44:	4a33      	ldr	r2, [pc, #204]	; (8001c14 <MX_TIM15_Init+0x104>)
 8001b46:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 79;
 8001b48:	4b31      	ldr	r3, [pc, #196]	; (8001c10 <MX_TIM15_Init+0x100>)
 8001b4a:	224f      	movs	r2, #79	; 0x4f
 8001b4c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4e:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <MX_TIM15_Init+0x100>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8001b54:	4b2e      	ldr	r3, [pc, #184]	; (8001c10 <MX_TIM15_Init+0x100>)
 8001b56:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001b5a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5c:	4b2c      	ldr	r3, [pc, #176]	; (8001c10 <MX_TIM15_Init+0x100>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001b62:	4b2b      	ldr	r3, [pc, #172]	; (8001c10 <MX_TIM15_Init+0x100>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b68:	4b29      	ldr	r3, [pc, #164]	; (8001c10 <MX_TIM15_Init+0x100>)
 8001b6a:	2280      	movs	r2, #128	; 0x80
 8001b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001b6e:	4828      	ldr	r0, [pc, #160]	; (8001c10 <MX_TIM15_Init+0x100>)
 8001b70:	f002 f9b1 	bl	8003ed6 <HAL_TIM_PWM_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001b7a:	f7ff fce9 	bl	8001550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001b86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4820      	ldr	r0, [pc, #128]	; (8001c10 <MX_TIM15_Init+0x100>)
 8001b8e:	f003 fa2f 	bl	8004ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001b98:	f7ff fcda 	bl	8001550 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b9c:	2360      	movs	r3, #96	; 0x60
 8001b9e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4813      	ldr	r0, [pc, #76]	; (8001c10 <MX_TIM15_Init+0x100>)
 8001bc2:	f002 fd39 	bl	8004638 <HAL_TIM_PWM_ConfigChannel>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001bcc:	f7ff fcc0 	bl	8001550 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001be4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001be8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4807      	ldr	r0, [pc, #28]	; (8001c10 <MX_TIM15_Init+0x100>)
 8001bf4:	f003 fa84 	bl	8005100 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8001bfe:	f7ff fca7 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001c02:	4803      	ldr	r0, [pc, #12]	; (8001c10 <MX_TIM15_Init+0x100>)
 8001c04:	f000 f8f2 	bl	8001dec <HAL_TIM_MspPostInit>

}
 8001c08:	bf00      	nop
 8001c0a:	3758      	adds	r7, #88	; 0x58
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000384 	.word	0x20000384
 8001c14:	40014000 	.word	0x40014000

08001c18 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a1a      	ldr	r2, [pc, #104]	; (8001c90 <HAL_TIM_PWM_MspInit+0x78>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d114      	bne.n	8001c54 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <HAL_TIM_PWM_MspInit+0x7c>)
 8001c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2e:	4a19      	ldr	r2, [pc, #100]	; (8001c94 <HAL_TIM_PWM_MspInit+0x7c>)
 8001c30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c34:	6613      	str	r3, [r2, #96]	; 0x60
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <HAL_TIM_PWM_MspInit+0x7c>)
 8001c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2100      	movs	r1, #0
 8001c46:	2018      	movs	r0, #24
 8001c48:	f000 fb69 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001c4c:	2018      	movs	r0, #24
 8001c4e:	f000 fb82 	bl	8002356 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8001c52:	e018      	b.n	8001c86 <HAL_TIM_PWM_MspInit+0x6e>
  else if(tim_pwmHandle->Instance==TIM15)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0f      	ldr	r2, [pc, #60]	; (8001c98 <HAL_TIM_PWM_MspInit+0x80>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d113      	bne.n	8001c86 <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <HAL_TIM_PWM_MspInit+0x7c>)
 8001c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c62:	4a0c      	ldr	r2, [pc, #48]	; (8001c94 <HAL_TIM_PWM_MspInit+0x7c>)
 8001c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c68:	6613      	str	r3, [r2, #96]	; 0x60
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_TIM_PWM_MspInit+0x7c>)
 8001c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2100      	movs	r1, #0
 8001c7a:	2018      	movs	r0, #24
 8001c7c:	f000 fb4f 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001c80:	2018      	movs	r0, #24
 8001c82:	f000 fb68 	bl	8002356 <HAL_NVIC_EnableIRQ>
}
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40012c00 	.word	0x40012c00
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40014000 	.word	0x40014000

08001c9c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08c      	sub	sp, #48	; 0x30
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cbc:	d131      	bne.n	8001d22 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cbe:	4b35      	ldr	r3, [pc, #212]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc2:	4a34      	ldr	r2, [pc, #208]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6593      	str	r3, [r2, #88]	; 0x58
 8001cca:	4b32      	ldr	r3, [pc, #200]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	61bb      	str	r3, [r7, #24]
 8001cd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd6:	4b2f      	ldr	r3, [pc, #188]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cda:	4a2e      	ldr	r2, [pc, #184]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce2:	4b2c      	ldr	r3, [pc, #176]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC2_A2_Pin|ENC2_B2_Pin;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	4619      	mov	r1, r3
 8001d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d0c:	f000 fbbc 	bl	8002488 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d10:	2200      	movs	r2, #0
 8001d12:	2100      	movs	r1, #0
 8001d14:	201c      	movs	r0, #28
 8001d16:	f000 fb02 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d1a:	201c      	movs	r0, #28
 8001d1c:	f000 fb1b 	bl	8002356 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001d20:	e034      	b.n	8001d8c <HAL_TIM_Encoder_MspInit+0xf0>
  else if(tim_encoderHandle->Instance==TIM4)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a1c      	ldr	r2, [pc, #112]	; (8001d98 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d12f      	bne.n	8001d8c <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d2c:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a18      	ldr	r2, [pc, #96]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001d32:	f043 0304 	orr.w	r3, r3, #4
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
 8001d38:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d44:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d48:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001d4a:	f043 0302 	orr.w	r3, r3, #2
 8001d4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d50:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC1_B1_Pin|ENC1_A1_Pin;
 8001d5c:	23c0      	movs	r3, #192	; 0xc0
 8001d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d60:	2302      	movs	r3, #2
 8001d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d70:	f107 031c 	add.w	r3, r7, #28
 8001d74:	4619      	mov	r1, r3
 8001d76:	4809      	ldr	r0, [pc, #36]	; (8001d9c <HAL_TIM_Encoder_MspInit+0x100>)
 8001d78:	f000 fb86 	bl	8002488 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2100      	movs	r1, #0
 8001d80:	201e      	movs	r0, #30
 8001d82:	f000 facc 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d86:	201e      	movs	r0, #30
 8001d88:	f000 fae5 	bl	8002356 <HAL_NVIC_EnableIRQ>
}
 8001d8c:	bf00      	nop
 8001d8e:	3730      	adds	r7, #48	; 0x30
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40000800 	.word	0x40000800
 8001d9c:	48000400 	.word	0x48000400

08001da0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a0d      	ldr	r2, [pc, #52]	; (8001de4 <HAL_TIM_Base_MspInit+0x44>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d113      	bne.n	8001dda <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001db2:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <HAL_TIM_Base_MspInit+0x48>)
 8001db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db6:	4a0c      	ldr	r2, [pc, #48]	; (8001de8 <HAL_TIM_Base_MspInit+0x48>)
 8001db8:	f043 0310 	orr.w	r3, r3, #16
 8001dbc:	6593      	str	r3, [r2, #88]	; 0x58
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <HAL_TIM_Base_MspInit+0x48>)
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2036      	movs	r0, #54	; 0x36
 8001dd0:	f000 faa5 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dd4:	2036      	movs	r0, #54	; 0x36
 8001dd6:	f000 fabe 	bl	8002356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40001000 	.word	0x40001000
 8001de8:	40021000 	.word	0x40021000

08001dec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a23      	ldr	r2, [pc, #140]	; (8001e98 <HAL_TIM_MspPostInit+0xac>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d11d      	bne.n	8001e4a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e0e:	4b23      	ldr	r3, [pc, #140]	; (8001e9c <HAL_TIM_MspPostInit+0xb0>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	4a22      	ldr	r2, [pc, #136]	; (8001e9c <HAL_TIM_MspPostInit+0xb0>)
 8001e14:	f043 0310 	orr.w	r3, r3, #16
 8001e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e1a:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <HAL_TIM_MspPostInit+0xb0>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	f003 0310 	and.w	r3, r3, #16
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8001e26:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8001e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	4619      	mov	r1, r3
 8001e42:	4817      	ldr	r0, [pc, #92]	; (8001ea0 <HAL_TIM_MspPostInit+0xb4>)
 8001e44:	f000 fb20 	bl	8002488 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001e48:	e021      	b.n	8001e8e <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM15)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a15      	ldr	r2, [pc, #84]	; (8001ea4 <HAL_TIM_MspPostInit+0xb8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d11c      	bne.n	8001e8e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <HAL_TIM_MspPostInit+0xb0>)
 8001e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e58:	4a10      	ldr	r2, [pc, #64]	; (8001e9c <HAL_TIM_MspPostInit+0xb0>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e60:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <HAL_TIM_MspPostInit+0xb0>)
 8001e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e70:	2302      	movs	r3, #2
 8001e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001e7c:	230e      	movs	r3, #14
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4619      	mov	r1, r3
 8001e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e8a:	f000 fafd 	bl	8002488 <HAL_GPIO_Init>
}
 8001e8e:	bf00      	nop
 8001e90:	3728      	adds	r7, #40	; 0x28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40012c00 	.word	0x40012c00
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	48001000 	.word	0x48001000
 8001ea4:	40014000 	.word	0x40014000

08001ea8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001eae:	4a15      	ldr	r2, [pc, #84]	; (8001f04 <MX_USART2_UART_Init+0x5c>)
 8001eb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001eb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ece:	220c      	movs	r2, #12
 8001ed0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eea:	4805      	ldr	r0, [pc, #20]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001eec:	f003 f9a4 	bl	8005238 <HAL_UART_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ef6:	f7ff fb2b 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	200003d0 	.word	0x200003d0
 8001f04:	40004400 	.word	0x40004400

08001f08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b0ac      	sub	sp, #176	; 0xb0
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	2288      	movs	r2, #136	; 0x88
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f004 fd29 	bl	8006980 <memset>
  if(uartHandle->Instance==USART2)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a25      	ldr	r2, [pc, #148]	; (8001fc8 <HAL_UART_MspInit+0xc0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d142      	bne.n	8001fbe <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4618      	mov	r0, r3
 8001f46:	f001 fab3 	bl	80034b0 <HAL_RCCEx_PeriphCLKConfig>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f50:	f7ff fafe 	bl	8001550 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f54:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <HAL_UART_MspInit+0xc4>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f58:	4a1c      	ldr	r2, [pc, #112]	; (8001fcc <HAL_UART_MspInit+0xc4>)
 8001f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f60:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <HAL_UART_MspInit+0xc4>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f6c:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <HAL_UART_MspInit+0xc4>)
 8001f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f70:	4a16      	ldr	r2, [pc, #88]	; (8001fcc <HAL_UART_MspInit+0xc4>)
 8001f72:	f043 0308 	orr.w	r3, r3, #8
 8001f76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f78:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <HAL_UART_MspInit+0xc4>)
 8001f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001f84:	2360      	movs	r3, #96	; 0x60
 8001f86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f96:	2303      	movs	r3, #3
 8001f98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f9c:	2307      	movs	r3, #7
 8001f9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fa2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4809      	ldr	r0, [pc, #36]	; (8001fd0 <HAL_UART_MspInit+0xc8>)
 8001faa:	f000 fa6d 	bl	8002488 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2026      	movs	r0, #38	; 0x26
 8001fb4:	f000 f9b3 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fb8:	2026      	movs	r0, #38	; 0x26
 8001fba:	f000 f9cc 	bl	8002356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	37b0      	adds	r7, #176	; 0xb0
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40004400 	.word	0x40004400
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	48000c00 	.word	0x48000c00

08001fd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800200c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fd8:	f7ff fc0c 	bl	80017f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fdc:	480c      	ldr	r0, [pc, #48]	; (8002010 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fde:	490d      	ldr	r1, [pc, #52]	; (8002014 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fe0:	4a0d      	ldr	r2, [pc, #52]	; (8002018 <LoopForever+0xe>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe4:	e002      	b.n	8001fec <LoopCopyDataInit>

08001fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fea:	3304      	adds	r3, #4

08001fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff0:	d3f9      	bcc.n	8001fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	; (800201c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ff4:	4c0a      	ldr	r4, [pc, #40]	; (8002020 <LoopForever+0x16>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff8:	e001      	b.n	8001ffe <LoopFillZerobss>

08001ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ffc:	3204      	adds	r2, #4

08001ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002000:	d3fb      	bcc.n	8001ffa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002002:	f004 fc99 	bl	8006938 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002006:	f7ff f90b 	bl	8001220 <main>

0800200a <LoopForever>:

LoopForever:
    b LoopForever
 800200a:	e7fe      	b.n	800200a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800200c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002014:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002018:	0800987c 	.word	0x0800987c
  ldr r2, =_sbss
 800201c:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8002020:	20000468 	.word	0x20000468

08002024 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002024:	e7fe      	b.n	8002024 <ADC1_2_IRQHandler>
	...

08002028 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002032:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <HAL_Init+0x3c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a0b      	ldr	r2, [pc, #44]	; (8002064 <HAL_Init+0x3c>)
 8002038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800203e:	2003      	movs	r0, #3
 8002040:	f000 f962 	bl	8002308 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002044:	2000      	movs	r0, #0
 8002046:	f000 f80f 	bl	8002068 <HAL_InitTick>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	71fb      	strb	r3, [r7, #7]
 8002054:	e001      	b.n	800205a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002056:	f7ff fa9f 	bl	8001598 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800205a:	79fb      	ldrb	r3, [r7, #7]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40022000 	.word	0x40022000

08002068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002070:	2300      	movs	r3, #0
 8002072:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002074:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <HAL_InitTick+0x6c>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d023      	beq.n	80020c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800207c:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <HAL_InitTick+0x70>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <HAL_InitTick+0x6c>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	4619      	mov	r1, r3
 8002086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800208a:	fbb3 f3f1 	udiv	r3, r3, r1
 800208e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002092:	4618      	mov	r0, r3
 8002094:	f000 f96d 	bl	8002372 <HAL_SYSTICK_Config>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10f      	bne.n	80020be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b0f      	cmp	r3, #15
 80020a2:	d809      	bhi.n	80020b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a4:	2200      	movs	r2, #0
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ac:	f000 f937 	bl	800231e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020b0:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <HAL_InitTick+0x74>)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	e007      	b.n	80020c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
 80020bc:	e004      	b.n	80020c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	73fb      	strb	r3, [r7, #15]
 80020c2:	e001      	b.n	80020c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000030 	.word	0x20000030
 80020d8:	20000028 	.word	0x20000028
 80020dc:	2000002c 	.word	0x2000002c

080020e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_IncTick+0x20>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_IncTick+0x24>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	4a04      	ldr	r2, [pc, #16]	; (8002104 <HAL_IncTick+0x24>)
 80020f2:	6013      	str	r3, [r2, #0]
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000030 	.word	0x20000030
 8002104:	20000454 	.word	0x20000454

08002108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return uwTick;
 800210c:	4b03      	ldr	r3, [pc, #12]	; (800211c <HAL_GetTick+0x14>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	20000454 	.word	0x20000454

08002120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002128:	f7ff ffee 	bl	8002108 <HAL_GetTick>
 800212c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d005      	beq.n	8002146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_Delay+0x44>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002146:	bf00      	nop
 8002148:	f7ff ffde 	bl	8002108 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	429a      	cmp	r2, r3
 8002156:	d8f7      	bhi.n	8002148 <HAL_Delay+0x28>
  {
  }
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000030 	.word	0x20000030

08002168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002184:	4013      	ands	r3, r2
 8002186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219a:	4a04      	ldr	r2, [pc, #16]	; (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	60d3      	str	r3, [r2, #12]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <__NVIC_GetPriorityGrouping+0x18>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	f003 0307 	and.w	r3, r3, #7
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	db0b      	blt.n	80021f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	f003 021f 	and.w	r2, r3, #31
 80021e4:	4907      	ldr	r1, [pc, #28]	; (8002204 <__NVIC_EnableIRQ+0x38>)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	2001      	movs	r0, #1
 80021ee:	fa00 f202 	lsl.w	r2, r0, r2
 80021f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000e100 	.word	0xe000e100

08002208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	6039      	str	r1, [r7, #0]
 8002212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002218:	2b00      	cmp	r3, #0
 800221a:	db0a      	blt.n	8002232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	b2da      	uxtb	r2, r3
 8002220:	490c      	ldr	r1, [pc, #48]	; (8002254 <__NVIC_SetPriority+0x4c>)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	0112      	lsls	r2, r2, #4
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	440b      	add	r3, r1
 800222c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002230:	e00a      	b.n	8002248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4908      	ldr	r1, [pc, #32]	; (8002258 <__NVIC_SetPriority+0x50>)
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3b04      	subs	r3, #4
 8002240:	0112      	lsls	r2, r2, #4
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	440b      	add	r3, r1
 8002246:	761a      	strb	r2, [r3, #24]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000e100 	.word	0xe000e100
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	; 0x24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f1c3 0307 	rsb	r3, r3, #7
 8002276:	2b04      	cmp	r3, #4
 8002278:	bf28      	it	cs
 800227a:	2304      	movcs	r3, #4
 800227c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3304      	adds	r3, #4
 8002282:	2b06      	cmp	r3, #6
 8002284:	d902      	bls.n	800228c <NVIC_EncodePriority+0x30>
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3b03      	subs	r3, #3
 800228a:	e000      	b.n	800228e <NVIC_EncodePriority+0x32>
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	f04f 32ff 	mov.w	r2, #4294967295
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43da      	mvns	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	401a      	ands	r2, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a4:	f04f 31ff 	mov.w	r1, #4294967295
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	43d9      	mvns	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b4:	4313      	orrs	r3, r2
         );
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3724      	adds	r7, #36	; 0x24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022d4:	d301      	bcc.n	80022da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022d6:	2301      	movs	r3, #1
 80022d8:	e00f      	b.n	80022fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022da:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <SysTick_Config+0x40>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022e2:	210f      	movs	r1, #15
 80022e4:	f04f 30ff 	mov.w	r0, #4294967295
 80022e8:	f7ff ff8e 	bl	8002208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <SysTick_Config+0x40>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022f2:	4b04      	ldr	r3, [pc, #16]	; (8002304 <SysTick_Config+0x40>)
 80022f4:	2207      	movs	r2, #7
 80022f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	e000e010 	.word	0xe000e010

08002308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff29 	bl	8002168 <__NVIC_SetPriorityGrouping>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b086      	sub	sp, #24
 8002322:	af00      	add	r7, sp, #0
 8002324:	4603      	mov	r3, r0
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002330:	f7ff ff3e 	bl	80021b0 <__NVIC_GetPriorityGrouping>
 8002334:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	6978      	ldr	r0, [r7, #20]
 800233c:	f7ff ff8e 	bl	800225c <NVIC_EncodePriority>
 8002340:	4602      	mov	r2, r0
 8002342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ff5d 	bl	8002208 <__NVIC_SetPriority>
}
 800234e:	bf00      	nop
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff31 	bl	80021cc <__NVIC_EnableIRQ>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff ffa2 	bl	80022c4 <SysTick_Config>
 8002380:	4603      	mov	r3, r0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800238a:	b480      	push	{r7}
 800238c:	b085      	sub	sp, #20
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d008      	beq.n	80023b4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2204      	movs	r2, #4
 80023a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e022      	b.n	80023fa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 020e 	bic.w	r2, r2, #14
 80023c2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0201 	bic.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d8:	f003 021c 	and.w	r2, r3, #28
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	2101      	movs	r1, #1
 80023e2:	fa01 f202 	lsl.w	r2, r1, r2
 80023e6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b084      	sub	sp, #16
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d005      	beq.n	800242a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2204      	movs	r2, #4
 8002422:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
 8002428:	e029      	b.n	800247e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 020e 	bic.w	r2, r2, #14
 8002438:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0201 	bic.w	r2, r2, #1
 8002448:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f003 021c 	and.w	r2, r3, #28
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	2101      	movs	r1, #1
 8002458:	fa01 f202 	lsl.w	r2, r1, r2
 800245c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	4798      	blx	r3
    }
  }
  return status;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002496:	e17f      	b.n	8002798 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2101      	movs	r1, #1
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	fa01 f303 	lsl.w	r3, r1, r3
 80024a4:	4013      	ands	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 8171 	beq.w	8002792 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d005      	beq.n	80024c8 <HAL_GPIO_Init+0x40>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d130      	bne.n	800252a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	2203      	movs	r2, #3
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024fe:	2201      	movs	r2, #1
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	091b      	lsrs	r3, r3, #4
 8002514:	f003 0201 	and.w	r2, r3, #1
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b03      	cmp	r3, #3
 8002534:	d118      	bne.n	8002568 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800253c:	2201      	movs	r2, #1
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	08db      	lsrs	r3, r3, #3
 8002552:	f003 0201 	and.w	r2, r3, #1
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	2b03      	cmp	r3, #3
 8002572:	d017      	beq.n	80025a4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	2203      	movs	r2, #3
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4013      	ands	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d123      	bne.n	80025f8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	08da      	lsrs	r2, r3, #3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3208      	adds	r2, #8
 80025b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	220f      	movs	r2, #15
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	08da      	lsrs	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3208      	adds	r2, #8
 80025f2:	6939      	ldr	r1, [r7, #16]
 80025f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0203 	and.w	r2, r3, #3
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4313      	orrs	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 80ac 	beq.w	8002792 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263a:	4b5f      	ldr	r3, [pc, #380]	; (80027b8 <HAL_GPIO_Init+0x330>)
 800263c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800263e:	4a5e      	ldr	r2, [pc, #376]	; (80027b8 <HAL_GPIO_Init+0x330>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6613      	str	r3, [r2, #96]	; 0x60
 8002646:	4b5c      	ldr	r3, [pc, #368]	; (80027b8 <HAL_GPIO_Init+0x330>)
 8002648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002652:	4a5a      	ldr	r2, [pc, #360]	; (80027bc <HAL_GPIO_Init+0x334>)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	089b      	lsrs	r3, r3, #2
 8002658:	3302      	adds	r3, #2
 800265a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	220f      	movs	r2, #15
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800267c:	d025      	beq.n	80026ca <HAL_GPIO_Init+0x242>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a4f      	ldr	r2, [pc, #316]	; (80027c0 <HAL_GPIO_Init+0x338>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d01f      	beq.n	80026c6 <HAL_GPIO_Init+0x23e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4e      	ldr	r2, [pc, #312]	; (80027c4 <HAL_GPIO_Init+0x33c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d019      	beq.n	80026c2 <HAL_GPIO_Init+0x23a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a4d      	ldr	r2, [pc, #308]	; (80027c8 <HAL_GPIO_Init+0x340>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d013      	beq.n	80026be <HAL_GPIO_Init+0x236>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4c      	ldr	r2, [pc, #304]	; (80027cc <HAL_GPIO_Init+0x344>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00d      	beq.n	80026ba <HAL_GPIO_Init+0x232>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4b      	ldr	r2, [pc, #300]	; (80027d0 <HAL_GPIO_Init+0x348>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d007      	beq.n	80026b6 <HAL_GPIO_Init+0x22e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a4a      	ldr	r2, [pc, #296]	; (80027d4 <HAL_GPIO_Init+0x34c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d101      	bne.n	80026b2 <HAL_GPIO_Init+0x22a>
 80026ae:	2306      	movs	r3, #6
 80026b0:	e00c      	b.n	80026cc <HAL_GPIO_Init+0x244>
 80026b2:	2307      	movs	r3, #7
 80026b4:	e00a      	b.n	80026cc <HAL_GPIO_Init+0x244>
 80026b6:	2305      	movs	r3, #5
 80026b8:	e008      	b.n	80026cc <HAL_GPIO_Init+0x244>
 80026ba:	2304      	movs	r3, #4
 80026bc:	e006      	b.n	80026cc <HAL_GPIO_Init+0x244>
 80026be:	2303      	movs	r3, #3
 80026c0:	e004      	b.n	80026cc <HAL_GPIO_Init+0x244>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e002      	b.n	80026cc <HAL_GPIO_Init+0x244>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <HAL_GPIO_Init+0x244>
 80026ca:	2300      	movs	r3, #0
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	f002 0203 	and.w	r2, r2, #3
 80026d2:	0092      	lsls	r2, r2, #2
 80026d4:	4093      	lsls	r3, r2
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026dc:	4937      	ldr	r1, [pc, #220]	; (80027bc <HAL_GPIO_Init+0x334>)
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	089b      	lsrs	r3, r3, #2
 80026e2:	3302      	adds	r3, #2
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026ea:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <HAL_GPIO_Init+0x350>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4013      	ands	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4313      	orrs	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800270e:	4a32      	ldr	r2, [pc, #200]	; (80027d8 <HAL_GPIO_Init+0x350>)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002714:	4b30      	ldr	r3, [pc, #192]	; (80027d8 <HAL_GPIO_Init+0x350>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	43db      	mvns	r3, r3
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4013      	ands	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002738:	4a27      	ldr	r2, [pc, #156]	; (80027d8 <HAL_GPIO_Init+0x350>)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800273e:	4b26      	ldr	r3, [pc, #152]	; (80027d8 <HAL_GPIO_Init+0x350>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	43db      	mvns	r3, r3
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4013      	ands	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002762:	4a1d      	ldr	r2, [pc, #116]	; (80027d8 <HAL_GPIO_Init+0x350>)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002768:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_GPIO_Init+0x350>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	43db      	mvns	r3, r3
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4013      	ands	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800278c:	4a12      	ldr	r2, [pc, #72]	; (80027d8 <HAL_GPIO_Init+0x350>)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	3301      	adds	r3, #1
 8002796:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	fa22 f303 	lsr.w	r3, r2, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f47f ae78 	bne.w	8002498 <HAL_GPIO_Init+0x10>
  }
}
 80027a8:	bf00      	nop
 80027aa:	bf00      	nop
 80027ac:	371c      	adds	r7, #28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40010000 	.word	0x40010000
 80027c0:	48000400 	.word	0x48000400
 80027c4:	48000800 	.word	0x48000800
 80027c8:	48000c00 	.word	0x48000c00
 80027cc:	48001000 	.word	0x48001000
 80027d0:	48001400 	.word	0x48001400
 80027d4:	48001800 	.word	0x48001800
 80027d8:	40010400 	.word	0x40010400

080027dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	807b      	strh	r3, [r7, #2]
 80027e8:	4613      	mov	r3, r2
 80027ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027ec:	787b      	ldrb	r3, [r7, #1]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027f2:	887a      	ldrh	r2, [r7, #2]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027f8:	e002      	b.n	8002800 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027fa:	887a      	ldrh	r2, [r7, #2]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002810:	4b04      	ldr	r3, [pc, #16]	; (8002824 <HAL_PWREx_GetVoltageRange+0x18>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40007000 	.word	0x40007000

08002828 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002836:	d130      	bne.n	800289a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002838:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002844:	d038      	beq.n	80028b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800284e:	4a1e      	ldr	r2, [pc, #120]	; (80028c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002850:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002854:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002856:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2232      	movs	r2, #50	; 0x32
 800285c:	fb02 f303 	mul.w	r3, r2, r3
 8002860:	4a1b      	ldr	r2, [pc, #108]	; (80028d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	0c9b      	lsrs	r3, r3, #18
 8002868:	3301      	adds	r3, #1
 800286a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800286c:	e002      	b.n	8002874 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	3b01      	subs	r3, #1
 8002872:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002874:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002880:	d102      	bne.n	8002888 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f2      	bne.n	800286e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002888:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002894:	d110      	bne.n	80028b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e00f      	b.n	80028ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800289a:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a6:	d007      	beq.n	80028b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028a8:	4b07      	ldr	r3, [pc, #28]	; (80028c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028b0:	4a05      	ldr	r2, [pc, #20]	; (80028c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40007000 	.word	0x40007000
 80028cc:	20000028 	.word	0x20000028
 80028d0:	431bde83 	.word	0x431bde83

080028d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e3d8      	b.n	8003098 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028e6:	4b97      	ldr	r3, [pc, #604]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028f0:	4b94      	ldr	r3, [pc, #592]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0310 	and.w	r3, r3, #16
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 80e4 	beq.w	8002ad0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d007      	beq.n	800291e <HAL_RCC_OscConfig+0x4a>
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	2b0c      	cmp	r3, #12
 8002912:	f040 808b 	bne.w	8002a2c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2b01      	cmp	r3, #1
 800291a:	f040 8087 	bne.w	8002a2c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800291e:	4b89      	ldr	r3, [pc, #548]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <HAL_RCC_OscConfig+0x62>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e3b0      	b.n	8003098 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1a      	ldr	r2, [r3, #32]
 800293a:	4b82      	ldr	r3, [pc, #520]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d004      	beq.n	8002950 <HAL_RCC_OscConfig+0x7c>
 8002946:	4b7f      	ldr	r3, [pc, #508]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800294e:	e005      	b.n	800295c <HAL_RCC_OscConfig+0x88>
 8002950:	4b7c      	ldr	r3, [pc, #496]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002956:	091b      	lsrs	r3, r3, #4
 8002958:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800295c:	4293      	cmp	r3, r2
 800295e:	d223      	bcs.n	80029a8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	4618      	mov	r0, r3
 8002966:	f000 fd43 	bl	80033f0 <RCC_SetFlashLatencyFromMSIRange>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e391      	b.n	8003098 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002974:	4b73      	ldr	r3, [pc, #460]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a72      	ldr	r2, [pc, #456]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 800297a:	f043 0308 	orr.w	r3, r3, #8
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	4b70      	ldr	r3, [pc, #448]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	496d      	ldr	r1, [pc, #436]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 800298e:	4313      	orrs	r3, r2
 8002990:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002992:	4b6c      	ldr	r3, [pc, #432]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	4968      	ldr	r1, [pc, #416]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	604b      	str	r3, [r1, #4]
 80029a6:	e025      	b.n	80029f4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029a8:	4b66      	ldr	r3, [pc, #408]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a65      	ldr	r2, [pc, #404]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 80029ae:	f043 0308 	orr.w	r3, r3, #8
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	4b63      	ldr	r3, [pc, #396]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	4960      	ldr	r1, [pc, #384]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029c6:	4b5f      	ldr	r3, [pc, #380]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	495b      	ldr	r1, [pc, #364]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d109      	bne.n	80029f4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 fd03 	bl	80033f0 <RCC_SetFlashLatencyFromMSIRange>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e351      	b.n	8003098 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029f4:	f000 fc38 	bl	8003268 <HAL_RCC_GetSysClockFreq>
 80029f8:	4602      	mov	r2, r0
 80029fa:	4b52      	ldr	r3, [pc, #328]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	091b      	lsrs	r3, r3, #4
 8002a00:	f003 030f 	and.w	r3, r3, #15
 8002a04:	4950      	ldr	r1, [pc, #320]	; (8002b48 <HAL_RCC_OscConfig+0x274>)
 8002a06:	5ccb      	ldrb	r3, [r1, r3]
 8002a08:	f003 031f 	and.w	r3, r3, #31
 8002a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a10:	4a4e      	ldr	r2, [pc, #312]	; (8002b4c <HAL_RCC_OscConfig+0x278>)
 8002a12:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a14:	4b4e      	ldr	r3, [pc, #312]	; (8002b50 <HAL_RCC_OscConfig+0x27c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fb25 	bl	8002068 <HAL_InitTick>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d052      	beq.n	8002ace <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	e335      	b.n	8003098 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d032      	beq.n	8002a9a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a34:	4b43      	ldr	r3, [pc, #268]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a42      	ldr	r2, [pc, #264]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a40:	f7ff fb62 	bl	8002108 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a48:	f7ff fb5e 	bl	8002108 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e31e      	b.n	8003098 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a5a:	4b3a      	ldr	r3, [pc, #232]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a66:	4b37      	ldr	r3, [pc, #220]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a36      	ldr	r2, [pc, #216]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002a6c:	f043 0308 	orr.w	r3, r3, #8
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	4b34      	ldr	r3, [pc, #208]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	4931      	ldr	r1, [pc, #196]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a84:	4b2f      	ldr	r3, [pc, #188]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	021b      	lsls	r3, r3, #8
 8002a92:	492c      	ldr	r1, [pc, #176]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	604b      	str	r3, [r1, #4]
 8002a98:	e01a      	b.n	8002ad0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a9a:	4b2a      	ldr	r3, [pc, #168]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a29      	ldr	r2, [pc, #164]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002aa0:	f023 0301 	bic.w	r3, r3, #1
 8002aa4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002aa6:	f7ff fb2f 	bl	8002108 <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002aae:	f7ff fb2b 	bl	8002108 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e2eb      	b.n	8003098 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ac0:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1f0      	bne.n	8002aae <HAL_RCC_OscConfig+0x1da>
 8002acc:	e000      	b.n	8002ad0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ace:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d074      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d005      	beq.n	8002aee <HAL_RCC_OscConfig+0x21a>
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	2b0c      	cmp	r3, #12
 8002ae6:	d10e      	bne.n	8002b06 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d10b      	bne.n	8002b06 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aee:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d064      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x2f0>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d160      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e2c8      	b.n	8003098 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b0e:	d106      	bne.n	8002b1e <HAL_RCC_OscConfig+0x24a>
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a0b      	ldr	r2, [pc, #44]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	e026      	b.n	8002b6c <HAL_RCC_OscConfig+0x298>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b26:	d115      	bne.n	8002b54 <HAL_RCC_OscConfig+0x280>
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a05      	ldr	r2, [pc, #20]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002b2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a02      	ldr	r2, [pc, #8]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	e014      	b.n	8002b6c <HAL_RCC_OscConfig+0x298>
 8002b42:	bf00      	nop
 8002b44:	40021000 	.word	0x40021000
 8002b48:	0800944c 	.word	0x0800944c
 8002b4c:	20000028 	.word	0x20000028
 8002b50:	2000002c 	.word	0x2000002c
 8002b54:	4ba0      	ldr	r3, [pc, #640]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a9f      	ldr	r2, [pc, #636]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b5e:	6013      	str	r3, [r2, #0]
 8002b60:	4b9d      	ldr	r3, [pc, #628]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a9c      	ldr	r2, [pc, #624]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d013      	beq.n	8002b9c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7ff fac8 	bl	8002108 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b7c:	f7ff fac4 	bl	8002108 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b64      	cmp	r3, #100	; 0x64
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e284      	b.n	8003098 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b8e:	4b92      	ldr	r3, [pc, #584]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0x2a8>
 8002b9a:	e014      	b.n	8002bc6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9c:	f7ff fab4 	bl	8002108 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba4:	f7ff fab0 	bl	8002108 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b64      	cmp	r3, #100	; 0x64
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e270      	b.n	8003098 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bb6:	4b88      	ldr	r3, [pc, #544]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x2d0>
 8002bc2:	e000      	b.n	8002bc6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d060      	beq.n	8002c94 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d005      	beq.n	8002be4 <HAL_RCC_OscConfig+0x310>
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	2b0c      	cmp	r3, #12
 8002bdc:	d119      	bne.n	8002c12 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d116      	bne.n	8002c12 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002be4:	4b7c      	ldr	r3, [pc, #496]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d005      	beq.n	8002bfc <HAL_RCC_OscConfig+0x328>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e24d      	b.n	8003098 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfc:	4b76      	ldr	r3, [pc, #472]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	061b      	lsls	r3, r3, #24
 8002c0a:	4973      	ldr	r1, [pc, #460]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c10:	e040      	b.n	8002c94 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d023      	beq.n	8002c62 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c1a:	4b6f      	ldr	r3, [pc, #444]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a6e      	ldr	r2, [pc, #440]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c26:	f7ff fa6f 	bl	8002108 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2e:	f7ff fa6b 	bl	8002108 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e22b      	b.n	8003098 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c40:	4b65      	ldr	r3, [pc, #404]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4c:	4b62      	ldr	r3, [pc, #392]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	061b      	lsls	r3, r3, #24
 8002c5a:	495f      	ldr	r1, [pc, #380]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	604b      	str	r3, [r1, #4]
 8002c60:	e018      	b.n	8002c94 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c62:	4b5d      	ldr	r3, [pc, #372]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a5c      	ldr	r2, [pc, #368]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6e:	f7ff fa4b 	bl	8002108 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c76:	f7ff fa47 	bl	8002108 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e207      	b.n	8003098 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c88:	4b53      	ldr	r3, [pc, #332]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f0      	bne.n	8002c76 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d03c      	beq.n	8002d1a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d01c      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca8:	4b4b      	ldr	r3, [pc, #300]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cae:	4a4a      	ldr	r2, [pc, #296]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb8:	f7ff fa26 	bl	8002108 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc0:	f7ff fa22 	bl	8002108 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e1e2      	b.n	8003098 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cd2:	4b41      	ldr	r3, [pc, #260]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0ef      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x3ec>
 8002ce0:	e01b      	b.n	8002d1a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce2:	4b3d      	ldr	r3, [pc, #244]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce8:	4a3b      	ldr	r2, [pc, #236]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002cea:	f023 0301 	bic.w	r3, r3, #1
 8002cee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf2:	f7ff fa09 	bl	8002108 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cfa:	f7ff fa05 	bl	8002108 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e1c5      	b.n	8003098 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d0c:	4b32      	ldr	r3, [pc, #200]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1ef      	bne.n	8002cfa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 80a6 	beq.w	8002e74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d2c:	4b2a      	ldr	r3, [pc, #168]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10d      	bne.n	8002d54 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d38:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	4a26      	ldr	r2, [pc, #152]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d42:	6593      	str	r3, [r2, #88]	; 0x58
 8002d44:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d50:	2301      	movs	r3, #1
 8002d52:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d54:	4b21      	ldr	r3, [pc, #132]	; (8002ddc <HAL_RCC_OscConfig+0x508>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d118      	bne.n	8002d92 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d60:	4b1e      	ldr	r3, [pc, #120]	; (8002ddc <HAL_RCC_OscConfig+0x508>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a1d      	ldr	r2, [pc, #116]	; (8002ddc <HAL_RCC_OscConfig+0x508>)
 8002d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d6c:	f7ff f9cc 	bl	8002108 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d74:	f7ff f9c8 	bl	8002108 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e188      	b.n	8003098 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <HAL_RCC_OscConfig+0x508>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d108      	bne.n	8002dac <HAL_RCC_OscConfig+0x4d8>
 8002d9a:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da0:	4a0d      	ldr	r2, [pc, #52]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002daa:	e029      	b.n	8002e00 <HAL_RCC_OscConfig+0x52c>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b05      	cmp	r3, #5
 8002db2:	d115      	bne.n	8002de0 <HAL_RCC_OscConfig+0x50c>
 8002db4:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dba:	4a07      	ldr	r2, [pc, #28]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002dbc:	f043 0304 	orr.w	r3, r3, #4
 8002dc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dc4:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dca:	4a03      	ldr	r2, [pc, #12]	; (8002dd8 <HAL_RCC_OscConfig+0x504>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dd4:	e014      	b.n	8002e00 <HAL_RCC_OscConfig+0x52c>
 8002dd6:	bf00      	nop
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40007000 	.word	0x40007000
 8002de0:	4b91      	ldr	r3, [pc, #580]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de6:	4a90      	ldr	r2, [pc, #576]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002df0:	4b8d      	ldr	r3, [pc, #564]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df6:	4a8c      	ldr	r2, [pc, #560]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002df8:	f023 0304 	bic.w	r3, r3, #4
 8002dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d016      	beq.n	8002e36 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e08:	f7ff f97e 	bl	8002108 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e10:	f7ff f97a 	bl	8002108 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e138      	b.n	8003098 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e26:	4b80      	ldr	r3, [pc, #512]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0ed      	beq.n	8002e10 <HAL_RCC_OscConfig+0x53c>
 8002e34:	e015      	b.n	8002e62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e36:	f7ff f967 	bl	8002108 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e3c:	e00a      	b.n	8002e54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e3e:	f7ff f963 	bl	8002108 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e121      	b.n	8003098 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e54:	4b74      	ldr	r3, [pc, #464]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1ed      	bne.n	8002e3e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e62:	7ffb      	ldrb	r3, [r7, #31]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d105      	bne.n	8002e74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e68:	4b6f      	ldr	r3, [pc, #444]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6c:	4a6e      	ldr	r2, [pc, #440]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e72:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 810c 	beq.w	8003096 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	f040 80d4 	bne.w	8003030 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e88:	4b67      	ldr	r3, [pc, #412]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f003 0203 	and.w	r2, r3, #3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d130      	bne.n	8002efe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d127      	bne.n	8002efe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d11f      	bne.n	8002efe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ec8:	2a07      	cmp	r2, #7
 8002eca:	bf14      	ite	ne
 8002ecc:	2201      	movne	r2, #1
 8002ece:	2200      	moveq	r2, #0
 8002ed0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d113      	bne.n	8002efe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee0:	085b      	lsrs	r3, r3, #1
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d109      	bne.n	8002efe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	085b      	lsrs	r3, r3, #1
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d06e      	beq.n	8002fdc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	2b0c      	cmp	r3, #12
 8002f02:	d069      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f04:	4b48      	ldr	r3, [pc, #288]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d105      	bne.n	8002f1c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f10:	4b45      	ldr	r3, [pc, #276]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0bb      	b.n	8003098 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f20:	4b41      	ldr	r3, [pc, #260]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a40      	ldr	r2, [pc, #256]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002f26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f2a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f2c:	f7ff f8ec 	bl	8002108 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f34:	f7ff f8e8 	bl	8002108 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e0a8      	b.n	8003098 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f46:	4b38      	ldr	r3, [pc, #224]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f52:	4b35      	ldr	r3, [pc, #212]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	4b35      	ldr	r3, [pc, #212]	; (800302c <HAL_RCC_OscConfig+0x758>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f62:	3a01      	subs	r2, #1
 8002f64:	0112      	lsls	r2, r2, #4
 8002f66:	4311      	orrs	r1, r2
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f6c:	0212      	lsls	r2, r2, #8
 8002f6e:	4311      	orrs	r1, r2
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f74:	0852      	lsrs	r2, r2, #1
 8002f76:	3a01      	subs	r2, #1
 8002f78:	0552      	lsls	r2, r2, #21
 8002f7a:	4311      	orrs	r1, r2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f80:	0852      	lsrs	r2, r2, #1
 8002f82:	3a01      	subs	r2, #1
 8002f84:	0652      	lsls	r2, r2, #25
 8002f86:	4311      	orrs	r1, r2
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f8c:	0912      	lsrs	r2, r2, #4
 8002f8e:	0452      	lsls	r2, r2, #17
 8002f90:	430a      	orrs	r2, r1
 8002f92:	4925      	ldr	r1, [pc, #148]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f98:	4b23      	ldr	r3, [pc, #140]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a22      	ldr	r2, [pc, #136]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fa2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fa4:	4b20      	ldr	r3, [pc, #128]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	4a1f      	ldr	r2, [pc, #124]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fb0:	f7ff f8aa 	bl	8002108 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb8:	f7ff f8a6 	bl	8002108 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e066      	b.n	8003098 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fca:	4b17      	ldr	r3, [pc, #92]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fd6:	e05e      	b.n	8003096 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e05d      	b.n	8003098 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fdc:	4b12      	ldr	r3, [pc, #72]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d156      	bne.n	8003096 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fe8:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a0e      	ldr	r2, [pc, #56]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002fee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ff2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	4a0b      	ldr	r2, [pc, #44]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 8002ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ffe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003000:	f7ff f882 	bl	8002108 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003008:	f7ff f87e 	bl	8002108 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e03e      	b.n	8003098 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800301a:	4b03      	ldr	r3, [pc, #12]	; (8003028 <HAL_RCC_OscConfig+0x754>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0x734>
 8003026:	e036      	b.n	8003096 <HAL_RCC_OscConfig+0x7c2>
 8003028:	40021000 	.word	0x40021000
 800302c:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	2b0c      	cmp	r3, #12
 8003034:	d02d      	beq.n	8003092 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003036:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <HAL_RCC_OscConfig+0x7cc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a19      	ldr	r2, [pc, #100]	; (80030a0 <HAL_RCC_OscConfig+0x7cc>)
 800303c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003040:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003042:	4b17      	ldr	r3, [pc, #92]	; (80030a0 <HAL_RCC_OscConfig+0x7cc>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d105      	bne.n	800305a <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800304e:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <HAL_RCC_OscConfig+0x7cc>)
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	4a13      	ldr	r2, [pc, #76]	; (80030a0 <HAL_RCC_OscConfig+0x7cc>)
 8003054:	f023 0303 	bic.w	r3, r3, #3
 8003058:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800305a:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <HAL_RCC_OscConfig+0x7cc>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	4a10      	ldr	r2, [pc, #64]	; (80030a0 <HAL_RCC_OscConfig+0x7cc>)
 8003060:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003068:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306a:	f7ff f84d 	bl	8002108 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003072:	f7ff f849 	bl	8002108 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e009      	b.n	8003098 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003084:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <HAL_RCC_OscConfig+0x7cc>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1f0      	bne.n	8003072 <HAL_RCC_OscConfig+0x79e>
 8003090:	e001      	b.n	8003096 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3720      	adds	r7, #32
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40021000 	.word	0x40021000

080030a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0c8      	b.n	800324a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030b8:	4b66      	ldr	r3, [pc, #408]	; (8003254 <HAL_RCC_ClockConfig+0x1b0>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d910      	bls.n	80030e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c6:	4b63      	ldr	r3, [pc, #396]	; (8003254 <HAL_RCC_ClockConfig+0x1b0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 0207 	bic.w	r2, r3, #7
 80030ce:	4961      	ldr	r1, [pc, #388]	; (8003254 <HAL_RCC_ClockConfig+0x1b0>)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d6:	4b5f      	ldr	r3, [pc, #380]	; (8003254 <HAL_RCC_ClockConfig+0x1b0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0b0      	b.n	800324a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d04c      	beq.n	800318e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d107      	bne.n	800310c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030fc:	4b56      	ldr	r3, [pc, #344]	; (8003258 <HAL_RCC_ClockConfig+0x1b4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d121      	bne.n	800314c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e09e      	b.n	800324a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d107      	bne.n	8003124 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003114:	4b50      	ldr	r3, [pc, #320]	; (8003258 <HAL_RCC_ClockConfig+0x1b4>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d115      	bne.n	800314c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e092      	b.n	800324a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d107      	bne.n	800313c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800312c:	4b4a      	ldr	r3, [pc, #296]	; (8003258 <HAL_RCC_ClockConfig+0x1b4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d109      	bne.n	800314c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e086      	b.n	800324a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800313c:	4b46      	ldr	r3, [pc, #280]	; (8003258 <HAL_RCC_ClockConfig+0x1b4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e07e      	b.n	800324a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800314c:	4b42      	ldr	r3, [pc, #264]	; (8003258 <HAL_RCC_ClockConfig+0x1b4>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f023 0203 	bic.w	r2, r3, #3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	493f      	ldr	r1, [pc, #252]	; (8003258 <HAL_RCC_ClockConfig+0x1b4>)
 800315a:	4313      	orrs	r3, r2
 800315c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800315e:	f7fe ffd3 	bl	8002108 <HAL_GetTick>
 8003162:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003164:	e00a      	b.n	800317c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003166:	f7fe ffcf 	bl	8002108 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	f241 3288 	movw	r2, #5000	; 0x1388
 8003174:	4293      	cmp	r3, r2
 8003176:	d901      	bls.n	800317c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e066      	b.n	800324a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317c:	4b36      	ldr	r3, [pc, #216]	; (8003258 <HAL_RCC_ClockConfig+0x1b4>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 020c 	and.w	r2, r3, #12
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	429a      	cmp	r2, r3
 800318c:	d1eb      	bne.n	8003166 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d008      	beq.n	80031ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800319a:	4b2f      	ldr	r3, [pc, #188]	; (8003258 <HAL_RCC_ClockConfig+0x1b4>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	492c      	ldr	r1, [pc, #176]	; (8003258 <HAL_RCC_ClockConfig+0x1b4>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031ac:	4b29      	ldr	r3, [pc, #164]	; (8003254 <HAL_RCC_ClockConfig+0x1b0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d210      	bcs.n	80031dc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b26      	ldr	r3, [pc, #152]	; (8003254 <HAL_RCC_ClockConfig+0x1b0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 0207 	bic.w	r2, r3, #7
 80031c2:	4924      	ldr	r1, [pc, #144]	; (8003254 <HAL_RCC_ClockConfig+0x1b0>)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ca:	4b22      	ldr	r3, [pc, #136]	; (8003254 <HAL_RCC_ClockConfig+0x1b0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e036      	b.n	800324a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e8:	4b1b      	ldr	r3, [pc, #108]	; (8003258 <HAL_RCC_ClockConfig+0x1b4>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	4918      	ldr	r1, [pc, #96]	; (8003258 <HAL_RCC_ClockConfig+0x1b4>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d009      	beq.n	800321a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003206:	4b14      	ldr	r3, [pc, #80]	; (8003258 <HAL_RCC_ClockConfig+0x1b4>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4910      	ldr	r1, [pc, #64]	; (8003258 <HAL_RCC_ClockConfig+0x1b4>)
 8003216:	4313      	orrs	r3, r2
 8003218:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800321a:	f000 f825 	bl	8003268 <HAL_RCC_GetSysClockFreq>
 800321e:	4602      	mov	r2, r0
 8003220:	4b0d      	ldr	r3, [pc, #52]	; (8003258 <HAL_RCC_ClockConfig+0x1b4>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	091b      	lsrs	r3, r3, #4
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	490c      	ldr	r1, [pc, #48]	; (800325c <HAL_RCC_ClockConfig+0x1b8>)
 800322c:	5ccb      	ldrb	r3, [r1, r3]
 800322e:	f003 031f 	and.w	r3, r3, #31
 8003232:	fa22 f303 	lsr.w	r3, r2, r3
 8003236:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800323a:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe ff12 	bl	8002068 <HAL_InitTick>
 8003244:	4603      	mov	r3, r0
 8003246:	72fb      	strb	r3, [r7, #11]

  return status;
 8003248:	7afb      	ldrb	r3, [r7, #11]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40022000 	.word	0x40022000
 8003258:	40021000 	.word	0x40021000
 800325c:	0800944c 	.word	0x0800944c
 8003260:	20000028 	.word	0x20000028
 8003264:	2000002c 	.word	0x2000002c

08003268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003268:	b480      	push	{r7}
 800326a:	b089      	sub	sp, #36	; 0x24
 800326c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
 8003272:	2300      	movs	r3, #0
 8003274:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003276:	4b3e      	ldr	r3, [pc, #248]	; (8003370 <HAL_RCC_GetSysClockFreq+0x108>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003280:	4b3b      	ldr	r3, [pc, #236]	; (8003370 <HAL_RCC_GetSysClockFreq+0x108>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_RCC_GetSysClockFreq+0x34>
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	2b0c      	cmp	r3, #12
 8003294:	d121      	bne.n	80032da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d11e      	bne.n	80032da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800329c:	4b34      	ldr	r3, [pc, #208]	; (8003370 <HAL_RCC_GetSysClockFreq+0x108>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0308 	and.w	r3, r3, #8
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d107      	bne.n	80032b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032a8:	4b31      	ldr	r3, [pc, #196]	; (8003370 <HAL_RCC_GetSysClockFreq+0x108>)
 80032aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ae:	0a1b      	lsrs	r3, r3, #8
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	61fb      	str	r3, [r7, #28]
 80032b6:	e005      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032b8:	4b2d      	ldr	r3, [pc, #180]	; (8003370 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032c4:	4a2b      	ldr	r2, [pc, #172]	; (8003374 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10d      	bne.n	80032f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032d8:	e00a      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d102      	bne.n	80032e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032e0:	4b25      	ldr	r3, [pc, #148]	; (8003378 <HAL_RCC_GetSysClockFreq+0x110>)
 80032e2:	61bb      	str	r3, [r7, #24]
 80032e4:	e004      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d101      	bne.n	80032f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032ec:	4b23      	ldr	r3, [pc, #140]	; (800337c <HAL_RCC_GetSysClockFreq+0x114>)
 80032ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	2b0c      	cmp	r3, #12
 80032f4:	d134      	bne.n	8003360 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032f6:	4b1e      	ldr	r3, [pc, #120]	; (8003370 <HAL_RCC_GetSysClockFreq+0x108>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d003      	beq.n	800330e <HAL_RCC_GetSysClockFreq+0xa6>
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b03      	cmp	r3, #3
 800330a:	d003      	beq.n	8003314 <HAL_RCC_GetSysClockFreq+0xac>
 800330c:	e005      	b.n	800331a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800330e:	4b1a      	ldr	r3, [pc, #104]	; (8003378 <HAL_RCC_GetSysClockFreq+0x110>)
 8003310:	617b      	str	r3, [r7, #20]
      break;
 8003312:	e005      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003314:	4b19      	ldr	r3, [pc, #100]	; (800337c <HAL_RCC_GetSysClockFreq+0x114>)
 8003316:	617b      	str	r3, [r7, #20]
      break;
 8003318:	e002      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	617b      	str	r3, [r7, #20]
      break;
 800331e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003320:	4b13      	ldr	r3, [pc, #76]	; (8003370 <HAL_RCC_GetSysClockFreq+0x108>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	3301      	adds	r3, #1
 800332c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800332e:	4b10      	ldr	r3, [pc, #64]	; (8003370 <HAL_RCC_GetSysClockFreq+0x108>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	0a1b      	lsrs	r3, r3, #8
 8003334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	fb03 f202 	mul.w	r2, r3, r2
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	fbb2 f3f3 	udiv	r3, r2, r3
 8003344:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003346:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <HAL_RCC_GetSysClockFreq+0x108>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	0e5b      	lsrs	r3, r3, #25
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	3301      	adds	r3, #1
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	fbb2 f3f3 	udiv	r3, r2, r3
 800335e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003360:	69bb      	ldr	r3, [r7, #24]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3724      	adds	r7, #36	; 0x24
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000
 8003374:	08009464 	.word	0x08009464
 8003378:	00f42400 	.word	0x00f42400
 800337c:	007a1200 	.word	0x007a1200

08003380 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003384:	4b03      	ldr	r3, [pc, #12]	; (8003394 <HAL_RCC_GetHCLKFreq+0x14>)
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000028 	.word	0x20000028

08003398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800339c:	f7ff fff0 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 80033a0:	4602      	mov	r2, r0
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	0a1b      	lsrs	r3, r3, #8
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	4904      	ldr	r1, [pc, #16]	; (80033c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033ae:	5ccb      	ldrb	r3, [r1, r3]
 80033b0:	f003 031f 	and.w	r3, r3, #31
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40021000 	.word	0x40021000
 80033c0:	0800945c 	.word	0x0800945c

080033c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033c8:	f7ff ffda 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 80033cc:	4602      	mov	r2, r0
 80033ce:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	0adb      	lsrs	r3, r3, #11
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	4904      	ldr	r1, [pc, #16]	; (80033ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80033da:	5ccb      	ldrb	r3, [r1, r3]
 80033dc:	f003 031f 	and.w	r3, r3, #31
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40021000 	.word	0x40021000
 80033ec:	0800945c 	.word	0x0800945c

080033f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033f8:	2300      	movs	r3, #0
 80033fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033fc:	4b2a      	ldr	r3, [pc, #168]	; (80034a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003408:	f7ff fa00 	bl	800280c <HAL_PWREx_GetVoltageRange>
 800340c:	6178      	str	r0, [r7, #20]
 800340e:	e014      	b.n	800343a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003410:	4b25      	ldr	r3, [pc, #148]	; (80034a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003414:	4a24      	ldr	r2, [pc, #144]	; (80034a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341a:	6593      	str	r3, [r2, #88]	; 0x58
 800341c:	4b22      	ldr	r3, [pc, #136]	; (80034a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800341e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003428:	f7ff f9f0 	bl	800280c <HAL_PWREx_GetVoltageRange>
 800342c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800342e:	4b1e      	ldr	r3, [pc, #120]	; (80034a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003432:	4a1d      	ldr	r2, [pc, #116]	; (80034a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003438:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003440:	d10b      	bne.n	800345a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b80      	cmp	r3, #128	; 0x80
 8003446:	d919      	bls.n	800347c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2ba0      	cmp	r3, #160	; 0xa0
 800344c:	d902      	bls.n	8003454 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800344e:	2302      	movs	r3, #2
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	e013      	b.n	800347c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003454:	2301      	movs	r3, #1
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	e010      	b.n	800347c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b80      	cmp	r3, #128	; 0x80
 800345e:	d902      	bls.n	8003466 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003460:	2303      	movs	r3, #3
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	e00a      	b.n	800347c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b80      	cmp	r3, #128	; 0x80
 800346a:	d102      	bne.n	8003472 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800346c:	2302      	movs	r3, #2
 800346e:	613b      	str	r3, [r7, #16]
 8003470:	e004      	b.n	800347c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b70      	cmp	r3, #112	; 0x70
 8003476:	d101      	bne.n	800347c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003478:	2301      	movs	r3, #1
 800347a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f023 0207 	bic.w	r2, r3, #7
 8003484:	4909      	ldr	r1, [pc, #36]	; (80034ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800348c:	4b07      	ldr	r3, [pc, #28]	; (80034ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	429a      	cmp	r2, r3
 8003498:	d001      	beq.n	800349e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40022000 	.word	0x40022000

080034b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034b8:	2300      	movs	r3, #0
 80034ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034bc:	2300      	movs	r3, #0
 80034be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d041      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034d4:	d02a      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034da:	d824      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034e0:	d008      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034e6:	d81e      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034f0:	d010      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034f2:	e018      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034f4:	4b86      	ldr	r3, [pc, #536]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4a85      	ldr	r2, [pc, #532]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003500:	e015      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3304      	adds	r3, #4
 8003506:	2100      	movs	r1, #0
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fabb 	bl	8003a84 <RCCEx_PLLSAI1_Config>
 800350e:	4603      	mov	r3, r0
 8003510:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003512:	e00c      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3320      	adds	r3, #32
 8003518:	2100      	movs	r1, #0
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fba6 	bl	8003c6c <RCCEx_PLLSAI2_Config>
 8003520:	4603      	mov	r3, r0
 8003522:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003524:	e003      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	74fb      	strb	r3, [r7, #19]
      break;
 800352a:	e000      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800352c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800352e:	7cfb      	ldrb	r3, [r7, #19]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10b      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003534:	4b76      	ldr	r3, [pc, #472]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003542:	4973      	ldr	r1, [pc, #460]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003544:	4313      	orrs	r3, r2
 8003546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800354a:	e001      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800354c:	7cfb      	ldrb	r3, [r7, #19]
 800354e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d041      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003560:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003564:	d02a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003566:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800356a:	d824      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800356c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003570:	d008      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003572:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003576:	d81e      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800357c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003580:	d010      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003582:	e018      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003584:	4b62      	ldr	r3, [pc, #392]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	4a61      	ldr	r2, [pc, #388]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003590:	e015      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3304      	adds	r3, #4
 8003596:	2100      	movs	r1, #0
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fa73 	bl	8003a84 <RCCEx_PLLSAI1_Config>
 800359e:	4603      	mov	r3, r0
 80035a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035a2:	e00c      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3320      	adds	r3, #32
 80035a8:	2100      	movs	r1, #0
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fb5e 	bl	8003c6c <RCCEx_PLLSAI2_Config>
 80035b0:	4603      	mov	r3, r0
 80035b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035b4:	e003      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	74fb      	strb	r3, [r7, #19]
      break;
 80035ba:	e000      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80035bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035be:	7cfb      	ldrb	r3, [r7, #19]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10b      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035c4:	4b52      	ldr	r3, [pc, #328]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035d2:	494f      	ldr	r1, [pc, #316]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035da:	e001      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035dc:	7cfb      	ldrb	r3, [r7, #19]
 80035de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80a0 	beq.w	800372e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ee:	2300      	movs	r3, #0
 80035f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035f2:	4b47      	ldr	r3, [pc, #284]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003602:	2300      	movs	r3, #0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00d      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003608:	4b41      	ldr	r3, [pc, #260]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360c:	4a40      	ldr	r2, [pc, #256]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003612:	6593      	str	r3, [r2, #88]	; 0x58
 8003614:	4b3e      	ldr	r3, [pc, #248]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003620:	2301      	movs	r3, #1
 8003622:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003624:	4b3b      	ldr	r3, [pc, #236]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a3a      	ldr	r2, [pc, #232]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800362a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003630:	f7fe fd6a 	bl	8002108 <HAL_GetTick>
 8003634:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003636:	e009      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003638:	f7fe fd66 	bl	8002108 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d902      	bls.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	74fb      	strb	r3, [r7, #19]
        break;
 800364a:	e005      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800364c:	4b31      	ldr	r3, [pc, #196]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0ef      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003658:	7cfb      	ldrb	r3, [r7, #19]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d15c      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800365e:	4b2c      	ldr	r3, [pc, #176]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003664:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003668:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d01f      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	429a      	cmp	r2, r3
 800367a:	d019      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800367c:	4b24      	ldr	r3, [pc, #144]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003686:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003688:	4b21      	ldr	r3, [pc, #132]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368e:	4a20      	ldr	r2, [pc, #128]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003698:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369e:	4a1c      	ldr	r2, [pc, #112]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036a8:	4a19      	ldr	r2, [pc, #100]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d016      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ba:	f7fe fd25 	bl	8002108 <HAL_GetTick>
 80036be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036c0:	e00b      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c2:	f7fe fd21 	bl	8002108 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d902      	bls.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	74fb      	strb	r3, [r7, #19]
            break;
 80036d8:	e006      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036da:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0ec      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80036e8:	7cfb      	ldrb	r3, [r7, #19]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10c      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036ee:	4b08      	ldr	r3, [pc, #32]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036fe:	4904      	ldr	r1, [pc, #16]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003706:	e009      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003708:	7cfb      	ldrb	r3, [r7, #19]
 800370a:	74bb      	strb	r3, [r7, #18]
 800370c:	e006      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800370e:	bf00      	nop
 8003710:	40021000 	.word	0x40021000
 8003714:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003718:	7cfb      	ldrb	r3, [r7, #19]
 800371a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800371c:	7c7b      	ldrb	r3, [r7, #17]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d105      	bne.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003722:	4b9e      	ldr	r3, [pc, #632]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003726:	4a9d      	ldr	r2, [pc, #628]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800372c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800373a:	4b98      	ldr	r3, [pc, #608]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003740:	f023 0203 	bic.w	r2, r3, #3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003748:	4994      	ldr	r1, [pc, #592]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374a:	4313      	orrs	r3, r2
 800374c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00a      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800375c:	4b8f      	ldr	r3, [pc, #572]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003762:	f023 020c 	bic.w	r2, r3, #12
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376a:	498c      	ldr	r1, [pc, #560]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376c:	4313      	orrs	r3, r2
 800376e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800377e:	4b87      	ldr	r3, [pc, #540]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003784:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	4983      	ldr	r1, [pc, #524]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00a      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037a0:	4b7e      	ldr	r3, [pc, #504]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	497b      	ldr	r1, [pc, #492]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0310 	and.w	r3, r3, #16
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037c2:	4b76      	ldr	r3, [pc, #472]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d0:	4972      	ldr	r1, [pc, #456]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0320 	and.w	r3, r3, #32
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037e4:	4b6d      	ldr	r3, [pc, #436]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f2:	496a      	ldr	r1, [pc, #424]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003806:	4b65      	ldr	r3, [pc, #404]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003814:	4961      	ldr	r1, [pc, #388]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00a      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003828:	4b5c      	ldr	r3, [pc, #368]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003836:	4959      	ldr	r1, [pc, #356]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00a      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800384a:	4b54      	ldr	r3, [pc, #336]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003850:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003858:	4950      	ldr	r1, [pc, #320]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00a      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800386c:	4b4b      	ldr	r3, [pc, #300]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003872:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387a:	4948      	ldr	r1, [pc, #288]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800388e:	4b43      	ldr	r3, [pc, #268]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003894:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389c:	493f      	ldr	r1, [pc, #252]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d028      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038b0:	4b3a      	ldr	r3, [pc, #232]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038be:	4937      	ldr	r1, [pc, #220]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038ce:	d106      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038d0:	4b32      	ldr	r3, [pc, #200]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	4a31      	ldr	r2, [pc, #196]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038da:	60d3      	str	r3, [r2, #12]
 80038dc:	e011      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038e6:	d10c      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3304      	adds	r3, #4
 80038ec:	2101      	movs	r1, #1
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 f8c8 	bl	8003a84 <RCCEx_PLLSAI1_Config>
 80038f4:	4603      	mov	r3, r0
 80038f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038f8:	7cfb      	ldrb	r3, [r7, #19]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80038fe:	7cfb      	ldrb	r3, [r7, #19]
 8003900:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d028      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800390e:	4b23      	ldr	r3, [pc, #140]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003914:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391c:	491f      	ldr	r1, [pc, #124]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003928:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800392c:	d106      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800392e:	4b1b      	ldr	r3, [pc, #108]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	4a1a      	ldr	r2, [pc, #104]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003934:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003938:	60d3      	str	r3, [r2, #12]
 800393a:	e011      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003940:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003944:	d10c      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3304      	adds	r3, #4
 800394a:	2101      	movs	r1, #1
 800394c:	4618      	mov	r0, r3
 800394e:	f000 f899 	bl	8003a84 <RCCEx_PLLSAI1_Config>
 8003952:	4603      	mov	r3, r0
 8003954:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003956:	7cfb      	ldrb	r3, [r7, #19]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800395c:	7cfb      	ldrb	r3, [r7, #19]
 800395e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d02b      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800396c:	4b0b      	ldr	r3, [pc, #44]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003972:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800397a:	4908      	ldr	r1, [pc, #32]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003986:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800398a:	d109      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800398c:	4b03      	ldr	r3, [pc, #12]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	4a02      	ldr	r2, [pc, #8]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003996:	60d3      	str	r3, [r2, #12]
 8003998:	e014      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800399a:	bf00      	nop
 800399c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3304      	adds	r3, #4
 80039ae:	2101      	movs	r1, #1
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 f867 	bl	8003a84 <RCCEx_PLLSAI1_Config>
 80039b6:	4603      	mov	r3, r0
 80039b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039ba:	7cfb      	ldrb	r3, [r7, #19]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80039c0:	7cfb      	ldrb	r3, [r7, #19]
 80039c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d02f      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039d0:	4b2b      	ldr	r3, [pc, #172]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039de:	4928      	ldr	r1, [pc, #160]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039ee:	d10d      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3304      	adds	r3, #4
 80039f4:	2102      	movs	r1, #2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 f844 	bl	8003a84 <RCCEx_PLLSAI1_Config>
 80039fc:	4603      	mov	r3, r0
 80039fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a00:	7cfb      	ldrb	r3, [r7, #19]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d014      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a06:	7cfb      	ldrb	r3, [r7, #19]
 8003a08:	74bb      	strb	r3, [r7, #18]
 8003a0a:	e011      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a14:	d10c      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3320      	adds	r3, #32
 8003a1a:	2102      	movs	r1, #2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 f925 	bl	8003c6c <RCCEx_PLLSAI2_Config>
 8003a22:	4603      	mov	r3, r0
 8003a24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a26:	7cfb      	ldrb	r3, [r7, #19]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a2c:	7cfb      	ldrb	r3, [r7, #19]
 8003a2e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a3c:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a42:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a4a:	490d      	ldr	r1, [pc, #52]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00b      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a5e:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a6e:	4904      	ldr	r1, [pc, #16]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a76:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40021000 	.word	0x40021000

08003a84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a92:	4b75      	ldr	r3, [pc, #468]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d018      	beq.n	8003ad0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a9e:	4b72      	ldr	r3, [pc, #456]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f003 0203 	and.w	r2, r3, #3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d10d      	bne.n	8003aca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d009      	beq.n	8003aca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ab6:	4b6c      	ldr	r3, [pc, #432]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	091b      	lsrs	r3, r3, #4
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
       ||
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d047      	beq.n	8003b5a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
 8003ace:	e044      	b.n	8003b5a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d018      	beq.n	8003b0a <RCCEx_PLLSAI1_Config+0x86>
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d825      	bhi.n	8003b28 <RCCEx_PLLSAI1_Config+0xa4>
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d002      	beq.n	8003ae6 <RCCEx_PLLSAI1_Config+0x62>
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d009      	beq.n	8003af8 <RCCEx_PLLSAI1_Config+0x74>
 8003ae4:	e020      	b.n	8003b28 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ae6:	4b60      	ldr	r3, [pc, #384]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d11d      	bne.n	8003b2e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af6:	e01a      	b.n	8003b2e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003af8:	4b5b      	ldr	r3, [pc, #364]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d116      	bne.n	8003b32 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b08:	e013      	b.n	8003b32 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b0a:	4b57      	ldr	r3, [pc, #348]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10f      	bne.n	8003b36 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b16:	4b54      	ldr	r3, [pc, #336]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d109      	bne.n	8003b36 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b26:	e006      	b.n	8003b36 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b2c:	e004      	b.n	8003b38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b2e:	bf00      	nop
 8003b30:	e002      	b.n	8003b38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b32:	bf00      	nop
 8003b34:	e000      	b.n	8003b38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b36:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10d      	bne.n	8003b5a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b3e:	4b4a      	ldr	r3, [pc, #296]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6819      	ldr	r1, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	430b      	orrs	r3, r1
 8003b54:	4944      	ldr	r1, [pc, #272]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d17d      	bne.n	8003c5c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b60:	4b41      	ldr	r3, [pc, #260]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a40      	ldr	r2, [pc, #256]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b6c:	f7fe facc 	bl	8002108 <HAL_GetTick>
 8003b70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b72:	e009      	b.n	8003b88 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b74:	f7fe fac8 	bl	8002108 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d902      	bls.n	8003b88 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	73fb      	strb	r3, [r7, #15]
        break;
 8003b86:	e005      	b.n	8003b94 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b88:	4b37      	ldr	r3, [pc, #220]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1ef      	bne.n	8003b74 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d160      	bne.n	8003c5c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d111      	bne.n	8003bc4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ba0:	4b31      	ldr	r3, [pc, #196]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6892      	ldr	r2, [r2, #8]
 8003bb0:	0211      	lsls	r1, r2, #8
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	68d2      	ldr	r2, [r2, #12]
 8003bb6:	0912      	lsrs	r2, r2, #4
 8003bb8:	0452      	lsls	r2, r2, #17
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	492a      	ldr	r1, [pc, #168]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	610b      	str	r3, [r1, #16]
 8003bc2:	e027      	b.n	8003c14 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d112      	bne.n	8003bf0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bca:	4b27      	ldr	r3, [pc, #156]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003bd2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6892      	ldr	r2, [r2, #8]
 8003bda:	0211      	lsls	r1, r2, #8
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6912      	ldr	r2, [r2, #16]
 8003be0:	0852      	lsrs	r2, r2, #1
 8003be2:	3a01      	subs	r2, #1
 8003be4:	0552      	lsls	r2, r2, #21
 8003be6:	430a      	orrs	r2, r1
 8003be8:	491f      	ldr	r1, [pc, #124]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	610b      	str	r3, [r1, #16]
 8003bee:	e011      	b.n	8003c14 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bf0:	4b1d      	ldr	r3, [pc, #116]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bf8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6892      	ldr	r2, [r2, #8]
 8003c00:	0211      	lsls	r1, r2, #8
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6952      	ldr	r2, [r2, #20]
 8003c06:	0852      	lsrs	r2, r2, #1
 8003c08:	3a01      	subs	r2, #1
 8003c0a:	0652      	lsls	r2, r2, #25
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	4916      	ldr	r1, [pc, #88]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c14:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a13      	ldr	r2, [pc, #76]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c20:	f7fe fa72 	bl	8002108 <HAL_GetTick>
 8003c24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c26:	e009      	b.n	8003c3c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c28:	f7fe fa6e 	bl	8002108 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d902      	bls.n	8003c3c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	73fb      	strb	r3, [r7, #15]
          break;
 8003c3a:	e005      	b.n	8003c48 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0ef      	beq.n	8003c28 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d106      	bne.n	8003c5c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c4e:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c50:	691a      	ldr	r2, [r3, #16]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	4904      	ldr	r1, [pc, #16]	; (8003c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40021000 	.word	0x40021000

08003c6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c7a:	4b6a      	ldr	r3, [pc, #424]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d018      	beq.n	8003cb8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c86:	4b67      	ldr	r3, [pc, #412]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f003 0203 	and.w	r2, r3, #3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d10d      	bne.n	8003cb2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
       ||
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d009      	beq.n	8003cb2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c9e:	4b61      	ldr	r3, [pc, #388]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	091b      	lsrs	r3, r3, #4
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
       ||
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d047      	beq.n	8003d42 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	73fb      	strb	r3, [r7, #15]
 8003cb6:	e044      	b.n	8003d42 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d018      	beq.n	8003cf2 <RCCEx_PLLSAI2_Config+0x86>
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d825      	bhi.n	8003d10 <RCCEx_PLLSAI2_Config+0xa4>
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d002      	beq.n	8003cce <RCCEx_PLLSAI2_Config+0x62>
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d009      	beq.n	8003ce0 <RCCEx_PLLSAI2_Config+0x74>
 8003ccc:	e020      	b.n	8003d10 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cce:	4b55      	ldr	r3, [pc, #340]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d11d      	bne.n	8003d16 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cde:	e01a      	b.n	8003d16 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ce0:	4b50      	ldr	r3, [pc, #320]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d116      	bne.n	8003d1a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf0:	e013      	b.n	8003d1a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cf2:	4b4c      	ldr	r3, [pc, #304]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10f      	bne.n	8003d1e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cfe:	4b49      	ldr	r3, [pc, #292]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d109      	bne.n	8003d1e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d0e:	e006      	b.n	8003d1e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	73fb      	strb	r3, [r7, #15]
      break;
 8003d14:	e004      	b.n	8003d20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d16:	bf00      	nop
 8003d18:	e002      	b.n	8003d20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d1a:	bf00      	nop
 8003d1c:	e000      	b.n	8003d20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10d      	bne.n	8003d42 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d26:	4b3f      	ldr	r3, [pc, #252]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6819      	ldr	r1, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	430b      	orrs	r3, r1
 8003d3c:	4939      	ldr	r1, [pc, #228]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d167      	bne.n	8003e18 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d48:	4b36      	ldr	r3, [pc, #216]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a35      	ldr	r2, [pc, #212]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d54:	f7fe f9d8 	bl	8002108 <HAL_GetTick>
 8003d58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d5a:	e009      	b.n	8003d70 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d5c:	f7fe f9d4 	bl	8002108 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d902      	bls.n	8003d70 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	73fb      	strb	r3, [r7, #15]
        break;
 8003d6e:	e005      	b.n	8003d7c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d70:	4b2c      	ldr	r3, [pc, #176]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1ef      	bne.n	8003d5c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d14a      	bne.n	8003e18 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d111      	bne.n	8003dac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d88:	4b26      	ldr	r3, [pc, #152]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6892      	ldr	r2, [r2, #8]
 8003d98:	0211      	lsls	r1, r2, #8
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	68d2      	ldr	r2, [r2, #12]
 8003d9e:	0912      	lsrs	r2, r2, #4
 8003da0:	0452      	lsls	r2, r2, #17
 8003da2:	430a      	orrs	r2, r1
 8003da4:	491f      	ldr	r1, [pc, #124]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	614b      	str	r3, [r1, #20]
 8003daa:	e011      	b.n	8003dd0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003dac:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003db4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6892      	ldr	r2, [r2, #8]
 8003dbc:	0211      	lsls	r1, r2, #8
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6912      	ldr	r2, [r2, #16]
 8003dc2:	0852      	lsrs	r2, r2, #1
 8003dc4:	3a01      	subs	r2, #1
 8003dc6:	0652      	lsls	r2, r2, #25
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	4916      	ldr	r1, [pc, #88]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003dd0:	4b14      	ldr	r3, [pc, #80]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a13      	ldr	r2, [pc, #76]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ddc:	f7fe f994 	bl	8002108 <HAL_GetTick>
 8003de0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003de2:	e009      	b.n	8003df8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003de4:	f7fe f990 	bl	8002108 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d902      	bls.n	8003df8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	73fb      	strb	r3, [r7, #15]
          break;
 8003df6:	e005      	b.n	8003e04 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003df8:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0ef      	beq.n	8003de4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d106      	bne.n	8003e18 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e0a:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e0c:	695a      	ldr	r2, [r3, #20]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	4904      	ldr	r1, [pc, #16]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40021000 	.word	0x40021000

08003e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e049      	b.n	8003ece <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d106      	bne.n	8003e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fd ffa6 	bl	8001da0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3304      	adds	r3, #4
 8003e64:	4619      	mov	r1, r3
 8003e66:	4610      	mov	r0, r2
 8003e68:	f000 fd2c 	bl	80048c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e049      	b.n	8003f7c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d106      	bne.n	8003f02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7fd fe8b 	bl	8001c18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2202      	movs	r2, #2
 8003f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3304      	adds	r3, #4
 8003f12:	4619      	mov	r1, r3
 8003f14:	4610      	mov	r0, r2
 8003f16:	f000 fcd5 	bl	80048c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d109      	bne.n	8003fa8 <HAL_TIM_PWM_Start+0x24>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	bf14      	ite	ne
 8003fa0:	2301      	movne	r3, #1
 8003fa2:	2300      	moveq	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	e03c      	b.n	8004022 <HAL_TIM_PWM_Start+0x9e>
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d109      	bne.n	8003fc2 <HAL_TIM_PWM_Start+0x3e>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	bf14      	ite	ne
 8003fba:	2301      	movne	r3, #1
 8003fbc:	2300      	moveq	r3, #0
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	e02f      	b.n	8004022 <HAL_TIM_PWM_Start+0x9e>
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d109      	bne.n	8003fdc <HAL_TIM_PWM_Start+0x58>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	bf14      	ite	ne
 8003fd4:	2301      	movne	r3, #1
 8003fd6:	2300      	moveq	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	e022      	b.n	8004022 <HAL_TIM_PWM_Start+0x9e>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2b0c      	cmp	r3, #12
 8003fe0:	d109      	bne.n	8003ff6 <HAL_TIM_PWM_Start+0x72>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	bf14      	ite	ne
 8003fee:	2301      	movne	r3, #1
 8003ff0:	2300      	moveq	r3, #0
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	e015      	b.n	8004022 <HAL_TIM_PWM_Start+0x9e>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b10      	cmp	r3, #16
 8003ffa:	d109      	bne.n	8004010 <HAL_TIM_PWM_Start+0x8c>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b01      	cmp	r3, #1
 8004006:	bf14      	ite	ne
 8004008:	2301      	movne	r3, #1
 800400a:	2300      	moveq	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	e008      	b.n	8004022 <HAL_TIM_PWM_Start+0x9e>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b01      	cmp	r3, #1
 800401a:	bf14      	ite	ne
 800401c:	2301      	movne	r3, #1
 800401e:	2300      	moveq	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e09c      	b.n	8004164 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d104      	bne.n	800403a <HAL_TIM_PWM_Start+0xb6>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004038:	e023      	b.n	8004082 <HAL_TIM_PWM_Start+0xfe>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b04      	cmp	r3, #4
 800403e:	d104      	bne.n	800404a <HAL_TIM_PWM_Start+0xc6>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004048:	e01b      	b.n	8004082 <HAL_TIM_PWM_Start+0xfe>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b08      	cmp	r3, #8
 800404e:	d104      	bne.n	800405a <HAL_TIM_PWM_Start+0xd6>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004058:	e013      	b.n	8004082 <HAL_TIM_PWM_Start+0xfe>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b0c      	cmp	r3, #12
 800405e:	d104      	bne.n	800406a <HAL_TIM_PWM_Start+0xe6>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004068:	e00b      	b.n	8004082 <HAL_TIM_PWM_Start+0xfe>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b10      	cmp	r3, #16
 800406e:	d104      	bne.n	800407a <HAL_TIM_PWM_Start+0xf6>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004078:	e003      	b.n	8004082 <HAL_TIM_PWM_Start+0xfe>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2202      	movs	r2, #2
 800407e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2201      	movs	r2, #1
 8004088:	6839      	ldr	r1, [r7, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f000 ff8a 	bl	8004fa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a35      	ldr	r2, [pc, #212]	; (800416c <HAL_TIM_PWM_Start+0x1e8>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d013      	beq.n	80040c2 <HAL_TIM_PWM_Start+0x13e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a34      	ldr	r2, [pc, #208]	; (8004170 <HAL_TIM_PWM_Start+0x1ec>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00e      	beq.n	80040c2 <HAL_TIM_PWM_Start+0x13e>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a32      	ldr	r2, [pc, #200]	; (8004174 <HAL_TIM_PWM_Start+0x1f0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d009      	beq.n	80040c2 <HAL_TIM_PWM_Start+0x13e>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a31      	ldr	r2, [pc, #196]	; (8004178 <HAL_TIM_PWM_Start+0x1f4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d004      	beq.n	80040c2 <HAL_TIM_PWM_Start+0x13e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a2f      	ldr	r2, [pc, #188]	; (800417c <HAL_TIM_PWM_Start+0x1f8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d101      	bne.n	80040c6 <HAL_TIM_PWM_Start+0x142>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <HAL_TIM_PWM_Start+0x144>
 80040c6:	2300      	movs	r3, #0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d007      	beq.n	80040dc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a22      	ldr	r2, [pc, #136]	; (800416c <HAL_TIM_PWM_Start+0x1e8>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d01d      	beq.n	8004122 <HAL_TIM_PWM_Start+0x19e>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ee:	d018      	beq.n	8004122 <HAL_TIM_PWM_Start+0x19e>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a22      	ldr	r2, [pc, #136]	; (8004180 <HAL_TIM_PWM_Start+0x1fc>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d013      	beq.n	8004122 <HAL_TIM_PWM_Start+0x19e>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a21      	ldr	r2, [pc, #132]	; (8004184 <HAL_TIM_PWM_Start+0x200>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00e      	beq.n	8004122 <HAL_TIM_PWM_Start+0x19e>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a1f      	ldr	r2, [pc, #124]	; (8004188 <HAL_TIM_PWM_Start+0x204>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d009      	beq.n	8004122 <HAL_TIM_PWM_Start+0x19e>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a17      	ldr	r2, [pc, #92]	; (8004170 <HAL_TIM_PWM_Start+0x1ec>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d004      	beq.n	8004122 <HAL_TIM_PWM_Start+0x19e>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a15      	ldr	r2, [pc, #84]	; (8004174 <HAL_TIM_PWM_Start+0x1f0>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d115      	bne.n	800414e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	4b18      	ldr	r3, [pc, #96]	; (800418c <HAL_TIM_PWM_Start+0x208>)
 800412a:	4013      	ands	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2b06      	cmp	r3, #6
 8004132:	d015      	beq.n	8004160 <HAL_TIM_PWM_Start+0x1dc>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413a:	d011      	beq.n	8004160 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0201 	orr.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414c:	e008      	b.n	8004160 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f042 0201 	orr.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	e000      	b.n	8004162 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004160:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40012c00 	.word	0x40012c00
 8004170:	40013400 	.word	0x40013400
 8004174:	40014000 	.word	0x40014000
 8004178:	40014400 	.word	0x40014400
 800417c:	40014800 	.word	0x40014800
 8004180:	40000400 	.word	0x40000400
 8004184:	40000800 	.word	0x40000800
 8004188:	40000c00 	.word	0x40000c00
 800418c:	00010007 	.word	0x00010007

08004190 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e097      	b.n	80042d4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d106      	bne.n	80041be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7fd fd6f 	bl	8001c9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2202      	movs	r2, #2
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6812      	ldr	r2, [r2, #0]
 80041d0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80041d4:	f023 0307 	bic.w	r3, r3, #7
 80041d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	3304      	adds	r3, #4
 80041e2:	4619      	mov	r1, r3
 80041e4:	4610      	mov	r0, r2
 80041e6:	f000 fb6d 	bl	80048c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004212:	f023 0303 	bic.w	r3, r3, #3
 8004216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	021b      	lsls	r3, r3, #8
 8004222:	4313      	orrs	r3, r2
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004230:	f023 030c 	bic.w	r3, r3, #12
 8004234:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800423c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004240:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	021b      	lsls	r3, r3, #8
 800424c:	4313      	orrs	r3, r2
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	011a      	lsls	r2, r3, #4
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	031b      	lsls	r3, r3, #12
 8004260:	4313      	orrs	r3, r2
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4313      	orrs	r3, r2
 8004266:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800426e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004276:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	4313      	orrs	r3, r2
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004304:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d110      	bne.n	800432e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800430c:	7bfb      	ldrb	r3, [r7, #15]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d102      	bne.n	8004318 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004312:	7b7b      	ldrb	r3, [r7, #13]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d001      	beq.n	800431c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e069      	b.n	80043f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800432c:	e031      	b.n	8004392 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b04      	cmp	r3, #4
 8004332:	d110      	bne.n	8004356 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004334:	7bbb      	ldrb	r3, [r7, #14]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d102      	bne.n	8004340 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800433a:	7b3b      	ldrb	r3, [r7, #12]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d001      	beq.n	8004344 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e055      	b.n	80043f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004354:	e01d      	b.n	8004392 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004356:	7bfb      	ldrb	r3, [r7, #15]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d108      	bne.n	800436e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800435c:	7bbb      	ldrb	r3, [r7, #14]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d105      	bne.n	800436e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004362:	7b7b      	ldrb	r3, [r7, #13]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d102      	bne.n	800436e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004368:	7b3b      	ldrb	r3, [r7, #12]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d001      	beq.n	8004372 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e03e      	b.n	80043f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2202      	movs	r2, #2
 8004376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2202      	movs	r2, #2
 800437e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2202      	movs	r2, #2
 8004386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2202      	movs	r2, #2
 800438e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_TIM_Encoder_Start+0xc4>
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	2b04      	cmp	r3, #4
 800439c:	d008      	beq.n	80043b0 <HAL_TIM_Encoder_Start+0xd4>
 800439e:	e00f      	b.n	80043c0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2201      	movs	r2, #1
 80043a6:	2100      	movs	r1, #0
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 fdfb 	bl	8004fa4 <TIM_CCxChannelCmd>
      break;
 80043ae:	e016      	b.n	80043de <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2201      	movs	r2, #1
 80043b6:	2104      	movs	r1, #4
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fdf3 	bl	8004fa4 <TIM_CCxChannelCmd>
      break;
 80043be:	e00e      	b.n	80043de <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2201      	movs	r2, #1
 80043c6:	2100      	movs	r1, #0
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fdeb 	bl	8004fa4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2201      	movs	r2, #1
 80043d4:	2104      	movs	r1, #4
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fde4 	bl	8004fa4 <TIM_CCxChannelCmd>
      break;
 80043dc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f042 0201 	orr.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b02      	cmp	r3, #2
 800440c:	d122      	bne.n	8004454 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b02      	cmp	r3, #2
 800441a:	d11b      	bne.n	8004454 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0202 	mvn.w	r2, #2
 8004424:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fa24 	bl	8004888 <HAL_TIM_IC_CaptureCallback>
 8004440:	e005      	b.n	800444e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fa16 	bl	8004874 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 fa27 	bl	800489c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	2b04      	cmp	r3, #4
 8004460:	d122      	bne.n	80044a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b04      	cmp	r3, #4
 800446e:	d11b      	bne.n	80044a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f06f 0204 	mvn.w	r2, #4
 8004478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2202      	movs	r2, #2
 800447e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f9fa 	bl	8004888 <HAL_TIM_IC_CaptureCallback>
 8004494:	e005      	b.n	80044a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f9ec 	bl	8004874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f9fd 	bl	800489c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	d122      	bne.n	80044fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d11b      	bne.n	80044fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0208 	mvn.w	r2, #8
 80044cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2204      	movs	r2, #4
 80044d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f9d0 	bl	8004888 <HAL_TIM_IC_CaptureCallback>
 80044e8:	e005      	b.n	80044f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f9c2 	bl	8004874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f9d3 	bl	800489c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	2b10      	cmp	r3, #16
 8004508:	d122      	bne.n	8004550 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0310 	and.w	r3, r3, #16
 8004514:	2b10      	cmp	r3, #16
 8004516:	d11b      	bne.n	8004550 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0210 	mvn.w	r2, #16
 8004520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2208      	movs	r2, #8
 8004526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f9a6 	bl	8004888 <HAL_TIM_IC_CaptureCallback>
 800453c:	e005      	b.n	800454a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f998 	bl	8004874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f9a9 	bl	800489c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b01      	cmp	r3, #1
 800455c:	d10e      	bne.n	800457c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b01      	cmp	r3, #1
 800456a:	d107      	bne.n	800457c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0201 	mvn.w	r2, #1
 8004574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f972 	bl	8004860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004586:	2b80      	cmp	r3, #128	; 0x80
 8004588:	d10e      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004594:	2b80      	cmp	r3, #128	; 0x80
 8004596:	d107      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fe34 	bl	8005210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b6:	d10e      	bne.n	80045d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c2:	2b80      	cmp	r3, #128	; 0x80
 80045c4:	d107      	bne.n	80045d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 fe27 	bl	8005224 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e0:	2b40      	cmp	r3, #64	; 0x40
 80045e2:	d10e      	bne.n	8004602 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ee:	2b40      	cmp	r3, #64	; 0x40
 80045f0:	d107      	bne.n	8004602 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f957 	bl	80048b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f003 0320 	and.w	r3, r3, #32
 800460c:	2b20      	cmp	r3, #32
 800460e:	d10e      	bne.n	800462e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b20      	cmp	r3, #32
 800461c:	d107      	bne.n	800462e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f06f 0220 	mvn.w	r2, #32
 8004626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fde7 	bl	80051fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800462e:	bf00      	nop
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004652:	2302      	movs	r3, #2
 8004654:	e0ff      	b.n	8004856 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b14      	cmp	r3, #20
 8004662:	f200 80f0 	bhi.w	8004846 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004666:	a201      	add	r2, pc, #4	; (adr r2, 800466c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466c:	080046c1 	.word	0x080046c1
 8004670:	08004847 	.word	0x08004847
 8004674:	08004847 	.word	0x08004847
 8004678:	08004847 	.word	0x08004847
 800467c:	08004701 	.word	0x08004701
 8004680:	08004847 	.word	0x08004847
 8004684:	08004847 	.word	0x08004847
 8004688:	08004847 	.word	0x08004847
 800468c:	08004743 	.word	0x08004743
 8004690:	08004847 	.word	0x08004847
 8004694:	08004847 	.word	0x08004847
 8004698:	08004847 	.word	0x08004847
 800469c:	08004783 	.word	0x08004783
 80046a0:	08004847 	.word	0x08004847
 80046a4:	08004847 	.word	0x08004847
 80046a8:	08004847 	.word	0x08004847
 80046ac:	080047c5 	.word	0x080047c5
 80046b0:	08004847 	.word	0x08004847
 80046b4:	08004847 	.word	0x08004847
 80046b8:	08004847 	.word	0x08004847
 80046bc:	08004805 	.word	0x08004805
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68b9      	ldr	r1, [r7, #8]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 f996 	bl	80049f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699a      	ldr	r2, [r3, #24]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0208 	orr.w	r2, r2, #8
 80046da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699a      	ldr	r2, [r3, #24]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0204 	bic.w	r2, r2, #4
 80046ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6999      	ldr	r1, [r3, #24]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	691a      	ldr	r2, [r3, #16]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	619a      	str	r2, [r3, #24]
      break;
 80046fe:	e0a5      	b.n	800484c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68b9      	ldr	r1, [r7, #8]
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fa06 	bl	8004b18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699a      	ldr	r2, [r3, #24]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800471a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699a      	ldr	r2, [r3, #24]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800472a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6999      	ldr	r1, [r3, #24]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	021a      	lsls	r2, r3, #8
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	619a      	str	r2, [r3, #24]
      break;
 8004740:	e084      	b.n	800484c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68b9      	ldr	r1, [r7, #8]
 8004748:	4618      	mov	r0, r3
 800474a:	f000 fa6f 	bl	8004c2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	69da      	ldr	r2, [r3, #28]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f042 0208 	orr.w	r2, r2, #8
 800475c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69da      	ldr	r2, [r3, #28]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0204 	bic.w	r2, r2, #4
 800476c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	69d9      	ldr	r1, [r3, #28]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	61da      	str	r2, [r3, #28]
      break;
 8004780:	e064      	b.n	800484c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68b9      	ldr	r1, [r7, #8]
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fad7 	bl	8004d3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	69da      	ldr	r2, [r3, #28]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800479c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	69da      	ldr	r2, [r3, #28]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69d9      	ldr	r1, [r3, #28]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	021a      	lsls	r2, r3, #8
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	61da      	str	r2, [r3, #28]
      break;
 80047c2:	e043      	b.n	800484c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fb20 	bl	8004e10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0208 	orr.w	r2, r2, #8
 80047de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0204 	bic.w	r2, r2, #4
 80047ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	691a      	ldr	r2, [r3, #16]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004802:	e023      	b.n	800484c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68b9      	ldr	r1, [r7, #8]
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fb64 	bl	8004ed8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800481e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800482e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	021a      	lsls	r2, r3, #8
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004844:	e002      	b.n	800484c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	75fb      	strb	r3, [r7, #23]
      break;
 800484a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004854:	7dfb      	ldrb	r3, [r7, #23]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop

08004860 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a40      	ldr	r2, [pc, #256]	; (80049d8 <TIM_Base_SetConfig+0x114>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d013      	beq.n	8004904 <TIM_Base_SetConfig+0x40>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e2:	d00f      	beq.n	8004904 <TIM_Base_SetConfig+0x40>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a3d      	ldr	r2, [pc, #244]	; (80049dc <TIM_Base_SetConfig+0x118>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00b      	beq.n	8004904 <TIM_Base_SetConfig+0x40>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a3c      	ldr	r2, [pc, #240]	; (80049e0 <TIM_Base_SetConfig+0x11c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d007      	beq.n	8004904 <TIM_Base_SetConfig+0x40>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a3b      	ldr	r2, [pc, #236]	; (80049e4 <TIM_Base_SetConfig+0x120>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d003      	beq.n	8004904 <TIM_Base_SetConfig+0x40>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a3a      	ldr	r2, [pc, #232]	; (80049e8 <TIM_Base_SetConfig+0x124>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d108      	bne.n	8004916 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a2f      	ldr	r2, [pc, #188]	; (80049d8 <TIM_Base_SetConfig+0x114>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d01f      	beq.n	800495e <TIM_Base_SetConfig+0x9a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004924:	d01b      	beq.n	800495e <TIM_Base_SetConfig+0x9a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a2c      	ldr	r2, [pc, #176]	; (80049dc <TIM_Base_SetConfig+0x118>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d017      	beq.n	800495e <TIM_Base_SetConfig+0x9a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a2b      	ldr	r2, [pc, #172]	; (80049e0 <TIM_Base_SetConfig+0x11c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d013      	beq.n	800495e <TIM_Base_SetConfig+0x9a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a2a      	ldr	r2, [pc, #168]	; (80049e4 <TIM_Base_SetConfig+0x120>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00f      	beq.n	800495e <TIM_Base_SetConfig+0x9a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a29      	ldr	r2, [pc, #164]	; (80049e8 <TIM_Base_SetConfig+0x124>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00b      	beq.n	800495e <TIM_Base_SetConfig+0x9a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a28      	ldr	r2, [pc, #160]	; (80049ec <TIM_Base_SetConfig+0x128>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d007      	beq.n	800495e <TIM_Base_SetConfig+0x9a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a27      	ldr	r2, [pc, #156]	; (80049f0 <TIM_Base_SetConfig+0x12c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d003      	beq.n	800495e <TIM_Base_SetConfig+0x9a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a26      	ldr	r2, [pc, #152]	; (80049f4 <TIM_Base_SetConfig+0x130>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d108      	bne.n	8004970 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4313      	orrs	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a10      	ldr	r2, [pc, #64]	; (80049d8 <TIM_Base_SetConfig+0x114>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00f      	beq.n	80049bc <TIM_Base_SetConfig+0xf8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a12      	ldr	r2, [pc, #72]	; (80049e8 <TIM_Base_SetConfig+0x124>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00b      	beq.n	80049bc <TIM_Base_SetConfig+0xf8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a11      	ldr	r2, [pc, #68]	; (80049ec <TIM_Base_SetConfig+0x128>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d007      	beq.n	80049bc <TIM_Base_SetConfig+0xf8>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a10      	ldr	r2, [pc, #64]	; (80049f0 <TIM_Base_SetConfig+0x12c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d003      	beq.n	80049bc <TIM_Base_SetConfig+0xf8>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a0f      	ldr	r2, [pc, #60]	; (80049f4 <TIM_Base_SetConfig+0x130>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d103      	bne.n	80049c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	615a      	str	r2, [r3, #20]
}
 80049ca:	bf00      	nop
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	40012c00 	.word	0x40012c00
 80049dc:	40000400 	.word	0x40000400
 80049e0:	40000800 	.word	0x40000800
 80049e4:	40000c00 	.word	0x40000c00
 80049e8:	40013400 	.word	0x40013400
 80049ec:	40014000 	.word	0x40014000
 80049f0:	40014400 	.word	0x40014400
 80049f4:	40014800 	.word	0x40014800

080049f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	f023 0201 	bic.w	r2, r3, #1
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f023 0303 	bic.w	r3, r3, #3
 8004a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f023 0302 	bic.w	r3, r3, #2
 8004a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a2c      	ldr	r2, [pc, #176]	; (8004b04 <TIM_OC1_SetConfig+0x10c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00f      	beq.n	8004a78 <TIM_OC1_SetConfig+0x80>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a2b      	ldr	r2, [pc, #172]	; (8004b08 <TIM_OC1_SetConfig+0x110>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00b      	beq.n	8004a78 <TIM_OC1_SetConfig+0x80>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a2a      	ldr	r2, [pc, #168]	; (8004b0c <TIM_OC1_SetConfig+0x114>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d007      	beq.n	8004a78 <TIM_OC1_SetConfig+0x80>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a29      	ldr	r2, [pc, #164]	; (8004b10 <TIM_OC1_SetConfig+0x118>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d003      	beq.n	8004a78 <TIM_OC1_SetConfig+0x80>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a28      	ldr	r2, [pc, #160]	; (8004b14 <TIM_OC1_SetConfig+0x11c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d10c      	bne.n	8004a92 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f023 0308 	bic.w	r3, r3, #8
 8004a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f023 0304 	bic.w	r3, r3, #4
 8004a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a1b      	ldr	r2, [pc, #108]	; (8004b04 <TIM_OC1_SetConfig+0x10c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00f      	beq.n	8004aba <TIM_OC1_SetConfig+0xc2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a1a      	ldr	r2, [pc, #104]	; (8004b08 <TIM_OC1_SetConfig+0x110>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00b      	beq.n	8004aba <TIM_OC1_SetConfig+0xc2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a19      	ldr	r2, [pc, #100]	; (8004b0c <TIM_OC1_SetConfig+0x114>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d007      	beq.n	8004aba <TIM_OC1_SetConfig+0xc2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a18      	ldr	r2, [pc, #96]	; (8004b10 <TIM_OC1_SetConfig+0x118>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d003      	beq.n	8004aba <TIM_OC1_SetConfig+0xc2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a17      	ldr	r2, [pc, #92]	; (8004b14 <TIM_OC1_SetConfig+0x11c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d111      	bne.n	8004ade <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	621a      	str	r2, [r3, #32]
}
 8004af8:	bf00      	nop
 8004afa:	371c      	adds	r7, #28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	40012c00 	.word	0x40012c00
 8004b08:	40013400 	.word	0x40013400
 8004b0c:	40014000 	.word	0x40014000
 8004b10:	40014400 	.word	0x40014400
 8004b14:	40014800 	.word	0x40014800

08004b18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	f023 0210 	bic.w	r2, r3, #16
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	021b      	lsls	r3, r3, #8
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f023 0320 	bic.w	r3, r3, #32
 8004b66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a28      	ldr	r2, [pc, #160]	; (8004c18 <TIM_OC2_SetConfig+0x100>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d003      	beq.n	8004b84 <TIM_OC2_SetConfig+0x6c>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a27      	ldr	r2, [pc, #156]	; (8004c1c <TIM_OC2_SetConfig+0x104>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d10d      	bne.n	8004ba0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a1d      	ldr	r2, [pc, #116]	; (8004c18 <TIM_OC2_SetConfig+0x100>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00f      	beq.n	8004bc8 <TIM_OC2_SetConfig+0xb0>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a1c      	ldr	r2, [pc, #112]	; (8004c1c <TIM_OC2_SetConfig+0x104>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d00b      	beq.n	8004bc8 <TIM_OC2_SetConfig+0xb0>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a1b      	ldr	r2, [pc, #108]	; (8004c20 <TIM_OC2_SetConfig+0x108>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d007      	beq.n	8004bc8 <TIM_OC2_SetConfig+0xb0>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a1a      	ldr	r2, [pc, #104]	; (8004c24 <TIM_OC2_SetConfig+0x10c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d003      	beq.n	8004bc8 <TIM_OC2_SetConfig+0xb0>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a19      	ldr	r2, [pc, #100]	; (8004c28 <TIM_OC2_SetConfig+0x110>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d113      	bne.n	8004bf0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	621a      	str	r2, [r3, #32]
}
 8004c0a:	bf00      	nop
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40012c00 	.word	0x40012c00
 8004c1c:	40013400 	.word	0x40013400
 8004c20:	40014000 	.word	0x40014000
 8004c24:	40014400 	.word	0x40014400
 8004c28:	40014800 	.word	0x40014800

08004c2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0303 	bic.w	r3, r3, #3
 8004c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	021b      	lsls	r3, r3, #8
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a27      	ldr	r2, [pc, #156]	; (8004d28 <TIM_OC3_SetConfig+0xfc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d003      	beq.n	8004c96 <TIM_OC3_SetConfig+0x6a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a26      	ldr	r2, [pc, #152]	; (8004d2c <TIM_OC3_SetConfig+0x100>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d10d      	bne.n	8004cb2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	021b      	lsls	r3, r3, #8
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a1c      	ldr	r2, [pc, #112]	; (8004d28 <TIM_OC3_SetConfig+0xfc>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00f      	beq.n	8004cda <TIM_OC3_SetConfig+0xae>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a1b      	ldr	r2, [pc, #108]	; (8004d2c <TIM_OC3_SetConfig+0x100>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00b      	beq.n	8004cda <TIM_OC3_SetConfig+0xae>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a1a      	ldr	r2, [pc, #104]	; (8004d30 <TIM_OC3_SetConfig+0x104>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d007      	beq.n	8004cda <TIM_OC3_SetConfig+0xae>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a19      	ldr	r2, [pc, #100]	; (8004d34 <TIM_OC3_SetConfig+0x108>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d003      	beq.n	8004cda <TIM_OC3_SetConfig+0xae>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a18      	ldr	r2, [pc, #96]	; (8004d38 <TIM_OC3_SetConfig+0x10c>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d113      	bne.n	8004d02 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	621a      	str	r2, [r3, #32]
}
 8004d1c:	bf00      	nop
 8004d1e:	371c      	adds	r7, #28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	40012c00 	.word	0x40012c00
 8004d2c:	40013400 	.word	0x40013400
 8004d30:	40014000 	.word	0x40014000
 8004d34:	40014400 	.word	0x40014400
 8004d38:	40014800 	.word	0x40014800

08004d3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	021b      	lsls	r3, r3, #8
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	031b      	lsls	r3, r3, #12
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a18      	ldr	r2, [pc, #96]	; (8004dfc <TIM_OC4_SetConfig+0xc0>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d00f      	beq.n	8004dc0 <TIM_OC4_SetConfig+0x84>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a17      	ldr	r2, [pc, #92]	; (8004e00 <TIM_OC4_SetConfig+0xc4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d00b      	beq.n	8004dc0 <TIM_OC4_SetConfig+0x84>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a16      	ldr	r2, [pc, #88]	; (8004e04 <TIM_OC4_SetConfig+0xc8>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d007      	beq.n	8004dc0 <TIM_OC4_SetConfig+0x84>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a15      	ldr	r2, [pc, #84]	; (8004e08 <TIM_OC4_SetConfig+0xcc>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d003      	beq.n	8004dc0 <TIM_OC4_SetConfig+0x84>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a14      	ldr	r2, [pc, #80]	; (8004e0c <TIM_OC4_SetConfig+0xd0>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d109      	bne.n	8004dd4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	019b      	lsls	r3, r3, #6
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	621a      	str	r2, [r3, #32]
}
 8004dee:	bf00      	nop
 8004df0:	371c      	adds	r7, #28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40012c00 	.word	0x40012c00
 8004e00:	40013400 	.word	0x40013400
 8004e04:	40014000 	.word	0x40014000
 8004e08:	40014400 	.word	0x40014400
 8004e0c:	40014800 	.word	0x40014800

08004e10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	041b      	lsls	r3, r3, #16
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a17      	ldr	r2, [pc, #92]	; (8004ec4 <TIM_OC5_SetConfig+0xb4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00f      	beq.n	8004e8a <TIM_OC5_SetConfig+0x7a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a16      	ldr	r2, [pc, #88]	; (8004ec8 <TIM_OC5_SetConfig+0xb8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00b      	beq.n	8004e8a <TIM_OC5_SetConfig+0x7a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a15      	ldr	r2, [pc, #84]	; (8004ecc <TIM_OC5_SetConfig+0xbc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d007      	beq.n	8004e8a <TIM_OC5_SetConfig+0x7a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a14      	ldr	r2, [pc, #80]	; (8004ed0 <TIM_OC5_SetConfig+0xc0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d003      	beq.n	8004e8a <TIM_OC5_SetConfig+0x7a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a13      	ldr	r2, [pc, #76]	; (8004ed4 <TIM_OC5_SetConfig+0xc4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d109      	bne.n	8004e9e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	021b      	lsls	r3, r3, #8
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	621a      	str	r2, [r3, #32]
}
 8004eb8:	bf00      	nop
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	40012c00 	.word	0x40012c00
 8004ec8:	40013400 	.word	0x40013400
 8004ecc:	40014000 	.word	0x40014000
 8004ed0:	40014400 	.word	0x40014400
 8004ed4:	40014800 	.word	0x40014800

08004ed8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	021b      	lsls	r3, r3, #8
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	051b      	lsls	r3, r3, #20
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a18      	ldr	r2, [pc, #96]	; (8004f90 <TIM_OC6_SetConfig+0xb8>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00f      	beq.n	8004f54 <TIM_OC6_SetConfig+0x7c>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a17      	ldr	r2, [pc, #92]	; (8004f94 <TIM_OC6_SetConfig+0xbc>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00b      	beq.n	8004f54 <TIM_OC6_SetConfig+0x7c>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a16      	ldr	r2, [pc, #88]	; (8004f98 <TIM_OC6_SetConfig+0xc0>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d007      	beq.n	8004f54 <TIM_OC6_SetConfig+0x7c>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a15      	ldr	r2, [pc, #84]	; (8004f9c <TIM_OC6_SetConfig+0xc4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <TIM_OC6_SetConfig+0x7c>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a14      	ldr	r2, [pc, #80]	; (8004fa0 <TIM_OC6_SetConfig+0xc8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d109      	bne.n	8004f68 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	029b      	lsls	r3, r3, #10
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	621a      	str	r2, [r3, #32]
}
 8004f82:	bf00      	nop
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40012c00 	.word	0x40012c00
 8004f94:	40013400 	.word	0x40013400
 8004f98:	40014000 	.word	0x40014000
 8004f9c:	40014400 	.word	0x40014400
 8004fa0:	40014800 	.word	0x40014800

08004fa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f003 031f 	and.w	r3, r3, #31
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a1a      	ldr	r2, [r3, #32]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	401a      	ands	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a1a      	ldr	r2, [r3, #32]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f003 031f 	and.w	r3, r3, #31
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	621a      	str	r2, [r3, #32]
}
 8004fe2:	bf00      	nop
 8004fe4:	371c      	adds	r7, #28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
	...

08004ff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005004:	2302      	movs	r3, #2
 8005006:	e068      	b.n	80050da <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a2e      	ldr	r2, [pc, #184]	; (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d004      	beq.n	800503c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a2d      	ldr	r2, [pc, #180]	; (80050ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d108      	bne.n	800504e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005042:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005054:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1e      	ldr	r2, [pc, #120]	; (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d01d      	beq.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800507a:	d018      	beq.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a1b      	ldr	r2, [pc, #108]	; (80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d013      	beq.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a1a      	ldr	r2, [pc, #104]	; (80050f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d00e      	beq.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a18      	ldr	r2, [pc, #96]	; (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d009      	beq.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a13      	ldr	r2, [pc, #76]	; (80050ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d004      	beq.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a14      	ldr	r2, [pc, #80]	; (80050fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d10c      	bne.n	80050c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40012c00 	.word	0x40012c00
 80050ec:	40013400 	.word	0x40013400
 80050f0:	40000400 	.word	0x40000400
 80050f4:	40000800 	.word	0x40000800
 80050f8:	40000c00 	.word	0x40000c00
 80050fc:	40014000 	.word	0x40014000

08005100 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005118:	2302      	movs	r3, #2
 800511a:	e065      	b.n	80051e8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4313      	orrs	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	041b      	lsls	r3, r3, #16
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a16      	ldr	r2, [pc, #88]	; (80051f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d004      	beq.n	80051aa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a14      	ldr	r2, [pc, #80]	; (80051f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d115      	bne.n	80051d6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	051b      	lsls	r3, r3, #20
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	40012c00 	.word	0x40012c00
 80051f8:	40013400 	.word	0x40013400

080051fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e040      	b.n	80052cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fc fe54 	bl	8001f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2224      	movs	r2, #36	; 0x24
 8005264:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0201 	bic.w	r2, r2, #1
 8005274:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fc18 	bl	8005aac <UART_SetConfig>
 800527c:	4603      	mov	r3, r0
 800527e:	2b01      	cmp	r3, #1
 8005280:	d101      	bne.n	8005286 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e022      	b.n	80052cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fec4 	bl	800601c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0201 	orr.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 ff4b 	bl	8006160 <UART_CheckIdleState>
 80052ca:	4603      	mov	r3, r0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08a      	sub	sp, #40	; 0x28
 80052d8:	af02      	add	r7, sp, #8
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	603b      	str	r3, [r7, #0]
 80052e0:	4613      	mov	r3, r2
 80052e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052e8:	2b20      	cmp	r3, #32
 80052ea:	f040 8082 	bne.w	80053f2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <HAL_UART_Transmit+0x26>
 80052f4:	88fb      	ldrh	r3, [r7, #6]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e07a      	b.n	80053f4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005304:	2b01      	cmp	r3, #1
 8005306:	d101      	bne.n	800530c <HAL_UART_Transmit+0x38>
 8005308:	2302      	movs	r3, #2
 800530a:	e073      	b.n	80053f4 <HAL_UART_Transmit+0x120>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2221      	movs	r2, #33	; 0x21
 8005320:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005322:	f7fc fef1 	bl	8002108 <HAL_GetTick>
 8005326:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	88fa      	ldrh	r2, [r7, #6]
 800532c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	88fa      	ldrh	r2, [r7, #6]
 8005334:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005340:	d108      	bne.n	8005354 <HAL_UART_Transmit+0x80>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d104      	bne.n	8005354 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800534a:	2300      	movs	r3, #0
 800534c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	61bb      	str	r3, [r7, #24]
 8005352:	e003      	b.n	800535c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005358:	2300      	movs	r3, #0
 800535a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005364:	e02d      	b.n	80053c2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2200      	movs	r2, #0
 800536e:	2180      	movs	r1, #128	; 0x80
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 ff3e 	bl	80061f2 <UART_WaitOnFlagUntilTimeout>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e039      	b.n	80053f4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10b      	bne.n	800539e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	881a      	ldrh	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005392:	b292      	uxth	r2, r2
 8005394:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	3302      	adds	r3, #2
 800539a:	61bb      	str	r3, [r7, #24]
 800539c:	e008      	b.n	80053b0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	781a      	ldrb	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	b292      	uxth	r2, r2
 80053a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	3301      	adds	r3, #1
 80053ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	3b01      	subs	r3, #1
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1cb      	bne.n	8005366 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2200      	movs	r2, #0
 80053d6:	2140      	movs	r1, #64	; 0x40
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 ff0a 	bl	80061f2 <UART_WaitOnFlagUntilTimeout>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e005      	b.n	80053f4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2220      	movs	r2, #32
 80053ec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	e000      	b.n	80053f4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80053f2:	2302      	movs	r3, #2
  }
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3720      	adds	r7, #32
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08a      	sub	sp, #40	; 0x28
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	4613      	mov	r3, r2
 8005408:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800540e:	2b20      	cmp	r3, #32
 8005410:	d142      	bne.n	8005498 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <HAL_UART_Receive_IT+0x22>
 8005418:	88fb      	ldrh	r3, [r7, #6]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e03b      	b.n	800549a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005428:	2b01      	cmp	r3, #1
 800542a:	d101      	bne.n	8005430 <HAL_UART_Receive_IT+0x34>
 800542c:	2302      	movs	r3, #2
 800542e:	e034      	b.n	800549a <HAL_UART_Receive_IT+0x9e>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a18      	ldr	r2, [pc, #96]	; (80054a4 <HAL_UART_Receive_IT+0xa8>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d01f      	beq.n	8005488 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d018      	beq.n	8005488 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	e853 3f00 	ldrex	r3, [r3]
 8005462:	613b      	str	r3, [r7, #16]
   return(result);
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800546a:	627b      	str	r3, [r7, #36]	; 0x24
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	461a      	mov	r2, r3
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	623b      	str	r3, [r7, #32]
 8005476:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005478:	69f9      	ldr	r1, [r7, #28]
 800547a:	6a3a      	ldr	r2, [r7, #32]
 800547c:	e841 2300 	strex	r3, r2, [r1]
 8005480:	61bb      	str	r3, [r7, #24]
   return(result);
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1e6      	bne.n	8005456 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005488:	88fb      	ldrh	r3, [r7, #6]
 800548a:	461a      	mov	r2, r3
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 ff74 	bl	800637c <UART_Start_Receive_IT>
 8005494:	4603      	mov	r3, r0
 8005496:	e000      	b.n	800549a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005498:	2302      	movs	r3, #2
  }
}
 800549a:	4618      	mov	r0, r3
 800549c:	3728      	adds	r7, #40	; 0x28
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	40008000 	.word	0x40008000

080054a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b0ba      	sub	sp, #232	; 0xe8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80054ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80054d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80054d6:	4013      	ands	r3, r2
 80054d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80054dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d115      	bne.n	8005510 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80054e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054e8:	f003 0320 	and.w	r3, r3, #32
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00f      	beq.n	8005510 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d009      	beq.n	8005510 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 82a6 	beq.w	8005a52 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	4798      	blx	r3
      }
      return;
 800550e:	e2a0      	b.n	8005a52 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005510:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 8117 	beq.w	8005748 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800551a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005526:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800552a:	4b85      	ldr	r3, [pc, #532]	; (8005740 <HAL_UART_IRQHandler+0x298>)
 800552c:	4013      	ands	r3, r2
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 810a 	beq.w	8005748 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d011      	beq.n	8005564 <HAL_UART_IRQHandler+0xbc>
 8005540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00b      	beq.n	8005564 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2201      	movs	r2, #1
 8005552:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800555a:	f043 0201 	orr.w	r2, r3, #1
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d011      	beq.n	8005594 <HAL_UART_IRQHandler+0xec>
 8005570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00b      	beq.n	8005594 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2202      	movs	r2, #2
 8005582:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800558a:	f043 0204 	orr.w	r2, r3, #4
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b00      	cmp	r3, #0
 800559e:	d011      	beq.n	80055c4 <HAL_UART_IRQHandler+0x11c>
 80055a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00b      	beq.n	80055c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2204      	movs	r2, #4
 80055b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055ba:	f043 0202 	orr.w	r2, r3, #2
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80055c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c8:	f003 0308 	and.w	r3, r3, #8
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d017      	beq.n	8005600 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055d4:	f003 0320 	and.w	r3, r3, #32
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d105      	bne.n	80055e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80055dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00b      	beq.n	8005600 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2208      	movs	r2, #8
 80055ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055f6:	f043 0208 	orr.w	r2, r3, #8
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005608:	2b00      	cmp	r3, #0
 800560a:	d012      	beq.n	8005632 <HAL_UART_IRQHandler+0x18a>
 800560c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005610:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00c      	beq.n	8005632 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005620:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005628:	f043 0220 	orr.w	r2, r3, #32
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 820c 	beq.w	8005a56 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800563e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005642:	f003 0320 	and.w	r3, r3, #32
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00d      	beq.n	8005666 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800564a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b00      	cmp	r3, #0
 8005654:	d007      	beq.n	8005666 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800566c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567a:	2b40      	cmp	r3, #64	; 0x40
 800567c:	d005      	beq.n	800568a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800567e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005682:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005686:	2b00      	cmp	r3, #0
 8005688:	d04f      	beq.n	800572a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 ff40 	bl	8006510 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569a:	2b40      	cmp	r3, #64	; 0x40
 800569c:	d141      	bne.n	8005722 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3308      	adds	r3, #8
 80056a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3308      	adds	r3, #8
 80056c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1d9      	bne.n	800569e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d013      	beq.n	800571a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f6:	4a13      	ldr	r2, [pc, #76]	; (8005744 <HAL_UART_IRQHandler+0x29c>)
 80056f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fc fe81 	bl	8002406 <HAL_DMA_Abort_IT>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d017      	beq.n	800573a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005714:	4610      	mov	r0, r2
 8005716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005718:	e00f      	b.n	800573a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f9b0 	bl	8005a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005720:	e00b      	b.n	800573a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f9ac 	bl	8005a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005728:	e007      	b.n	800573a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f9a8 	bl	8005a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005738:	e18d      	b.n	8005a56 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800573a:	bf00      	nop
    return;
 800573c:	e18b      	b.n	8005a56 <HAL_UART_IRQHandler+0x5ae>
 800573e:	bf00      	nop
 8005740:	04000120 	.word	0x04000120
 8005744:	080065d7 	.word	0x080065d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800574c:	2b01      	cmp	r3, #1
 800574e:	f040 8146 	bne.w	80059de <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005756:	f003 0310 	and.w	r3, r3, #16
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 813f 	beq.w	80059de <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005764:	f003 0310 	and.w	r3, r3, #16
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 8138 	beq.w	80059de <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2210      	movs	r2, #16
 8005774:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005780:	2b40      	cmp	r3, #64	; 0x40
 8005782:	f040 80b4 	bne.w	80058ee <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005792:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 815f 	beq.w	8005a5a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80057a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057a6:	429a      	cmp	r2, r3
 80057a8:	f080 8157 	bcs.w	8005a5a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f040 8085 	bne.w	80058d2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057d4:	e853 3f00 	ldrex	r3, [r3]
 80057d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	461a      	mov	r2, r3
 80057ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80057f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80057fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005802:	e841 2300 	strex	r3, r2, [r1]
 8005806:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800580a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1da      	bne.n	80057c8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3308      	adds	r3, #8
 8005818:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005822:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005824:	f023 0301 	bic.w	r3, r3, #1
 8005828:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3308      	adds	r3, #8
 8005832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005836:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800583a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800583e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005848:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e1      	bne.n	8005812 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3308      	adds	r3, #8
 8005854:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005858:	e853 3f00 	ldrex	r3, [r3]
 800585c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800585e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005864:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3308      	adds	r3, #8
 800586e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005872:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005874:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005876:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005878:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800587a:	e841 2300 	strex	r3, r2, [r1]
 800587e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1e3      	bne.n	800584e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2220      	movs	r2, #32
 800588a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800589a:	e853 3f00 	ldrex	r3, [r3]
 800589e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058a2:	f023 0310 	bic.w	r3, r3, #16
 80058a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	461a      	mov	r2, r3
 80058b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80058b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058bc:	e841 2300 	strex	r3, r2, [r1]
 80058c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1e4      	bne.n	8005892 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fc fd5c 	bl	800238a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058de:	b29b      	uxth	r3, r3
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	4619      	mov	r1, r3
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f8d4 	bl	8005a94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058ec:	e0b5      	b.n	8005a5a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005908:	b29b      	uxth	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	f000 80a7 	beq.w	8005a5e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005910:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 80a2 	beq.w	8005a5e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005922:	e853 3f00 	ldrex	r3, [r3]
 8005926:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800592e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800593c:	647b      	str	r3, [r7, #68]	; 0x44
 800593e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005940:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005942:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005944:	e841 2300 	strex	r3, r2, [r1]
 8005948:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800594a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e4      	bne.n	800591a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3308      	adds	r3, #8
 8005956:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595a:	e853 3f00 	ldrex	r3, [r3]
 800595e:	623b      	str	r3, [r7, #32]
   return(result);
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	3308      	adds	r3, #8
 8005970:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005974:	633a      	str	r2, [r7, #48]	; 0x30
 8005976:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005978:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800597a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800597c:	e841 2300 	strex	r3, r2, [r1]
 8005980:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1e3      	bne.n	8005950 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2220      	movs	r2, #32
 800598c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	e853 3f00 	ldrex	r3, [r3]
 80059a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0310 	bic.w	r3, r3, #16
 80059ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80059bc:	61fb      	str	r3, [r7, #28]
 80059be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c0:	69b9      	ldr	r1, [r7, #24]
 80059c2:	69fa      	ldr	r2, [r7, #28]
 80059c4:	e841 2300 	strex	r3, r2, [r1]
 80059c8:	617b      	str	r3, [r7, #20]
   return(result);
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1e4      	bne.n	800599a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059d4:	4619      	mov	r1, r3
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f85c 	bl	8005a94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059dc:	e03f      	b.n	8005a5e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80059de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00e      	beq.n	8005a08 <HAL_UART_IRQHandler+0x560>
 80059ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d008      	beq.n	8005a08 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80059fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 ff88 	bl	8006916 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a06:	e02d      	b.n	8005a64 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00e      	beq.n	8005a32 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d008      	beq.n	8005a32 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d01c      	beq.n	8005a62 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	4798      	blx	r3
    }
    return;
 8005a30:	e017      	b.n	8005a62 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d012      	beq.n	8005a64 <HAL_UART_IRQHandler+0x5bc>
 8005a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00c      	beq.n	8005a64 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fdd9 	bl	8006602 <UART_EndTransmit_IT>
    return;
 8005a50:	e008      	b.n	8005a64 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005a52:	bf00      	nop
 8005a54:	e006      	b.n	8005a64 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005a56:	bf00      	nop
 8005a58:	e004      	b.n	8005a64 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005a5a:	bf00      	nop
 8005a5c:	e002      	b.n	8005a64 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005a5e:	bf00      	nop
 8005a60:	e000      	b.n	8005a64 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005a62:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005a64:	37e8      	adds	r7, #232	; 0xe8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop

08005a6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ab0:	b08a      	sub	sp, #40	; 0x28
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	689a      	ldr	r2, [r3, #8]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	431a      	orrs	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	4ba4      	ldr	r3, [pc, #656]	; (8005d6c <UART_SetConfig+0x2c0>)
 8005adc:	4013      	ands	r3, r2
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	6812      	ldr	r2, [r2, #0]
 8005ae2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ae4:	430b      	orrs	r3, r1
 8005ae6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a99      	ldr	r2, [pc, #612]	; (8005d70 <UART_SetConfig+0x2c4>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d004      	beq.n	8005b18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b14:	4313      	orrs	r3, r2
 8005b16:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a90      	ldr	r2, [pc, #576]	; (8005d74 <UART_SetConfig+0x2c8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d126      	bne.n	8005b84 <UART_SetConfig+0xd8>
 8005b36:	4b90      	ldr	r3, [pc, #576]	; (8005d78 <UART_SetConfig+0x2cc>)
 8005b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3c:	f003 0303 	and.w	r3, r3, #3
 8005b40:	2b03      	cmp	r3, #3
 8005b42:	d81b      	bhi.n	8005b7c <UART_SetConfig+0xd0>
 8005b44:	a201      	add	r2, pc, #4	; (adr r2, 8005b4c <UART_SetConfig+0xa0>)
 8005b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4a:	bf00      	nop
 8005b4c:	08005b5d 	.word	0x08005b5d
 8005b50:	08005b6d 	.word	0x08005b6d
 8005b54:	08005b65 	.word	0x08005b65
 8005b58:	08005b75 	.word	0x08005b75
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b62:	e116      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005b64:	2302      	movs	r3, #2
 8005b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b6a:	e112      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005b6c:	2304      	movs	r3, #4
 8005b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b72:	e10e      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005b74:	2308      	movs	r3, #8
 8005b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b7a:	e10a      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005b7c:	2310      	movs	r3, #16
 8005b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b82:	e106      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a7c      	ldr	r2, [pc, #496]	; (8005d7c <UART_SetConfig+0x2d0>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d138      	bne.n	8005c00 <UART_SetConfig+0x154>
 8005b8e:	4b7a      	ldr	r3, [pc, #488]	; (8005d78 <UART_SetConfig+0x2cc>)
 8005b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b94:	f003 030c 	and.w	r3, r3, #12
 8005b98:	2b0c      	cmp	r3, #12
 8005b9a:	d82d      	bhi.n	8005bf8 <UART_SetConfig+0x14c>
 8005b9c:	a201      	add	r2, pc, #4	; (adr r2, 8005ba4 <UART_SetConfig+0xf8>)
 8005b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba2:	bf00      	nop
 8005ba4:	08005bd9 	.word	0x08005bd9
 8005ba8:	08005bf9 	.word	0x08005bf9
 8005bac:	08005bf9 	.word	0x08005bf9
 8005bb0:	08005bf9 	.word	0x08005bf9
 8005bb4:	08005be9 	.word	0x08005be9
 8005bb8:	08005bf9 	.word	0x08005bf9
 8005bbc:	08005bf9 	.word	0x08005bf9
 8005bc0:	08005bf9 	.word	0x08005bf9
 8005bc4:	08005be1 	.word	0x08005be1
 8005bc8:	08005bf9 	.word	0x08005bf9
 8005bcc:	08005bf9 	.word	0x08005bf9
 8005bd0:	08005bf9 	.word	0x08005bf9
 8005bd4:	08005bf1 	.word	0x08005bf1
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bde:	e0d8      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005be0:	2302      	movs	r3, #2
 8005be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005be6:	e0d4      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005be8:	2304      	movs	r3, #4
 8005bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bee:	e0d0      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005bf0:	2308      	movs	r3, #8
 8005bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bf6:	e0cc      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005bf8:	2310      	movs	r3, #16
 8005bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bfe:	e0c8      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a5e      	ldr	r2, [pc, #376]	; (8005d80 <UART_SetConfig+0x2d4>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d125      	bne.n	8005c56 <UART_SetConfig+0x1aa>
 8005c0a:	4b5b      	ldr	r3, [pc, #364]	; (8005d78 <UART_SetConfig+0x2cc>)
 8005c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c14:	2b30      	cmp	r3, #48	; 0x30
 8005c16:	d016      	beq.n	8005c46 <UART_SetConfig+0x19a>
 8005c18:	2b30      	cmp	r3, #48	; 0x30
 8005c1a:	d818      	bhi.n	8005c4e <UART_SetConfig+0x1a2>
 8005c1c:	2b20      	cmp	r3, #32
 8005c1e:	d00a      	beq.n	8005c36 <UART_SetConfig+0x18a>
 8005c20:	2b20      	cmp	r3, #32
 8005c22:	d814      	bhi.n	8005c4e <UART_SetConfig+0x1a2>
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <UART_SetConfig+0x182>
 8005c28:	2b10      	cmp	r3, #16
 8005c2a:	d008      	beq.n	8005c3e <UART_SetConfig+0x192>
 8005c2c:	e00f      	b.n	8005c4e <UART_SetConfig+0x1a2>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c34:	e0ad      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005c36:	2302      	movs	r3, #2
 8005c38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c3c:	e0a9      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005c3e:	2304      	movs	r3, #4
 8005c40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c44:	e0a5      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005c46:	2308      	movs	r3, #8
 8005c48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c4c:	e0a1      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005c4e:	2310      	movs	r3, #16
 8005c50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c54:	e09d      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a4a      	ldr	r2, [pc, #296]	; (8005d84 <UART_SetConfig+0x2d8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d125      	bne.n	8005cac <UART_SetConfig+0x200>
 8005c60:	4b45      	ldr	r3, [pc, #276]	; (8005d78 <UART_SetConfig+0x2cc>)
 8005c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c6a:	2bc0      	cmp	r3, #192	; 0xc0
 8005c6c:	d016      	beq.n	8005c9c <UART_SetConfig+0x1f0>
 8005c6e:	2bc0      	cmp	r3, #192	; 0xc0
 8005c70:	d818      	bhi.n	8005ca4 <UART_SetConfig+0x1f8>
 8005c72:	2b80      	cmp	r3, #128	; 0x80
 8005c74:	d00a      	beq.n	8005c8c <UART_SetConfig+0x1e0>
 8005c76:	2b80      	cmp	r3, #128	; 0x80
 8005c78:	d814      	bhi.n	8005ca4 <UART_SetConfig+0x1f8>
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d002      	beq.n	8005c84 <UART_SetConfig+0x1d8>
 8005c7e:	2b40      	cmp	r3, #64	; 0x40
 8005c80:	d008      	beq.n	8005c94 <UART_SetConfig+0x1e8>
 8005c82:	e00f      	b.n	8005ca4 <UART_SetConfig+0x1f8>
 8005c84:	2300      	movs	r3, #0
 8005c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c8a:	e082      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c92:	e07e      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005c94:	2304      	movs	r3, #4
 8005c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c9a:	e07a      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005c9c:	2308      	movs	r3, #8
 8005c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ca2:	e076      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005ca4:	2310      	movs	r3, #16
 8005ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005caa:	e072      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a35      	ldr	r2, [pc, #212]	; (8005d88 <UART_SetConfig+0x2dc>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d12a      	bne.n	8005d0c <UART_SetConfig+0x260>
 8005cb6:	4b30      	ldr	r3, [pc, #192]	; (8005d78 <UART_SetConfig+0x2cc>)
 8005cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cc4:	d01a      	beq.n	8005cfc <UART_SetConfig+0x250>
 8005cc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cca:	d81b      	bhi.n	8005d04 <UART_SetConfig+0x258>
 8005ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cd0:	d00c      	beq.n	8005cec <UART_SetConfig+0x240>
 8005cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cd6:	d815      	bhi.n	8005d04 <UART_SetConfig+0x258>
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <UART_SetConfig+0x238>
 8005cdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ce0:	d008      	beq.n	8005cf4 <UART_SetConfig+0x248>
 8005ce2:	e00f      	b.n	8005d04 <UART_SetConfig+0x258>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cea:	e052      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005cec:	2302      	movs	r3, #2
 8005cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cf2:	e04e      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005cf4:	2304      	movs	r3, #4
 8005cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cfa:	e04a      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005cfc:	2308      	movs	r3, #8
 8005cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d02:	e046      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005d04:	2310      	movs	r3, #16
 8005d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d0a:	e042      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a17      	ldr	r2, [pc, #92]	; (8005d70 <UART_SetConfig+0x2c4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d13a      	bne.n	8005d8c <UART_SetConfig+0x2e0>
 8005d16:	4b18      	ldr	r3, [pc, #96]	; (8005d78 <UART_SetConfig+0x2cc>)
 8005d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d24:	d01a      	beq.n	8005d5c <UART_SetConfig+0x2b0>
 8005d26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d2a:	d81b      	bhi.n	8005d64 <UART_SetConfig+0x2b8>
 8005d2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d30:	d00c      	beq.n	8005d4c <UART_SetConfig+0x2a0>
 8005d32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d36:	d815      	bhi.n	8005d64 <UART_SetConfig+0x2b8>
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <UART_SetConfig+0x298>
 8005d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d40:	d008      	beq.n	8005d54 <UART_SetConfig+0x2a8>
 8005d42:	e00f      	b.n	8005d64 <UART_SetConfig+0x2b8>
 8005d44:	2300      	movs	r3, #0
 8005d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d4a:	e022      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d52:	e01e      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005d54:	2304      	movs	r3, #4
 8005d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d5a:	e01a      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005d5c:	2308      	movs	r3, #8
 8005d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d62:	e016      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005d64:	2310      	movs	r3, #16
 8005d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d6a:	e012      	b.n	8005d92 <UART_SetConfig+0x2e6>
 8005d6c:	efff69f3 	.word	0xefff69f3
 8005d70:	40008000 	.word	0x40008000
 8005d74:	40013800 	.word	0x40013800
 8005d78:	40021000 	.word	0x40021000
 8005d7c:	40004400 	.word	0x40004400
 8005d80:	40004800 	.word	0x40004800
 8005d84:	40004c00 	.word	0x40004c00
 8005d88:	40005000 	.word	0x40005000
 8005d8c:	2310      	movs	r3, #16
 8005d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a9f      	ldr	r2, [pc, #636]	; (8006014 <UART_SetConfig+0x568>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d17a      	bne.n	8005e92 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d824      	bhi.n	8005dee <UART_SetConfig+0x342>
 8005da4:	a201      	add	r2, pc, #4	; (adr r2, 8005dac <UART_SetConfig+0x300>)
 8005da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005daa:	bf00      	nop
 8005dac:	08005dd1 	.word	0x08005dd1
 8005db0:	08005def 	.word	0x08005def
 8005db4:	08005dd9 	.word	0x08005dd9
 8005db8:	08005def 	.word	0x08005def
 8005dbc:	08005ddf 	.word	0x08005ddf
 8005dc0:	08005def 	.word	0x08005def
 8005dc4:	08005def 	.word	0x08005def
 8005dc8:	08005def 	.word	0x08005def
 8005dcc:	08005de7 	.word	0x08005de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dd0:	f7fd fae2 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8005dd4:	61f8      	str	r0, [r7, #28]
        break;
 8005dd6:	e010      	b.n	8005dfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dd8:	4b8f      	ldr	r3, [pc, #572]	; (8006018 <UART_SetConfig+0x56c>)
 8005dda:	61fb      	str	r3, [r7, #28]
        break;
 8005ddc:	e00d      	b.n	8005dfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dde:	f7fd fa43 	bl	8003268 <HAL_RCC_GetSysClockFreq>
 8005de2:	61f8      	str	r0, [r7, #28]
        break;
 8005de4:	e009      	b.n	8005dfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dea:	61fb      	str	r3, [r7, #28]
        break;
 8005dec:	e005      	b.n	8005dfa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005df8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 80fb 	beq.w	8005ff8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	4613      	mov	r3, r2
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	4413      	add	r3, r2
 8005e0c:	69fa      	ldr	r2, [r7, #28]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d305      	bcc.n	8005e1e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e18:	69fa      	ldr	r2, [r7, #28]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d903      	bls.n	8005e26 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005e24:	e0e8      	b.n	8005ff8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	461c      	mov	r4, r3
 8005e2c:	4615      	mov	r5, r2
 8005e2e:	f04f 0200 	mov.w	r2, #0
 8005e32:	f04f 0300 	mov.w	r3, #0
 8005e36:	022b      	lsls	r3, r5, #8
 8005e38:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005e3c:	0222      	lsls	r2, r4, #8
 8005e3e:	68f9      	ldr	r1, [r7, #12]
 8005e40:	6849      	ldr	r1, [r1, #4]
 8005e42:	0849      	lsrs	r1, r1, #1
 8005e44:	2000      	movs	r0, #0
 8005e46:	4688      	mov	r8, r1
 8005e48:	4681      	mov	r9, r0
 8005e4a:	eb12 0a08 	adds.w	sl, r2, r8
 8005e4e:	eb43 0b09 	adc.w	fp, r3, r9
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	603b      	str	r3, [r7, #0]
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e60:	4650      	mov	r0, sl
 8005e62:	4659      	mov	r1, fp
 8005e64:	f7fa fea0 	bl	8000ba8 <__aeabi_uldivmod>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e76:	d308      	bcc.n	8005e8a <UART_SetConfig+0x3de>
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e7e:	d204      	bcs.n	8005e8a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	60da      	str	r2, [r3, #12]
 8005e88:	e0b6      	b.n	8005ff8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005e90:	e0b2      	b.n	8005ff8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e9a:	d15e      	bne.n	8005f5a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005e9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ea0:	2b08      	cmp	r3, #8
 8005ea2:	d828      	bhi.n	8005ef6 <UART_SetConfig+0x44a>
 8005ea4:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <UART_SetConfig+0x400>)
 8005ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eaa:	bf00      	nop
 8005eac:	08005ed1 	.word	0x08005ed1
 8005eb0:	08005ed9 	.word	0x08005ed9
 8005eb4:	08005ee1 	.word	0x08005ee1
 8005eb8:	08005ef7 	.word	0x08005ef7
 8005ebc:	08005ee7 	.word	0x08005ee7
 8005ec0:	08005ef7 	.word	0x08005ef7
 8005ec4:	08005ef7 	.word	0x08005ef7
 8005ec8:	08005ef7 	.word	0x08005ef7
 8005ecc:	08005eef 	.word	0x08005eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ed0:	f7fd fa62 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8005ed4:	61f8      	str	r0, [r7, #28]
        break;
 8005ed6:	e014      	b.n	8005f02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ed8:	f7fd fa74 	bl	80033c4 <HAL_RCC_GetPCLK2Freq>
 8005edc:	61f8      	str	r0, [r7, #28]
        break;
 8005ede:	e010      	b.n	8005f02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ee0:	4b4d      	ldr	r3, [pc, #308]	; (8006018 <UART_SetConfig+0x56c>)
 8005ee2:	61fb      	str	r3, [r7, #28]
        break;
 8005ee4:	e00d      	b.n	8005f02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ee6:	f7fd f9bf 	bl	8003268 <HAL_RCC_GetSysClockFreq>
 8005eea:	61f8      	str	r0, [r7, #28]
        break;
 8005eec:	e009      	b.n	8005f02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ef2:	61fb      	str	r3, [r7, #28]
        break;
 8005ef4:	e005      	b.n	8005f02 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d077      	beq.n	8005ff8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	005a      	lsls	r2, r3, #1
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	085b      	lsrs	r3, r3, #1
 8005f12:	441a      	add	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	2b0f      	cmp	r3, #15
 8005f22:	d916      	bls.n	8005f52 <UART_SetConfig+0x4a6>
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f2a:	d212      	bcs.n	8005f52 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	f023 030f 	bic.w	r3, r3, #15
 8005f34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	085b      	lsrs	r3, r3, #1
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	8afb      	ldrh	r3, [r7, #22]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	8afa      	ldrh	r2, [r7, #22]
 8005f4e:	60da      	str	r2, [r3, #12]
 8005f50:	e052      	b.n	8005ff8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f58:	e04e      	b.n	8005ff8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f5e:	2b08      	cmp	r3, #8
 8005f60:	d827      	bhi.n	8005fb2 <UART_SetConfig+0x506>
 8005f62:	a201      	add	r2, pc, #4	; (adr r2, 8005f68 <UART_SetConfig+0x4bc>)
 8005f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f68:	08005f8d 	.word	0x08005f8d
 8005f6c:	08005f95 	.word	0x08005f95
 8005f70:	08005f9d 	.word	0x08005f9d
 8005f74:	08005fb3 	.word	0x08005fb3
 8005f78:	08005fa3 	.word	0x08005fa3
 8005f7c:	08005fb3 	.word	0x08005fb3
 8005f80:	08005fb3 	.word	0x08005fb3
 8005f84:	08005fb3 	.word	0x08005fb3
 8005f88:	08005fab 	.word	0x08005fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f8c:	f7fd fa04 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8005f90:	61f8      	str	r0, [r7, #28]
        break;
 8005f92:	e014      	b.n	8005fbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f94:	f7fd fa16 	bl	80033c4 <HAL_RCC_GetPCLK2Freq>
 8005f98:	61f8      	str	r0, [r7, #28]
        break;
 8005f9a:	e010      	b.n	8005fbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f9c:	4b1e      	ldr	r3, [pc, #120]	; (8006018 <UART_SetConfig+0x56c>)
 8005f9e:	61fb      	str	r3, [r7, #28]
        break;
 8005fa0:	e00d      	b.n	8005fbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fa2:	f7fd f961 	bl	8003268 <HAL_RCC_GetSysClockFreq>
 8005fa6:	61f8      	str	r0, [r7, #28]
        break;
 8005fa8:	e009      	b.n	8005fbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fae:	61fb      	str	r3, [r7, #28]
        break;
 8005fb0:	e005      	b.n	8005fbe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005fbc:	bf00      	nop
    }

    if (pclk != 0U)
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d019      	beq.n	8005ff8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	085a      	lsrs	r2, r3, #1
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	441a      	add	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	2b0f      	cmp	r3, #15
 8005fdc:	d909      	bls.n	8005ff2 <UART_SetConfig+0x546>
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fe4:	d205      	bcs.n	8005ff2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	60da      	str	r2, [r3, #12]
 8005ff0:	e002      	b.n	8005ff8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006004:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006008:	4618      	mov	r0, r3
 800600a:	3728      	adds	r7, #40	; 0x28
 800600c:	46bd      	mov	sp, r7
 800600e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006012:	bf00      	nop
 8006014:	40008000 	.word	0x40008000
 8006018:	00f42400 	.word	0x00f42400

0800601c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00a      	beq.n	8006046 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	430a      	orrs	r2, r1
 8006044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00a      	beq.n	8006068 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	430a      	orrs	r2, r1
 8006066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	f003 0304 	and.w	r3, r3, #4
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00a      	beq.n	800608a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	f003 0308 	and.w	r3, r3, #8
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00a      	beq.n	80060ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	f003 0310 	and.w	r3, r3, #16
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00a      	beq.n	80060ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	f003 0320 	and.w	r3, r3, #32
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d01a      	beq.n	8006132 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800611a:	d10a      	bne.n	8006132 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00a      	beq.n	8006154 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	430a      	orrs	r2, r1
 8006152:	605a      	str	r2, [r3, #4]
  }
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af02      	add	r7, sp, #8
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006170:	f7fb ffca 	bl	8002108 <HAL_GetTick>
 8006174:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0308 	and.w	r3, r3, #8
 8006180:	2b08      	cmp	r3, #8
 8006182:	d10e      	bne.n	80061a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006184:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f82d 	bl	80061f2 <UART_WaitOnFlagUntilTimeout>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e023      	b.n	80061ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b04      	cmp	r3, #4
 80061ae:	d10e      	bne.n	80061ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f817 	bl	80061f2 <UART_WaitOnFlagUntilTimeout>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e00d      	b.n	80061ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2220      	movs	r2, #32
 80061d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2220      	movs	r2, #32
 80061d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b09c      	sub	sp, #112	; 0x70
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	60f8      	str	r0, [r7, #12]
 80061fa:	60b9      	str	r1, [r7, #8]
 80061fc:	603b      	str	r3, [r7, #0]
 80061fe:	4613      	mov	r3, r2
 8006200:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006202:	e0a5      	b.n	8006350 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006204:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620a:	f000 80a1 	beq.w	8006350 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800620e:	f7fb ff7b 	bl	8002108 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800621a:	429a      	cmp	r2, r3
 800621c:	d302      	bcc.n	8006224 <UART_WaitOnFlagUntilTimeout+0x32>
 800621e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006220:	2b00      	cmp	r3, #0
 8006222:	d13e      	bne.n	80062a2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800622c:	e853 3f00 	ldrex	r3, [r3]
 8006230:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006234:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006238:	667b      	str	r3, [r7, #100]	; 0x64
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	461a      	mov	r2, r3
 8006240:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006242:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006244:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006246:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006248:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800624a:	e841 2300 	strex	r3, r2, [r1]
 800624e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1e6      	bne.n	8006224 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	3308      	adds	r3, #8
 800625c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006260:	e853 3f00 	ldrex	r3, [r3]
 8006264:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006268:	f023 0301 	bic.w	r3, r3, #1
 800626c:	663b      	str	r3, [r7, #96]	; 0x60
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	3308      	adds	r3, #8
 8006274:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006276:	64ba      	str	r2, [r7, #72]	; 0x48
 8006278:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800627c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800627e:	e841 2300 	strex	r3, r2, [r1]
 8006282:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1e5      	bne.n	8006256 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2220      	movs	r2, #32
 800628e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2220      	movs	r2, #32
 8006294:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e067      	b.n	8006372 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d04f      	beq.n	8006350 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062be:	d147      	bne.n	8006350 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062c8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	e853 3f00 	ldrex	r3, [r3]
 80062d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	461a      	mov	r2, r3
 80062e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062e8:	637b      	str	r3, [r7, #52]	; 0x34
 80062ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062f0:	e841 2300 	strex	r3, r2, [r1]
 80062f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1e6      	bne.n	80062ca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3308      	adds	r3, #8
 8006302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	e853 3f00 	ldrex	r3, [r3]
 800630a:	613b      	str	r3, [r7, #16]
   return(result);
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	f023 0301 	bic.w	r3, r3, #1
 8006312:	66bb      	str	r3, [r7, #104]	; 0x68
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3308      	adds	r3, #8
 800631a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800631c:	623a      	str	r2, [r7, #32]
 800631e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006320:	69f9      	ldr	r1, [r7, #28]
 8006322:	6a3a      	ldr	r2, [r7, #32]
 8006324:	e841 2300 	strex	r3, r2, [r1]
 8006328:	61bb      	str	r3, [r7, #24]
   return(result);
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1e5      	bne.n	80062fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2220      	movs	r2, #32
 8006334:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2220      	movs	r2, #32
 800633a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2220      	movs	r2, #32
 8006340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e010      	b.n	8006372 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	69da      	ldr	r2, [r3, #28]
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	4013      	ands	r3, r2
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	429a      	cmp	r2, r3
 800635e:	bf0c      	ite	eq
 8006360:	2301      	moveq	r3, #1
 8006362:	2300      	movne	r3, #0
 8006364:	b2db      	uxtb	r3, r3
 8006366:	461a      	mov	r2, r3
 8006368:	79fb      	ldrb	r3, [r7, #7]
 800636a:	429a      	cmp	r2, r3
 800636c:	f43f af4a 	beq.w	8006204 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3770      	adds	r7, #112	; 0x70
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800637c:	b480      	push	{r7}
 800637e:	b097      	sub	sp, #92	; 0x5c
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	4613      	mov	r3, r2
 8006388:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	88fa      	ldrh	r2, [r7, #6]
 8006394:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	88fa      	ldrh	r2, [r7, #6]
 800639c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ae:	d10e      	bne.n	80063ce <UART_Start_Receive_IT+0x52>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d105      	bne.n	80063c4 <UART_Start_Receive_IT+0x48>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 80063be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063c2:	e02d      	b.n	8006420 <UART_Start_Receive_IT+0xa4>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	22ff      	movs	r2, #255	; 0xff
 80063c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063cc:	e028      	b.n	8006420 <UART_Start_Receive_IT+0xa4>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10d      	bne.n	80063f2 <UART_Start_Receive_IT+0x76>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d104      	bne.n	80063e8 <UART_Start_Receive_IT+0x6c>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	22ff      	movs	r2, #255	; 0xff
 80063e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063e6:	e01b      	b.n	8006420 <UART_Start_Receive_IT+0xa4>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	227f      	movs	r2, #127	; 0x7f
 80063ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063f0:	e016      	b.n	8006420 <UART_Start_Receive_IT+0xa4>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063fa:	d10d      	bne.n	8006418 <UART_Start_Receive_IT+0x9c>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d104      	bne.n	800640e <UART_Start_Receive_IT+0x92>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	227f      	movs	r2, #127	; 0x7f
 8006408:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800640c:	e008      	b.n	8006420 <UART_Start_Receive_IT+0xa4>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	223f      	movs	r2, #63	; 0x3f
 8006412:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006416:	e003      	b.n	8006420 <UART_Start_Receive_IT+0xa4>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2222      	movs	r2, #34	; 0x22
 800642c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3308      	adds	r3, #8
 8006434:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800643e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006440:	f043 0301 	orr.w	r3, r3, #1
 8006444:	657b      	str	r3, [r7, #84]	; 0x54
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3308      	adds	r3, #8
 800644c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800644e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006450:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006452:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006454:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006456:	e841 2300 	strex	r3, r2, [r1]
 800645a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800645c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1e5      	bne.n	800642e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800646a:	d107      	bne.n	800647c <UART_Start_Receive_IT+0x100>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d103      	bne.n	800647c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4a24      	ldr	r2, [pc, #144]	; (8006508 <UART_Start_Receive_IT+0x18c>)
 8006478:	665a      	str	r2, [r3, #100]	; 0x64
 800647a:	e002      	b.n	8006482 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	4a23      	ldr	r2, [pc, #140]	; (800650c <UART_Start_Receive_IT+0x190>)
 8006480:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d019      	beq.n	80064c6 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649a:	e853 3f00 	ldrex	r3, [r3]
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80064a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	461a      	mov	r2, r3
 80064ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064b0:	637b      	str	r3, [r7, #52]	; 0x34
 80064b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064b8:	e841 2300 	strex	r3, r2, [r1]
 80064bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1e6      	bne.n	8006492 <UART_Start_Receive_IT+0x116>
 80064c4:	e018      	b.n	80064f8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	e853 3f00 	ldrex	r3, [r3]
 80064d2:	613b      	str	r3, [r7, #16]
   return(result);
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f043 0320 	orr.w	r3, r3, #32
 80064da:	653b      	str	r3, [r7, #80]	; 0x50
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	461a      	mov	r2, r3
 80064e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064e4:	623b      	str	r3, [r7, #32]
 80064e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e8:	69f9      	ldr	r1, [r7, #28]
 80064ea:	6a3a      	ldr	r2, [r7, #32]
 80064ec:	e841 2300 	strex	r3, r2, [r1]
 80064f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e6      	bne.n	80064c6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	375c      	adds	r7, #92	; 0x5c
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	080067b7 	.word	0x080067b7
 800650c:	08006657 	.word	0x08006657

08006510 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006510:	b480      	push	{r7}
 8006512:	b095      	sub	sp, #84	; 0x54
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006520:	e853 3f00 	ldrex	r3, [r3]
 8006524:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800652c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006536:	643b      	str	r3, [r7, #64]	; 0x40
 8006538:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800653c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800653e:	e841 2300 	strex	r3, r2, [r1]
 8006542:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1e6      	bne.n	8006518 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	3308      	adds	r3, #8
 8006550:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	e853 3f00 	ldrex	r3, [r3]
 8006558:	61fb      	str	r3, [r7, #28]
   return(result);
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	f023 0301 	bic.w	r3, r3, #1
 8006560:	64bb      	str	r3, [r7, #72]	; 0x48
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3308      	adds	r3, #8
 8006568:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800656a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800656c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006572:	e841 2300 	strex	r3, r2, [r1]
 8006576:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1e5      	bne.n	800654a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006582:	2b01      	cmp	r3, #1
 8006584:	d118      	bne.n	80065b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	e853 3f00 	ldrex	r3, [r3]
 8006592:	60bb      	str	r3, [r7, #8]
   return(result);
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f023 0310 	bic.w	r3, r3, #16
 800659a:	647b      	str	r3, [r7, #68]	; 0x44
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	461a      	mov	r2, r3
 80065a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065a4:	61bb      	str	r3, [r7, #24]
 80065a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a8:	6979      	ldr	r1, [r7, #20]
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	e841 2300 	strex	r3, r2, [r1]
 80065b0:	613b      	str	r3, [r7, #16]
   return(result);
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1e6      	bne.n	8006586 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2220      	movs	r2, #32
 80065bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80065ca:	bf00      	nop
 80065cc:	3754      	adds	r7, #84	; 0x54
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b084      	sub	sp, #16
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f7ff fa43 	bl	8005a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065fa:	bf00      	nop
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b088      	sub	sp, #32
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	e853 3f00 	ldrex	r3, [r3]
 8006616:	60bb      	str	r3, [r7, #8]
   return(result);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800661e:	61fb      	str	r3, [r7, #28]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	461a      	mov	r2, r3
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	61bb      	str	r3, [r7, #24]
 800662a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662c:	6979      	ldr	r1, [r7, #20]
 800662e:	69ba      	ldr	r2, [r7, #24]
 8006630:	e841 2300 	strex	r3, r2, [r1]
 8006634:	613b      	str	r3, [r7, #16]
   return(result);
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e6      	bne.n	800660a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2220      	movs	r2, #32
 8006640:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f7ff fa0f 	bl	8005a6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800664e:	bf00      	nop
 8006650:	3720      	adds	r7, #32
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b096      	sub	sp, #88	; 0x58
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006664:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800666c:	2b22      	cmp	r3, #34	; 0x22
 800666e:	f040 8094 	bne.w	800679a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006678:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800667c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006680:	b2d9      	uxtb	r1, r3
 8006682:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006686:	b2da      	uxtb	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668c:	400a      	ands	r2, r1
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006696:	1c5a      	adds	r2, r3, #1
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	3b01      	subs	r3, #1
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d179      	bne.n	80067ae <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c2:	e853 3f00 	ldrex	r3, [r3]
 80066c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066ce:	653b      	str	r3, [r7, #80]	; 0x50
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	461a      	mov	r2, r3
 80066d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066d8:	647b      	str	r3, [r7, #68]	; 0x44
 80066da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066e0:	e841 2300 	strex	r3, r2, [r1]
 80066e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1e6      	bne.n	80066ba <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3308      	adds	r3, #8
 80066f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	e853 3f00 	ldrex	r3, [r3]
 80066fa:	623b      	str	r3, [r7, #32]
   return(result);
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	f023 0301 	bic.w	r3, r3, #1
 8006702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	3308      	adds	r3, #8
 800670a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800670c:	633a      	str	r2, [r7, #48]	; 0x30
 800670e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006714:	e841 2300 	strex	r3, r2, [r1]
 8006718:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e5      	bne.n	80066ec <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2220      	movs	r2, #32
 8006724:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006730:	2b01      	cmp	r3, #1
 8006732:	d12e      	bne.n	8006792 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	e853 3f00 	ldrex	r3, [r3]
 8006746:	60fb      	str	r3, [r7, #12]
   return(result);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 0310 	bic.w	r3, r3, #16
 800674e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	461a      	mov	r2, r3
 8006756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006758:	61fb      	str	r3, [r7, #28]
 800675a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675c:	69b9      	ldr	r1, [r7, #24]
 800675e:	69fa      	ldr	r2, [r7, #28]
 8006760:	e841 2300 	strex	r3, r2, [r1]
 8006764:	617b      	str	r3, [r7, #20]
   return(result);
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1e6      	bne.n	800673a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	f003 0310 	and.w	r3, r3, #16
 8006776:	2b10      	cmp	r3, #16
 8006778:	d103      	bne.n	8006782 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2210      	movs	r2, #16
 8006780:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006788:	4619      	mov	r1, r3
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7ff f982 	bl	8005a94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006790:	e00d      	b.n	80067ae <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7fa fe58 	bl	8001448 <HAL_UART_RxCpltCallback>
}
 8006798:	e009      	b.n	80067ae <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	8b1b      	ldrh	r3, [r3, #24]
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f042 0208 	orr.w	r2, r2, #8
 80067aa:	b292      	uxth	r2, r2
 80067ac:	831a      	strh	r2, [r3, #24]
}
 80067ae:	bf00      	nop
 80067b0:	3758      	adds	r7, #88	; 0x58
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b096      	sub	sp, #88	; 0x58
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067cc:	2b22      	cmp	r3, #34	; 0x22
 80067ce:	f040 8094 	bne.w	80068fa <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80067d8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80067e2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80067e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80067ea:	4013      	ands	r3, r2
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f6:	1c9a      	adds	r2, r3, #2
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006802:	b29b      	uxth	r3, r3
 8006804:	3b01      	subs	r3, #1
 8006806:	b29a      	uxth	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006814:	b29b      	uxth	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d179      	bne.n	800690e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006822:	e853 3f00 	ldrex	r3, [r3]
 8006826:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800682e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	461a      	mov	r2, r3
 8006836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006838:	643b      	str	r3, [r7, #64]	; 0x40
 800683a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800683e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006840:	e841 2300 	strex	r3, r2, [r1]
 8006844:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e6      	bne.n	800681a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3308      	adds	r3, #8
 8006852:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	e853 3f00 	ldrex	r3, [r3]
 800685a:	61fb      	str	r3, [r7, #28]
   return(result);
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	f023 0301 	bic.w	r3, r3, #1
 8006862:	64bb      	str	r3, [r7, #72]	; 0x48
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3308      	adds	r3, #8
 800686a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800686c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800686e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006870:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006874:	e841 2300 	strex	r3, r2, [r1]
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1e5      	bne.n	800684c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2220      	movs	r2, #32
 8006884:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006890:	2b01      	cmp	r3, #1
 8006892:	d12e      	bne.n	80068f2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	e853 3f00 	ldrex	r3, [r3]
 80068a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f023 0310 	bic.w	r3, r3, #16
 80068ae:	647b      	str	r3, [r7, #68]	; 0x44
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	461a      	mov	r2, r3
 80068b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068b8:	61bb      	str	r3, [r7, #24]
 80068ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068bc:	6979      	ldr	r1, [r7, #20]
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	e841 2300 	strex	r3, r2, [r1]
 80068c4:	613b      	str	r3, [r7, #16]
   return(result);
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1e6      	bne.n	800689a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	f003 0310 	and.w	r3, r3, #16
 80068d6:	2b10      	cmp	r3, #16
 80068d8:	d103      	bne.n	80068e2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2210      	movs	r2, #16
 80068e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80068e8:	4619      	mov	r1, r3
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7ff f8d2 	bl	8005a94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80068f0:	e00d      	b.n	800690e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7fa fda8 	bl	8001448 <HAL_UART_RxCpltCallback>
}
 80068f8:	e009      	b.n	800690e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	8b1b      	ldrh	r3, [r3, #24]
 8006900:	b29a      	uxth	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f042 0208 	orr.w	r2, r2, #8
 800690a:	b292      	uxth	r2, r2
 800690c:	831a      	strh	r2, [r3, #24]
}
 800690e:	bf00      	nop
 8006910:	3758      	adds	r7, #88	; 0x58
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006916:	b480      	push	{r7}
 8006918:	b083      	sub	sp, #12
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800691e:	bf00      	nop
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
	...

0800692c <__errno>:
 800692c:	4b01      	ldr	r3, [pc, #4]	; (8006934 <__errno+0x8>)
 800692e:	6818      	ldr	r0, [r3, #0]
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	20000034 	.word	0x20000034

08006938 <__libc_init_array>:
 8006938:	b570      	push	{r4, r5, r6, lr}
 800693a:	4d0d      	ldr	r5, [pc, #52]	; (8006970 <__libc_init_array+0x38>)
 800693c:	4c0d      	ldr	r4, [pc, #52]	; (8006974 <__libc_init_array+0x3c>)
 800693e:	1b64      	subs	r4, r4, r5
 8006940:	10a4      	asrs	r4, r4, #2
 8006942:	2600      	movs	r6, #0
 8006944:	42a6      	cmp	r6, r4
 8006946:	d109      	bne.n	800695c <__libc_init_array+0x24>
 8006948:	4d0b      	ldr	r5, [pc, #44]	; (8006978 <__libc_init_array+0x40>)
 800694a:	4c0c      	ldr	r4, [pc, #48]	; (800697c <__libc_init_array+0x44>)
 800694c:	f002 fd50 	bl	80093f0 <_init>
 8006950:	1b64      	subs	r4, r4, r5
 8006952:	10a4      	asrs	r4, r4, #2
 8006954:	2600      	movs	r6, #0
 8006956:	42a6      	cmp	r6, r4
 8006958:	d105      	bne.n	8006966 <__libc_init_array+0x2e>
 800695a:	bd70      	pop	{r4, r5, r6, pc}
 800695c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006960:	4798      	blx	r3
 8006962:	3601      	adds	r6, #1
 8006964:	e7ee      	b.n	8006944 <__libc_init_array+0xc>
 8006966:	f855 3b04 	ldr.w	r3, [r5], #4
 800696a:	4798      	blx	r3
 800696c:	3601      	adds	r6, #1
 800696e:	e7f2      	b.n	8006956 <__libc_init_array+0x1e>
 8006970:	08009874 	.word	0x08009874
 8006974:	08009874 	.word	0x08009874
 8006978:	08009874 	.word	0x08009874
 800697c:	08009878 	.word	0x08009878

08006980 <memset>:
 8006980:	4402      	add	r2, r0
 8006982:	4603      	mov	r3, r0
 8006984:	4293      	cmp	r3, r2
 8006986:	d100      	bne.n	800698a <memset+0xa>
 8006988:	4770      	bx	lr
 800698a:	f803 1b01 	strb.w	r1, [r3], #1
 800698e:	e7f9      	b.n	8006984 <memset+0x4>

08006990 <__cvt>:
 8006990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006994:	ec55 4b10 	vmov	r4, r5, d0
 8006998:	2d00      	cmp	r5, #0
 800699a:	460e      	mov	r6, r1
 800699c:	4619      	mov	r1, r3
 800699e:	462b      	mov	r3, r5
 80069a0:	bfbb      	ittet	lt
 80069a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80069a6:	461d      	movlt	r5, r3
 80069a8:	2300      	movge	r3, #0
 80069aa:	232d      	movlt	r3, #45	; 0x2d
 80069ac:	700b      	strb	r3, [r1, #0]
 80069ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80069b4:	4691      	mov	r9, r2
 80069b6:	f023 0820 	bic.w	r8, r3, #32
 80069ba:	bfbc      	itt	lt
 80069bc:	4622      	movlt	r2, r4
 80069be:	4614      	movlt	r4, r2
 80069c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069c4:	d005      	beq.n	80069d2 <__cvt+0x42>
 80069c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80069ca:	d100      	bne.n	80069ce <__cvt+0x3e>
 80069cc:	3601      	adds	r6, #1
 80069ce:	2102      	movs	r1, #2
 80069d0:	e000      	b.n	80069d4 <__cvt+0x44>
 80069d2:	2103      	movs	r1, #3
 80069d4:	ab03      	add	r3, sp, #12
 80069d6:	9301      	str	r3, [sp, #4]
 80069d8:	ab02      	add	r3, sp, #8
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	ec45 4b10 	vmov	d0, r4, r5
 80069e0:	4653      	mov	r3, sl
 80069e2:	4632      	mov	r2, r6
 80069e4:	f000 fce4 	bl	80073b0 <_dtoa_r>
 80069e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80069ec:	4607      	mov	r7, r0
 80069ee:	d102      	bne.n	80069f6 <__cvt+0x66>
 80069f0:	f019 0f01 	tst.w	r9, #1
 80069f4:	d022      	beq.n	8006a3c <__cvt+0xac>
 80069f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069fa:	eb07 0906 	add.w	r9, r7, r6
 80069fe:	d110      	bne.n	8006a22 <__cvt+0x92>
 8006a00:	783b      	ldrb	r3, [r7, #0]
 8006a02:	2b30      	cmp	r3, #48	; 0x30
 8006a04:	d10a      	bne.n	8006a1c <__cvt+0x8c>
 8006a06:	2200      	movs	r2, #0
 8006a08:	2300      	movs	r3, #0
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	4629      	mov	r1, r5
 8006a0e:	f7fa f85b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a12:	b918      	cbnz	r0, 8006a1c <__cvt+0x8c>
 8006a14:	f1c6 0601 	rsb	r6, r6, #1
 8006a18:	f8ca 6000 	str.w	r6, [sl]
 8006a1c:	f8da 3000 	ldr.w	r3, [sl]
 8006a20:	4499      	add	r9, r3
 8006a22:	2200      	movs	r2, #0
 8006a24:	2300      	movs	r3, #0
 8006a26:	4620      	mov	r0, r4
 8006a28:	4629      	mov	r1, r5
 8006a2a:	f7fa f84d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a2e:	b108      	cbz	r0, 8006a34 <__cvt+0xa4>
 8006a30:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a34:	2230      	movs	r2, #48	; 0x30
 8006a36:	9b03      	ldr	r3, [sp, #12]
 8006a38:	454b      	cmp	r3, r9
 8006a3a:	d307      	bcc.n	8006a4c <__cvt+0xbc>
 8006a3c:	9b03      	ldr	r3, [sp, #12]
 8006a3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a40:	1bdb      	subs	r3, r3, r7
 8006a42:	4638      	mov	r0, r7
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	b004      	add	sp, #16
 8006a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a4c:	1c59      	adds	r1, r3, #1
 8006a4e:	9103      	str	r1, [sp, #12]
 8006a50:	701a      	strb	r2, [r3, #0]
 8006a52:	e7f0      	b.n	8006a36 <__cvt+0xa6>

08006a54 <__exponent>:
 8006a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a56:	4603      	mov	r3, r0
 8006a58:	2900      	cmp	r1, #0
 8006a5a:	bfb8      	it	lt
 8006a5c:	4249      	neglt	r1, r1
 8006a5e:	f803 2b02 	strb.w	r2, [r3], #2
 8006a62:	bfb4      	ite	lt
 8006a64:	222d      	movlt	r2, #45	; 0x2d
 8006a66:	222b      	movge	r2, #43	; 0x2b
 8006a68:	2909      	cmp	r1, #9
 8006a6a:	7042      	strb	r2, [r0, #1]
 8006a6c:	dd2a      	ble.n	8006ac4 <__exponent+0x70>
 8006a6e:	f10d 0407 	add.w	r4, sp, #7
 8006a72:	46a4      	mov	ip, r4
 8006a74:	270a      	movs	r7, #10
 8006a76:	46a6      	mov	lr, r4
 8006a78:	460a      	mov	r2, r1
 8006a7a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006a7e:	fb07 1516 	mls	r5, r7, r6, r1
 8006a82:	3530      	adds	r5, #48	; 0x30
 8006a84:	2a63      	cmp	r2, #99	; 0x63
 8006a86:	f104 34ff 	add.w	r4, r4, #4294967295
 8006a8a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006a8e:	4631      	mov	r1, r6
 8006a90:	dcf1      	bgt.n	8006a76 <__exponent+0x22>
 8006a92:	3130      	adds	r1, #48	; 0x30
 8006a94:	f1ae 0502 	sub.w	r5, lr, #2
 8006a98:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006a9c:	1c44      	adds	r4, r0, #1
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	4561      	cmp	r1, ip
 8006aa2:	d30a      	bcc.n	8006aba <__exponent+0x66>
 8006aa4:	f10d 0209 	add.w	r2, sp, #9
 8006aa8:	eba2 020e 	sub.w	r2, r2, lr
 8006aac:	4565      	cmp	r5, ip
 8006aae:	bf88      	it	hi
 8006ab0:	2200      	movhi	r2, #0
 8006ab2:	4413      	add	r3, r2
 8006ab4:	1a18      	subs	r0, r3, r0
 8006ab6:	b003      	add	sp, #12
 8006ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006abe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006ac2:	e7ed      	b.n	8006aa0 <__exponent+0x4c>
 8006ac4:	2330      	movs	r3, #48	; 0x30
 8006ac6:	3130      	adds	r1, #48	; 0x30
 8006ac8:	7083      	strb	r3, [r0, #2]
 8006aca:	70c1      	strb	r1, [r0, #3]
 8006acc:	1d03      	adds	r3, r0, #4
 8006ace:	e7f1      	b.n	8006ab4 <__exponent+0x60>

08006ad0 <_printf_float>:
 8006ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad4:	ed2d 8b02 	vpush	{d8}
 8006ad8:	b08d      	sub	sp, #52	; 0x34
 8006ada:	460c      	mov	r4, r1
 8006adc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006ae0:	4616      	mov	r6, r2
 8006ae2:	461f      	mov	r7, r3
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	f001 fb47 	bl	8008178 <_localeconv_r>
 8006aea:	f8d0 a000 	ldr.w	sl, [r0]
 8006aee:	4650      	mov	r0, sl
 8006af0:	f7f9 fb6e 	bl	80001d0 <strlen>
 8006af4:	2300      	movs	r3, #0
 8006af6:	930a      	str	r3, [sp, #40]	; 0x28
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	9305      	str	r3, [sp, #20]
 8006afc:	f8d8 3000 	ldr.w	r3, [r8]
 8006b00:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006b04:	3307      	adds	r3, #7
 8006b06:	f023 0307 	bic.w	r3, r3, #7
 8006b0a:	f103 0208 	add.w	r2, r3, #8
 8006b0e:	f8c8 2000 	str.w	r2, [r8]
 8006b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b16:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006b1a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006b1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b22:	9307      	str	r3, [sp, #28]
 8006b24:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b28:	ee08 0a10 	vmov	s16, r0
 8006b2c:	4b9f      	ldr	r3, [pc, #636]	; (8006dac <_printf_float+0x2dc>)
 8006b2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b32:	f04f 32ff 	mov.w	r2, #4294967295
 8006b36:	f7f9 fff9 	bl	8000b2c <__aeabi_dcmpun>
 8006b3a:	bb88      	cbnz	r0, 8006ba0 <_printf_float+0xd0>
 8006b3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b40:	4b9a      	ldr	r3, [pc, #616]	; (8006dac <_printf_float+0x2dc>)
 8006b42:	f04f 32ff 	mov.w	r2, #4294967295
 8006b46:	f7f9 ffd3 	bl	8000af0 <__aeabi_dcmple>
 8006b4a:	bb48      	cbnz	r0, 8006ba0 <_printf_float+0xd0>
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	2300      	movs	r3, #0
 8006b50:	4640      	mov	r0, r8
 8006b52:	4649      	mov	r1, r9
 8006b54:	f7f9 ffc2 	bl	8000adc <__aeabi_dcmplt>
 8006b58:	b110      	cbz	r0, 8006b60 <_printf_float+0x90>
 8006b5a:	232d      	movs	r3, #45	; 0x2d
 8006b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b60:	4b93      	ldr	r3, [pc, #588]	; (8006db0 <_printf_float+0x2e0>)
 8006b62:	4894      	ldr	r0, [pc, #592]	; (8006db4 <_printf_float+0x2e4>)
 8006b64:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006b68:	bf94      	ite	ls
 8006b6a:	4698      	movls	r8, r3
 8006b6c:	4680      	movhi	r8, r0
 8006b6e:	2303      	movs	r3, #3
 8006b70:	6123      	str	r3, [r4, #16]
 8006b72:	9b05      	ldr	r3, [sp, #20]
 8006b74:	f023 0204 	bic.w	r2, r3, #4
 8006b78:	6022      	str	r2, [r4, #0]
 8006b7a:	f04f 0900 	mov.w	r9, #0
 8006b7e:	9700      	str	r7, [sp, #0]
 8006b80:	4633      	mov	r3, r6
 8006b82:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b84:	4621      	mov	r1, r4
 8006b86:	4628      	mov	r0, r5
 8006b88:	f000 f9d8 	bl	8006f3c <_printf_common>
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	f040 8090 	bne.w	8006cb2 <_printf_float+0x1e2>
 8006b92:	f04f 30ff 	mov.w	r0, #4294967295
 8006b96:	b00d      	add	sp, #52	; 0x34
 8006b98:	ecbd 8b02 	vpop	{d8}
 8006b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba0:	4642      	mov	r2, r8
 8006ba2:	464b      	mov	r3, r9
 8006ba4:	4640      	mov	r0, r8
 8006ba6:	4649      	mov	r1, r9
 8006ba8:	f7f9 ffc0 	bl	8000b2c <__aeabi_dcmpun>
 8006bac:	b140      	cbz	r0, 8006bc0 <_printf_float+0xf0>
 8006bae:	464b      	mov	r3, r9
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	bfbc      	itt	lt
 8006bb4:	232d      	movlt	r3, #45	; 0x2d
 8006bb6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006bba:	487f      	ldr	r0, [pc, #508]	; (8006db8 <_printf_float+0x2e8>)
 8006bbc:	4b7f      	ldr	r3, [pc, #508]	; (8006dbc <_printf_float+0x2ec>)
 8006bbe:	e7d1      	b.n	8006b64 <_printf_float+0x94>
 8006bc0:	6863      	ldr	r3, [r4, #4]
 8006bc2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006bc6:	9206      	str	r2, [sp, #24]
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	d13f      	bne.n	8006c4c <_printf_float+0x17c>
 8006bcc:	2306      	movs	r3, #6
 8006bce:	6063      	str	r3, [r4, #4]
 8006bd0:	9b05      	ldr	r3, [sp, #20]
 8006bd2:	6861      	ldr	r1, [r4, #4]
 8006bd4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006bd8:	2300      	movs	r3, #0
 8006bda:	9303      	str	r3, [sp, #12]
 8006bdc:	ab0a      	add	r3, sp, #40	; 0x28
 8006bde:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006be2:	ab09      	add	r3, sp, #36	; 0x24
 8006be4:	ec49 8b10 	vmov	d0, r8, r9
 8006be8:	9300      	str	r3, [sp, #0]
 8006bea:	6022      	str	r2, [r4, #0]
 8006bec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	f7ff fecd 	bl	8006990 <__cvt>
 8006bf6:	9b06      	ldr	r3, [sp, #24]
 8006bf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bfa:	2b47      	cmp	r3, #71	; 0x47
 8006bfc:	4680      	mov	r8, r0
 8006bfe:	d108      	bne.n	8006c12 <_printf_float+0x142>
 8006c00:	1cc8      	adds	r0, r1, #3
 8006c02:	db02      	blt.n	8006c0a <_printf_float+0x13a>
 8006c04:	6863      	ldr	r3, [r4, #4]
 8006c06:	4299      	cmp	r1, r3
 8006c08:	dd41      	ble.n	8006c8e <_printf_float+0x1be>
 8006c0a:	f1ab 0b02 	sub.w	fp, fp, #2
 8006c0e:	fa5f fb8b 	uxtb.w	fp, fp
 8006c12:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c16:	d820      	bhi.n	8006c5a <_printf_float+0x18a>
 8006c18:	3901      	subs	r1, #1
 8006c1a:	465a      	mov	r2, fp
 8006c1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c20:	9109      	str	r1, [sp, #36]	; 0x24
 8006c22:	f7ff ff17 	bl	8006a54 <__exponent>
 8006c26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c28:	1813      	adds	r3, r2, r0
 8006c2a:	2a01      	cmp	r2, #1
 8006c2c:	4681      	mov	r9, r0
 8006c2e:	6123      	str	r3, [r4, #16]
 8006c30:	dc02      	bgt.n	8006c38 <_printf_float+0x168>
 8006c32:	6822      	ldr	r2, [r4, #0]
 8006c34:	07d2      	lsls	r2, r2, #31
 8006c36:	d501      	bpl.n	8006c3c <_printf_float+0x16c>
 8006c38:	3301      	adds	r3, #1
 8006c3a:	6123      	str	r3, [r4, #16]
 8006c3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d09c      	beq.n	8006b7e <_printf_float+0xae>
 8006c44:	232d      	movs	r3, #45	; 0x2d
 8006c46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c4a:	e798      	b.n	8006b7e <_printf_float+0xae>
 8006c4c:	9a06      	ldr	r2, [sp, #24]
 8006c4e:	2a47      	cmp	r2, #71	; 0x47
 8006c50:	d1be      	bne.n	8006bd0 <_printf_float+0x100>
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1bc      	bne.n	8006bd0 <_printf_float+0x100>
 8006c56:	2301      	movs	r3, #1
 8006c58:	e7b9      	b.n	8006bce <_printf_float+0xfe>
 8006c5a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006c5e:	d118      	bne.n	8006c92 <_printf_float+0x1c2>
 8006c60:	2900      	cmp	r1, #0
 8006c62:	6863      	ldr	r3, [r4, #4]
 8006c64:	dd0b      	ble.n	8006c7e <_printf_float+0x1ae>
 8006c66:	6121      	str	r1, [r4, #16]
 8006c68:	b913      	cbnz	r3, 8006c70 <_printf_float+0x1a0>
 8006c6a:	6822      	ldr	r2, [r4, #0]
 8006c6c:	07d0      	lsls	r0, r2, #31
 8006c6e:	d502      	bpl.n	8006c76 <_printf_float+0x1a6>
 8006c70:	3301      	adds	r3, #1
 8006c72:	440b      	add	r3, r1
 8006c74:	6123      	str	r3, [r4, #16]
 8006c76:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c78:	f04f 0900 	mov.w	r9, #0
 8006c7c:	e7de      	b.n	8006c3c <_printf_float+0x16c>
 8006c7e:	b913      	cbnz	r3, 8006c86 <_printf_float+0x1b6>
 8006c80:	6822      	ldr	r2, [r4, #0]
 8006c82:	07d2      	lsls	r2, r2, #31
 8006c84:	d501      	bpl.n	8006c8a <_printf_float+0x1ba>
 8006c86:	3302      	adds	r3, #2
 8006c88:	e7f4      	b.n	8006c74 <_printf_float+0x1a4>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e7f2      	b.n	8006c74 <_printf_float+0x1a4>
 8006c8e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c94:	4299      	cmp	r1, r3
 8006c96:	db05      	blt.n	8006ca4 <_printf_float+0x1d4>
 8006c98:	6823      	ldr	r3, [r4, #0]
 8006c9a:	6121      	str	r1, [r4, #16]
 8006c9c:	07d8      	lsls	r0, r3, #31
 8006c9e:	d5ea      	bpl.n	8006c76 <_printf_float+0x1a6>
 8006ca0:	1c4b      	adds	r3, r1, #1
 8006ca2:	e7e7      	b.n	8006c74 <_printf_float+0x1a4>
 8006ca4:	2900      	cmp	r1, #0
 8006ca6:	bfd4      	ite	le
 8006ca8:	f1c1 0202 	rsble	r2, r1, #2
 8006cac:	2201      	movgt	r2, #1
 8006cae:	4413      	add	r3, r2
 8006cb0:	e7e0      	b.n	8006c74 <_printf_float+0x1a4>
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	055a      	lsls	r2, r3, #21
 8006cb6:	d407      	bmi.n	8006cc8 <_printf_float+0x1f8>
 8006cb8:	6923      	ldr	r3, [r4, #16]
 8006cba:	4642      	mov	r2, r8
 8006cbc:	4631      	mov	r1, r6
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	47b8      	blx	r7
 8006cc2:	3001      	adds	r0, #1
 8006cc4:	d12c      	bne.n	8006d20 <_printf_float+0x250>
 8006cc6:	e764      	b.n	8006b92 <_printf_float+0xc2>
 8006cc8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ccc:	f240 80e0 	bls.w	8006e90 <_printf_float+0x3c0>
 8006cd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	f7f9 fef6 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	d034      	beq.n	8006d4a <_printf_float+0x27a>
 8006ce0:	4a37      	ldr	r2, [pc, #220]	; (8006dc0 <_printf_float+0x2f0>)
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	4631      	mov	r1, r6
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	47b8      	blx	r7
 8006cea:	3001      	adds	r0, #1
 8006cec:	f43f af51 	beq.w	8006b92 <_printf_float+0xc2>
 8006cf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	db02      	blt.n	8006cfe <_printf_float+0x22e>
 8006cf8:	6823      	ldr	r3, [r4, #0]
 8006cfa:	07d8      	lsls	r0, r3, #31
 8006cfc:	d510      	bpl.n	8006d20 <_printf_float+0x250>
 8006cfe:	ee18 3a10 	vmov	r3, s16
 8006d02:	4652      	mov	r2, sl
 8006d04:	4631      	mov	r1, r6
 8006d06:	4628      	mov	r0, r5
 8006d08:	47b8      	blx	r7
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	f43f af41 	beq.w	8006b92 <_printf_float+0xc2>
 8006d10:	f04f 0800 	mov.w	r8, #0
 8006d14:	f104 091a 	add.w	r9, r4, #26
 8006d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	4543      	cmp	r3, r8
 8006d1e:	dc09      	bgt.n	8006d34 <_printf_float+0x264>
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	079b      	lsls	r3, r3, #30
 8006d24:	f100 8105 	bmi.w	8006f32 <_printf_float+0x462>
 8006d28:	68e0      	ldr	r0, [r4, #12]
 8006d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d2c:	4298      	cmp	r0, r3
 8006d2e:	bfb8      	it	lt
 8006d30:	4618      	movlt	r0, r3
 8006d32:	e730      	b.n	8006b96 <_printf_float+0xc6>
 8006d34:	2301      	movs	r3, #1
 8006d36:	464a      	mov	r2, r9
 8006d38:	4631      	mov	r1, r6
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	47b8      	blx	r7
 8006d3e:	3001      	adds	r0, #1
 8006d40:	f43f af27 	beq.w	8006b92 <_printf_float+0xc2>
 8006d44:	f108 0801 	add.w	r8, r8, #1
 8006d48:	e7e6      	b.n	8006d18 <_printf_float+0x248>
 8006d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	dc39      	bgt.n	8006dc4 <_printf_float+0x2f4>
 8006d50:	4a1b      	ldr	r2, [pc, #108]	; (8006dc0 <_printf_float+0x2f0>)
 8006d52:	2301      	movs	r3, #1
 8006d54:	4631      	mov	r1, r6
 8006d56:	4628      	mov	r0, r5
 8006d58:	47b8      	blx	r7
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	f43f af19 	beq.w	8006b92 <_printf_float+0xc2>
 8006d60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d64:	4313      	orrs	r3, r2
 8006d66:	d102      	bne.n	8006d6e <_printf_float+0x29e>
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	07d9      	lsls	r1, r3, #31
 8006d6c:	d5d8      	bpl.n	8006d20 <_printf_float+0x250>
 8006d6e:	ee18 3a10 	vmov	r3, s16
 8006d72:	4652      	mov	r2, sl
 8006d74:	4631      	mov	r1, r6
 8006d76:	4628      	mov	r0, r5
 8006d78:	47b8      	blx	r7
 8006d7a:	3001      	adds	r0, #1
 8006d7c:	f43f af09 	beq.w	8006b92 <_printf_float+0xc2>
 8006d80:	f04f 0900 	mov.w	r9, #0
 8006d84:	f104 0a1a 	add.w	sl, r4, #26
 8006d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d8a:	425b      	negs	r3, r3
 8006d8c:	454b      	cmp	r3, r9
 8006d8e:	dc01      	bgt.n	8006d94 <_printf_float+0x2c4>
 8006d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d92:	e792      	b.n	8006cba <_printf_float+0x1ea>
 8006d94:	2301      	movs	r3, #1
 8006d96:	4652      	mov	r2, sl
 8006d98:	4631      	mov	r1, r6
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	47b8      	blx	r7
 8006d9e:	3001      	adds	r0, #1
 8006da0:	f43f aef7 	beq.w	8006b92 <_printf_float+0xc2>
 8006da4:	f109 0901 	add.w	r9, r9, #1
 8006da8:	e7ee      	b.n	8006d88 <_printf_float+0x2b8>
 8006daa:	bf00      	nop
 8006dac:	7fefffff 	.word	0x7fefffff
 8006db0:	08009498 	.word	0x08009498
 8006db4:	0800949c 	.word	0x0800949c
 8006db8:	080094a4 	.word	0x080094a4
 8006dbc:	080094a0 	.word	0x080094a0
 8006dc0:	080094a8 	.word	0x080094a8
 8006dc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	bfa8      	it	ge
 8006dcc:	461a      	movge	r2, r3
 8006dce:	2a00      	cmp	r2, #0
 8006dd0:	4691      	mov	r9, r2
 8006dd2:	dc37      	bgt.n	8006e44 <_printf_float+0x374>
 8006dd4:	f04f 0b00 	mov.w	fp, #0
 8006dd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ddc:	f104 021a 	add.w	r2, r4, #26
 8006de0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006de2:	9305      	str	r3, [sp, #20]
 8006de4:	eba3 0309 	sub.w	r3, r3, r9
 8006de8:	455b      	cmp	r3, fp
 8006dea:	dc33      	bgt.n	8006e54 <_printf_float+0x384>
 8006dec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006df0:	429a      	cmp	r2, r3
 8006df2:	db3b      	blt.n	8006e6c <_printf_float+0x39c>
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	07da      	lsls	r2, r3, #31
 8006df8:	d438      	bmi.n	8006e6c <_printf_float+0x39c>
 8006dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dfc:	9a05      	ldr	r2, [sp, #20]
 8006dfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e00:	1a9a      	subs	r2, r3, r2
 8006e02:	eba3 0901 	sub.w	r9, r3, r1
 8006e06:	4591      	cmp	r9, r2
 8006e08:	bfa8      	it	ge
 8006e0a:	4691      	movge	r9, r2
 8006e0c:	f1b9 0f00 	cmp.w	r9, #0
 8006e10:	dc35      	bgt.n	8006e7e <_printf_float+0x3ae>
 8006e12:	f04f 0800 	mov.w	r8, #0
 8006e16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e1a:	f104 0a1a 	add.w	sl, r4, #26
 8006e1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e22:	1a9b      	subs	r3, r3, r2
 8006e24:	eba3 0309 	sub.w	r3, r3, r9
 8006e28:	4543      	cmp	r3, r8
 8006e2a:	f77f af79 	ble.w	8006d20 <_printf_float+0x250>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	4652      	mov	r2, sl
 8006e32:	4631      	mov	r1, r6
 8006e34:	4628      	mov	r0, r5
 8006e36:	47b8      	blx	r7
 8006e38:	3001      	adds	r0, #1
 8006e3a:	f43f aeaa 	beq.w	8006b92 <_printf_float+0xc2>
 8006e3e:	f108 0801 	add.w	r8, r8, #1
 8006e42:	e7ec      	b.n	8006e1e <_printf_float+0x34e>
 8006e44:	4613      	mov	r3, r2
 8006e46:	4631      	mov	r1, r6
 8006e48:	4642      	mov	r2, r8
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	47b8      	blx	r7
 8006e4e:	3001      	adds	r0, #1
 8006e50:	d1c0      	bne.n	8006dd4 <_printf_float+0x304>
 8006e52:	e69e      	b.n	8006b92 <_printf_float+0xc2>
 8006e54:	2301      	movs	r3, #1
 8006e56:	4631      	mov	r1, r6
 8006e58:	4628      	mov	r0, r5
 8006e5a:	9205      	str	r2, [sp, #20]
 8006e5c:	47b8      	blx	r7
 8006e5e:	3001      	adds	r0, #1
 8006e60:	f43f ae97 	beq.w	8006b92 <_printf_float+0xc2>
 8006e64:	9a05      	ldr	r2, [sp, #20]
 8006e66:	f10b 0b01 	add.w	fp, fp, #1
 8006e6a:	e7b9      	b.n	8006de0 <_printf_float+0x310>
 8006e6c:	ee18 3a10 	vmov	r3, s16
 8006e70:	4652      	mov	r2, sl
 8006e72:	4631      	mov	r1, r6
 8006e74:	4628      	mov	r0, r5
 8006e76:	47b8      	blx	r7
 8006e78:	3001      	adds	r0, #1
 8006e7a:	d1be      	bne.n	8006dfa <_printf_float+0x32a>
 8006e7c:	e689      	b.n	8006b92 <_printf_float+0xc2>
 8006e7e:	9a05      	ldr	r2, [sp, #20]
 8006e80:	464b      	mov	r3, r9
 8006e82:	4442      	add	r2, r8
 8006e84:	4631      	mov	r1, r6
 8006e86:	4628      	mov	r0, r5
 8006e88:	47b8      	blx	r7
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	d1c1      	bne.n	8006e12 <_printf_float+0x342>
 8006e8e:	e680      	b.n	8006b92 <_printf_float+0xc2>
 8006e90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e92:	2a01      	cmp	r2, #1
 8006e94:	dc01      	bgt.n	8006e9a <_printf_float+0x3ca>
 8006e96:	07db      	lsls	r3, r3, #31
 8006e98:	d538      	bpl.n	8006f0c <_printf_float+0x43c>
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	4642      	mov	r2, r8
 8006e9e:	4631      	mov	r1, r6
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	47b8      	blx	r7
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	f43f ae74 	beq.w	8006b92 <_printf_float+0xc2>
 8006eaa:	ee18 3a10 	vmov	r3, s16
 8006eae:	4652      	mov	r2, sl
 8006eb0:	4631      	mov	r1, r6
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	47b8      	blx	r7
 8006eb6:	3001      	adds	r0, #1
 8006eb8:	f43f ae6b 	beq.w	8006b92 <_printf_float+0xc2>
 8006ebc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f7f9 fe00 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ec8:	b9d8      	cbnz	r0, 8006f02 <_printf_float+0x432>
 8006eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ecc:	f108 0201 	add.w	r2, r8, #1
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	4631      	mov	r1, r6
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	47b8      	blx	r7
 8006ed8:	3001      	adds	r0, #1
 8006eda:	d10e      	bne.n	8006efa <_printf_float+0x42a>
 8006edc:	e659      	b.n	8006b92 <_printf_float+0xc2>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	4652      	mov	r2, sl
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	47b8      	blx	r7
 8006ee8:	3001      	adds	r0, #1
 8006eea:	f43f ae52 	beq.w	8006b92 <_printf_float+0xc2>
 8006eee:	f108 0801 	add.w	r8, r8, #1
 8006ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	4543      	cmp	r3, r8
 8006ef8:	dcf1      	bgt.n	8006ede <_printf_float+0x40e>
 8006efa:	464b      	mov	r3, r9
 8006efc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f00:	e6dc      	b.n	8006cbc <_printf_float+0x1ec>
 8006f02:	f04f 0800 	mov.w	r8, #0
 8006f06:	f104 0a1a 	add.w	sl, r4, #26
 8006f0a:	e7f2      	b.n	8006ef2 <_printf_float+0x422>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	4642      	mov	r2, r8
 8006f10:	e7df      	b.n	8006ed2 <_printf_float+0x402>
 8006f12:	2301      	movs	r3, #1
 8006f14:	464a      	mov	r2, r9
 8006f16:	4631      	mov	r1, r6
 8006f18:	4628      	mov	r0, r5
 8006f1a:	47b8      	blx	r7
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	f43f ae38 	beq.w	8006b92 <_printf_float+0xc2>
 8006f22:	f108 0801 	add.w	r8, r8, #1
 8006f26:	68e3      	ldr	r3, [r4, #12]
 8006f28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f2a:	1a5b      	subs	r3, r3, r1
 8006f2c:	4543      	cmp	r3, r8
 8006f2e:	dcf0      	bgt.n	8006f12 <_printf_float+0x442>
 8006f30:	e6fa      	b.n	8006d28 <_printf_float+0x258>
 8006f32:	f04f 0800 	mov.w	r8, #0
 8006f36:	f104 0919 	add.w	r9, r4, #25
 8006f3a:	e7f4      	b.n	8006f26 <_printf_float+0x456>

08006f3c <_printf_common>:
 8006f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f40:	4616      	mov	r6, r2
 8006f42:	4699      	mov	r9, r3
 8006f44:	688a      	ldr	r2, [r1, #8]
 8006f46:	690b      	ldr	r3, [r1, #16]
 8006f48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	bfb8      	it	lt
 8006f50:	4613      	movlt	r3, r2
 8006f52:	6033      	str	r3, [r6, #0]
 8006f54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f58:	4607      	mov	r7, r0
 8006f5a:	460c      	mov	r4, r1
 8006f5c:	b10a      	cbz	r2, 8006f62 <_printf_common+0x26>
 8006f5e:	3301      	adds	r3, #1
 8006f60:	6033      	str	r3, [r6, #0]
 8006f62:	6823      	ldr	r3, [r4, #0]
 8006f64:	0699      	lsls	r1, r3, #26
 8006f66:	bf42      	ittt	mi
 8006f68:	6833      	ldrmi	r3, [r6, #0]
 8006f6a:	3302      	addmi	r3, #2
 8006f6c:	6033      	strmi	r3, [r6, #0]
 8006f6e:	6825      	ldr	r5, [r4, #0]
 8006f70:	f015 0506 	ands.w	r5, r5, #6
 8006f74:	d106      	bne.n	8006f84 <_printf_common+0x48>
 8006f76:	f104 0a19 	add.w	sl, r4, #25
 8006f7a:	68e3      	ldr	r3, [r4, #12]
 8006f7c:	6832      	ldr	r2, [r6, #0]
 8006f7e:	1a9b      	subs	r3, r3, r2
 8006f80:	42ab      	cmp	r3, r5
 8006f82:	dc26      	bgt.n	8006fd2 <_printf_common+0x96>
 8006f84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f88:	1e13      	subs	r3, r2, #0
 8006f8a:	6822      	ldr	r2, [r4, #0]
 8006f8c:	bf18      	it	ne
 8006f8e:	2301      	movne	r3, #1
 8006f90:	0692      	lsls	r2, r2, #26
 8006f92:	d42b      	bmi.n	8006fec <_printf_common+0xb0>
 8006f94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f98:	4649      	mov	r1, r9
 8006f9a:	4638      	mov	r0, r7
 8006f9c:	47c0      	blx	r8
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	d01e      	beq.n	8006fe0 <_printf_common+0xa4>
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	68e5      	ldr	r5, [r4, #12]
 8006fa6:	6832      	ldr	r2, [r6, #0]
 8006fa8:	f003 0306 	and.w	r3, r3, #6
 8006fac:	2b04      	cmp	r3, #4
 8006fae:	bf08      	it	eq
 8006fb0:	1aad      	subeq	r5, r5, r2
 8006fb2:	68a3      	ldr	r3, [r4, #8]
 8006fb4:	6922      	ldr	r2, [r4, #16]
 8006fb6:	bf0c      	ite	eq
 8006fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fbc:	2500      	movne	r5, #0
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	bfc4      	itt	gt
 8006fc2:	1a9b      	subgt	r3, r3, r2
 8006fc4:	18ed      	addgt	r5, r5, r3
 8006fc6:	2600      	movs	r6, #0
 8006fc8:	341a      	adds	r4, #26
 8006fca:	42b5      	cmp	r5, r6
 8006fcc:	d11a      	bne.n	8007004 <_printf_common+0xc8>
 8006fce:	2000      	movs	r0, #0
 8006fd0:	e008      	b.n	8006fe4 <_printf_common+0xa8>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	4652      	mov	r2, sl
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	4638      	mov	r0, r7
 8006fda:	47c0      	blx	r8
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d103      	bne.n	8006fe8 <_printf_common+0xac>
 8006fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe8:	3501      	adds	r5, #1
 8006fea:	e7c6      	b.n	8006f7a <_printf_common+0x3e>
 8006fec:	18e1      	adds	r1, r4, r3
 8006fee:	1c5a      	adds	r2, r3, #1
 8006ff0:	2030      	movs	r0, #48	; 0x30
 8006ff2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ff6:	4422      	add	r2, r4
 8006ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ffc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007000:	3302      	adds	r3, #2
 8007002:	e7c7      	b.n	8006f94 <_printf_common+0x58>
 8007004:	2301      	movs	r3, #1
 8007006:	4622      	mov	r2, r4
 8007008:	4649      	mov	r1, r9
 800700a:	4638      	mov	r0, r7
 800700c:	47c0      	blx	r8
 800700e:	3001      	adds	r0, #1
 8007010:	d0e6      	beq.n	8006fe0 <_printf_common+0xa4>
 8007012:	3601      	adds	r6, #1
 8007014:	e7d9      	b.n	8006fca <_printf_common+0x8e>
	...

08007018 <_printf_i>:
 8007018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800701c:	7e0f      	ldrb	r7, [r1, #24]
 800701e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007020:	2f78      	cmp	r7, #120	; 0x78
 8007022:	4691      	mov	r9, r2
 8007024:	4680      	mov	r8, r0
 8007026:	460c      	mov	r4, r1
 8007028:	469a      	mov	sl, r3
 800702a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800702e:	d807      	bhi.n	8007040 <_printf_i+0x28>
 8007030:	2f62      	cmp	r7, #98	; 0x62
 8007032:	d80a      	bhi.n	800704a <_printf_i+0x32>
 8007034:	2f00      	cmp	r7, #0
 8007036:	f000 80d8 	beq.w	80071ea <_printf_i+0x1d2>
 800703a:	2f58      	cmp	r7, #88	; 0x58
 800703c:	f000 80a3 	beq.w	8007186 <_printf_i+0x16e>
 8007040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007044:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007048:	e03a      	b.n	80070c0 <_printf_i+0xa8>
 800704a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800704e:	2b15      	cmp	r3, #21
 8007050:	d8f6      	bhi.n	8007040 <_printf_i+0x28>
 8007052:	a101      	add	r1, pc, #4	; (adr r1, 8007058 <_printf_i+0x40>)
 8007054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007058:	080070b1 	.word	0x080070b1
 800705c:	080070c5 	.word	0x080070c5
 8007060:	08007041 	.word	0x08007041
 8007064:	08007041 	.word	0x08007041
 8007068:	08007041 	.word	0x08007041
 800706c:	08007041 	.word	0x08007041
 8007070:	080070c5 	.word	0x080070c5
 8007074:	08007041 	.word	0x08007041
 8007078:	08007041 	.word	0x08007041
 800707c:	08007041 	.word	0x08007041
 8007080:	08007041 	.word	0x08007041
 8007084:	080071d1 	.word	0x080071d1
 8007088:	080070f5 	.word	0x080070f5
 800708c:	080071b3 	.word	0x080071b3
 8007090:	08007041 	.word	0x08007041
 8007094:	08007041 	.word	0x08007041
 8007098:	080071f3 	.word	0x080071f3
 800709c:	08007041 	.word	0x08007041
 80070a0:	080070f5 	.word	0x080070f5
 80070a4:	08007041 	.word	0x08007041
 80070a8:	08007041 	.word	0x08007041
 80070ac:	080071bb 	.word	0x080071bb
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	1d1a      	adds	r2, r3, #4
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	602a      	str	r2, [r5, #0]
 80070b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070c0:	2301      	movs	r3, #1
 80070c2:	e0a3      	b.n	800720c <_printf_i+0x1f4>
 80070c4:	6820      	ldr	r0, [r4, #0]
 80070c6:	6829      	ldr	r1, [r5, #0]
 80070c8:	0606      	lsls	r6, r0, #24
 80070ca:	f101 0304 	add.w	r3, r1, #4
 80070ce:	d50a      	bpl.n	80070e6 <_printf_i+0xce>
 80070d0:	680e      	ldr	r6, [r1, #0]
 80070d2:	602b      	str	r3, [r5, #0]
 80070d4:	2e00      	cmp	r6, #0
 80070d6:	da03      	bge.n	80070e0 <_printf_i+0xc8>
 80070d8:	232d      	movs	r3, #45	; 0x2d
 80070da:	4276      	negs	r6, r6
 80070dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070e0:	485e      	ldr	r0, [pc, #376]	; (800725c <_printf_i+0x244>)
 80070e2:	230a      	movs	r3, #10
 80070e4:	e019      	b.n	800711a <_printf_i+0x102>
 80070e6:	680e      	ldr	r6, [r1, #0]
 80070e8:	602b      	str	r3, [r5, #0]
 80070ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070ee:	bf18      	it	ne
 80070f0:	b236      	sxthne	r6, r6
 80070f2:	e7ef      	b.n	80070d4 <_printf_i+0xbc>
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	6820      	ldr	r0, [r4, #0]
 80070f8:	1d19      	adds	r1, r3, #4
 80070fa:	6029      	str	r1, [r5, #0]
 80070fc:	0601      	lsls	r1, r0, #24
 80070fe:	d501      	bpl.n	8007104 <_printf_i+0xec>
 8007100:	681e      	ldr	r6, [r3, #0]
 8007102:	e002      	b.n	800710a <_printf_i+0xf2>
 8007104:	0646      	lsls	r6, r0, #25
 8007106:	d5fb      	bpl.n	8007100 <_printf_i+0xe8>
 8007108:	881e      	ldrh	r6, [r3, #0]
 800710a:	4854      	ldr	r0, [pc, #336]	; (800725c <_printf_i+0x244>)
 800710c:	2f6f      	cmp	r7, #111	; 0x6f
 800710e:	bf0c      	ite	eq
 8007110:	2308      	moveq	r3, #8
 8007112:	230a      	movne	r3, #10
 8007114:	2100      	movs	r1, #0
 8007116:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800711a:	6865      	ldr	r5, [r4, #4]
 800711c:	60a5      	str	r5, [r4, #8]
 800711e:	2d00      	cmp	r5, #0
 8007120:	bfa2      	ittt	ge
 8007122:	6821      	ldrge	r1, [r4, #0]
 8007124:	f021 0104 	bicge.w	r1, r1, #4
 8007128:	6021      	strge	r1, [r4, #0]
 800712a:	b90e      	cbnz	r6, 8007130 <_printf_i+0x118>
 800712c:	2d00      	cmp	r5, #0
 800712e:	d04d      	beq.n	80071cc <_printf_i+0x1b4>
 8007130:	4615      	mov	r5, r2
 8007132:	fbb6 f1f3 	udiv	r1, r6, r3
 8007136:	fb03 6711 	mls	r7, r3, r1, r6
 800713a:	5dc7      	ldrb	r7, [r0, r7]
 800713c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007140:	4637      	mov	r7, r6
 8007142:	42bb      	cmp	r3, r7
 8007144:	460e      	mov	r6, r1
 8007146:	d9f4      	bls.n	8007132 <_printf_i+0x11a>
 8007148:	2b08      	cmp	r3, #8
 800714a:	d10b      	bne.n	8007164 <_printf_i+0x14c>
 800714c:	6823      	ldr	r3, [r4, #0]
 800714e:	07de      	lsls	r6, r3, #31
 8007150:	d508      	bpl.n	8007164 <_printf_i+0x14c>
 8007152:	6923      	ldr	r3, [r4, #16]
 8007154:	6861      	ldr	r1, [r4, #4]
 8007156:	4299      	cmp	r1, r3
 8007158:	bfde      	ittt	le
 800715a:	2330      	movle	r3, #48	; 0x30
 800715c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007160:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007164:	1b52      	subs	r2, r2, r5
 8007166:	6122      	str	r2, [r4, #16]
 8007168:	f8cd a000 	str.w	sl, [sp]
 800716c:	464b      	mov	r3, r9
 800716e:	aa03      	add	r2, sp, #12
 8007170:	4621      	mov	r1, r4
 8007172:	4640      	mov	r0, r8
 8007174:	f7ff fee2 	bl	8006f3c <_printf_common>
 8007178:	3001      	adds	r0, #1
 800717a:	d14c      	bne.n	8007216 <_printf_i+0x1fe>
 800717c:	f04f 30ff 	mov.w	r0, #4294967295
 8007180:	b004      	add	sp, #16
 8007182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007186:	4835      	ldr	r0, [pc, #212]	; (800725c <_printf_i+0x244>)
 8007188:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800718c:	6829      	ldr	r1, [r5, #0]
 800718e:	6823      	ldr	r3, [r4, #0]
 8007190:	f851 6b04 	ldr.w	r6, [r1], #4
 8007194:	6029      	str	r1, [r5, #0]
 8007196:	061d      	lsls	r5, r3, #24
 8007198:	d514      	bpl.n	80071c4 <_printf_i+0x1ac>
 800719a:	07df      	lsls	r7, r3, #31
 800719c:	bf44      	itt	mi
 800719e:	f043 0320 	orrmi.w	r3, r3, #32
 80071a2:	6023      	strmi	r3, [r4, #0]
 80071a4:	b91e      	cbnz	r6, 80071ae <_printf_i+0x196>
 80071a6:	6823      	ldr	r3, [r4, #0]
 80071a8:	f023 0320 	bic.w	r3, r3, #32
 80071ac:	6023      	str	r3, [r4, #0]
 80071ae:	2310      	movs	r3, #16
 80071b0:	e7b0      	b.n	8007114 <_printf_i+0xfc>
 80071b2:	6823      	ldr	r3, [r4, #0]
 80071b4:	f043 0320 	orr.w	r3, r3, #32
 80071b8:	6023      	str	r3, [r4, #0]
 80071ba:	2378      	movs	r3, #120	; 0x78
 80071bc:	4828      	ldr	r0, [pc, #160]	; (8007260 <_printf_i+0x248>)
 80071be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071c2:	e7e3      	b.n	800718c <_printf_i+0x174>
 80071c4:	0659      	lsls	r1, r3, #25
 80071c6:	bf48      	it	mi
 80071c8:	b2b6      	uxthmi	r6, r6
 80071ca:	e7e6      	b.n	800719a <_printf_i+0x182>
 80071cc:	4615      	mov	r5, r2
 80071ce:	e7bb      	b.n	8007148 <_printf_i+0x130>
 80071d0:	682b      	ldr	r3, [r5, #0]
 80071d2:	6826      	ldr	r6, [r4, #0]
 80071d4:	6961      	ldr	r1, [r4, #20]
 80071d6:	1d18      	adds	r0, r3, #4
 80071d8:	6028      	str	r0, [r5, #0]
 80071da:	0635      	lsls	r5, r6, #24
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	d501      	bpl.n	80071e4 <_printf_i+0x1cc>
 80071e0:	6019      	str	r1, [r3, #0]
 80071e2:	e002      	b.n	80071ea <_printf_i+0x1d2>
 80071e4:	0670      	lsls	r0, r6, #25
 80071e6:	d5fb      	bpl.n	80071e0 <_printf_i+0x1c8>
 80071e8:	8019      	strh	r1, [r3, #0]
 80071ea:	2300      	movs	r3, #0
 80071ec:	6123      	str	r3, [r4, #16]
 80071ee:	4615      	mov	r5, r2
 80071f0:	e7ba      	b.n	8007168 <_printf_i+0x150>
 80071f2:	682b      	ldr	r3, [r5, #0]
 80071f4:	1d1a      	adds	r2, r3, #4
 80071f6:	602a      	str	r2, [r5, #0]
 80071f8:	681d      	ldr	r5, [r3, #0]
 80071fa:	6862      	ldr	r2, [r4, #4]
 80071fc:	2100      	movs	r1, #0
 80071fe:	4628      	mov	r0, r5
 8007200:	f7f8 ffee 	bl	80001e0 <memchr>
 8007204:	b108      	cbz	r0, 800720a <_printf_i+0x1f2>
 8007206:	1b40      	subs	r0, r0, r5
 8007208:	6060      	str	r0, [r4, #4]
 800720a:	6863      	ldr	r3, [r4, #4]
 800720c:	6123      	str	r3, [r4, #16]
 800720e:	2300      	movs	r3, #0
 8007210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007214:	e7a8      	b.n	8007168 <_printf_i+0x150>
 8007216:	6923      	ldr	r3, [r4, #16]
 8007218:	462a      	mov	r2, r5
 800721a:	4649      	mov	r1, r9
 800721c:	4640      	mov	r0, r8
 800721e:	47d0      	blx	sl
 8007220:	3001      	adds	r0, #1
 8007222:	d0ab      	beq.n	800717c <_printf_i+0x164>
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	079b      	lsls	r3, r3, #30
 8007228:	d413      	bmi.n	8007252 <_printf_i+0x23a>
 800722a:	68e0      	ldr	r0, [r4, #12]
 800722c:	9b03      	ldr	r3, [sp, #12]
 800722e:	4298      	cmp	r0, r3
 8007230:	bfb8      	it	lt
 8007232:	4618      	movlt	r0, r3
 8007234:	e7a4      	b.n	8007180 <_printf_i+0x168>
 8007236:	2301      	movs	r3, #1
 8007238:	4632      	mov	r2, r6
 800723a:	4649      	mov	r1, r9
 800723c:	4640      	mov	r0, r8
 800723e:	47d0      	blx	sl
 8007240:	3001      	adds	r0, #1
 8007242:	d09b      	beq.n	800717c <_printf_i+0x164>
 8007244:	3501      	adds	r5, #1
 8007246:	68e3      	ldr	r3, [r4, #12]
 8007248:	9903      	ldr	r1, [sp, #12]
 800724a:	1a5b      	subs	r3, r3, r1
 800724c:	42ab      	cmp	r3, r5
 800724e:	dcf2      	bgt.n	8007236 <_printf_i+0x21e>
 8007250:	e7eb      	b.n	800722a <_printf_i+0x212>
 8007252:	2500      	movs	r5, #0
 8007254:	f104 0619 	add.w	r6, r4, #25
 8007258:	e7f5      	b.n	8007246 <_printf_i+0x22e>
 800725a:	bf00      	nop
 800725c:	080094aa 	.word	0x080094aa
 8007260:	080094bb 	.word	0x080094bb

08007264 <iprintf>:
 8007264:	b40f      	push	{r0, r1, r2, r3}
 8007266:	4b0a      	ldr	r3, [pc, #40]	; (8007290 <iprintf+0x2c>)
 8007268:	b513      	push	{r0, r1, r4, lr}
 800726a:	681c      	ldr	r4, [r3, #0]
 800726c:	b124      	cbz	r4, 8007278 <iprintf+0x14>
 800726e:	69a3      	ldr	r3, [r4, #24]
 8007270:	b913      	cbnz	r3, 8007278 <iprintf+0x14>
 8007272:	4620      	mov	r0, r4
 8007274:	f000 fee2 	bl	800803c <__sinit>
 8007278:	ab05      	add	r3, sp, #20
 800727a:	9a04      	ldr	r2, [sp, #16]
 800727c:	68a1      	ldr	r1, [r4, #8]
 800727e:	9301      	str	r3, [sp, #4]
 8007280:	4620      	mov	r0, r4
 8007282:	f001 fc3b 	bl	8008afc <_vfiprintf_r>
 8007286:	b002      	add	sp, #8
 8007288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800728c:	b004      	add	sp, #16
 800728e:	4770      	bx	lr
 8007290:	20000034 	.word	0x20000034

08007294 <quorem>:
 8007294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007298:	6903      	ldr	r3, [r0, #16]
 800729a:	690c      	ldr	r4, [r1, #16]
 800729c:	42a3      	cmp	r3, r4
 800729e:	4607      	mov	r7, r0
 80072a0:	f2c0 8081 	blt.w	80073a6 <quorem+0x112>
 80072a4:	3c01      	subs	r4, #1
 80072a6:	f101 0814 	add.w	r8, r1, #20
 80072aa:	f100 0514 	add.w	r5, r0, #20
 80072ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072b2:	9301      	str	r3, [sp, #4]
 80072b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80072b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072bc:	3301      	adds	r3, #1
 80072be:	429a      	cmp	r2, r3
 80072c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80072c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80072c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80072cc:	d331      	bcc.n	8007332 <quorem+0x9e>
 80072ce:	f04f 0e00 	mov.w	lr, #0
 80072d2:	4640      	mov	r0, r8
 80072d4:	46ac      	mov	ip, r5
 80072d6:	46f2      	mov	sl, lr
 80072d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80072dc:	b293      	uxth	r3, r2
 80072de:	fb06 e303 	mla	r3, r6, r3, lr
 80072e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	ebaa 0303 	sub.w	r3, sl, r3
 80072ec:	f8dc a000 	ldr.w	sl, [ip]
 80072f0:	0c12      	lsrs	r2, r2, #16
 80072f2:	fa13 f38a 	uxtah	r3, r3, sl
 80072f6:	fb06 e202 	mla	r2, r6, r2, lr
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	9b00      	ldr	r3, [sp, #0]
 80072fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007302:	b292      	uxth	r2, r2
 8007304:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007308:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800730c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007310:	4581      	cmp	r9, r0
 8007312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007316:	f84c 3b04 	str.w	r3, [ip], #4
 800731a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800731e:	d2db      	bcs.n	80072d8 <quorem+0x44>
 8007320:	f855 300b 	ldr.w	r3, [r5, fp]
 8007324:	b92b      	cbnz	r3, 8007332 <quorem+0x9e>
 8007326:	9b01      	ldr	r3, [sp, #4]
 8007328:	3b04      	subs	r3, #4
 800732a:	429d      	cmp	r5, r3
 800732c:	461a      	mov	r2, r3
 800732e:	d32e      	bcc.n	800738e <quorem+0xfa>
 8007330:	613c      	str	r4, [r7, #16]
 8007332:	4638      	mov	r0, r7
 8007334:	f001 f9c0 	bl	80086b8 <__mcmp>
 8007338:	2800      	cmp	r0, #0
 800733a:	db24      	blt.n	8007386 <quorem+0xf2>
 800733c:	3601      	adds	r6, #1
 800733e:	4628      	mov	r0, r5
 8007340:	f04f 0c00 	mov.w	ip, #0
 8007344:	f858 2b04 	ldr.w	r2, [r8], #4
 8007348:	f8d0 e000 	ldr.w	lr, [r0]
 800734c:	b293      	uxth	r3, r2
 800734e:	ebac 0303 	sub.w	r3, ip, r3
 8007352:	0c12      	lsrs	r2, r2, #16
 8007354:	fa13 f38e 	uxtah	r3, r3, lr
 8007358:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800735c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007360:	b29b      	uxth	r3, r3
 8007362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007366:	45c1      	cmp	r9, r8
 8007368:	f840 3b04 	str.w	r3, [r0], #4
 800736c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007370:	d2e8      	bcs.n	8007344 <quorem+0xb0>
 8007372:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007376:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800737a:	b922      	cbnz	r2, 8007386 <quorem+0xf2>
 800737c:	3b04      	subs	r3, #4
 800737e:	429d      	cmp	r5, r3
 8007380:	461a      	mov	r2, r3
 8007382:	d30a      	bcc.n	800739a <quorem+0x106>
 8007384:	613c      	str	r4, [r7, #16]
 8007386:	4630      	mov	r0, r6
 8007388:	b003      	add	sp, #12
 800738a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800738e:	6812      	ldr	r2, [r2, #0]
 8007390:	3b04      	subs	r3, #4
 8007392:	2a00      	cmp	r2, #0
 8007394:	d1cc      	bne.n	8007330 <quorem+0x9c>
 8007396:	3c01      	subs	r4, #1
 8007398:	e7c7      	b.n	800732a <quorem+0x96>
 800739a:	6812      	ldr	r2, [r2, #0]
 800739c:	3b04      	subs	r3, #4
 800739e:	2a00      	cmp	r2, #0
 80073a0:	d1f0      	bne.n	8007384 <quorem+0xf0>
 80073a2:	3c01      	subs	r4, #1
 80073a4:	e7eb      	b.n	800737e <quorem+0xea>
 80073a6:	2000      	movs	r0, #0
 80073a8:	e7ee      	b.n	8007388 <quorem+0xf4>
 80073aa:	0000      	movs	r0, r0
 80073ac:	0000      	movs	r0, r0
	...

080073b0 <_dtoa_r>:
 80073b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b4:	ed2d 8b04 	vpush	{d8-d9}
 80073b8:	ec57 6b10 	vmov	r6, r7, d0
 80073bc:	b093      	sub	sp, #76	; 0x4c
 80073be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80073c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80073c4:	9106      	str	r1, [sp, #24]
 80073c6:	ee10 aa10 	vmov	sl, s0
 80073ca:	4604      	mov	r4, r0
 80073cc:	9209      	str	r2, [sp, #36]	; 0x24
 80073ce:	930c      	str	r3, [sp, #48]	; 0x30
 80073d0:	46bb      	mov	fp, r7
 80073d2:	b975      	cbnz	r5, 80073f2 <_dtoa_r+0x42>
 80073d4:	2010      	movs	r0, #16
 80073d6:	f000 fed7 	bl	8008188 <malloc>
 80073da:	4602      	mov	r2, r0
 80073dc:	6260      	str	r0, [r4, #36]	; 0x24
 80073de:	b920      	cbnz	r0, 80073ea <_dtoa_r+0x3a>
 80073e0:	4ba7      	ldr	r3, [pc, #668]	; (8007680 <_dtoa_r+0x2d0>)
 80073e2:	21ea      	movs	r1, #234	; 0xea
 80073e4:	48a7      	ldr	r0, [pc, #668]	; (8007684 <_dtoa_r+0x2d4>)
 80073e6:	f001 fddf 	bl	8008fa8 <__assert_func>
 80073ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80073ee:	6005      	str	r5, [r0, #0]
 80073f0:	60c5      	str	r5, [r0, #12]
 80073f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073f4:	6819      	ldr	r1, [r3, #0]
 80073f6:	b151      	cbz	r1, 800740e <_dtoa_r+0x5e>
 80073f8:	685a      	ldr	r2, [r3, #4]
 80073fa:	604a      	str	r2, [r1, #4]
 80073fc:	2301      	movs	r3, #1
 80073fe:	4093      	lsls	r3, r2
 8007400:	608b      	str	r3, [r1, #8]
 8007402:	4620      	mov	r0, r4
 8007404:	f000 ff16 	bl	8008234 <_Bfree>
 8007408:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800740a:	2200      	movs	r2, #0
 800740c:	601a      	str	r2, [r3, #0]
 800740e:	1e3b      	subs	r3, r7, #0
 8007410:	bfaa      	itet	ge
 8007412:	2300      	movge	r3, #0
 8007414:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007418:	f8c8 3000 	strge.w	r3, [r8]
 800741c:	4b9a      	ldr	r3, [pc, #616]	; (8007688 <_dtoa_r+0x2d8>)
 800741e:	bfbc      	itt	lt
 8007420:	2201      	movlt	r2, #1
 8007422:	f8c8 2000 	strlt.w	r2, [r8]
 8007426:	ea33 030b 	bics.w	r3, r3, fp
 800742a:	d11b      	bne.n	8007464 <_dtoa_r+0xb4>
 800742c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800742e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007432:	6013      	str	r3, [r2, #0]
 8007434:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007438:	4333      	orrs	r3, r6
 800743a:	f000 8592 	beq.w	8007f62 <_dtoa_r+0xbb2>
 800743e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007440:	b963      	cbnz	r3, 800745c <_dtoa_r+0xac>
 8007442:	4b92      	ldr	r3, [pc, #584]	; (800768c <_dtoa_r+0x2dc>)
 8007444:	e022      	b.n	800748c <_dtoa_r+0xdc>
 8007446:	4b92      	ldr	r3, [pc, #584]	; (8007690 <_dtoa_r+0x2e0>)
 8007448:	9301      	str	r3, [sp, #4]
 800744a:	3308      	adds	r3, #8
 800744c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800744e:	6013      	str	r3, [r2, #0]
 8007450:	9801      	ldr	r0, [sp, #4]
 8007452:	b013      	add	sp, #76	; 0x4c
 8007454:	ecbd 8b04 	vpop	{d8-d9}
 8007458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800745c:	4b8b      	ldr	r3, [pc, #556]	; (800768c <_dtoa_r+0x2dc>)
 800745e:	9301      	str	r3, [sp, #4]
 8007460:	3303      	adds	r3, #3
 8007462:	e7f3      	b.n	800744c <_dtoa_r+0x9c>
 8007464:	2200      	movs	r2, #0
 8007466:	2300      	movs	r3, #0
 8007468:	4650      	mov	r0, sl
 800746a:	4659      	mov	r1, fp
 800746c:	f7f9 fb2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007470:	ec4b ab19 	vmov	d9, sl, fp
 8007474:	4680      	mov	r8, r0
 8007476:	b158      	cbz	r0, 8007490 <_dtoa_r+0xe0>
 8007478:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800747a:	2301      	movs	r3, #1
 800747c:	6013      	str	r3, [r2, #0]
 800747e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007480:	2b00      	cmp	r3, #0
 8007482:	f000 856b 	beq.w	8007f5c <_dtoa_r+0xbac>
 8007486:	4883      	ldr	r0, [pc, #524]	; (8007694 <_dtoa_r+0x2e4>)
 8007488:	6018      	str	r0, [r3, #0]
 800748a:	1e43      	subs	r3, r0, #1
 800748c:	9301      	str	r3, [sp, #4]
 800748e:	e7df      	b.n	8007450 <_dtoa_r+0xa0>
 8007490:	ec4b ab10 	vmov	d0, sl, fp
 8007494:	aa10      	add	r2, sp, #64	; 0x40
 8007496:	a911      	add	r1, sp, #68	; 0x44
 8007498:	4620      	mov	r0, r4
 800749a:	f001 f9b3 	bl	8008804 <__d2b>
 800749e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80074a2:	ee08 0a10 	vmov	s16, r0
 80074a6:	2d00      	cmp	r5, #0
 80074a8:	f000 8084 	beq.w	80075b4 <_dtoa_r+0x204>
 80074ac:	ee19 3a90 	vmov	r3, s19
 80074b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80074b8:	4656      	mov	r6, sl
 80074ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80074be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80074c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80074c6:	4b74      	ldr	r3, [pc, #464]	; (8007698 <_dtoa_r+0x2e8>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	4630      	mov	r0, r6
 80074cc:	4639      	mov	r1, r7
 80074ce:	f7f8 fedb 	bl	8000288 <__aeabi_dsub>
 80074d2:	a365      	add	r3, pc, #404	; (adr r3, 8007668 <_dtoa_r+0x2b8>)
 80074d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d8:	f7f9 f88e 	bl	80005f8 <__aeabi_dmul>
 80074dc:	a364      	add	r3, pc, #400	; (adr r3, 8007670 <_dtoa_r+0x2c0>)
 80074de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e2:	f7f8 fed3 	bl	800028c <__adddf3>
 80074e6:	4606      	mov	r6, r0
 80074e8:	4628      	mov	r0, r5
 80074ea:	460f      	mov	r7, r1
 80074ec:	f7f9 f81a 	bl	8000524 <__aeabi_i2d>
 80074f0:	a361      	add	r3, pc, #388	; (adr r3, 8007678 <_dtoa_r+0x2c8>)
 80074f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f6:	f7f9 f87f 	bl	80005f8 <__aeabi_dmul>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4630      	mov	r0, r6
 8007500:	4639      	mov	r1, r7
 8007502:	f7f8 fec3 	bl	800028c <__adddf3>
 8007506:	4606      	mov	r6, r0
 8007508:	460f      	mov	r7, r1
 800750a:	f7f9 fb25 	bl	8000b58 <__aeabi_d2iz>
 800750e:	2200      	movs	r2, #0
 8007510:	9000      	str	r0, [sp, #0]
 8007512:	2300      	movs	r3, #0
 8007514:	4630      	mov	r0, r6
 8007516:	4639      	mov	r1, r7
 8007518:	f7f9 fae0 	bl	8000adc <__aeabi_dcmplt>
 800751c:	b150      	cbz	r0, 8007534 <_dtoa_r+0x184>
 800751e:	9800      	ldr	r0, [sp, #0]
 8007520:	f7f9 f800 	bl	8000524 <__aeabi_i2d>
 8007524:	4632      	mov	r2, r6
 8007526:	463b      	mov	r3, r7
 8007528:	f7f9 face 	bl	8000ac8 <__aeabi_dcmpeq>
 800752c:	b910      	cbnz	r0, 8007534 <_dtoa_r+0x184>
 800752e:	9b00      	ldr	r3, [sp, #0]
 8007530:	3b01      	subs	r3, #1
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	9b00      	ldr	r3, [sp, #0]
 8007536:	2b16      	cmp	r3, #22
 8007538:	d85a      	bhi.n	80075f0 <_dtoa_r+0x240>
 800753a:	9a00      	ldr	r2, [sp, #0]
 800753c:	4b57      	ldr	r3, [pc, #348]	; (800769c <_dtoa_r+0x2ec>)
 800753e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007546:	ec51 0b19 	vmov	r0, r1, d9
 800754a:	f7f9 fac7 	bl	8000adc <__aeabi_dcmplt>
 800754e:	2800      	cmp	r0, #0
 8007550:	d050      	beq.n	80075f4 <_dtoa_r+0x244>
 8007552:	9b00      	ldr	r3, [sp, #0]
 8007554:	3b01      	subs	r3, #1
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	2300      	movs	r3, #0
 800755a:	930b      	str	r3, [sp, #44]	; 0x2c
 800755c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800755e:	1b5d      	subs	r5, r3, r5
 8007560:	1e6b      	subs	r3, r5, #1
 8007562:	9305      	str	r3, [sp, #20]
 8007564:	bf45      	ittet	mi
 8007566:	f1c5 0301 	rsbmi	r3, r5, #1
 800756a:	9304      	strmi	r3, [sp, #16]
 800756c:	2300      	movpl	r3, #0
 800756e:	2300      	movmi	r3, #0
 8007570:	bf4c      	ite	mi
 8007572:	9305      	strmi	r3, [sp, #20]
 8007574:	9304      	strpl	r3, [sp, #16]
 8007576:	9b00      	ldr	r3, [sp, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	db3d      	blt.n	80075f8 <_dtoa_r+0x248>
 800757c:	9b05      	ldr	r3, [sp, #20]
 800757e:	9a00      	ldr	r2, [sp, #0]
 8007580:	920a      	str	r2, [sp, #40]	; 0x28
 8007582:	4413      	add	r3, r2
 8007584:	9305      	str	r3, [sp, #20]
 8007586:	2300      	movs	r3, #0
 8007588:	9307      	str	r3, [sp, #28]
 800758a:	9b06      	ldr	r3, [sp, #24]
 800758c:	2b09      	cmp	r3, #9
 800758e:	f200 8089 	bhi.w	80076a4 <_dtoa_r+0x2f4>
 8007592:	2b05      	cmp	r3, #5
 8007594:	bfc4      	itt	gt
 8007596:	3b04      	subgt	r3, #4
 8007598:	9306      	strgt	r3, [sp, #24]
 800759a:	9b06      	ldr	r3, [sp, #24]
 800759c:	f1a3 0302 	sub.w	r3, r3, #2
 80075a0:	bfcc      	ite	gt
 80075a2:	2500      	movgt	r5, #0
 80075a4:	2501      	movle	r5, #1
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	f200 8087 	bhi.w	80076ba <_dtoa_r+0x30a>
 80075ac:	e8df f003 	tbb	[pc, r3]
 80075b0:	59383a2d 	.word	0x59383a2d
 80075b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80075b8:	441d      	add	r5, r3
 80075ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80075be:	2b20      	cmp	r3, #32
 80075c0:	bfc1      	itttt	gt
 80075c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80075c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80075ca:	fa0b f303 	lslgt.w	r3, fp, r3
 80075ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80075d2:	bfda      	itte	le
 80075d4:	f1c3 0320 	rsble	r3, r3, #32
 80075d8:	fa06 f003 	lslle.w	r0, r6, r3
 80075dc:	4318      	orrgt	r0, r3
 80075de:	f7f8 ff91 	bl	8000504 <__aeabi_ui2d>
 80075e2:	2301      	movs	r3, #1
 80075e4:	4606      	mov	r6, r0
 80075e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80075ea:	3d01      	subs	r5, #1
 80075ec:	930e      	str	r3, [sp, #56]	; 0x38
 80075ee:	e76a      	b.n	80074c6 <_dtoa_r+0x116>
 80075f0:	2301      	movs	r3, #1
 80075f2:	e7b2      	b.n	800755a <_dtoa_r+0x1aa>
 80075f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80075f6:	e7b1      	b.n	800755c <_dtoa_r+0x1ac>
 80075f8:	9b04      	ldr	r3, [sp, #16]
 80075fa:	9a00      	ldr	r2, [sp, #0]
 80075fc:	1a9b      	subs	r3, r3, r2
 80075fe:	9304      	str	r3, [sp, #16]
 8007600:	4253      	negs	r3, r2
 8007602:	9307      	str	r3, [sp, #28]
 8007604:	2300      	movs	r3, #0
 8007606:	930a      	str	r3, [sp, #40]	; 0x28
 8007608:	e7bf      	b.n	800758a <_dtoa_r+0x1da>
 800760a:	2300      	movs	r3, #0
 800760c:	9308      	str	r3, [sp, #32]
 800760e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007610:	2b00      	cmp	r3, #0
 8007612:	dc55      	bgt.n	80076c0 <_dtoa_r+0x310>
 8007614:	2301      	movs	r3, #1
 8007616:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800761a:	461a      	mov	r2, r3
 800761c:	9209      	str	r2, [sp, #36]	; 0x24
 800761e:	e00c      	b.n	800763a <_dtoa_r+0x28a>
 8007620:	2301      	movs	r3, #1
 8007622:	e7f3      	b.n	800760c <_dtoa_r+0x25c>
 8007624:	2300      	movs	r3, #0
 8007626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007628:	9308      	str	r3, [sp, #32]
 800762a:	9b00      	ldr	r3, [sp, #0]
 800762c:	4413      	add	r3, r2
 800762e:	9302      	str	r3, [sp, #8]
 8007630:	3301      	adds	r3, #1
 8007632:	2b01      	cmp	r3, #1
 8007634:	9303      	str	r3, [sp, #12]
 8007636:	bfb8      	it	lt
 8007638:	2301      	movlt	r3, #1
 800763a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800763c:	2200      	movs	r2, #0
 800763e:	6042      	str	r2, [r0, #4]
 8007640:	2204      	movs	r2, #4
 8007642:	f102 0614 	add.w	r6, r2, #20
 8007646:	429e      	cmp	r6, r3
 8007648:	6841      	ldr	r1, [r0, #4]
 800764a:	d93d      	bls.n	80076c8 <_dtoa_r+0x318>
 800764c:	4620      	mov	r0, r4
 800764e:	f000 fdb1 	bl	80081b4 <_Balloc>
 8007652:	9001      	str	r0, [sp, #4]
 8007654:	2800      	cmp	r0, #0
 8007656:	d13b      	bne.n	80076d0 <_dtoa_r+0x320>
 8007658:	4b11      	ldr	r3, [pc, #68]	; (80076a0 <_dtoa_r+0x2f0>)
 800765a:	4602      	mov	r2, r0
 800765c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007660:	e6c0      	b.n	80073e4 <_dtoa_r+0x34>
 8007662:	2301      	movs	r3, #1
 8007664:	e7df      	b.n	8007626 <_dtoa_r+0x276>
 8007666:	bf00      	nop
 8007668:	636f4361 	.word	0x636f4361
 800766c:	3fd287a7 	.word	0x3fd287a7
 8007670:	8b60c8b3 	.word	0x8b60c8b3
 8007674:	3fc68a28 	.word	0x3fc68a28
 8007678:	509f79fb 	.word	0x509f79fb
 800767c:	3fd34413 	.word	0x3fd34413
 8007680:	080094d9 	.word	0x080094d9
 8007684:	080094f0 	.word	0x080094f0
 8007688:	7ff00000 	.word	0x7ff00000
 800768c:	080094d5 	.word	0x080094d5
 8007690:	080094cc 	.word	0x080094cc
 8007694:	080094a9 	.word	0x080094a9
 8007698:	3ff80000 	.word	0x3ff80000
 800769c:	08009640 	.word	0x08009640
 80076a0:	0800954b 	.word	0x0800954b
 80076a4:	2501      	movs	r5, #1
 80076a6:	2300      	movs	r3, #0
 80076a8:	9306      	str	r3, [sp, #24]
 80076aa:	9508      	str	r5, [sp, #32]
 80076ac:	f04f 33ff 	mov.w	r3, #4294967295
 80076b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80076b4:	2200      	movs	r2, #0
 80076b6:	2312      	movs	r3, #18
 80076b8:	e7b0      	b.n	800761c <_dtoa_r+0x26c>
 80076ba:	2301      	movs	r3, #1
 80076bc:	9308      	str	r3, [sp, #32]
 80076be:	e7f5      	b.n	80076ac <_dtoa_r+0x2fc>
 80076c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80076c6:	e7b8      	b.n	800763a <_dtoa_r+0x28a>
 80076c8:	3101      	adds	r1, #1
 80076ca:	6041      	str	r1, [r0, #4]
 80076cc:	0052      	lsls	r2, r2, #1
 80076ce:	e7b8      	b.n	8007642 <_dtoa_r+0x292>
 80076d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076d2:	9a01      	ldr	r2, [sp, #4]
 80076d4:	601a      	str	r2, [r3, #0]
 80076d6:	9b03      	ldr	r3, [sp, #12]
 80076d8:	2b0e      	cmp	r3, #14
 80076da:	f200 809d 	bhi.w	8007818 <_dtoa_r+0x468>
 80076de:	2d00      	cmp	r5, #0
 80076e0:	f000 809a 	beq.w	8007818 <_dtoa_r+0x468>
 80076e4:	9b00      	ldr	r3, [sp, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	dd32      	ble.n	8007750 <_dtoa_r+0x3a0>
 80076ea:	4ab7      	ldr	r2, [pc, #732]	; (80079c8 <_dtoa_r+0x618>)
 80076ec:	f003 030f 	and.w	r3, r3, #15
 80076f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80076f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076f8:	9b00      	ldr	r3, [sp, #0]
 80076fa:	05d8      	lsls	r0, r3, #23
 80076fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007700:	d516      	bpl.n	8007730 <_dtoa_r+0x380>
 8007702:	4bb2      	ldr	r3, [pc, #712]	; (80079cc <_dtoa_r+0x61c>)
 8007704:	ec51 0b19 	vmov	r0, r1, d9
 8007708:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800770c:	f7f9 f89e 	bl	800084c <__aeabi_ddiv>
 8007710:	f007 070f 	and.w	r7, r7, #15
 8007714:	4682      	mov	sl, r0
 8007716:	468b      	mov	fp, r1
 8007718:	2503      	movs	r5, #3
 800771a:	4eac      	ldr	r6, [pc, #688]	; (80079cc <_dtoa_r+0x61c>)
 800771c:	b957      	cbnz	r7, 8007734 <_dtoa_r+0x384>
 800771e:	4642      	mov	r2, r8
 8007720:	464b      	mov	r3, r9
 8007722:	4650      	mov	r0, sl
 8007724:	4659      	mov	r1, fp
 8007726:	f7f9 f891 	bl	800084c <__aeabi_ddiv>
 800772a:	4682      	mov	sl, r0
 800772c:	468b      	mov	fp, r1
 800772e:	e028      	b.n	8007782 <_dtoa_r+0x3d2>
 8007730:	2502      	movs	r5, #2
 8007732:	e7f2      	b.n	800771a <_dtoa_r+0x36a>
 8007734:	07f9      	lsls	r1, r7, #31
 8007736:	d508      	bpl.n	800774a <_dtoa_r+0x39a>
 8007738:	4640      	mov	r0, r8
 800773a:	4649      	mov	r1, r9
 800773c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007740:	f7f8 ff5a 	bl	80005f8 <__aeabi_dmul>
 8007744:	3501      	adds	r5, #1
 8007746:	4680      	mov	r8, r0
 8007748:	4689      	mov	r9, r1
 800774a:	107f      	asrs	r7, r7, #1
 800774c:	3608      	adds	r6, #8
 800774e:	e7e5      	b.n	800771c <_dtoa_r+0x36c>
 8007750:	f000 809b 	beq.w	800788a <_dtoa_r+0x4da>
 8007754:	9b00      	ldr	r3, [sp, #0]
 8007756:	4f9d      	ldr	r7, [pc, #628]	; (80079cc <_dtoa_r+0x61c>)
 8007758:	425e      	negs	r6, r3
 800775a:	4b9b      	ldr	r3, [pc, #620]	; (80079c8 <_dtoa_r+0x618>)
 800775c:	f006 020f 	and.w	r2, r6, #15
 8007760:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007768:	ec51 0b19 	vmov	r0, r1, d9
 800776c:	f7f8 ff44 	bl	80005f8 <__aeabi_dmul>
 8007770:	1136      	asrs	r6, r6, #4
 8007772:	4682      	mov	sl, r0
 8007774:	468b      	mov	fp, r1
 8007776:	2300      	movs	r3, #0
 8007778:	2502      	movs	r5, #2
 800777a:	2e00      	cmp	r6, #0
 800777c:	d17a      	bne.n	8007874 <_dtoa_r+0x4c4>
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1d3      	bne.n	800772a <_dtoa_r+0x37a>
 8007782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 8082 	beq.w	800788e <_dtoa_r+0x4de>
 800778a:	4b91      	ldr	r3, [pc, #580]	; (80079d0 <_dtoa_r+0x620>)
 800778c:	2200      	movs	r2, #0
 800778e:	4650      	mov	r0, sl
 8007790:	4659      	mov	r1, fp
 8007792:	f7f9 f9a3 	bl	8000adc <__aeabi_dcmplt>
 8007796:	2800      	cmp	r0, #0
 8007798:	d079      	beq.n	800788e <_dtoa_r+0x4de>
 800779a:	9b03      	ldr	r3, [sp, #12]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d076      	beq.n	800788e <_dtoa_r+0x4de>
 80077a0:	9b02      	ldr	r3, [sp, #8]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	dd36      	ble.n	8007814 <_dtoa_r+0x464>
 80077a6:	9b00      	ldr	r3, [sp, #0]
 80077a8:	4650      	mov	r0, sl
 80077aa:	4659      	mov	r1, fp
 80077ac:	1e5f      	subs	r7, r3, #1
 80077ae:	2200      	movs	r2, #0
 80077b0:	4b88      	ldr	r3, [pc, #544]	; (80079d4 <_dtoa_r+0x624>)
 80077b2:	f7f8 ff21 	bl	80005f8 <__aeabi_dmul>
 80077b6:	9e02      	ldr	r6, [sp, #8]
 80077b8:	4682      	mov	sl, r0
 80077ba:	468b      	mov	fp, r1
 80077bc:	3501      	adds	r5, #1
 80077be:	4628      	mov	r0, r5
 80077c0:	f7f8 feb0 	bl	8000524 <__aeabi_i2d>
 80077c4:	4652      	mov	r2, sl
 80077c6:	465b      	mov	r3, fp
 80077c8:	f7f8 ff16 	bl	80005f8 <__aeabi_dmul>
 80077cc:	4b82      	ldr	r3, [pc, #520]	; (80079d8 <_dtoa_r+0x628>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	f7f8 fd5c 	bl	800028c <__adddf3>
 80077d4:	46d0      	mov	r8, sl
 80077d6:	46d9      	mov	r9, fp
 80077d8:	4682      	mov	sl, r0
 80077da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80077de:	2e00      	cmp	r6, #0
 80077e0:	d158      	bne.n	8007894 <_dtoa_r+0x4e4>
 80077e2:	4b7e      	ldr	r3, [pc, #504]	; (80079dc <_dtoa_r+0x62c>)
 80077e4:	2200      	movs	r2, #0
 80077e6:	4640      	mov	r0, r8
 80077e8:	4649      	mov	r1, r9
 80077ea:	f7f8 fd4d 	bl	8000288 <__aeabi_dsub>
 80077ee:	4652      	mov	r2, sl
 80077f0:	465b      	mov	r3, fp
 80077f2:	4680      	mov	r8, r0
 80077f4:	4689      	mov	r9, r1
 80077f6:	f7f9 f98f 	bl	8000b18 <__aeabi_dcmpgt>
 80077fa:	2800      	cmp	r0, #0
 80077fc:	f040 8295 	bne.w	8007d2a <_dtoa_r+0x97a>
 8007800:	4652      	mov	r2, sl
 8007802:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007806:	4640      	mov	r0, r8
 8007808:	4649      	mov	r1, r9
 800780a:	f7f9 f967 	bl	8000adc <__aeabi_dcmplt>
 800780e:	2800      	cmp	r0, #0
 8007810:	f040 8289 	bne.w	8007d26 <_dtoa_r+0x976>
 8007814:	ec5b ab19 	vmov	sl, fp, d9
 8007818:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800781a:	2b00      	cmp	r3, #0
 800781c:	f2c0 8148 	blt.w	8007ab0 <_dtoa_r+0x700>
 8007820:	9a00      	ldr	r2, [sp, #0]
 8007822:	2a0e      	cmp	r2, #14
 8007824:	f300 8144 	bgt.w	8007ab0 <_dtoa_r+0x700>
 8007828:	4b67      	ldr	r3, [pc, #412]	; (80079c8 <_dtoa_r+0x618>)
 800782a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800782e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007834:	2b00      	cmp	r3, #0
 8007836:	f280 80d5 	bge.w	80079e4 <_dtoa_r+0x634>
 800783a:	9b03      	ldr	r3, [sp, #12]
 800783c:	2b00      	cmp	r3, #0
 800783e:	f300 80d1 	bgt.w	80079e4 <_dtoa_r+0x634>
 8007842:	f040 826f 	bne.w	8007d24 <_dtoa_r+0x974>
 8007846:	4b65      	ldr	r3, [pc, #404]	; (80079dc <_dtoa_r+0x62c>)
 8007848:	2200      	movs	r2, #0
 800784a:	4640      	mov	r0, r8
 800784c:	4649      	mov	r1, r9
 800784e:	f7f8 fed3 	bl	80005f8 <__aeabi_dmul>
 8007852:	4652      	mov	r2, sl
 8007854:	465b      	mov	r3, fp
 8007856:	f7f9 f955 	bl	8000b04 <__aeabi_dcmpge>
 800785a:	9e03      	ldr	r6, [sp, #12]
 800785c:	4637      	mov	r7, r6
 800785e:	2800      	cmp	r0, #0
 8007860:	f040 8245 	bne.w	8007cee <_dtoa_r+0x93e>
 8007864:	9d01      	ldr	r5, [sp, #4]
 8007866:	2331      	movs	r3, #49	; 0x31
 8007868:	f805 3b01 	strb.w	r3, [r5], #1
 800786c:	9b00      	ldr	r3, [sp, #0]
 800786e:	3301      	adds	r3, #1
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	e240      	b.n	8007cf6 <_dtoa_r+0x946>
 8007874:	07f2      	lsls	r2, r6, #31
 8007876:	d505      	bpl.n	8007884 <_dtoa_r+0x4d4>
 8007878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800787c:	f7f8 febc 	bl	80005f8 <__aeabi_dmul>
 8007880:	3501      	adds	r5, #1
 8007882:	2301      	movs	r3, #1
 8007884:	1076      	asrs	r6, r6, #1
 8007886:	3708      	adds	r7, #8
 8007888:	e777      	b.n	800777a <_dtoa_r+0x3ca>
 800788a:	2502      	movs	r5, #2
 800788c:	e779      	b.n	8007782 <_dtoa_r+0x3d2>
 800788e:	9f00      	ldr	r7, [sp, #0]
 8007890:	9e03      	ldr	r6, [sp, #12]
 8007892:	e794      	b.n	80077be <_dtoa_r+0x40e>
 8007894:	9901      	ldr	r1, [sp, #4]
 8007896:	4b4c      	ldr	r3, [pc, #304]	; (80079c8 <_dtoa_r+0x618>)
 8007898:	4431      	add	r1, r6
 800789a:	910d      	str	r1, [sp, #52]	; 0x34
 800789c:	9908      	ldr	r1, [sp, #32]
 800789e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80078a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80078a6:	2900      	cmp	r1, #0
 80078a8:	d043      	beq.n	8007932 <_dtoa_r+0x582>
 80078aa:	494d      	ldr	r1, [pc, #308]	; (80079e0 <_dtoa_r+0x630>)
 80078ac:	2000      	movs	r0, #0
 80078ae:	f7f8 ffcd 	bl	800084c <__aeabi_ddiv>
 80078b2:	4652      	mov	r2, sl
 80078b4:	465b      	mov	r3, fp
 80078b6:	f7f8 fce7 	bl	8000288 <__aeabi_dsub>
 80078ba:	9d01      	ldr	r5, [sp, #4]
 80078bc:	4682      	mov	sl, r0
 80078be:	468b      	mov	fp, r1
 80078c0:	4649      	mov	r1, r9
 80078c2:	4640      	mov	r0, r8
 80078c4:	f7f9 f948 	bl	8000b58 <__aeabi_d2iz>
 80078c8:	4606      	mov	r6, r0
 80078ca:	f7f8 fe2b 	bl	8000524 <__aeabi_i2d>
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	4640      	mov	r0, r8
 80078d4:	4649      	mov	r1, r9
 80078d6:	f7f8 fcd7 	bl	8000288 <__aeabi_dsub>
 80078da:	3630      	adds	r6, #48	; 0x30
 80078dc:	f805 6b01 	strb.w	r6, [r5], #1
 80078e0:	4652      	mov	r2, sl
 80078e2:	465b      	mov	r3, fp
 80078e4:	4680      	mov	r8, r0
 80078e6:	4689      	mov	r9, r1
 80078e8:	f7f9 f8f8 	bl	8000adc <__aeabi_dcmplt>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	d163      	bne.n	80079b8 <_dtoa_r+0x608>
 80078f0:	4642      	mov	r2, r8
 80078f2:	464b      	mov	r3, r9
 80078f4:	4936      	ldr	r1, [pc, #216]	; (80079d0 <_dtoa_r+0x620>)
 80078f6:	2000      	movs	r0, #0
 80078f8:	f7f8 fcc6 	bl	8000288 <__aeabi_dsub>
 80078fc:	4652      	mov	r2, sl
 80078fe:	465b      	mov	r3, fp
 8007900:	f7f9 f8ec 	bl	8000adc <__aeabi_dcmplt>
 8007904:	2800      	cmp	r0, #0
 8007906:	f040 80b5 	bne.w	8007a74 <_dtoa_r+0x6c4>
 800790a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800790c:	429d      	cmp	r5, r3
 800790e:	d081      	beq.n	8007814 <_dtoa_r+0x464>
 8007910:	4b30      	ldr	r3, [pc, #192]	; (80079d4 <_dtoa_r+0x624>)
 8007912:	2200      	movs	r2, #0
 8007914:	4650      	mov	r0, sl
 8007916:	4659      	mov	r1, fp
 8007918:	f7f8 fe6e 	bl	80005f8 <__aeabi_dmul>
 800791c:	4b2d      	ldr	r3, [pc, #180]	; (80079d4 <_dtoa_r+0x624>)
 800791e:	4682      	mov	sl, r0
 8007920:	468b      	mov	fp, r1
 8007922:	4640      	mov	r0, r8
 8007924:	4649      	mov	r1, r9
 8007926:	2200      	movs	r2, #0
 8007928:	f7f8 fe66 	bl	80005f8 <__aeabi_dmul>
 800792c:	4680      	mov	r8, r0
 800792e:	4689      	mov	r9, r1
 8007930:	e7c6      	b.n	80078c0 <_dtoa_r+0x510>
 8007932:	4650      	mov	r0, sl
 8007934:	4659      	mov	r1, fp
 8007936:	f7f8 fe5f 	bl	80005f8 <__aeabi_dmul>
 800793a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800793c:	9d01      	ldr	r5, [sp, #4]
 800793e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007940:	4682      	mov	sl, r0
 8007942:	468b      	mov	fp, r1
 8007944:	4649      	mov	r1, r9
 8007946:	4640      	mov	r0, r8
 8007948:	f7f9 f906 	bl	8000b58 <__aeabi_d2iz>
 800794c:	4606      	mov	r6, r0
 800794e:	f7f8 fde9 	bl	8000524 <__aeabi_i2d>
 8007952:	3630      	adds	r6, #48	; 0x30
 8007954:	4602      	mov	r2, r0
 8007956:	460b      	mov	r3, r1
 8007958:	4640      	mov	r0, r8
 800795a:	4649      	mov	r1, r9
 800795c:	f7f8 fc94 	bl	8000288 <__aeabi_dsub>
 8007960:	f805 6b01 	strb.w	r6, [r5], #1
 8007964:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007966:	429d      	cmp	r5, r3
 8007968:	4680      	mov	r8, r0
 800796a:	4689      	mov	r9, r1
 800796c:	f04f 0200 	mov.w	r2, #0
 8007970:	d124      	bne.n	80079bc <_dtoa_r+0x60c>
 8007972:	4b1b      	ldr	r3, [pc, #108]	; (80079e0 <_dtoa_r+0x630>)
 8007974:	4650      	mov	r0, sl
 8007976:	4659      	mov	r1, fp
 8007978:	f7f8 fc88 	bl	800028c <__adddf3>
 800797c:	4602      	mov	r2, r0
 800797e:	460b      	mov	r3, r1
 8007980:	4640      	mov	r0, r8
 8007982:	4649      	mov	r1, r9
 8007984:	f7f9 f8c8 	bl	8000b18 <__aeabi_dcmpgt>
 8007988:	2800      	cmp	r0, #0
 800798a:	d173      	bne.n	8007a74 <_dtoa_r+0x6c4>
 800798c:	4652      	mov	r2, sl
 800798e:	465b      	mov	r3, fp
 8007990:	4913      	ldr	r1, [pc, #76]	; (80079e0 <_dtoa_r+0x630>)
 8007992:	2000      	movs	r0, #0
 8007994:	f7f8 fc78 	bl	8000288 <__aeabi_dsub>
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	4640      	mov	r0, r8
 800799e:	4649      	mov	r1, r9
 80079a0:	f7f9 f89c 	bl	8000adc <__aeabi_dcmplt>
 80079a4:	2800      	cmp	r0, #0
 80079a6:	f43f af35 	beq.w	8007814 <_dtoa_r+0x464>
 80079aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80079ac:	1e6b      	subs	r3, r5, #1
 80079ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80079b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079b4:	2b30      	cmp	r3, #48	; 0x30
 80079b6:	d0f8      	beq.n	80079aa <_dtoa_r+0x5fa>
 80079b8:	9700      	str	r7, [sp, #0]
 80079ba:	e049      	b.n	8007a50 <_dtoa_r+0x6a0>
 80079bc:	4b05      	ldr	r3, [pc, #20]	; (80079d4 <_dtoa_r+0x624>)
 80079be:	f7f8 fe1b 	bl	80005f8 <__aeabi_dmul>
 80079c2:	4680      	mov	r8, r0
 80079c4:	4689      	mov	r9, r1
 80079c6:	e7bd      	b.n	8007944 <_dtoa_r+0x594>
 80079c8:	08009640 	.word	0x08009640
 80079cc:	08009618 	.word	0x08009618
 80079d0:	3ff00000 	.word	0x3ff00000
 80079d4:	40240000 	.word	0x40240000
 80079d8:	401c0000 	.word	0x401c0000
 80079dc:	40140000 	.word	0x40140000
 80079e0:	3fe00000 	.word	0x3fe00000
 80079e4:	9d01      	ldr	r5, [sp, #4]
 80079e6:	4656      	mov	r6, sl
 80079e8:	465f      	mov	r7, fp
 80079ea:	4642      	mov	r2, r8
 80079ec:	464b      	mov	r3, r9
 80079ee:	4630      	mov	r0, r6
 80079f0:	4639      	mov	r1, r7
 80079f2:	f7f8 ff2b 	bl	800084c <__aeabi_ddiv>
 80079f6:	f7f9 f8af 	bl	8000b58 <__aeabi_d2iz>
 80079fa:	4682      	mov	sl, r0
 80079fc:	f7f8 fd92 	bl	8000524 <__aeabi_i2d>
 8007a00:	4642      	mov	r2, r8
 8007a02:	464b      	mov	r3, r9
 8007a04:	f7f8 fdf8 	bl	80005f8 <__aeabi_dmul>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	4639      	mov	r1, r7
 8007a10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007a14:	f7f8 fc38 	bl	8000288 <__aeabi_dsub>
 8007a18:	f805 6b01 	strb.w	r6, [r5], #1
 8007a1c:	9e01      	ldr	r6, [sp, #4]
 8007a1e:	9f03      	ldr	r7, [sp, #12]
 8007a20:	1bae      	subs	r6, r5, r6
 8007a22:	42b7      	cmp	r7, r6
 8007a24:	4602      	mov	r2, r0
 8007a26:	460b      	mov	r3, r1
 8007a28:	d135      	bne.n	8007a96 <_dtoa_r+0x6e6>
 8007a2a:	f7f8 fc2f 	bl	800028c <__adddf3>
 8007a2e:	4642      	mov	r2, r8
 8007a30:	464b      	mov	r3, r9
 8007a32:	4606      	mov	r6, r0
 8007a34:	460f      	mov	r7, r1
 8007a36:	f7f9 f86f 	bl	8000b18 <__aeabi_dcmpgt>
 8007a3a:	b9d0      	cbnz	r0, 8007a72 <_dtoa_r+0x6c2>
 8007a3c:	4642      	mov	r2, r8
 8007a3e:	464b      	mov	r3, r9
 8007a40:	4630      	mov	r0, r6
 8007a42:	4639      	mov	r1, r7
 8007a44:	f7f9 f840 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a48:	b110      	cbz	r0, 8007a50 <_dtoa_r+0x6a0>
 8007a4a:	f01a 0f01 	tst.w	sl, #1
 8007a4e:	d110      	bne.n	8007a72 <_dtoa_r+0x6c2>
 8007a50:	4620      	mov	r0, r4
 8007a52:	ee18 1a10 	vmov	r1, s16
 8007a56:	f000 fbed 	bl	8008234 <_Bfree>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	9800      	ldr	r0, [sp, #0]
 8007a5e:	702b      	strb	r3, [r5, #0]
 8007a60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a62:	3001      	adds	r0, #1
 8007a64:	6018      	str	r0, [r3, #0]
 8007a66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f43f acf1 	beq.w	8007450 <_dtoa_r+0xa0>
 8007a6e:	601d      	str	r5, [r3, #0]
 8007a70:	e4ee      	b.n	8007450 <_dtoa_r+0xa0>
 8007a72:	9f00      	ldr	r7, [sp, #0]
 8007a74:	462b      	mov	r3, r5
 8007a76:	461d      	mov	r5, r3
 8007a78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a7c:	2a39      	cmp	r2, #57	; 0x39
 8007a7e:	d106      	bne.n	8007a8e <_dtoa_r+0x6de>
 8007a80:	9a01      	ldr	r2, [sp, #4]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d1f7      	bne.n	8007a76 <_dtoa_r+0x6c6>
 8007a86:	9901      	ldr	r1, [sp, #4]
 8007a88:	2230      	movs	r2, #48	; 0x30
 8007a8a:	3701      	adds	r7, #1
 8007a8c:	700a      	strb	r2, [r1, #0]
 8007a8e:	781a      	ldrb	r2, [r3, #0]
 8007a90:	3201      	adds	r2, #1
 8007a92:	701a      	strb	r2, [r3, #0]
 8007a94:	e790      	b.n	80079b8 <_dtoa_r+0x608>
 8007a96:	4ba6      	ldr	r3, [pc, #664]	; (8007d30 <_dtoa_r+0x980>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f7f8 fdad 	bl	80005f8 <__aeabi_dmul>
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	4606      	mov	r6, r0
 8007aa4:	460f      	mov	r7, r1
 8007aa6:	f7f9 f80f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	d09d      	beq.n	80079ea <_dtoa_r+0x63a>
 8007aae:	e7cf      	b.n	8007a50 <_dtoa_r+0x6a0>
 8007ab0:	9a08      	ldr	r2, [sp, #32]
 8007ab2:	2a00      	cmp	r2, #0
 8007ab4:	f000 80d7 	beq.w	8007c66 <_dtoa_r+0x8b6>
 8007ab8:	9a06      	ldr	r2, [sp, #24]
 8007aba:	2a01      	cmp	r2, #1
 8007abc:	f300 80ba 	bgt.w	8007c34 <_dtoa_r+0x884>
 8007ac0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ac2:	2a00      	cmp	r2, #0
 8007ac4:	f000 80b2 	beq.w	8007c2c <_dtoa_r+0x87c>
 8007ac8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007acc:	9e07      	ldr	r6, [sp, #28]
 8007ace:	9d04      	ldr	r5, [sp, #16]
 8007ad0:	9a04      	ldr	r2, [sp, #16]
 8007ad2:	441a      	add	r2, r3
 8007ad4:	9204      	str	r2, [sp, #16]
 8007ad6:	9a05      	ldr	r2, [sp, #20]
 8007ad8:	2101      	movs	r1, #1
 8007ada:	441a      	add	r2, r3
 8007adc:	4620      	mov	r0, r4
 8007ade:	9205      	str	r2, [sp, #20]
 8007ae0:	f000 fc60 	bl	80083a4 <__i2b>
 8007ae4:	4607      	mov	r7, r0
 8007ae6:	2d00      	cmp	r5, #0
 8007ae8:	dd0c      	ble.n	8007b04 <_dtoa_r+0x754>
 8007aea:	9b05      	ldr	r3, [sp, #20]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	dd09      	ble.n	8007b04 <_dtoa_r+0x754>
 8007af0:	42ab      	cmp	r3, r5
 8007af2:	9a04      	ldr	r2, [sp, #16]
 8007af4:	bfa8      	it	ge
 8007af6:	462b      	movge	r3, r5
 8007af8:	1ad2      	subs	r2, r2, r3
 8007afa:	9204      	str	r2, [sp, #16]
 8007afc:	9a05      	ldr	r2, [sp, #20]
 8007afe:	1aed      	subs	r5, r5, r3
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	9305      	str	r3, [sp, #20]
 8007b04:	9b07      	ldr	r3, [sp, #28]
 8007b06:	b31b      	cbz	r3, 8007b50 <_dtoa_r+0x7a0>
 8007b08:	9b08      	ldr	r3, [sp, #32]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f000 80af 	beq.w	8007c6e <_dtoa_r+0x8be>
 8007b10:	2e00      	cmp	r6, #0
 8007b12:	dd13      	ble.n	8007b3c <_dtoa_r+0x78c>
 8007b14:	4639      	mov	r1, r7
 8007b16:	4632      	mov	r2, r6
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f000 fd03 	bl	8008524 <__pow5mult>
 8007b1e:	ee18 2a10 	vmov	r2, s16
 8007b22:	4601      	mov	r1, r0
 8007b24:	4607      	mov	r7, r0
 8007b26:	4620      	mov	r0, r4
 8007b28:	f000 fc52 	bl	80083d0 <__multiply>
 8007b2c:	ee18 1a10 	vmov	r1, s16
 8007b30:	4680      	mov	r8, r0
 8007b32:	4620      	mov	r0, r4
 8007b34:	f000 fb7e 	bl	8008234 <_Bfree>
 8007b38:	ee08 8a10 	vmov	s16, r8
 8007b3c:	9b07      	ldr	r3, [sp, #28]
 8007b3e:	1b9a      	subs	r2, r3, r6
 8007b40:	d006      	beq.n	8007b50 <_dtoa_r+0x7a0>
 8007b42:	ee18 1a10 	vmov	r1, s16
 8007b46:	4620      	mov	r0, r4
 8007b48:	f000 fcec 	bl	8008524 <__pow5mult>
 8007b4c:	ee08 0a10 	vmov	s16, r0
 8007b50:	2101      	movs	r1, #1
 8007b52:	4620      	mov	r0, r4
 8007b54:	f000 fc26 	bl	80083a4 <__i2b>
 8007b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	4606      	mov	r6, r0
 8007b5e:	f340 8088 	ble.w	8007c72 <_dtoa_r+0x8c2>
 8007b62:	461a      	mov	r2, r3
 8007b64:	4601      	mov	r1, r0
 8007b66:	4620      	mov	r0, r4
 8007b68:	f000 fcdc 	bl	8008524 <__pow5mult>
 8007b6c:	9b06      	ldr	r3, [sp, #24]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	4606      	mov	r6, r0
 8007b72:	f340 8081 	ble.w	8007c78 <_dtoa_r+0x8c8>
 8007b76:	f04f 0800 	mov.w	r8, #0
 8007b7a:	6933      	ldr	r3, [r6, #16]
 8007b7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007b80:	6918      	ldr	r0, [r3, #16]
 8007b82:	f000 fbbf 	bl	8008304 <__hi0bits>
 8007b86:	f1c0 0020 	rsb	r0, r0, #32
 8007b8a:	9b05      	ldr	r3, [sp, #20]
 8007b8c:	4418      	add	r0, r3
 8007b8e:	f010 001f 	ands.w	r0, r0, #31
 8007b92:	f000 8092 	beq.w	8007cba <_dtoa_r+0x90a>
 8007b96:	f1c0 0320 	rsb	r3, r0, #32
 8007b9a:	2b04      	cmp	r3, #4
 8007b9c:	f340 808a 	ble.w	8007cb4 <_dtoa_r+0x904>
 8007ba0:	f1c0 001c 	rsb	r0, r0, #28
 8007ba4:	9b04      	ldr	r3, [sp, #16]
 8007ba6:	4403      	add	r3, r0
 8007ba8:	9304      	str	r3, [sp, #16]
 8007baa:	9b05      	ldr	r3, [sp, #20]
 8007bac:	4403      	add	r3, r0
 8007bae:	4405      	add	r5, r0
 8007bb0:	9305      	str	r3, [sp, #20]
 8007bb2:	9b04      	ldr	r3, [sp, #16]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	dd07      	ble.n	8007bc8 <_dtoa_r+0x818>
 8007bb8:	ee18 1a10 	vmov	r1, s16
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f000 fd0a 	bl	80085d8 <__lshift>
 8007bc4:	ee08 0a10 	vmov	s16, r0
 8007bc8:	9b05      	ldr	r3, [sp, #20]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	dd05      	ble.n	8007bda <_dtoa_r+0x82a>
 8007bce:	4631      	mov	r1, r6
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f000 fd00 	bl	80085d8 <__lshift>
 8007bd8:	4606      	mov	r6, r0
 8007bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d06e      	beq.n	8007cbe <_dtoa_r+0x90e>
 8007be0:	ee18 0a10 	vmov	r0, s16
 8007be4:	4631      	mov	r1, r6
 8007be6:	f000 fd67 	bl	80086b8 <__mcmp>
 8007bea:	2800      	cmp	r0, #0
 8007bec:	da67      	bge.n	8007cbe <_dtoa_r+0x90e>
 8007bee:	9b00      	ldr	r3, [sp, #0]
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	ee18 1a10 	vmov	r1, s16
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	220a      	movs	r2, #10
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	f000 fb3b 	bl	8008278 <__multadd>
 8007c02:	9b08      	ldr	r3, [sp, #32]
 8007c04:	ee08 0a10 	vmov	s16, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 81b1 	beq.w	8007f70 <_dtoa_r+0xbc0>
 8007c0e:	2300      	movs	r3, #0
 8007c10:	4639      	mov	r1, r7
 8007c12:	220a      	movs	r2, #10
 8007c14:	4620      	mov	r0, r4
 8007c16:	f000 fb2f 	bl	8008278 <__multadd>
 8007c1a:	9b02      	ldr	r3, [sp, #8]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	4607      	mov	r7, r0
 8007c20:	f300 808e 	bgt.w	8007d40 <_dtoa_r+0x990>
 8007c24:	9b06      	ldr	r3, [sp, #24]
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	dc51      	bgt.n	8007cce <_dtoa_r+0x91e>
 8007c2a:	e089      	b.n	8007d40 <_dtoa_r+0x990>
 8007c2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c32:	e74b      	b.n	8007acc <_dtoa_r+0x71c>
 8007c34:	9b03      	ldr	r3, [sp, #12]
 8007c36:	1e5e      	subs	r6, r3, #1
 8007c38:	9b07      	ldr	r3, [sp, #28]
 8007c3a:	42b3      	cmp	r3, r6
 8007c3c:	bfbf      	itttt	lt
 8007c3e:	9b07      	ldrlt	r3, [sp, #28]
 8007c40:	9607      	strlt	r6, [sp, #28]
 8007c42:	1af2      	sublt	r2, r6, r3
 8007c44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007c46:	bfb6      	itet	lt
 8007c48:	189b      	addlt	r3, r3, r2
 8007c4a:	1b9e      	subge	r6, r3, r6
 8007c4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007c4e:	9b03      	ldr	r3, [sp, #12]
 8007c50:	bfb8      	it	lt
 8007c52:	2600      	movlt	r6, #0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	bfb7      	itett	lt
 8007c58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007c5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007c60:	1a9d      	sublt	r5, r3, r2
 8007c62:	2300      	movlt	r3, #0
 8007c64:	e734      	b.n	8007ad0 <_dtoa_r+0x720>
 8007c66:	9e07      	ldr	r6, [sp, #28]
 8007c68:	9d04      	ldr	r5, [sp, #16]
 8007c6a:	9f08      	ldr	r7, [sp, #32]
 8007c6c:	e73b      	b.n	8007ae6 <_dtoa_r+0x736>
 8007c6e:	9a07      	ldr	r2, [sp, #28]
 8007c70:	e767      	b.n	8007b42 <_dtoa_r+0x792>
 8007c72:	9b06      	ldr	r3, [sp, #24]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	dc18      	bgt.n	8007caa <_dtoa_r+0x8fa>
 8007c78:	f1ba 0f00 	cmp.w	sl, #0
 8007c7c:	d115      	bne.n	8007caa <_dtoa_r+0x8fa>
 8007c7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c82:	b993      	cbnz	r3, 8007caa <_dtoa_r+0x8fa>
 8007c84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007c88:	0d1b      	lsrs	r3, r3, #20
 8007c8a:	051b      	lsls	r3, r3, #20
 8007c8c:	b183      	cbz	r3, 8007cb0 <_dtoa_r+0x900>
 8007c8e:	9b04      	ldr	r3, [sp, #16]
 8007c90:	3301      	adds	r3, #1
 8007c92:	9304      	str	r3, [sp, #16]
 8007c94:	9b05      	ldr	r3, [sp, #20]
 8007c96:	3301      	adds	r3, #1
 8007c98:	9305      	str	r3, [sp, #20]
 8007c9a:	f04f 0801 	mov.w	r8, #1
 8007c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f47f af6a 	bne.w	8007b7a <_dtoa_r+0x7ca>
 8007ca6:	2001      	movs	r0, #1
 8007ca8:	e76f      	b.n	8007b8a <_dtoa_r+0x7da>
 8007caa:	f04f 0800 	mov.w	r8, #0
 8007cae:	e7f6      	b.n	8007c9e <_dtoa_r+0x8ee>
 8007cb0:	4698      	mov	r8, r3
 8007cb2:	e7f4      	b.n	8007c9e <_dtoa_r+0x8ee>
 8007cb4:	f43f af7d 	beq.w	8007bb2 <_dtoa_r+0x802>
 8007cb8:	4618      	mov	r0, r3
 8007cba:	301c      	adds	r0, #28
 8007cbc:	e772      	b.n	8007ba4 <_dtoa_r+0x7f4>
 8007cbe:	9b03      	ldr	r3, [sp, #12]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	dc37      	bgt.n	8007d34 <_dtoa_r+0x984>
 8007cc4:	9b06      	ldr	r3, [sp, #24]
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	dd34      	ble.n	8007d34 <_dtoa_r+0x984>
 8007cca:	9b03      	ldr	r3, [sp, #12]
 8007ccc:	9302      	str	r3, [sp, #8]
 8007cce:	9b02      	ldr	r3, [sp, #8]
 8007cd0:	b96b      	cbnz	r3, 8007cee <_dtoa_r+0x93e>
 8007cd2:	4631      	mov	r1, r6
 8007cd4:	2205      	movs	r2, #5
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f000 face 	bl	8008278 <__multadd>
 8007cdc:	4601      	mov	r1, r0
 8007cde:	4606      	mov	r6, r0
 8007ce0:	ee18 0a10 	vmov	r0, s16
 8007ce4:	f000 fce8 	bl	80086b8 <__mcmp>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	f73f adbb 	bgt.w	8007864 <_dtoa_r+0x4b4>
 8007cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cf0:	9d01      	ldr	r5, [sp, #4]
 8007cf2:	43db      	mvns	r3, r3
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	f04f 0800 	mov.w	r8, #0
 8007cfa:	4631      	mov	r1, r6
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f000 fa99 	bl	8008234 <_Bfree>
 8007d02:	2f00      	cmp	r7, #0
 8007d04:	f43f aea4 	beq.w	8007a50 <_dtoa_r+0x6a0>
 8007d08:	f1b8 0f00 	cmp.w	r8, #0
 8007d0c:	d005      	beq.n	8007d1a <_dtoa_r+0x96a>
 8007d0e:	45b8      	cmp	r8, r7
 8007d10:	d003      	beq.n	8007d1a <_dtoa_r+0x96a>
 8007d12:	4641      	mov	r1, r8
 8007d14:	4620      	mov	r0, r4
 8007d16:	f000 fa8d 	bl	8008234 <_Bfree>
 8007d1a:	4639      	mov	r1, r7
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f000 fa89 	bl	8008234 <_Bfree>
 8007d22:	e695      	b.n	8007a50 <_dtoa_r+0x6a0>
 8007d24:	2600      	movs	r6, #0
 8007d26:	4637      	mov	r7, r6
 8007d28:	e7e1      	b.n	8007cee <_dtoa_r+0x93e>
 8007d2a:	9700      	str	r7, [sp, #0]
 8007d2c:	4637      	mov	r7, r6
 8007d2e:	e599      	b.n	8007864 <_dtoa_r+0x4b4>
 8007d30:	40240000 	.word	0x40240000
 8007d34:	9b08      	ldr	r3, [sp, #32]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f000 80ca 	beq.w	8007ed0 <_dtoa_r+0xb20>
 8007d3c:	9b03      	ldr	r3, [sp, #12]
 8007d3e:	9302      	str	r3, [sp, #8]
 8007d40:	2d00      	cmp	r5, #0
 8007d42:	dd05      	ble.n	8007d50 <_dtoa_r+0x9a0>
 8007d44:	4639      	mov	r1, r7
 8007d46:	462a      	mov	r2, r5
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f000 fc45 	bl	80085d8 <__lshift>
 8007d4e:	4607      	mov	r7, r0
 8007d50:	f1b8 0f00 	cmp.w	r8, #0
 8007d54:	d05b      	beq.n	8007e0e <_dtoa_r+0xa5e>
 8007d56:	6879      	ldr	r1, [r7, #4]
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f000 fa2b 	bl	80081b4 <_Balloc>
 8007d5e:	4605      	mov	r5, r0
 8007d60:	b928      	cbnz	r0, 8007d6e <_dtoa_r+0x9be>
 8007d62:	4b87      	ldr	r3, [pc, #540]	; (8007f80 <_dtoa_r+0xbd0>)
 8007d64:	4602      	mov	r2, r0
 8007d66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007d6a:	f7ff bb3b 	b.w	80073e4 <_dtoa_r+0x34>
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	3202      	adds	r2, #2
 8007d72:	0092      	lsls	r2, r2, #2
 8007d74:	f107 010c 	add.w	r1, r7, #12
 8007d78:	300c      	adds	r0, #12
 8007d7a:	f000 fa0d 	bl	8008198 <memcpy>
 8007d7e:	2201      	movs	r2, #1
 8007d80:	4629      	mov	r1, r5
 8007d82:	4620      	mov	r0, r4
 8007d84:	f000 fc28 	bl	80085d8 <__lshift>
 8007d88:	9b01      	ldr	r3, [sp, #4]
 8007d8a:	f103 0901 	add.w	r9, r3, #1
 8007d8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007d92:	4413      	add	r3, r2
 8007d94:	9305      	str	r3, [sp, #20]
 8007d96:	f00a 0301 	and.w	r3, sl, #1
 8007d9a:	46b8      	mov	r8, r7
 8007d9c:	9304      	str	r3, [sp, #16]
 8007d9e:	4607      	mov	r7, r0
 8007da0:	4631      	mov	r1, r6
 8007da2:	ee18 0a10 	vmov	r0, s16
 8007da6:	f7ff fa75 	bl	8007294 <quorem>
 8007daa:	4641      	mov	r1, r8
 8007dac:	9002      	str	r0, [sp, #8]
 8007dae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007db2:	ee18 0a10 	vmov	r0, s16
 8007db6:	f000 fc7f 	bl	80086b8 <__mcmp>
 8007dba:	463a      	mov	r2, r7
 8007dbc:	9003      	str	r0, [sp, #12]
 8007dbe:	4631      	mov	r1, r6
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f000 fc95 	bl	80086f0 <__mdiff>
 8007dc6:	68c2      	ldr	r2, [r0, #12]
 8007dc8:	f109 3bff 	add.w	fp, r9, #4294967295
 8007dcc:	4605      	mov	r5, r0
 8007dce:	bb02      	cbnz	r2, 8007e12 <_dtoa_r+0xa62>
 8007dd0:	4601      	mov	r1, r0
 8007dd2:	ee18 0a10 	vmov	r0, s16
 8007dd6:	f000 fc6f 	bl	80086b8 <__mcmp>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	4629      	mov	r1, r5
 8007dde:	4620      	mov	r0, r4
 8007de0:	9207      	str	r2, [sp, #28]
 8007de2:	f000 fa27 	bl	8008234 <_Bfree>
 8007de6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007dea:	ea43 0102 	orr.w	r1, r3, r2
 8007dee:	9b04      	ldr	r3, [sp, #16]
 8007df0:	430b      	orrs	r3, r1
 8007df2:	464d      	mov	r5, r9
 8007df4:	d10f      	bne.n	8007e16 <_dtoa_r+0xa66>
 8007df6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007dfa:	d02a      	beq.n	8007e52 <_dtoa_r+0xaa2>
 8007dfc:	9b03      	ldr	r3, [sp, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	dd02      	ble.n	8007e08 <_dtoa_r+0xa58>
 8007e02:	9b02      	ldr	r3, [sp, #8]
 8007e04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007e08:	f88b a000 	strb.w	sl, [fp]
 8007e0c:	e775      	b.n	8007cfa <_dtoa_r+0x94a>
 8007e0e:	4638      	mov	r0, r7
 8007e10:	e7ba      	b.n	8007d88 <_dtoa_r+0x9d8>
 8007e12:	2201      	movs	r2, #1
 8007e14:	e7e2      	b.n	8007ddc <_dtoa_r+0xa2c>
 8007e16:	9b03      	ldr	r3, [sp, #12]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	db04      	blt.n	8007e26 <_dtoa_r+0xa76>
 8007e1c:	9906      	ldr	r1, [sp, #24]
 8007e1e:	430b      	orrs	r3, r1
 8007e20:	9904      	ldr	r1, [sp, #16]
 8007e22:	430b      	orrs	r3, r1
 8007e24:	d122      	bne.n	8007e6c <_dtoa_r+0xabc>
 8007e26:	2a00      	cmp	r2, #0
 8007e28:	ddee      	ble.n	8007e08 <_dtoa_r+0xa58>
 8007e2a:	ee18 1a10 	vmov	r1, s16
 8007e2e:	2201      	movs	r2, #1
 8007e30:	4620      	mov	r0, r4
 8007e32:	f000 fbd1 	bl	80085d8 <__lshift>
 8007e36:	4631      	mov	r1, r6
 8007e38:	ee08 0a10 	vmov	s16, r0
 8007e3c:	f000 fc3c 	bl	80086b8 <__mcmp>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	dc03      	bgt.n	8007e4c <_dtoa_r+0xa9c>
 8007e44:	d1e0      	bne.n	8007e08 <_dtoa_r+0xa58>
 8007e46:	f01a 0f01 	tst.w	sl, #1
 8007e4a:	d0dd      	beq.n	8007e08 <_dtoa_r+0xa58>
 8007e4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e50:	d1d7      	bne.n	8007e02 <_dtoa_r+0xa52>
 8007e52:	2339      	movs	r3, #57	; 0x39
 8007e54:	f88b 3000 	strb.w	r3, [fp]
 8007e58:	462b      	mov	r3, r5
 8007e5a:	461d      	mov	r5, r3
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007e62:	2a39      	cmp	r2, #57	; 0x39
 8007e64:	d071      	beq.n	8007f4a <_dtoa_r+0xb9a>
 8007e66:	3201      	adds	r2, #1
 8007e68:	701a      	strb	r2, [r3, #0]
 8007e6a:	e746      	b.n	8007cfa <_dtoa_r+0x94a>
 8007e6c:	2a00      	cmp	r2, #0
 8007e6e:	dd07      	ble.n	8007e80 <_dtoa_r+0xad0>
 8007e70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e74:	d0ed      	beq.n	8007e52 <_dtoa_r+0xaa2>
 8007e76:	f10a 0301 	add.w	r3, sl, #1
 8007e7a:	f88b 3000 	strb.w	r3, [fp]
 8007e7e:	e73c      	b.n	8007cfa <_dtoa_r+0x94a>
 8007e80:	9b05      	ldr	r3, [sp, #20]
 8007e82:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007e86:	4599      	cmp	r9, r3
 8007e88:	d047      	beq.n	8007f1a <_dtoa_r+0xb6a>
 8007e8a:	ee18 1a10 	vmov	r1, s16
 8007e8e:	2300      	movs	r3, #0
 8007e90:	220a      	movs	r2, #10
 8007e92:	4620      	mov	r0, r4
 8007e94:	f000 f9f0 	bl	8008278 <__multadd>
 8007e98:	45b8      	cmp	r8, r7
 8007e9a:	ee08 0a10 	vmov	s16, r0
 8007e9e:	f04f 0300 	mov.w	r3, #0
 8007ea2:	f04f 020a 	mov.w	r2, #10
 8007ea6:	4641      	mov	r1, r8
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	d106      	bne.n	8007eba <_dtoa_r+0xb0a>
 8007eac:	f000 f9e4 	bl	8008278 <__multadd>
 8007eb0:	4680      	mov	r8, r0
 8007eb2:	4607      	mov	r7, r0
 8007eb4:	f109 0901 	add.w	r9, r9, #1
 8007eb8:	e772      	b.n	8007da0 <_dtoa_r+0x9f0>
 8007eba:	f000 f9dd 	bl	8008278 <__multadd>
 8007ebe:	4639      	mov	r1, r7
 8007ec0:	4680      	mov	r8, r0
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	220a      	movs	r2, #10
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f000 f9d6 	bl	8008278 <__multadd>
 8007ecc:	4607      	mov	r7, r0
 8007ece:	e7f1      	b.n	8007eb4 <_dtoa_r+0xb04>
 8007ed0:	9b03      	ldr	r3, [sp, #12]
 8007ed2:	9302      	str	r3, [sp, #8]
 8007ed4:	9d01      	ldr	r5, [sp, #4]
 8007ed6:	ee18 0a10 	vmov	r0, s16
 8007eda:	4631      	mov	r1, r6
 8007edc:	f7ff f9da 	bl	8007294 <quorem>
 8007ee0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007ee4:	9b01      	ldr	r3, [sp, #4]
 8007ee6:	f805 ab01 	strb.w	sl, [r5], #1
 8007eea:	1aea      	subs	r2, r5, r3
 8007eec:	9b02      	ldr	r3, [sp, #8]
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	dd09      	ble.n	8007f06 <_dtoa_r+0xb56>
 8007ef2:	ee18 1a10 	vmov	r1, s16
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	220a      	movs	r2, #10
 8007efa:	4620      	mov	r0, r4
 8007efc:	f000 f9bc 	bl	8008278 <__multadd>
 8007f00:	ee08 0a10 	vmov	s16, r0
 8007f04:	e7e7      	b.n	8007ed6 <_dtoa_r+0xb26>
 8007f06:	9b02      	ldr	r3, [sp, #8]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	bfc8      	it	gt
 8007f0c:	461d      	movgt	r5, r3
 8007f0e:	9b01      	ldr	r3, [sp, #4]
 8007f10:	bfd8      	it	le
 8007f12:	2501      	movle	r5, #1
 8007f14:	441d      	add	r5, r3
 8007f16:	f04f 0800 	mov.w	r8, #0
 8007f1a:	ee18 1a10 	vmov	r1, s16
 8007f1e:	2201      	movs	r2, #1
 8007f20:	4620      	mov	r0, r4
 8007f22:	f000 fb59 	bl	80085d8 <__lshift>
 8007f26:	4631      	mov	r1, r6
 8007f28:	ee08 0a10 	vmov	s16, r0
 8007f2c:	f000 fbc4 	bl	80086b8 <__mcmp>
 8007f30:	2800      	cmp	r0, #0
 8007f32:	dc91      	bgt.n	8007e58 <_dtoa_r+0xaa8>
 8007f34:	d102      	bne.n	8007f3c <_dtoa_r+0xb8c>
 8007f36:	f01a 0f01 	tst.w	sl, #1
 8007f3a:	d18d      	bne.n	8007e58 <_dtoa_r+0xaa8>
 8007f3c:	462b      	mov	r3, r5
 8007f3e:	461d      	mov	r5, r3
 8007f40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f44:	2a30      	cmp	r2, #48	; 0x30
 8007f46:	d0fa      	beq.n	8007f3e <_dtoa_r+0xb8e>
 8007f48:	e6d7      	b.n	8007cfa <_dtoa_r+0x94a>
 8007f4a:	9a01      	ldr	r2, [sp, #4]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d184      	bne.n	8007e5a <_dtoa_r+0xaaa>
 8007f50:	9b00      	ldr	r3, [sp, #0]
 8007f52:	3301      	adds	r3, #1
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	2331      	movs	r3, #49	; 0x31
 8007f58:	7013      	strb	r3, [r2, #0]
 8007f5a:	e6ce      	b.n	8007cfa <_dtoa_r+0x94a>
 8007f5c:	4b09      	ldr	r3, [pc, #36]	; (8007f84 <_dtoa_r+0xbd4>)
 8007f5e:	f7ff ba95 	b.w	800748c <_dtoa_r+0xdc>
 8007f62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f47f aa6e 	bne.w	8007446 <_dtoa_r+0x96>
 8007f6a:	4b07      	ldr	r3, [pc, #28]	; (8007f88 <_dtoa_r+0xbd8>)
 8007f6c:	f7ff ba8e 	b.w	800748c <_dtoa_r+0xdc>
 8007f70:	9b02      	ldr	r3, [sp, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	dcae      	bgt.n	8007ed4 <_dtoa_r+0xb24>
 8007f76:	9b06      	ldr	r3, [sp, #24]
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	f73f aea8 	bgt.w	8007cce <_dtoa_r+0x91e>
 8007f7e:	e7a9      	b.n	8007ed4 <_dtoa_r+0xb24>
 8007f80:	0800954b 	.word	0x0800954b
 8007f84:	080094a8 	.word	0x080094a8
 8007f88:	080094cc 	.word	0x080094cc

08007f8c <std>:
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	b510      	push	{r4, lr}
 8007f90:	4604      	mov	r4, r0
 8007f92:	e9c0 3300 	strd	r3, r3, [r0]
 8007f96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f9a:	6083      	str	r3, [r0, #8]
 8007f9c:	8181      	strh	r1, [r0, #12]
 8007f9e:	6643      	str	r3, [r0, #100]	; 0x64
 8007fa0:	81c2      	strh	r2, [r0, #14]
 8007fa2:	6183      	str	r3, [r0, #24]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	2208      	movs	r2, #8
 8007fa8:	305c      	adds	r0, #92	; 0x5c
 8007faa:	f7fe fce9 	bl	8006980 <memset>
 8007fae:	4b05      	ldr	r3, [pc, #20]	; (8007fc4 <std+0x38>)
 8007fb0:	6263      	str	r3, [r4, #36]	; 0x24
 8007fb2:	4b05      	ldr	r3, [pc, #20]	; (8007fc8 <std+0x3c>)
 8007fb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fb6:	4b05      	ldr	r3, [pc, #20]	; (8007fcc <std+0x40>)
 8007fb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fba:	4b05      	ldr	r3, [pc, #20]	; (8007fd0 <std+0x44>)
 8007fbc:	6224      	str	r4, [r4, #32]
 8007fbe:	6323      	str	r3, [r4, #48]	; 0x30
 8007fc0:	bd10      	pop	{r4, pc}
 8007fc2:	bf00      	nop
 8007fc4:	08008d7d 	.word	0x08008d7d
 8007fc8:	08008d9f 	.word	0x08008d9f
 8007fcc:	08008dd7 	.word	0x08008dd7
 8007fd0:	08008dfb 	.word	0x08008dfb

08007fd4 <_cleanup_r>:
 8007fd4:	4901      	ldr	r1, [pc, #4]	; (8007fdc <_cleanup_r+0x8>)
 8007fd6:	f000 b8af 	b.w	8008138 <_fwalk_reent>
 8007fda:	bf00      	nop
 8007fdc:	08009111 	.word	0x08009111

08007fe0 <__sfmoreglue>:
 8007fe0:	b570      	push	{r4, r5, r6, lr}
 8007fe2:	2268      	movs	r2, #104	; 0x68
 8007fe4:	1e4d      	subs	r5, r1, #1
 8007fe6:	4355      	muls	r5, r2
 8007fe8:	460e      	mov	r6, r1
 8007fea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007fee:	f000 fce7 	bl	80089c0 <_malloc_r>
 8007ff2:	4604      	mov	r4, r0
 8007ff4:	b140      	cbz	r0, 8008008 <__sfmoreglue+0x28>
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	e9c0 1600 	strd	r1, r6, [r0]
 8007ffc:	300c      	adds	r0, #12
 8007ffe:	60a0      	str	r0, [r4, #8]
 8008000:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008004:	f7fe fcbc 	bl	8006980 <memset>
 8008008:	4620      	mov	r0, r4
 800800a:	bd70      	pop	{r4, r5, r6, pc}

0800800c <__sfp_lock_acquire>:
 800800c:	4801      	ldr	r0, [pc, #4]	; (8008014 <__sfp_lock_acquire+0x8>)
 800800e:	f000 b8b8 	b.w	8008182 <__retarget_lock_acquire_recursive>
 8008012:	bf00      	nop
 8008014:	20000459 	.word	0x20000459

08008018 <__sfp_lock_release>:
 8008018:	4801      	ldr	r0, [pc, #4]	; (8008020 <__sfp_lock_release+0x8>)
 800801a:	f000 b8b3 	b.w	8008184 <__retarget_lock_release_recursive>
 800801e:	bf00      	nop
 8008020:	20000459 	.word	0x20000459

08008024 <__sinit_lock_acquire>:
 8008024:	4801      	ldr	r0, [pc, #4]	; (800802c <__sinit_lock_acquire+0x8>)
 8008026:	f000 b8ac 	b.w	8008182 <__retarget_lock_acquire_recursive>
 800802a:	bf00      	nop
 800802c:	2000045a 	.word	0x2000045a

08008030 <__sinit_lock_release>:
 8008030:	4801      	ldr	r0, [pc, #4]	; (8008038 <__sinit_lock_release+0x8>)
 8008032:	f000 b8a7 	b.w	8008184 <__retarget_lock_release_recursive>
 8008036:	bf00      	nop
 8008038:	2000045a 	.word	0x2000045a

0800803c <__sinit>:
 800803c:	b510      	push	{r4, lr}
 800803e:	4604      	mov	r4, r0
 8008040:	f7ff fff0 	bl	8008024 <__sinit_lock_acquire>
 8008044:	69a3      	ldr	r3, [r4, #24]
 8008046:	b11b      	cbz	r3, 8008050 <__sinit+0x14>
 8008048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800804c:	f7ff bff0 	b.w	8008030 <__sinit_lock_release>
 8008050:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008054:	6523      	str	r3, [r4, #80]	; 0x50
 8008056:	4b13      	ldr	r3, [pc, #76]	; (80080a4 <__sinit+0x68>)
 8008058:	4a13      	ldr	r2, [pc, #76]	; (80080a8 <__sinit+0x6c>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	62a2      	str	r2, [r4, #40]	; 0x28
 800805e:	42a3      	cmp	r3, r4
 8008060:	bf04      	itt	eq
 8008062:	2301      	moveq	r3, #1
 8008064:	61a3      	streq	r3, [r4, #24]
 8008066:	4620      	mov	r0, r4
 8008068:	f000 f820 	bl	80080ac <__sfp>
 800806c:	6060      	str	r0, [r4, #4]
 800806e:	4620      	mov	r0, r4
 8008070:	f000 f81c 	bl	80080ac <__sfp>
 8008074:	60a0      	str	r0, [r4, #8]
 8008076:	4620      	mov	r0, r4
 8008078:	f000 f818 	bl	80080ac <__sfp>
 800807c:	2200      	movs	r2, #0
 800807e:	60e0      	str	r0, [r4, #12]
 8008080:	2104      	movs	r1, #4
 8008082:	6860      	ldr	r0, [r4, #4]
 8008084:	f7ff ff82 	bl	8007f8c <std>
 8008088:	68a0      	ldr	r0, [r4, #8]
 800808a:	2201      	movs	r2, #1
 800808c:	2109      	movs	r1, #9
 800808e:	f7ff ff7d 	bl	8007f8c <std>
 8008092:	68e0      	ldr	r0, [r4, #12]
 8008094:	2202      	movs	r2, #2
 8008096:	2112      	movs	r1, #18
 8008098:	f7ff ff78 	bl	8007f8c <std>
 800809c:	2301      	movs	r3, #1
 800809e:	61a3      	str	r3, [r4, #24]
 80080a0:	e7d2      	b.n	8008048 <__sinit+0xc>
 80080a2:	bf00      	nop
 80080a4:	08009494 	.word	0x08009494
 80080a8:	08007fd5 	.word	0x08007fd5

080080ac <__sfp>:
 80080ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ae:	4607      	mov	r7, r0
 80080b0:	f7ff ffac 	bl	800800c <__sfp_lock_acquire>
 80080b4:	4b1e      	ldr	r3, [pc, #120]	; (8008130 <__sfp+0x84>)
 80080b6:	681e      	ldr	r6, [r3, #0]
 80080b8:	69b3      	ldr	r3, [r6, #24]
 80080ba:	b913      	cbnz	r3, 80080c2 <__sfp+0x16>
 80080bc:	4630      	mov	r0, r6
 80080be:	f7ff ffbd 	bl	800803c <__sinit>
 80080c2:	3648      	adds	r6, #72	; 0x48
 80080c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080c8:	3b01      	subs	r3, #1
 80080ca:	d503      	bpl.n	80080d4 <__sfp+0x28>
 80080cc:	6833      	ldr	r3, [r6, #0]
 80080ce:	b30b      	cbz	r3, 8008114 <__sfp+0x68>
 80080d0:	6836      	ldr	r6, [r6, #0]
 80080d2:	e7f7      	b.n	80080c4 <__sfp+0x18>
 80080d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80080d8:	b9d5      	cbnz	r5, 8008110 <__sfp+0x64>
 80080da:	4b16      	ldr	r3, [pc, #88]	; (8008134 <__sfp+0x88>)
 80080dc:	60e3      	str	r3, [r4, #12]
 80080de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080e2:	6665      	str	r5, [r4, #100]	; 0x64
 80080e4:	f000 f84c 	bl	8008180 <__retarget_lock_init_recursive>
 80080e8:	f7ff ff96 	bl	8008018 <__sfp_lock_release>
 80080ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80080f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80080f4:	6025      	str	r5, [r4, #0]
 80080f6:	61a5      	str	r5, [r4, #24]
 80080f8:	2208      	movs	r2, #8
 80080fa:	4629      	mov	r1, r5
 80080fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008100:	f7fe fc3e 	bl	8006980 <memset>
 8008104:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008108:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800810c:	4620      	mov	r0, r4
 800810e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008110:	3468      	adds	r4, #104	; 0x68
 8008112:	e7d9      	b.n	80080c8 <__sfp+0x1c>
 8008114:	2104      	movs	r1, #4
 8008116:	4638      	mov	r0, r7
 8008118:	f7ff ff62 	bl	8007fe0 <__sfmoreglue>
 800811c:	4604      	mov	r4, r0
 800811e:	6030      	str	r0, [r6, #0]
 8008120:	2800      	cmp	r0, #0
 8008122:	d1d5      	bne.n	80080d0 <__sfp+0x24>
 8008124:	f7ff ff78 	bl	8008018 <__sfp_lock_release>
 8008128:	230c      	movs	r3, #12
 800812a:	603b      	str	r3, [r7, #0]
 800812c:	e7ee      	b.n	800810c <__sfp+0x60>
 800812e:	bf00      	nop
 8008130:	08009494 	.word	0x08009494
 8008134:	ffff0001 	.word	0xffff0001

08008138 <_fwalk_reent>:
 8008138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800813c:	4606      	mov	r6, r0
 800813e:	4688      	mov	r8, r1
 8008140:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008144:	2700      	movs	r7, #0
 8008146:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800814a:	f1b9 0901 	subs.w	r9, r9, #1
 800814e:	d505      	bpl.n	800815c <_fwalk_reent+0x24>
 8008150:	6824      	ldr	r4, [r4, #0]
 8008152:	2c00      	cmp	r4, #0
 8008154:	d1f7      	bne.n	8008146 <_fwalk_reent+0xe>
 8008156:	4638      	mov	r0, r7
 8008158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800815c:	89ab      	ldrh	r3, [r5, #12]
 800815e:	2b01      	cmp	r3, #1
 8008160:	d907      	bls.n	8008172 <_fwalk_reent+0x3a>
 8008162:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008166:	3301      	adds	r3, #1
 8008168:	d003      	beq.n	8008172 <_fwalk_reent+0x3a>
 800816a:	4629      	mov	r1, r5
 800816c:	4630      	mov	r0, r6
 800816e:	47c0      	blx	r8
 8008170:	4307      	orrs	r7, r0
 8008172:	3568      	adds	r5, #104	; 0x68
 8008174:	e7e9      	b.n	800814a <_fwalk_reent+0x12>
	...

08008178 <_localeconv_r>:
 8008178:	4800      	ldr	r0, [pc, #0]	; (800817c <_localeconv_r+0x4>)
 800817a:	4770      	bx	lr
 800817c:	20000188 	.word	0x20000188

08008180 <__retarget_lock_init_recursive>:
 8008180:	4770      	bx	lr

08008182 <__retarget_lock_acquire_recursive>:
 8008182:	4770      	bx	lr

08008184 <__retarget_lock_release_recursive>:
 8008184:	4770      	bx	lr
	...

08008188 <malloc>:
 8008188:	4b02      	ldr	r3, [pc, #8]	; (8008194 <malloc+0xc>)
 800818a:	4601      	mov	r1, r0
 800818c:	6818      	ldr	r0, [r3, #0]
 800818e:	f000 bc17 	b.w	80089c0 <_malloc_r>
 8008192:	bf00      	nop
 8008194:	20000034 	.word	0x20000034

08008198 <memcpy>:
 8008198:	440a      	add	r2, r1
 800819a:	4291      	cmp	r1, r2
 800819c:	f100 33ff 	add.w	r3, r0, #4294967295
 80081a0:	d100      	bne.n	80081a4 <memcpy+0xc>
 80081a2:	4770      	bx	lr
 80081a4:	b510      	push	{r4, lr}
 80081a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081ae:	4291      	cmp	r1, r2
 80081b0:	d1f9      	bne.n	80081a6 <memcpy+0xe>
 80081b2:	bd10      	pop	{r4, pc}

080081b4 <_Balloc>:
 80081b4:	b570      	push	{r4, r5, r6, lr}
 80081b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081b8:	4604      	mov	r4, r0
 80081ba:	460d      	mov	r5, r1
 80081bc:	b976      	cbnz	r6, 80081dc <_Balloc+0x28>
 80081be:	2010      	movs	r0, #16
 80081c0:	f7ff ffe2 	bl	8008188 <malloc>
 80081c4:	4602      	mov	r2, r0
 80081c6:	6260      	str	r0, [r4, #36]	; 0x24
 80081c8:	b920      	cbnz	r0, 80081d4 <_Balloc+0x20>
 80081ca:	4b18      	ldr	r3, [pc, #96]	; (800822c <_Balloc+0x78>)
 80081cc:	4818      	ldr	r0, [pc, #96]	; (8008230 <_Balloc+0x7c>)
 80081ce:	2166      	movs	r1, #102	; 0x66
 80081d0:	f000 feea 	bl	8008fa8 <__assert_func>
 80081d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081d8:	6006      	str	r6, [r0, #0]
 80081da:	60c6      	str	r6, [r0, #12]
 80081dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80081de:	68f3      	ldr	r3, [r6, #12]
 80081e0:	b183      	cbz	r3, 8008204 <_Balloc+0x50>
 80081e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80081ea:	b9b8      	cbnz	r0, 800821c <_Balloc+0x68>
 80081ec:	2101      	movs	r1, #1
 80081ee:	fa01 f605 	lsl.w	r6, r1, r5
 80081f2:	1d72      	adds	r2, r6, #5
 80081f4:	0092      	lsls	r2, r2, #2
 80081f6:	4620      	mov	r0, r4
 80081f8:	f000 fb60 	bl	80088bc <_calloc_r>
 80081fc:	b160      	cbz	r0, 8008218 <_Balloc+0x64>
 80081fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008202:	e00e      	b.n	8008222 <_Balloc+0x6e>
 8008204:	2221      	movs	r2, #33	; 0x21
 8008206:	2104      	movs	r1, #4
 8008208:	4620      	mov	r0, r4
 800820a:	f000 fb57 	bl	80088bc <_calloc_r>
 800820e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008210:	60f0      	str	r0, [r6, #12]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1e4      	bne.n	80081e2 <_Balloc+0x2e>
 8008218:	2000      	movs	r0, #0
 800821a:	bd70      	pop	{r4, r5, r6, pc}
 800821c:	6802      	ldr	r2, [r0, #0]
 800821e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008222:	2300      	movs	r3, #0
 8008224:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008228:	e7f7      	b.n	800821a <_Balloc+0x66>
 800822a:	bf00      	nop
 800822c:	080094d9 	.word	0x080094d9
 8008230:	080095bc 	.word	0x080095bc

08008234 <_Bfree>:
 8008234:	b570      	push	{r4, r5, r6, lr}
 8008236:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008238:	4605      	mov	r5, r0
 800823a:	460c      	mov	r4, r1
 800823c:	b976      	cbnz	r6, 800825c <_Bfree+0x28>
 800823e:	2010      	movs	r0, #16
 8008240:	f7ff ffa2 	bl	8008188 <malloc>
 8008244:	4602      	mov	r2, r0
 8008246:	6268      	str	r0, [r5, #36]	; 0x24
 8008248:	b920      	cbnz	r0, 8008254 <_Bfree+0x20>
 800824a:	4b09      	ldr	r3, [pc, #36]	; (8008270 <_Bfree+0x3c>)
 800824c:	4809      	ldr	r0, [pc, #36]	; (8008274 <_Bfree+0x40>)
 800824e:	218a      	movs	r1, #138	; 0x8a
 8008250:	f000 feaa 	bl	8008fa8 <__assert_func>
 8008254:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008258:	6006      	str	r6, [r0, #0]
 800825a:	60c6      	str	r6, [r0, #12]
 800825c:	b13c      	cbz	r4, 800826e <_Bfree+0x3a>
 800825e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008260:	6862      	ldr	r2, [r4, #4]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008268:	6021      	str	r1, [r4, #0]
 800826a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800826e:	bd70      	pop	{r4, r5, r6, pc}
 8008270:	080094d9 	.word	0x080094d9
 8008274:	080095bc 	.word	0x080095bc

08008278 <__multadd>:
 8008278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800827c:	690d      	ldr	r5, [r1, #16]
 800827e:	4607      	mov	r7, r0
 8008280:	460c      	mov	r4, r1
 8008282:	461e      	mov	r6, r3
 8008284:	f101 0c14 	add.w	ip, r1, #20
 8008288:	2000      	movs	r0, #0
 800828a:	f8dc 3000 	ldr.w	r3, [ip]
 800828e:	b299      	uxth	r1, r3
 8008290:	fb02 6101 	mla	r1, r2, r1, r6
 8008294:	0c1e      	lsrs	r6, r3, #16
 8008296:	0c0b      	lsrs	r3, r1, #16
 8008298:	fb02 3306 	mla	r3, r2, r6, r3
 800829c:	b289      	uxth	r1, r1
 800829e:	3001      	adds	r0, #1
 80082a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80082a4:	4285      	cmp	r5, r0
 80082a6:	f84c 1b04 	str.w	r1, [ip], #4
 80082aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80082ae:	dcec      	bgt.n	800828a <__multadd+0x12>
 80082b0:	b30e      	cbz	r6, 80082f6 <__multadd+0x7e>
 80082b2:	68a3      	ldr	r3, [r4, #8]
 80082b4:	42ab      	cmp	r3, r5
 80082b6:	dc19      	bgt.n	80082ec <__multadd+0x74>
 80082b8:	6861      	ldr	r1, [r4, #4]
 80082ba:	4638      	mov	r0, r7
 80082bc:	3101      	adds	r1, #1
 80082be:	f7ff ff79 	bl	80081b4 <_Balloc>
 80082c2:	4680      	mov	r8, r0
 80082c4:	b928      	cbnz	r0, 80082d2 <__multadd+0x5a>
 80082c6:	4602      	mov	r2, r0
 80082c8:	4b0c      	ldr	r3, [pc, #48]	; (80082fc <__multadd+0x84>)
 80082ca:	480d      	ldr	r0, [pc, #52]	; (8008300 <__multadd+0x88>)
 80082cc:	21b5      	movs	r1, #181	; 0xb5
 80082ce:	f000 fe6b 	bl	8008fa8 <__assert_func>
 80082d2:	6922      	ldr	r2, [r4, #16]
 80082d4:	3202      	adds	r2, #2
 80082d6:	f104 010c 	add.w	r1, r4, #12
 80082da:	0092      	lsls	r2, r2, #2
 80082dc:	300c      	adds	r0, #12
 80082de:	f7ff ff5b 	bl	8008198 <memcpy>
 80082e2:	4621      	mov	r1, r4
 80082e4:	4638      	mov	r0, r7
 80082e6:	f7ff ffa5 	bl	8008234 <_Bfree>
 80082ea:	4644      	mov	r4, r8
 80082ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80082f0:	3501      	adds	r5, #1
 80082f2:	615e      	str	r6, [r3, #20]
 80082f4:	6125      	str	r5, [r4, #16]
 80082f6:	4620      	mov	r0, r4
 80082f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082fc:	0800954b 	.word	0x0800954b
 8008300:	080095bc 	.word	0x080095bc

08008304 <__hi0bits>:
 8008304:	0c03      	lsrs	r3, r0, #16
 8008306:	041b      	lsls	r3, r3, #16
 8008308:	b9d3      	cbnz	r3, 8008340 <__hi0bits+0x3c>
 800830a:	0400      	lsls	r0, r0, #16
 800830c:	2310      	movs	r3, #16
 800830e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008312:	bf04      	itt	eq
 8008314:	0200      	lsleq	r0, r0, #8
 8008316:	3308      	addeq	r3, #8
 8008318:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800831c:	bf04      	itt	eq
 800831e:	0100      	lsleq	r0, r0, #4
 8008320:	3304      	addeq	r3, #4
 8008322:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008326:	bf04      	itt	eq
 8008328:	0080      	lsleq	r0, r0, #2
 800832a:	3302      	addeq	r3, #2
 800832c:	2800      	cmp	r0, #0
 800832e:	db05      	blt.n	800833c <__hi0bits+0x38>
 8008330:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008334:	f103 0301 	add.w	r3, r3, #1
 8008338:	bf08      	it	eq
 800833a:	2320      	moveq	r3, #32
 800833c:	4618      	mov	r0, r3
 800833e:	4770      	bx	lr
 8008340:	2300      	movs	r3, #0
 8008342:	e7e4      	b.n	800830e <__hi0bits+0xa>

08008344 <__lo0bits>:
 8008344:	6803      	ldr	r3, [r0, #0]
 8008346:	f013 0207 	ands.w	r2, r3, #7
 800834a:	4601      	mov	r1, r0
 800834c:	d00b      	beq.n	8008366 <__lo0bits+0x22>
 800834e:	07da      	lsls	r2, r3, #31
 8008350:	d423      	bmi.n	800839a <__lo0bits+0x56>
 8008352:	0798      	lsls	r0, r3, #30
 8008354:	bf49      	itett	mi
 8008356:	085b      	lsrmi	r3, r3, #1
 8008358:	089b      	lsrpl	r3, r3, #2
 800835a:	2001      	movmi	r0, #1
 800835c:	600b      	strmi	r3, [r1, #0]
 800835e:	bf5c      	itt	pl
 8008360:	600b      	strpl	r3, [r1, #0]
 8008362:	2002      	movpl	r0, #2
 8008364:	4770      	bx	lr
 8008366:	b298      	uxth	r0, r3
 8008368:	b9a8      	cbnz	r0, 8008396 <__lo0bits+0x52>
 800836a:	0c1b      	lsrs	r3, r3, #16
 800836c:	2010      	movs	r0, #16
 800836e:	b2da      	uxtb	r2, r3
 8008370:	b90a      	cbnz	r2, 8008376 <__lo0bits+0x32>
 8008372:	3008      	adds	r0, #8
 8008374:	0a1b      	lsrs	r3, r3, #8
 8008376:	071a      	lsls	r2, r3, #28
 8008378:	bf04      	itt	eq
 800837a:	091b      	lsreq	r3, r3, #4
 800837c:	3004      	addeq	r0, #4
 800837e:	079a      	lsls	r2, r3, #30
 8008380:	bf04      	itt	eq
 8008382:	089b      	lsreq	r3, r3, #2
 8008384:	3002      	addeq	r0, #2
 8008386:	07da      	lsls	r2, r3, #31
 8008388:	d403      	bmi.n	8008392 <__lo0bits+0x4e>
 800838a:	085b      	lsrs	r3, r3, #1
 800838c:	f100 0001 	add.w	r0, r0, #1
 8008390:	d005      	beq.n	800839e <__lo0bits+0x5a>
 8008392:	600b      	str	r3, [r1, #0]
 8008394:	4770      	bx	lr
 8008396:	4610      	mov	r0, r2
 8008398:	e7e9      	b.n	800836e <__lo0bits+0x2a>
 800839a:	2000      	movs	r0, #0
 800839c:	4770      	bx	lr
 800839e:	2020      	movs	r0, #32
 80083a0:	4770      	bx	lr
	...

080083a4 <__i2b>:
 80083a4:	b510      	push	{r4, lr}
 80083a6:	460c      	mov	r4, r1
 80083a8:	2101      	movs	r1, #1
 80083aa:	f7ff ff03 	bl	80081b4 <_Balloc>
 80083ae:	4602      	mov	r2, r0
 80083b0:	b928      	cbnz	r0, 80083be <__i2b+0x1a>
 80083b2:	4b05      	ldr	r3, [pc, #20]	; (80083c8 <__i2b+0x24>)
 80083b4:	4805      	ldr	r0, [pc, #20]	; (80083cc <__i2b+0x28>)
 80083b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80083ba:	f000 fdf5 	bl	8008fa8 <__assert_func>
 80083be:	2301      	movs	r3, #1
 80083c0:	6144      	str	r4, [r0, #20]
 80083c2:	6103      	str	r3, [r0, #16]
 80083c4:	bd10      	pop	{r4, pc}
 80083c6:	bf00      	nop
 80083c8:	0800954b 	.word	0x0800954b
 80083cc:	080095bc 	.word	0x080095bc

080083d0 <__multiply>:
 80083d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d4:	4691      	mov	r9, r2
 80083d6:	690a      	ldr	r2, [r1, #16]
 80083d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80083dc:	429a      	cmp	r2, r3
 80083de:	bfb8      	it	lt
 80083e0:	460b      	movlt	r3, r1
 80083e2:	460c      	mov	r4, r1
 80083e4:	bfbc      	itt	lt
 80083e6:	464c      	movlt	r4, r9
 80083e8:	4699      	movlt	r9, r3
 80083ea:	6927      	ldr	r7, [r4, #16]
 80083ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80083f0:	68a3      	ldr	r3, [r4, #8]
 80083f2:	6861      	ldr	r1, [r4, #4]
 80083f4:	eb07 060a 	add.w	r6, r7, sl
 80083f8:	42b3      	cmp	r3, r6
 80083fa:	b085      	sub	sp, #20
 80083fc:	bfb8      	it	lt
 80083fe:	3101      	addlt	r1, #1
 8008400:	f7ff fed8 	bl	80081b4 <_Balloc>
 8008404:	b930      	cbnz	r0, 8008414 <__multiply+0x44>
 8008406:	4602      	mov	r2, r0
 8008408:	4b44      	ldr	r3, [pc, #272]	; (800851c <__multiply+0x14c>)
 800840a:	4845      	ldr	r0, [pc, #276]	; (8008520 <__multiply+0x150>)
 800840c:	f240 115d 	movw	r1, #349	; 0x15d
 8008410:	f000 fdca 	bl	8008fa8 <__assert_func>
 8008414:	f100 0514 	add.w	r5, r0, #20
 8008418:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800841c:	462b      	mov	r3, r5
 800841e:	2200      	movs	r2, #0
 8008420:	4543      	cmp	r3, r8
 8008422:	d321      	bcc.n	8008468 <__multiply+0x98>
 8008424:	f104 0314 	add.w	r3, r4, #20
 8008428:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800842c:	f109 0314 	add.w	r3, r9, #20
 8008430:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008434:	9202      	str	r2, [sp, #8]
 8008436:	1b3a      	subs	r2, r7, r4
 8008438:	3a15      	subs	r2, #21
 800843a:	f022 0203 	bic.w	r2, r2, #3
 800843e:	3204      	adds	r2, #4
 8008440:	f104 0115 	add.w	r1, r4, #21
 8008444:	428f      	cmp	r7, r1
 8008446:	bf38      	it	cc
 8008448:	2204      	movcc	r2, #4
 800844a:	9201      	str	r2, [sp, #4]
 800844c:	9a02      	ldr	r2, [sp, #8]
 800844e:	9303      	str	r3, [sp, #12]
 8008450:	429a      	cmp	r2, r3
 8008452:	d80c      	bhi.n	800846e <__multiply+0x9e>
 8008454:	2e00      	cmp	r6, #0
 8008456:	dd03      	ble.n	8008460 <__multiply+0x90>
 8008458:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800845c:	2b00      	cmp	r3, #0
 800845e:	d05a      	beq.n	8008516 <__multiply+0x146>
 8008460:	6106      	str	r6, [r0, #16]
 8008462:	b005      	add	sp, #20
 8008464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008468:	f843 2b04 	str.w	r2, [r3], #4
 800846c:	e7d8      	b.n	8008420 <__multiply+0x50>
 800846e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008472:	f1ba 0f00 	cmp.w	sl, #0
 8008476:	d024      	beq.n	80084c2 <__multiply+0xf2>
 8008478:	f104 0e14 	add.w	lr, r4, #20
 800847c:	46a9      	mov	r9, r5
 800847e:	f04f 0c00 	mov.w	ip, #0
 8008482:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008486:	f8d9 1000 	ldr.w	r1, [r9]
 800848a:	fa1f fb82 	uxth.w	fp, r2
 800848e:	b289      	uxth	r1, r1
 8008490:	fb0a 110b 	mla	r1, sl, fp, r1
 8008494:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008498:	f8d9 2000 	ldr.w	r2, [r9]
 800849c:	4461      	add	r1, ip
 800849e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084a2:	fb0a c20b 	mla	r2, sl, fp, ip
 80084a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80084aa:	b289      	uxth	r1, r1
 80084ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80084b0:	4577      	cmp	r7, lr
 80084b2:	f849 1b04 	str.w	r1, [r9], #4
 80084b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084ba:	d8e2      	bhi.n	8008482 <__multiply+0xb2>
 80084bc:	9a01      	ldr	r2, [sp, #4]
 80084be:	f845 c002 	str.w	ip, [r5, r2]
 80084c2:	9a03      	ldr	r2, [sp, #12]
 80084c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80084c8:	3304      	adds	r3, #4
 80084ca:	f1b9 0f00 	cmp.w	r9, #0
 80084ce:	d020      	beq.n	8008512 <__multiply+0x142>
 80084d0:	6829      	ldr	r1, [r5, #0]
 80084d2:	f104 0c14 	add.w	ip, r4, #20
 80084d6:	46ae      	mov	lr, r5
 80084d8:	f04f 0a00 	mov.w	sl, #0
 80084dc:	f8bc b000 	ldrh.w	fp, [ip]
 80084e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80084e4:	fb09 220b 	mla	r2, r9, fp, r2
 80084e8:	4492      	add	sl, r2
 80084ea:	b289      	uxth	r1, r1
 80084ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80084f0:	f84e 1b04 	str.w	r1, [lr], #4
 80084f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80084f8:	f8be 1000 	ldrh.w	r1, [lr]
 80084fc:	0c12      	lsrs	r2, r2, #16
 80084fe:	fb09 1102 	mla	r1, r9, r2, r1
 8008502:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008506:	4567      	cmp	r7, ip
 8008508:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800850c:	d8e6      	bhi.n	80084dc <__multiply+0x10c>
 800850e:	9a01      	ldr	r2, [sp, #4]
 8008510:	50a9      	str	r1, [r5, r2]
 8008512:	3504      	adds	r5, #4
 8008514:	e79a      	b.n	800844c <__multiply+0x7c>
 8008516:	3e01      	subs	r6, #1
 8008518:	e79c      	b.n	8008454 <__multiply+0x84>
 800851a:	bf00      	nop
 800851c:	0800954b 	.word	0x0800954b
 8008520:	080095bc 	.word	0x080095bc

08008524 <__pow5mult>:
 8008524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008528:	4615      	mov	r5, r2
 800852a:	f012 0203 	ands.w	r2, r2, #3
 800852e:	4606      	mov	r6, r0
 8008530:	460f      	mov	r7, r1
 8008532:	d007      	beq.n	8008544 <__pow5mult+0x20>
 8008534:	4c25      	ldr	r4, [pc, #148]	; (80085cc <__pow5mult+0xa8>)
 8008536:	3a01      	subs	r2, #1
 8008538:	2300      	movs	r3, #0
 800853a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800853e:	f7ff fe9b 	bl	8008278 <__multadd>
 8008542:	4607      	mov	r7, r0
 8008544:	10ad      	asrs	r5, r5, #2
 8008546:	d03d      	beq.n	80085c4 <__pow5mult+0xa0>
 8008548:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800854a:	b97c      	cbnz	r4, 800856c <__pow5mult+0x48>
 800854c:	2010      	movs	r0, #16
 800854e:	f7ff fe1b 	bl	8008188 <malloc>
 8008552:	4602      	mov	r2, r0
 8008554:	6270      	str	r0, [r6, #36]	; 0x24
 8008556:	b928      	cbnz	r0, 8008564 <__pow5mult+0x40>
 8008558:	4b1d      	ldr	r3, [pc, #116]	; (80085d0 <__pow5mult+0xac>)
 800855a:	481e      	ldr	r0, [pc, #120]	; (80085d4 <__pow5mult+0xb0>)
 800855c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008560:	f000 fd22 	bl	8008fa8 <__assert_func>
 8008564:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008568:	6004      	str	r4, [r0, #0]
 800856a:	60c4      	str	r4, [r0, #12]
 800856c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008570:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008574:	b94c      	cbnz	r4, 800858a <__pow5mult+0x66>
 8008576:	f240 2171 	movw	r1, #625	; 0x271
 800857a:	4630      	mov	r0, r6
 800857c:	f7ff ff12 	bl	80083a4 <__i2b>
 8008580:	2300      	movs	r3, #0
 8008582:	f8c8 0008 	str.w	r0, [r8, #8]
 8008586:	4604      	mov	r4, r0
 8008588:	6003      	str	r3, [r0, #0]
 800858a:	f04f 0900 	mov.w	r9, #0
 800858e:	07eb      	lsls	r3, r5, #31
 8008590:	d50a      	bpl.n	80085a8 <__pow5mult+0x84>
 8008592:	4639      	mov	r1, r7
 8008594:	4622      	mov	r2, r4
 8008596:	4630      	mov	r0, r6
 8008598:	f7ff ff1a 	bl	80083d0 <__multiply>
 800859c:	4639      	mov	r1, r7
 800859e:	4680      	mov	r8, r0
 80085a0:	4630      	mov	r0, r6
 80085a2:	f7ff fe47 	bl	8008234 <_Bfree>
 80085a6:	4647      	mov	r7, r8
 80085a8:	106d      	asrs	r5, r5, #1
 80085aa:	d00b      	beq.n	80085c4 <__pow5mult+0xa0>
 80085ac:	6820      	ldr	r0, [r4, #0]
 80085ae:	b938      	cbnz	r0, 80085c0 <__pow5mult+0x9c>
 80085b0:	4622      	mov	r2, r4
 80085b2:	4621      	mov	r1, r4
 80085b4:	4630      	mov	r0, r6
 80085b6:	f7ff ff0b 	bl	80083d0 <__multiply>
 80085ba:	6020      	str	r0, [r4, #0]
 80085bc:	f8c0 9000 	str.w	r9, [r0]
 80085c0:	4604      	mov	r4, r0
 80085c2:	e7e4      	b.n	800858e <__pow5mult+0x6a>
 80085c4:	4638      	mov	r0, r7
 80085c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ca:	bf00      	nop
 80085cc:	08009708 	.word	0x08009708
 80085d0:	080094d9 	.word	0x080094d9
 80085d4:	080095bc 	.word	0x080095bc

080085d8 <__lshift>:
 80085d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085dc:	460c      	mov	r4, r1
 80085de:	6849      	ldr	r1, [r1, #4]
 80085e0:	6923      	ldr	r3, [r4, #16]
 80085e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80085e6:	68a3      	ldr	r3, [r4, #8]
 80085e8:	4607      	mov	r7, r0
 80085ea:	4691      	mov	r9, r2
 80085ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80085f0:	f108 0601 	add.w	r6, r8, #1
 80085f4:	42b3      	cmp	r3, r6
 80085f6:	db0b      	blt.n	8008610 <__lshift+0x38>
 80085f8:	4638      	mov	r0, r7
 80085fa:	f7ff fddb 	bl	80081b4 <_Balloc>
 80085fe:	4605      	mov	r5, r0
 8008600:	b948      	cbnz	r0, 8008616 <__lshift+0x3e>
 8008602:	4602      	mov	r2, r0
 8008604:	4b2a      	ldr	r3, [pc, #168]	; (80086b0 <__lshift+0xd8>)
 8008606:	482b      	ldr	r0, [pc, #172]	; (80086b4 <__lshift+0xdc>)
 8008608:	f240 11d9 	movw	r1, #473	; 0x1d9
 800860c:	f000 fccc 	bl	8008fa8 <__assert_func>
 8008610:	3101      	adds	r1, #1
 8008612:	005b      	lsls	r3, r3, #1
 8008614:	e7ee      	b.n	80085f4 <__lshift+0x1c>
 8008616:	2300      	movs	r3, #0
 8008618:	f100 0114 	add.w	r1, r0, #20
 800861c:	f100 0210 	add.w	r2, r0, #16
 8008620:	4618      	mov	r0, r3
 8008622:	4553      	cmp	r3, sl
 8008624:	db37      	blt.n	8008696 <__lshift+0xbe>
 8008626:	6920      	ldr	r0, [r4, #16]
 8008628:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800862c:	f104 0314 	add.w	r3, r4, #20
 8008630:	f019 091f 	ands.w	r9, r9, #31
 8008634:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008638:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800863c:	d02f      	beq.n	800869e <__lshift+0xc6>
 800863e:	f1c9 0e20 	rsb	lr, r9, #32
 8008642:	468a      	mov	sl, r1
 8008644:	f04f 0c00 	mov.w	ip, #0
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	fa02 f209 	lsl.w	r2, r2, r9
 800864e:	ea42 020c 	orr.w	r2, r2, ip
 8008652:	f84a 2b04 	str.w	r2, [sl], #4
 8008656:	f853 2b04 	ldr.w	r2, [r3], #4
 800865a:	4298      	cmp	r0, r3
 800865c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008660:	d8f2      	bhi.n	8008648 <__lshift+0x70>
 8008662:	1b03      	subs	r3, r0, r4
 8008664:	3b15      	subs	r3, #21
 8008666:	f023 0303 	bic.w	r3, r3, #3
 800866a:	3304      	adds	r3, #4
 800866c:	f104 0215 	add.w	r2, r4, #21
 8008670:	4290      	cmp	r0, r2
 8008672:	bf38      	it	cc
 8008674:	2304      	movcc	r3, #4
 8008676:	f841 c003 	str.w	ip, [r1, r3]
 800867a:	f1bc 0f00 	cmp.w	ip, #0
 800867e:	d001      	beq.n	8008684 <__lshift+0xac>
 8008680:	f108 0602 	add.w	r6, r8, #2
 8008684:	3e01      	subs	r6, #1
 8008686:	4638      	mov	r0, r7
 8008688:	612e      	str	r6, [r5, #16]
 800868a:	4621      	mov	r1, r4
 800868c:	f7ff fdd2 	bl	8008234 <_Bfree>
 8008690:	4628      	mov	r0, r5
 8008692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008696:	f842 0f04 	str.w	r0, [r2, #4]!
 800869a:	3301      	adds	r3, #1
 800869c:	e7c1      	b.n	8008622 <__lshift+0x4a>
 800869e:	3904      	subs	r1, #4
 80086a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80086a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80086a8:	4298      	cmp	r0, r3
 80086aa:	d8f9      	bhi.n	80086a0 <__lshift+0xc8>
 80086ac:	e7ea      	b.n	8008684 <__lshift+0xac>
 80086ae:	bf00      	nop
 80086b0:	0800954b 	.word	0x0800954b
 80086b4:	080095bc 	.word	0x080095bc

080086b8 <__mcmp>:
 80086b8:	b530      	push	{r4, r5, lr}
 80086ba:	6902      	ldr	r2, [r0, #16]
 80086bc:	690c      	ldr	r4, [r1, #16]
 80086be:	1b12      	subs	r2, r2, r4
 80086c0:	d10e      	bne.n	80086e0 <__mcmp+0x28>
 80086c2:	f100 0314 	add.w	r3, r0, #20
 80086c6:	3114      	adds	r1, #20
 80086c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80086cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80086d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80086d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80086d8:	42a5      	cmp	r5, r4
 80086da:	d003      	beq.n	80086e4 <__mcmp+0x2c>
 80086dc:	d305      	bcc.n	80086ea <__mcmp+0x32>
 80086de:	2201      	movs	r2, #1
 80086e0:	4610      	mov	r0, r2
 80086e2:	bd30      	pop	{r4, r5, pc}
 80086e4:	4283      	cmp	r3, r0
 80086e6:	d3f3      	bcc.n	80086d0 <__mcmp+0x18>
 80086e8:	e7fa      	b.n	80086e0 <__mcmp+0x28>
 80086ea:	f04f 32ff 	mov.w	r2, #4294967295
 80086ee:	e7f7      	b.n	80086e0 <__mcmp+0x28>

080086f0 <__mdiff>:
 80086f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f4:	460c      	mov	r4, r1
 80086f6:	4606      	mov	r6, r0
 80086f8:	4611      	mov	r1, r2
 80086fa:	4620      	mov	r0, r4
 80086fc:	4690      	mov	r8, r2
 80086fe:	f7ff ffdb 	bl	80086b8 <__mcmp>
 8008702:	1e05      	subs	r5, r0, #0
 8008704:	d110      	bne.n	8008728 <__mdiff+0x38>
 8008706:	4629      	mov	r1, r5
 8008708:	4630      	mov	r0, r6
 800870a:	f7ff fd53 	bl	80081b4 <_Balloc>
 800870e:	b930      	cbnz	r0, 800871e <__mdiff+0x2e>
 8008710:	4b3a      	ldr	r3, [pc, #232]	; (80087fc <__mdiff+0x10c>)
 8008712:	4602      	mov	r2, r0
 8008714:	f240 2132 	movw	r1, #562	; 0x232
 8008718:	4839      	ldr	r0, [pc, #228]	; (8008800 <__mdiff+0x110>)
 800871a:	f000 fc45 	bl	8008fa8 <__assert_func>
 800871e:	2301      	movs	r3, #1
 8008720:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008724:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008728:	bfa4      	itt	ge
 800872a:	4643      	movge	r3, r8
 800872c:	46a0      	movge	r8, r4
 800872e:	4630      	mov	r0, r6
 8008730:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008734:	bfa6      	itte	ge
 8008736:	461c      	movge	r4, r3
 8008738:	2500      	movge	r5, #0
 800873a:	2501      	movlt	r5, #1
 800873c:	f7ff fd3a 	bl	80081b4 <_Balloc>
 8008740:	b920      	cbnz	r0, 800874c <__mdiff+0x5c>
 8008742:	4b2e      	ldr	r3, [pc, #184]	; (80087fc <__mdiff+0x10c>)
 8008744:	4602      	mov	r2, r0
 8008746:	f44f 7110 	mov.w	r1, #576	; 0x240
 800874a:	e7e5      	b.n	8008718 <__mdiff+0x28>
 800874c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008750:	6926      	ldr	r6, [r4, #16]
 8008752:	60c5      	str	r5, [r0, #12]
 8008754:	f104 0914 	add.w	r9, r4, #20
 8008758:	f108 0514 	add.w	r5, r8, #20
 800875c:	f100 0e14 	add.w	lr, r0, #20
 8008760:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008764:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008768:	f108 0210 	add.w	r2, r8, #16
 800876c:	46f2      	mov	sl, lr
 800876e:	2100      	movs	r1, #0
 8008770:	f859 3b04 	ldr.w	r3, [r9], #4
 8008774:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008778:	fa1f f883 	uxth.w	r8, r3
 800877c:	fa11 f18b 	uxtah	r1, r1, fp
 8008780:	0c1b      	lsrs	r3, r3, #16
 8008782:	eba1 0808 	sub.w	r8, r1, r8
 8008786:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800878a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800878e:	fa1f f888 	uxth.w	r8, r8
 8008792:	1419      	asrs	r1, r3, #16
 8008794:	454e      	cmp	r6, r9
 8008796:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800879a:	f84a 3b04 	str.w	r3, [sl], #4
 800879e:	d8e7      	bhi.n	8008770 <__mdiff+0x80>
 80087a0:	1b33      	subs	r3, r6, r4
 80087a2:	3b15      	subs	r3, #21
 80087a4:	f023 0303 	bic.w	r3, r3, #3
 80087a8:	3304      	adds	r3, #4
 80087aa:	3415      	adds	r4, #21
 80087ac:	42a6      	cmp	r6, r4
 80087ae:	bf38      	it	cc
 80087b0:	2304      	movcc	r3, #4
 80087b2:	441d      	add	r5, r3
 80087b4:	4473      	add	r3, lr
 80087b6:	469e      	mov	lr, r3
 80087b8:	462e      	mov	r6, r5
 80087ba:	4566      	cmp	r6, ip
 80087bc:	d30e      	bcc.n	80087dc <__mdiff+0xec>
 80087be:	f10c 0203 	add.w	r2, ip, #3
 80087c2:	1b52      	subs	r2, r2, r5
 80087c4:	f022 0203 	bic.w	r2, r2, #3
 80087c8:	3d03      	subs	r5, #3
 80087ca:	45ac      	cmp	ip, r5
 80087cc:	bf38      	it	cc
 80087ce:	2200      	movcc	r2, #0
 80087d0:	441a      	add	r2, r3
 80087d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80087d6:	b17b      	cbz	r3, 80087f8 <__mdiff+0x108>
 80087d8:	6107      	str	r7, [r0, #16]
 80087da:	e7a3      	b.n	8008724 <__mdiff+0x34>
 80087dc:	f856 8b04 	ldr.w	r8, [r6], #4
 80087e0:	fa11 f288 	uxtah	r2, r1, r8
 80087e4:	1414      	asrs	r4, r2, #16
 80087e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80087ea:	b292      	uxth	r2, r2
 80087ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80087f0:	f84e 2b04 	str.w	r2, [lr], #4
 80087f4:	1421      	asrs	r1, r4, #16
 80087f6:	e7e0      	b.n	80087ba <__mdiff+0xca>
 80087f8:	3f01      	subs	r7, #1
 80087fa:	e7ea      	b.n	80087d2 <__mdiff+0xe2>
 80087fc:	0800954b 	.word	0x0800954b
 8008800:	080095bc 	.word	0x080095bc

08008804 <__d2b>:
 8008804:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008808:	4689      	mov	r9, r1
 800880a:	2101      	movs	r1, #1
 800880c:	ec57 6b10 	vmov	r6, r7, d0
 8008810:	4690      	mov	r8, r2
 8008812:	f7ff fccf 	bl	80081b4 <_Balloc>
 8008816:	4604      	mov	r4, r0
 8008818:	b930      	cbnz	r0, 8008828 <__d2b+0x24>
 800881a:	4602      	mov	r2, r0
 800881c:	4b25      	ldr	r3, [pc, #148]	; (80088b4 <__d2b+0xb0>)
 800881e:	4826      	ldr	r0, [pc, #152]	; (80088b8 <__d2b+0xb4>)
 8008820:	f240 310a 	movw	r1, #778	; 0x30a
 8008824:	f000 fbc0 	bl	8008fa8 <__assert_func>
 8008828:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800882c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008830:	bb35      	cbnz	r5, 8008880 <__d2b+0x7c>
 8008832:	2e00      	cmp	r6, #0
 8008834:	9301      	str	r3, [sp, #4]
 8008836:	d028      	beq.n	800888a <__d2b+0x86>
 8008838:	4668      	mov	r0, sp
 800883a:	9600      	str	r6, [sp, #0]
 800883c:	f7ff fd82 	bl	8008344 <__lo0bits>
 8008840:	9900      	ldr	r1, [sp, #0]
 8008842:	b300      	cbz	r0, 8008886 <__d2b+0x82>
 8008844:	9a01      	ldr	r2, [sp, #4]
 8008846:	f1c0 0320 	rsb	r3, r0, #32
 800884a:	fa02 f303 	lsl.w	r3, r2, r3
 800884e:	430b      	orrs	r3, r1
 8008850:	40c2      	lsrs	r2, r0
 8008852:	6163      	str	r3, [r4, #20]
 8008854:	9201      	str	r2, [sp, #4]
 8008856:	9b01      	ldr	r3, [sp, #4]
 8008858:	61a3      	str	r3, [r4, #24]
 800885a:	2b00      	cmp	r3, #0
 800885c:	bf14      	ite	ne
 800885e:	2202      	movne	r2, #2
 8008860:	2201      	moveq	r2, #1
 8008862:	6122      	str	r2, [r4, #16]
 8008864:	b1d5      	cbz	r5, 800889c <__d2b+0x98>
 8008866:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800886a:	4405      	add	r5, r0
 800886c:	f8c9 5000 	str.w	r5, [r9]
 8008870:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008874:	f8c8 0000 	str.w	r0, [r8]
 8008878:	4620      	mov	r0, r4
 800887a:	b003      	add	sp, #12
 800887c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008880:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008884:	e7d5      	b.n	8008832 <__d2b+0x2e>
 8008886:	6161      	str	r1, [r4, #20]
 8008888:	e7e5      	b.n	8008856 <__d2b+0x52>
 800888a:	a801      	add	r0, sp, #4
 800888c:	f7ff fd5a 	bl	8008344 <__lo0bits>
 8008890:	9b01      	ldr	r3, [sp, #4]
 8008892:	6163      	str	r3, [r4, #20]
 8008894:	2201      	movs	r2, #1
 8008896:	6122      	str	r2, [r4, #16]
 8008898:	3020      	adds	r0, #32
 800889a:	e7e3      	b.n	8008864 <__d2b+0x60>
 800889c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80088a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80088a4:	f8c9 0000 	str.w	r0, [r9]
 80088a8:	6918      	ldr	r0, [r3, #16]
 80088aa:	f7ff fd2b 	bl	8008304 <__hi0bits>
 80088ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80088b2:	e7df      	b.n	8008874 <__d2b+0x70>
 80088b4:	0800954b 	.word	0x0800954b
 80088b8:	080095bc 	.word	0x080095bc

080088bc <_calloc_r>:
 80088bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088be:	fba1 2402 	umull	r2, r4, r1, r2
 80088c2:	b94c      	cbnz	r4, 80088d8 <_calloc_r+0x1c>
 80088c4:	4611      	mov	r1, r2
 80088c6:	9201      	str	r2, [sp, #4]
 80088c8:	f000 f87a 	bl	80089c0 <_malloc_r>
 80088cc:	9a01      	ldr	r2, [sp, #4]
 80088ce:	4605      	mov	r5, r0
 80088d0:	b930      	cbnz	r0, 80088e0 <_calloc_r+0x24>
 80088d2:	4628      	mov	r0, r5
 80088d4:	b003      	add	sp, #12
 80088d6:	bd30      	pop	{r4, r5, pc}
 80088d8:	220c      	movs	r2, #12
 80088da:	6002      	str	r2, [r0, #0]
 80088dc:	2500      	movs	r5, #0
 80088de:	e7f8      	b.n	80088d2 <_calloc_r+0x16>
 80088e0:	4621      	mov	r1, r4
 80088e2:	f7fe f84d 	bl	8006980 <memset>
 80088e6:	e7f4      	b.n	80088d2 <_calloc_r+0x16>

080088e8 <_free_r>:
 80088e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088ea:	2900      	cmp	r1, #0
 80088ec:	d044      	beq.n	8008978 <_free_r+0x90>
 80088ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088f2:	9001      	str	r0, [sp, #4]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f1a1 0404 	sub.w	r4, r1, #4
 80088fa:	bfb8      	it	lt
 80088fc:	18e4      	addlt	r4, r4, r3
 80088fe:	f000 fcdf 	bl	80092c0 <__malloc_lock>
 8008902:	4a1e      	ldr	r2, [pc, #120]	; (800897c <_free_r+0x94>)
 8008904:	9801      	ldr	r0, [sp, #4]
 8008906:	6813      	ldr	r3, [r2, #0]
 8008908:	b933      	cbnz	r3, 8008918 <_free_r+0x30>
 800890a:	6063      	str	r3, [r4, #4]
 800890c:	6014      	str	r4, [r2, #0]
 800890e:	b003      	add	sp, #12
 8008910:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008914:	f000 bcda 	b.w	80092cc <__malloc_unlock>
 8008918:	42a3      	cmp	r3, r4
 800891a:	d908      	bls.n	800892e <_free_r+0x46>
 800891c:	6825      	ldr	r5, [r4, #0]
 800891e:	1961      	adds	r1, r4, r5
 8008920:	428b      	cmp	r3, r1
 8008922:	bf01      	itttt	eq
 8008924:	6819      	ldreq	r1, [r3, #0]
 8008926:	685b      	ldreq	r3, [r3, #4]
 8008928:	1949      	addeq	r1, r1, r5
 800892a:	6021      	streq	r1, [r4, #0]
 800892c:	e7ed      	b.n	800890a <_free_r+0x22>
 800892e:	461a      	mov	r2, r3
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	b10b      	cbz	r3, 8008938 <_free_r+0x50>
 8008934:	42a3      	cmp	r3, r4
 8008936:	d9fa      	bls.n	800892e <_free_r+0x46>
 8008938:	6811      	ldr	r1, [r2, #0]
 800893a:	1855      	adds	r5, r2, r1
 800893c:	42a5      	cmp	r5, r4
 800893e:	d10b      	bne.n	8008958 <_free_r+0x70>
 8008940:	6824      	ldr	r4, [r4, #0]
 8008942:	4421      	add	r1, r4
 8008944:	1854      	adds	r4, r2, r1
 8008946:	42a3      	cmp	r3, r4
 8008948:	6011      	str	r1, [r2, #0]
 800894a:	d1e0      	bne.n	800890e <_free_r+0x26>
 800894c:	681c      	ldr	r4, [r3, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	6053      	str	r3, [r2, #4]
 8008952:	4421      	add	r1, r4
 8008954:	6011      	str	r1, [r2, #0]
 8008956:	e7da      	b.n	800890e <_free_r+0x26>
 8008958:	d902      	bls.n	8008960 <_free_r+0x78>
 800895a:	230c      	movs	r3, #12
 800895c:	6003      	str	r3, [r0, #0]
 800895e:	e7d6      	b.n	800890e <_free_r+0x26>
 8008960:	6825      	ldr	r5, [r4, #0]
 8008962:	1961      	adds	r1, r4, r5
 8008964:	428b      	cmp	r3, r1
 8008966:	bf04      	itt	eq
 8008968:	6819      	ldreq	r1, [r3, #0]
 800896a:	685b      	ldreq	r3, [r3, #4]
 800896c:	6063      	str	r3, [r4, #4]
 800896e:	bf04      	itt	eq
 8008970:	1949      	addeq	r1, r1, r5
 8008972:	6021      	streq	r1, [r4, #0]
 8008974:	6054      	str	r4, [r2, #4]
 8008976:	e7ca      	b.n	800890e <_free_r+0x26>
 8008978:	b003      	add	sp, #12
 800897a:	bd30      	pop	{r4, r5, pc}
 800897c:	2000045c 	.word	0x2000045c

08008980 <sbrk_aligned>:
 8008980:	b570      	push	{r4, r5, r6, lr}
 8008982:	4e0e      	ldr	r6, [pc, #56]	; (80089bc <sbrk_aligned+0x3c>)
 8008984:	460c      	mov	r4, r1
 8008986:	6831      	ldr	r1, [r6, #0]
 8008988:	4605      	mov	r5, r0
 800898a:	b911      	cbnz	r1, 8008992 <sbrk_aligned+0x12>
 800898c:	f000 f9e6 	bl	8008d5c <_sbrk_r>
 8008990:	6030      	str	r0, [r6, #0]
 8008992:	4621      	mov	r1, r4
 8008994:	4628      	mov	r0, r5
 8008996:	f000 f9e1 	bl	8008d5c <_sbrk_r>
 800899a:	1c43      	adds	r3, r0, #1
 800899c:	d00a      	beq.n	80089b4 <sbrk_aligned+0x34>
 800899e:	1cc4      	adds	r4, r0, #3
 80089a0:	f024 0403 	bic.w	r4, r4, #3
 80089a4:	42a0      	cmp	r0, r4
 80089a6:	d007      	beq.n	80089b8 <sbrk_aligned+0x38>
 80089a8:	1a21      	subs	r1, r4, r0
 80089aa:	4628      	mov	r0, r5
 80089ac:	f000 f9d6 	bl	8008d5c <_sbrk_r>
 80089b0:	3001      	adds	r0, #1
 80089b2:	d101      	bne.n	80089b8 <sbrk_aligned+0x38>
 80089b4:	f04f 34ff 	mov.w	r4, #4294967295
 80089b8:	4620      	mov	r0, r4
 80089ba:	bd70      	pop	{r4, r5, r6, pc}
 80089bc:	20000460 	.word	0x20000460

080089c0 <_malloc_r>:
 80089c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089c4:	1ccd      	adds	r5, r1, #3
 80089c6:	f025 0503 	bic.w	r5, r5, #3
 80089ca:	3508      	adds	r5, #8
 80089cc:	2d0c      	cmp	r5, #12
 80089ce:	bf38      	it	cc
 80089d0:	250c      	movcc	r5, #12
 80089d2:	2d00      	cmp	r5, #0
 80089d4:	4607      	mov	r7, r0
 80089d6:	db01      	blt.n	80089dc <_malloc_r+0x1c>
 80089d8:	42a9      	cmp	r1, r5
 80089da:	d905      	bls.n	80089e8 <_malloc_r+0x28>
 80089dc:	230c      	movs	r3, #12
 80089de:	603b      	str	r3, [r7, #0]
 80089e0:	2600      	movs	r6, #0
 80089e2:	4630      	mov	r0, r6
 80089e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e8:	4e2e      	ldr	r6, [pc, #184]	; (8008aa4 <_malloc_r+0xe4>)
 80089ea:	f000 fc69 	bl	80092c0 <__malloc_lock>
 80089ee:	6833      	ldr	r3, [r6, #0]
 80089f0:	461c      	mov	r4, r3
 80089f2:	bb34      	cbnz	r4, 8008a42 <_malloc_r+0x82>
 80089f4:	4629      	mov	r1, r5
 80089f6:	4638      	mov	r0, r7
 80089f8:	f7ff ffc2 	bl	8008980 <sbrk_aligned>
 80089fc:	1c43      	adds	r3, r0, #1
 80089fe:	4604      	mov	r4, r0
 8008a00:	d14d      	bne.n	8008a9e <_malloc_r+0xde>
 8008a02:	6834      	ldr	r4, [r6, #0]
 8008a04:	4626      	mov	r6, r4
 8008a06:	2e00      	cmp	r6, #0
 8008a08:	d140      	bne.n	8008a8c <_malloc_r+0xcc>
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	4631      	mov	r1, r6
 8008a0e:	4638      	mov	r0, r7
 8008a10:	eb04 0803 	add.w	r8, r4, r3
 8008a14:	f000 f9a2 	bl	8008d5c <_sbrk_r>
 8008a18:	4580      	cmp	r8, r0
 8008a1a:	d13a      	bne.n	8008a92 <_malloc_r+0xd2>
 8008a1c:	6821      	ldr	r1, [r4, #0]
 8008a1e:	3503      	adds	r5, #3
 8008a20:	1a6d      	subs	r5, r5, r1
 8008a22:	f025 0503 	bic.w	r5, r5, #3
 8008a26:	3508      	adds	r5, #8
 8008a28:	2d0c      	cmp	r5, #12
 8008a2a:	bf38      	it	cc
 8008a2c:	250c      	movcc	r5, #12
 8008a2e:	4629      	mov	r1, r5
 8008a30:	4638      	mov	r0, r7
 8008a32:	f7ff ffa5 	bl	8008980 <sbrk_aligned>
 8008a36:	3001      	adds	r0, #1
 8008a38:	d02b      	beq.n	8008a92 <_malloc_r+0xd2>
 8008a3a:	6823      	ldr	r3, [r4, #0]
 8008a3c:	442b      	add	r3, r5
 8008a3e:	6023      	str	r3, [r4, #0]
 8008a40:	e00e      	b.n	8008a60 <_malloc_r+0xa0>
 8008a42:	6822      	ldr	r2, [r4, #0]
 8008a44:	1b52      	subs	r2, r2, r5
 8008a46:	d41e      	bmi.n	8008a86 <_malloc_r+0xc6>
 8008a48:	2a0b      	cmp	r2, #11
 8008a4a:	d916      	bls.n	8008a7a <_malloc_r+0xba>
 8008a4c:	1961      	adds	r1, r4, r5
 8008a4e:	42a3      	cmp	r3, r4
 8008a50:	6025      	str	r5, [r4, #0]
 8008a52:	bf18      	it	ne
 8008a54:	6059      	strne	r1, [r3, #4]
 8008a56:	6863      	ldr	r3, [r4, #4]
 8008a58:	bf08      	it	eq
 8008a5a:	6031      	streq	r1, [r6, #0]
 8008a5c:	5162      	str	r2, [r4, r5]
 8008a5e:	604b      	str	r3, [r1, #4]
 8008a60:	4638      	mov	r0, r7
 8008a62:	f104 060b 	add.w	r6, r4, #11
 8008a66:	f000 fc31 	bl	80092cc <__malloc_unlock>
 8008a6a:	f026 0607 	bic.w	r6, r6, #7
 8008a6e:	1d23      	adds	r3, r4, #4
 8008a70:	1af2      	subs	r2, r6, r3
 8008a72:	d0b6      	beq.n	80089e2 <_malloc_r+0x22>
 8008a74:	1b9b      	subs	r3, r3, r6
 8008a76:	50a3      	str	r3, [r4, r2]
 8008a78:	e7b3      	b.n	80089e2 <_malloc_r+0x22>
 8008a7a:	6862      	ldr	r2, [r4, #4]
 8008a7c:	42a3      	cmp	r3, r4
 8008a7e:	bf0c      	ite	eq
 8008a80:	6032      	streq	r2, [r6, #0]
 8008a82:	605a      	strne	r2, [r3, #4]
 8008a84:	e7ec      	b.n	8008a60 <_malloc_r+0xa0>
 8008a86:	4623      	mov	r3, r4
 8008a88:	6864      	ldr	r4, [r4, #4]
 8008a8a:	e7b2      	b.n	80089f2 <_malloc_r+0x32>
 8008a8c:	4634      	mov	r4, r6
 8008a8e:	6876      	ldr	r6, [r6, #4]
 8008a90:	e7b9      	b.n	8008a06 <_malloc_r+0x46>
 8008a92:	230c      	movs	r3, #12
 8008a94:	603b      	str	r3, [r7, #0]
 8008a96:	4638      	mov	r0, r7
 8008a98:	f000 fc18 	bl	80092cc <__malloc_unlock>
 8008a9c:	e7a1      	b.n	80089e2 <_malloc_r+0x22>
 8008a9e:	6025      	str	r5, [r4, #0]
 8008aa0:	e7de      	b.n	8008a60 <_malloc_r+0xa0>
 8008aa2:	bf00      	nop
 8008aa4:	2000045c 	.word	0x2000045c

08008aa8 <__sfputc_r>:
 8008aa8:	6893      	ldr	r3, [r2, #8]
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	b410      	push	{r4}
 8008ab0:	6093      	str	r3, [r2, #8]
 8008ab2:	da08      	bge.n	8008ac6 <__sfputc_r+0x1e>
 8008ab4:	6994      	ldr	r4, [r2, #24]
 8008ab6:	42a3      	cmp	r3, r4
 8008ab8:	db01      	blt.n	8008abe <__sfputc_r+0x16>
 8008aba:	290a      	cmp	r1, #10
 8008abc:	d103      	bne.n	8008ac6 <__sfputc_r+0x1e>
 8008abe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ac2:	f000 b99f 	b.w	8008e04 <__swbuf_r>
 8008ac6:	6813      	ldr	r3, [r2, #0]
 8008ac8:	1c58      	adds	r0, r3, #1
 8008aca:	6010      	str	r0, [r2, #0]
 8008acc:	7019      	strb	r1, [r3, #0]
 8008ace:	4608      	mov	r0, r1
 8008ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ad4:	4770      	bx	lr

08008ad6 <__sfputs_r>:
 8008ad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad8:	4606      	mov	r6, r0
 8008ada:	460f      	mov	r7, r1
 8008adc:	4614      	mov	r4, r2
 8008ade:	18d5      	adds	r5, r2, r3
 8008ae0:	42ac      	cmp	r4, r5
 8008ae2:	d101      	bne.n	8008ae8 <__sfputs_r+0x12>
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	e007      	b.n	8008af8 <__sfputs_r+0x22>
 8008ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aec:	463a      	mov	r2, r7
 8008aee:	4630      	mov	r0, r6
 8008af0:	f7ff ffda 	bl	8008aa8 <__sfputc_r>
 8008af4:	1c43      	adds	r3, r0, #1
 8008af6:	d1f3      	bne.n	8008ae0 <__sfputs_r+0xa>
 8008af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008afc <_vfiprintf_r>:
 8008afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b00:	460d      	mov	r5, r1
 8008b02:	b09d      	sub	sp, #116	; 0x74
 8008b04:	4614      	mov	r4, r2
 8008b06:	4698      	mov	r8, r3
 8008b08:	4606      	mov	r6, r0
 8008b0a:	b118      	cbz	r0, 8008b14 <_vfiprintf_r+0x18>
 8008b0c:	6983      	ldr	r3, [r0, #24]
 8008b0e:	b90b      	cbnz	r3, 8008b14 <_vfiprintf_r+0x18>
 8008b10:	f7ff fa94 	bl	800803c <__sinit>
 8008b14:	4b89      	ldr	r3, [pc, #548]	; (8008d3c <_vfiprintf_r+0x240>)
 8008b16:	429d      	cmp	r5, r3
 8008b18:	d11b      	bne.n	8008b52 <_vfiprintf_r+0x56>
 8008b1a:	6875      	ldr	r5, [r6, #4]
 8008b1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b1e:	07d9      	lsls	r1, r3, #31
 8008b20:	d405      	bmi.n	8008b2e <_vfiprintf_r+0x32>
 8008b22:	89ab      	ldrh	r3, [r5, #12]
 8008b24:	059a      	lsls	r2, r3, #22
 8008b26:	d402      	bmi.n	8008b2e <_vfiprintf_r+0x32>
 8008b28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b2a:	f7ff fb2a 	bl	8008182 <__retarget_lock_acquire_recursive>
 8008b2e:	89ab      	ldrh	r3, [r5, #12]
 8008b30:	071b      	lsls	r3, r3, #28
 8008b32:	d501      	bpl.n	8008b38 <_vfiprintf_r+0x3c>
 8008b34:	692b      	ldr	r3, [r5, #16]
 8008b36:	b9eb      	cbnz	r3, 8008b74 <_vfiprintf_r+0x78>
 8008b38:	4629      	mov	r1, r5
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	f000 f9c6 	bl	8008ecc <__swsetup_r>
 8008b40:	b1c0      	cbz	r0, 8008b74 <_vfiprintf_r+0x78>
 8008b42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b44:	07dc      	lsls	r4, r3, #31
 8008b46:	d50e      	bpl.n	8008b66 <_vfiprintf_r+0x6a>
 8008b48:	f04f 30ff 	mov.w	r0, #4294967295
 8008b4c:	b01d      	add	sp, #116	; 0x74
 8008b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b52:	4b7b      	ldr	r3, [pc, #492]	; (8008d40 <_vfiprintf_r+0x244>)
 8008b54:	429d      	cmp	r5, r3
 8008b56:	d101      	bne.n	8008b5c <_vfiprintf_r+0x60>
 8008b58:	68b5      	ldr	r5, [r6, #8]
 8008b5a:	e7df      	b.n	8008b1c <_vfiprintf_r+0x20>
 8008b5c:	4b79      	ldr	r3, [pc, #484]	; (8008d44 <_vfiprintf_r+0x248>)
 8008b5e:	429d      	cmp	r5, r3
 8008b60:	bf08      	it	eq
 8008b62:	68f5      	ldreq	r5, [r6, #12]
 8008b64:	e7da      	b.n	8008b1c <_vfiprintf_r+0x20>
 8008b66:	89ab      	ldrh	r3, [r5, #12]
 8008b68:	0598      	lsls	r0, r3, #22
 8008b6a:	d4ed      	bmi.n	8008b48 <_vfiprintf_r+0x4c>
 8008b6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b6e:	f7ff fb09 	bl	8008184 <__retarget_lock_release_recursive>
 8008b72:	e7e9      	b.n	8008b48 <_vfiprintf_r+0x4c>
 8008b74:	2300      	movs	r3, #0
 8008b76:	9309      	str	r3, [sp, #36]	; 0x24
 8008b78:	2320      	movs	r3, #32
 8008b7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b82:	2330      	movs	r3, #48	; 0x30
 8008b84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008d48 <_vfiprintf_r+0x24c>
 8008b88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b8c:	f04f 0901 	mov.w	r9, #1
 8008b90:	4623      	mov	r3, r4
 8008b92:	469a      	mov	sl, r3
 8008b94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b98:	b10a      	cbz	r2, 8008b9e <_vfiprintf_r+0xa2>
 8008b9a:	2a25      	cmp	r2, #37	; 0x25
 8008b9c:	d1f9      	bne.n	8008b92 <_vfiprintf_r+0x96>
 8008b9e:	ebba 0b04 	subs.w	fp, sl, r4
 8008ba2:	d00b      	beq.n	8008bbc <_vfiprintf_r+0xc0>
 8008ba4:	465b      	mov	r3, fp
 8008ba6:	4622      	mov	r2, r4
 8008ba8:	4629      	mov	r1, r5
 8008baa:	4630      	mov	r0, r6
 8008bac:	f7ff ff93 	bl	8008ad6 <__sfputs_r>
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	f000 80aa 	beq.w	8008d0a <_vfiprintf_r+0x20e>
 8008bb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bb8:	445a      	add	r2, fp
 8008bba:	9209      	str	r2, [sp, #36]	; 0x24
 8008bbc:	f89a 3000 	ldrb.w	r3, [sl]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f000 80a2 	beq.w	8008d0a <_vfiprintf_r+0x20e>
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8008bcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bd0:	f10a 0a01 	add.w	sl, sl, #1
 8008bd4:	9304      	str	r3, [sp, #16]
 8008bd6:	9307      	str	r3, [sp, #28]
 8008bd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bdc:	931a      	str	r3, [sp, #104]	; 0x68
 8008bde:	4654      	mov	r4, sl
 8008be0:	2205      	movs	r2, #5
 8008be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008be6:	4858      	ldr	r0, [pc, #352]	; (8008d48 <_vfiprintf_r+0x24c>)
 8008be8:	f7f7 fafa 	bl	80001e0 <memchr>
 8008bec:	9a04      	ldr	r2, [sp, #16]
 8008bee:	b9d8      	cbnz	r0, 8008c28 <_vfiprintf_r+0x12c>
 8008bf0:	06d1      	lsls	r1, r2, #27
 8008bf2:	bf44      	itt	mi
 8008bf4:	2320      	movmi	r3, #32
 8008bf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bfa:	0713      	lsls	r3, r2, #28
 8008bfc:	bf44      	itt	mi
 8008bfe:	232b      	movmi	r3, #43	; 0x2b
 8008c00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c04:	f89a 3000 	ldrb.w	r3, [sl]
 8008c08:	2b2a      	cmp	r3, #42	; 0x2a
 8008c0a:	d015      	beq.n	8008c38 <_vfiprintf_r+0x13c>
 8008c0c:	9a07      	ldr	r2, [sp, #28]
 8008c0e:	4654      	mov	r4, sl
 8008c10:	2000      	movs	r0, #0
 8008c12:	f04f 0c0a 	mov.w	ip, #10
 8008c16:	4621      	mov	r1, r4
 8008c18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c1c:	3b30      	subs	r3, #48	; 0x30
 8008c1e:	2b09      	cmp	r3, #9
 8008c20:	d94e      	bls.n	8008cc0 <_vfiprintf_r+0x1c4>
 8008c22:	b1b0      	cbz	r0, 8008c52 <_vfiprintf_r+0x156>
 8008c24:	9207      	str	r2, [sp, #28]
 8008c26:	e014      	b.n	8008c52 <_vfiprintf_r+0x156>
 8008c28:	eba0 0308 	sub.w	r3, r0, r8
 8008c2c:	fa09 f303 	lsl.w	r3, r9, r3
 8008c30:	4313      	orrs	r3, r2
 8008c32:	9304      	str	r3, [sp, #16]
 8008c34:	46a2      	mov	sl, r4
 8008c36:	e7d2      	b.n	8008bde <_vfiprintf_r+0xe2>
 8008c38:	9b03      	ldr	r3, [sp, #12]
 8008c3a:	1d19      	adds	r1, r3, #4
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	9103      	str	r1, [sp, #12]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	bfbb      	ittet	lt
 8008c44:	425b      	neglt	r3, r3
 8008c46:	f042 0202 	orrlt.w	r2, r2, #2
 8008c4a:	9307      	strge	r3, [sp, #28]
 8008c4c:	9307      	strlt	r3, [sp, #28]
 8008c4e:	bfb8      	it	lt
 8008c50:	9204      	strlt	r2, [sp, #16]
 8008c52:	7823      	ldrb	r3, [r4, #0]
 8008c54:	2b2e      	cmp	r3, #46	; 0x2e
 8008c56:	d10c      	bne.n	8008c72 <_vfiprintf_r+0x176>
 8008c58:	7863      	ldrb	r3, [r4, #1]
 8008c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8008c5c:	d135      	bne.n	8008cca <_vfiprintf_r+0x1ce>
 8008c5e:	9b03      	ldr	r3, [sp, #12]
 8008c60:	1d1a      	adds	r2, r3, #4
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	9203      	str	r2, [sp, #12]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	bfb8      	it	lt
 8008c6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c6e:	3402      	adds	r4, #2
 8008c70:	9305      	str	r3, [sp, #20]
 8008c72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008d58 <_vfiprintf_r+0x25c>
 8008c76:	7821      	ldrb	r1, [r4, #0]
 8008c78:	2203      	movs	r2, #3
 8008c7a:	4650      	mov	r0, sl
 8008c7c:	f7f7 fab0 	bl	80001e0 <memchr>
 8008c80:	b140      	cbz	r0, 8008c94 <_vfiprintf_r+0x198>
 8008c82:	2340      	movs	r3, #64	; 0x40
 8008c84:	eba0 000a 	sub.w	r0, r0, sl
 8008c88:	fa03 f000 	lsl.w	r0, r3, r0
 8008c8c:	9b04      	ldr	r3, [sp, #16]
 8008c8e:	4303      	orrs	r3, r0
 8008c90:	3401      	adds	r4, #1
 8008c92:	9304      	str	r3, [sp, #16]
 8008c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c98:	482c      	ldr	r0, [pc, #176]	; (8008d4c <_vfiprintf_r+0x250>)
 8008c9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c9e:	2206      	movs	r2, #6
 8008ca0:	f7f7 fa9e 	bl	80001e0 <memchr>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d03f      	beq.n	8008d28 <_vfiprintf_r+0x22c>
 8008ca8:	4b29      	ldr	r3, [pc, #164]	; (8008d50 <_vfiprintf_r+0x254>)
 8008caa:	bb1b      	cbnz	r3, 8008cf4 <_vfiprintf_r+0x1f8>
 8008cac:	9b03      	ldr	r3, [sp, #12]
 8008cae:	3307      	adds	r3, #7
 8008cb0:	f023 0307 	bic.w	r3, r3, #7
 8008cb4:	3308      	adds	r3, #8
 8008cb6:	9303      	str	r3, [sp, #12]
 8008cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cba:	443b      	add	r3, r7
 8008cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8008cbe:	e767      	b.n	8008b90 <_vfiprintf_r+0x94>
 8008cc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cc4:	460c      	mov	r4, r1
 8008cc6:	2001      	movs	r0, #1
 8008cc8:	e7a5      	b.n	8008c16 <_vfiprintf_r+0x11a>
 8008cca:	2300      	movs	r3, #0
 8008ccc:	3401      	adds	r4, #1
 8008cce:	9305      	str	r3, [sp, #20]
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	f04f 0c0a 	mov.w	ip, #10
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cdc:	3a30      	subs	r2, #48	; 0x30
 8008cde:	2a09      	cmp	r2, #9
 8008ce0:	d903      	bls.n	8008cea <_vfiprintf_r+0x1ee>
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d0c5      	beq.n	8008c72 <_vfiprintf_r+0x176>
 8008ce6:	9105      	str	r1, [sp, #20]
 8008ce8:	e7c3      	b.n	8008c72 <_vfiprintf_r+0x176>
 8008cea:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cee:	4604      	mov	r4, r0
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e7f0      	b.n	8008cd6 <_vfiprintf_r+0x1da>
 8008cf4:	ab03      	add	r3, sp, #12
 8008cf6:	9300      	str	r3, [sp, #0]
 8008cf8:	462a      	mov	r2, r5
 8008cfa:	4b16      	ldr	r3, [pc, #88]	; (8008d54 <_vfiprintf_r+0x258>)
 8008cfc:	a904      	add	r1, sp, #16
 8008cfe:	4630      	mov	r0, r6
 8008d00:	f7fd fee6 	bl	8006ad0 <_printf_float>
 8008d04:	4607      	mov	r7, r0
 8008d06:	1c78      	adds	r0, r7, #1
 8008d08:	d1d6      	bne.n	8008cb8 <_vfiprintf_r+0x1bc>
 8008d0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d0c:	07d9      	lsls	r1, r3, #31
 8008d0e:	d405      	bmi.n	8008d1c <_vfiprintf_r+0x220>
 8008d10:	89ab      	ldrh	r3, [r5, #12]
 8008d12:	059a      	lsls	r2, r3, #22
 8008d14:	d402      	bmi.n	8008d1c <_vfiprintf_r+0x220>
 8008d16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d18:	f7ff fa34 	bl	8008184 <__retarget_lock_release_recursive>
 8008d1c:	89ab      	ldrh	r3, [r5, #12]
 8008d1e:	065b      	lsls	r3, r3, #25
 8008d20:	f53f af12 	bmi.w	8008b48 <_vfiprintf_r+0x4c>
 8008d24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d26:	e711      	b.n	8008b4c <_vfiprintf_r+0x50>
 8008d28:	ab03      	add	r3, sp, #12
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	462a      	mov	r2, r5
 8008d2e:	4b09      	ldr	r3, [pc, #36]	; (8008d54 <_vfiprintf_r+0x258>)
 8008d30:	a904      	add	r1, sp, #16
 8008d32:	4630      	mov	r0, r6
 8008d34:	f7fe f970 	bl	8007018 <_printf_i>
 8008d38:	e7e4      	b.n	8008d04 <_vfiprintf_r+0x208>
 8008d3a:	bf00      	nop
 8008d3c:	0800957c 	.word	0x0800957c
 8008d40:	0800959c 	.word	0x0800959c
 8008d44:	0800955c 	.word	0x0800955c
 8008d48:	08009714 	.word	0x08009714
 8008d4c:	0800971e 	.word	0x0800971e
 8008d50:	08006ad1 	.word	0x08006ad1
 8008d54:	08008ad7 	.word	0x08008ad7
 8008d58:	0800971a 	.word	0x0800971a

08008d5c <_sbrk_r>:
 8008d5c:	b538      	push	{r3, r4, r5, lr}
 8008d5e:	4d06      	ldr	r5, [pc, #24]	; (8008d78 <_sbrk_r+0x1c>)
 8008d60:	2300      	movs	r3, #0
 8008d62:	4604      	mov	r4, r0
 8008d64:	4608      	mov	r0, r1
 8008d66:	602b      	str	r3, [r5, #0]
 8008d68:	f7f8 fd0e 	bl	8001788 <_sbrk>
 8008d6c:	1c43      	adds	r3, r0, #1
 8008d6e:	d102      	bne.n	8008d76 <_sbrk_r+0x1a>
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	b103      	cbz	r3, 8008d76 <_sbrk_r+0x1a>
 8008d74:	6023      	str	r3, [r4, #0]
 8008d76:	bd38      	pop	{r3, r4, r5, pc}
 8008d78:	20000464 	.word	0x20000464

08008d7c <__sread>:
 8008d7c:	b510      	push	{r4, lr}
 8008d7e:	460c      	mov	r4, r1
 8008d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d84:	f000 faa8 	bl	80092d8 <_read_r>
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	bfab      	itete	ge
 8008d8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d8e:	89a3      	ldrhlt	r3, [r4, #12]
 8008d90:	181b      	addge	r3, r3, r0
 8008d92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d96:	bfac      	ite	ge
 8008d98:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d9a:	81a3      	strhlt	r3, [r4, #12]
 8008d9c:	bd10      	pop	{r4, pc}

08008d9e <__swrite>:
 8008d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008da2:	461f      	mov	r7, r3
 8008da4:	898b      	ldrh	r3, [r1, #12]
 8008da6:	05db      	lsls	r3, r3, #23
 8008da8:	4605      	mov	r5, r0
 8008daa:	460c      	mov	r4, r1
 8008dac:	4616      	mov	r6, r2
 8008dae:	d505      	bpl.n	8008dbc <__swrite+0x1e>
 8008db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008db4:	2302      	movs	r3, #2
 8008db6:	2200      	movs	r2, #0
 8008db8:	f000 f9f8 	bl	80091ac <_lseek_r>
 8008dbc:	89a3      	ldrh	r3, [r4, #12]
 8008dbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dc6:	81a3      	strh	r3, [r4, #12]
 8008dc8:	4632      	mov	r2, r6
 8008dca:	463b      	mov	r3, r7
 8008dcc:	4628      	mov	r0, r5
 8008dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd2:	f000 b869 	b.w	8008ea8 <_write_r>

08008dd6 <__sseek>:
 8008dd6:	b510      	push	{r4, lr}
 8008dd8:	460c      	mov	r4, r1
 8008dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dde:	f000 f9e5 	bl	80091ac <_lseek_r>
 8008de2:	1c43      	adds	r3, r0, #1
 8008de4:	89a3      	ldrh	r3, [r4, #12]
 8008de6:	bf15      	itete	ne
 8008de8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008dea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008dee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008df2:	81a3      	strheq	r3, [r4, #12]
 8008df4:	bf18      	it	ne
 8008df6:	81a3      	strhne	r3, [r4, #12]
 8008df8:	bd10      	pop	{r4, pc}

08008dfa <__sclose>:
 8008dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dfe:	f000 b8f1 	b.w	8008fe4 <_close_r>
	...

08008e04 <__swbuf_r>:
 8008e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e06:	460e      	mov	r6, r1
 8008e08:	4614      	mov	r4, r2
 8008e0a:	4605      	mov	r5, r0
 8008e0c:	b118      	cbz	r0, 8008e16 <__swbuf_r+0x12>
 8008e0e:	6983      	ldr	r3, [r0, #24]
 8008e10:	b90b      	cbnz	r3, 8008e16 <__swbuf_r+0x12>
 8008e12:	f7ff f913 	bl	800803c <__sinit>
 8008e16:	4b21      	ldr	r3, [pc, #132]	; (8008e9c <__swbuf_r+0x98>)
 8008e18:	429c      	cmp	r4, r3
 8008e1a:	d12b      	bne.n	8008e74 <__swbuf_r+0x70>
 8008e1c:	686c      	ldr	r4, [r5, #4]
 8008e1e:	69a3      	ldr	r3, [r4, #24]
 8008e20:	60a3      	str	r3, [r4, #8]
 8008e22:	89a3      	ldrh	r3, [r4, #12]
 8008e24:	071a      	lsls	r2, r3, #28
 8008e26:	d52f      	bpl.n	8008e88 <__swbuf_r+0x84>
 8008e28:	6923      	ldr	r3, [r4, #16]
 8008e2a:	b36b      	cbz	r3, 8008e88 <__swbuf_r+0x84>
 8008e2c:	6923      	ldr	r3, [r4, #16]
 8008e2e:	6820      	ldr	r0, [r4, #0]
 8008e30:	1ac0      	subs	r0, r0, r3
 8008e32:	6963      	ldr	r3, [r4, #20]
 8008e34:	b2f6      	uxtb	r6, r6
 8008e36:	4283      	cmp	r3, r0
 8008e38:	4637      	mov	r7, r6
 8008e3a:	dc04      	bgt.n	8008e46 <__swbuf_r+0x42>
 8008e3c:	4621      	mov	r1, r4
 8008e3e:	4628      	mov	r0, r5
 8008e40:	f000 f966 	bl	8009110 <_fflush_r>
 8008e44:	bb30      	cbnz	r0, 8008e94 <__swbuf_r+0x90>
 8008e46:	68a3      	ldr	r3, [r4, #8]
 8008e48:	3b01      	subs	r3, #1
 8008e4a:	60a3      	str	r3, [r4, #8]
 8008e4c:	6823      	ldr	r3, [r4, #0]
 8008e4e:	1c5a      	adds	r2, r3, #1
 8008e50:	6022      	str	r2, [r4, #0]
 8008e52:	701e      	strb	r6, [r3, #0]
 8008e54:	6963      	ldr	r3, [r4, #20]
 8008e56:	3001      	adds	r0, #1
 8008e58:	4283      	cmp	r3, r0
 8008e5a:	d004      	beq.n	8008e66 <__swbuf_r+0x62>
 8008e5c:	89a3      	ldrh	r3, [r4, #12]
 8008e5e:	07db      	lsls	r3, r3, #31
 8008e60:	d506      	bpl.n	8008e70 <__swbuf_r+0x6c>
 8008e62:	2e0a      	cmp	r6, #10
 8008e64:	d104      	bne.n	8008e70 <__swbuf_r+0x6c>
 8008e66:	4621      	mov	r1, r4
 8008e68:	4628      	mov	r0, r5
 8008e6a:	f000 f951 	bl	8009110 <_fflush_r>
 8008e6e:	b988      	cbnz	r0, 8008e94 <__swbuf_r+0x90>
 8008e70:	4638      	mov	r0, r7
 8008e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e74:	4b0a      	ldr	r3, [pc, #40]	; (8008ea0 <__swbuf_r+0x9c>)
 8008e76:	429c      	cmp	r4, r3
 8008e78:	d101      	bne.n	8008e7e <__swbuf_r+0x7a>
 8008e7a:	68ac      	ldr	r4, [r5, #8]
 8008e7c:	e7cf      	b.n	8008e1e <__swbuf_r+0x1a>
 8008e7e:	4b09      	ldr	r3, [pc, #36]	; (8008ea4 <__swbuf_r+0xa0>)
 8008e80:	429c      	cmp	r4, r3
 8008e82:	bf08      	it	eq
 8008e84:	68ec      	ldreq	r4, [r5, #12]
 8008e86:	e7ca      	b.n	8008e1e <__swbuf_r+0x1a>
 8008e88:	4621      	mov	r1, r4
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	f000 f81e 	bl	8008ecc <__swsetup_r>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	d0cb      	beq.n	8008e2c <__swbuf_r+0x28>
 8008e94:	f04f 37ff 	mov.w	r7, #4294967295
 8008e98:	e7ea      	b.n	8008e70 <__swbuf_r+0x6c>
 8008e9a:	bf00      	nop
 8008e9c:	0800957c 	.word	0x0800957c
 8008ea0:	0800959c 	.word	0x0800959c
 8008ea4:	0800955c 	.word	0x0800955c

08008ea8 <_write_r>:
 8008ea8:	b538      	push	{r3, r4, r5, lr}
 8008eaa:	4d07      	ldr	r5, [pc, #28]	; (8008ec8 <_write_r+0x20>)
 8008eac:	4604      	mov	r4, r0
 8008eae:	4608      	mov	r0, r1
 8008eb0:	4611      	mov	r1, r2
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	602a      	str	r2, [r5, #0]
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	f7f8 f85c 	bl	8000f74 <_write>
 8008ebc:	1c43      	adds	r3, r0, #1
 8008ebe:	d102      	bne.n	8008ec6 <_write_r+0x1e>
 8008ec0:	682b      	ldr	r3, [r5, #0]
 8008ec2:	b103      	cbz	r3, 8008ec6 <_write_r+0x1e>
 8008ec4:	6023      	str	r3, [r4, #0]
 8008ec6:	bd38      	pop	{r3, r4, r5, pc}
 8008ec8:	20000464 	.word	0x20000464

08008ecc <__swsetup_r>:
 8008ecc:	4b32      	ldr	r3, [pc, #200]	; (8008f98 <__swsetup_r+0xcc>)
 8008ece:	b570      	push	{r4, r5, r6, lr}
 8008ed0:	681d      	ldr	r5, [r3, #0]
 8008ed2:	4606      	mov	r6, r0
 8008ed4:	460c      	mov	r4, r1
 8008ed6:	b125      	cbz	r5, 8008ee2 <__swsetup_r+0x16>
 8008ed8:	69ab      	ldr	r3, [r5, #24]
 8008eda:	b913      	cbnz	r3, 8008ee2 <__swsetup_r+0x16>
 8008edc:	4628      	mov	r0, r5
 8008ede:	f7ff f8ad 	bl	800803c <__sinit>
 8008ee2:	4b2e      	ldr	r3, [pc, #184]	; (8008f9c <__swsetup_r+0xd0>)
 8008ee4:	429c      	cmp	r4, r3
 8008ee6:	d10f      	bne.n	8008f08 <__swsetup_r+0x3c>
 8008ee8:	686c      	ldr	r4, [r5, #4]
 8008eea:	89a3      	ldrh	r3, [r4, #12]
 8008eec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ef0:	0719      	lsls	r1, r3, #28
 8008ef2:	d42c      	bmi.n	8008f4e <__swsetup_r+0x82>
 8008ef4:	06dd      	lsls	r5, r3, #27
 8008ef6:	d411      	bmi.n	8008f1c <__swsetup_r+0x50>
 8008ef8:	2309      	movs	r3, #9
 8008efa:	6033      	str	r3, [r6, #0]
 8008efc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f00:	81a3      	strh	r3, [r4, #12]
 8008f02:	f04f 30ff 	mov.w	r0, #4294967295
 8008f06:	e03e      	b.n	8008f86 <__swsetup_r+0xba>
 8008f08:	4b25      	ldr	r3, [pc, #148]	; (8008fa0 <__swsetup_r+0xd4>)
 8008f0a:	429c      	cmp	r4, r3
 8008f0c:	d101      	bne.n	8008f12 <__swsetup_r+0x46>
 8008f0e:	68ac      	ldr	r4, [r5, #8]
 8008f10:	e7eb      	b.n	8008eea <__swsetup_r+0x1e>
 8008f12:	4b24      	ldr	r3, [pc, #144]	; (8008fa4 <__swsetup_r+0xd8>)
 8008f14:	429c      	cmp	r4, r3
 8008f16:	bf08      	it	eq
 8008f18:	68ec      	ldreq	r4, [r5, #12]
 8008f1a:	e7e6      	b.n	8008eea <__swsetup_r+0x1e>
 8008f1c:	0758      	lsls	r0, r3, #29
 8008f1e:	d512      	bpl.n	8008f46 <__swsetup_r+0x7a>
 8008f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f22:	b141      	cbz	r1, 8008f36 <__swsetup_r+0x6a>
 8008f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f28:	4299      	cmp	r1, r3
 8008f2a:	d002      	beq.n	8008f32 <__swsetup_r+0x66>
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	f7ff fcdb 	bl	80088e8 <_free_r>
 8008f32:	2300      	movs	r3, #0
 8008f34:	6363      	str	r3, [r4, #52]	; 0x34
 8008f36:	89a3      	ldrh	r3, [r4, #12]
 8008f38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f3c:	81a3      	strh	r3, [r4, #12]
 8008f3e:	2300      	movs	r3, #0
 8008f40:	6063      	str	r3, [r4, #4]
 8008f42:	6923      	ldr	r3, [r4, #16]
 8008f44:	6023      	str	r3, [r4, #0]
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	f043 0308 	orr.w	r3, r3, #8
 8008f4c:	81a3      	strh	r3, [r4, #12]
 8008f4e:	6923      	ldr	r3, [r4, #16]
 8008f50:	b94b      	cbnz	r3, 8008f66 <__swsetup_r+0x9a>
 8008f52:	89a3      	ldrh	r3, [r4, #12]
 8008f54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f5c:	d003      	beq.n	8008f66 <__swsetup_r+0x9a>
 8008f5e:	4621      	mov	r1, r4
 8008f60:	4630      	mov	r0, r6
 8008f62:	f000 f95b 	bl	800921c <__smakebuf_r>
 8008f66:	89a0      	ldrh	r0, [r4, #12]
 8008f68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f6c:	f010 0301 	ands.w	r3, r0, #1
 8008f70:	d00a      	beq.n	8008f88 <__swsetup_r+0xbc>
 8008f72:	2300      	movs	r3, #0
 8008f74:	60a3      	str	r3, [r4, #8]
 8008f76:	6963      	ldr	r3, [r4, #20]
 8008f78:	425b      	negs	r3, r3
 8008f7a:	61a3      	str	r3, [r4, #24]
 8008f7c:	6923      	ldr	r3, [r4, #16]
 8008f7e:	b943      	cbnz	r3, 8008f92 <__swsetup_r+0xc6>
 8008f80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f84:	d1ba      	bne.n	8008efc <__swsetup_r+0x30>
 8008f86:	bd70      	pop	{r4, r5, r6, pc}
 8008f88:	0781      	lsls	r1, r0, #30
 8008f8a:	bf58      	it	pl
 8008f8c:	6963      	ldrpl	r3, [r4, #20]
 8008f8e:	60a3      	str	r3, [r4, #8]
 8008f90:	e7f4      	b.n	8008f7c <__swsetup_r+0xb0>
 8008f92:	2000      	movs	r0, #0
 8008f94:	e7f7      	b.n	8008f86 <__swsetup_r+0xba>
 8008f96:	bf00      	nop
 8008f98:	20000034 	.word	0x20000034
 8008f9c:	0800957c 	.word	0x0800957c
 8008fa0:	0800959c 	.word	0x0800959c
 8008fa4:	0800955c 	.word	0x0800955c

08008fa8 <__assert_func>:
 8008fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008faa:	4614      	mov	r4, r2
 8008fac:	461a      	mov	r2, r3
 8008fae:	4b09      	ldr	r3, [pc, #36]	; (8008fd4 <__assert_func+0x2c>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4605      	mov	r5, r0
 8008fb4:	68d8      	ldr	r0, [r3, #12]
 8008fb6:	b14c      	cbz	r4, 8008fcc <__assert_func+0x24>
 8008fb8:	4b07      	ldr	r3, [pc, #28]	; (8008fd8 <__assert_func+0x30>)
 8008fba:	9100      	str	r1, [sp, #0]
 8008fbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008fc0:	4906      	ldr	r1, [pc, #24]	; (8008fdc <__assert_func+0x34>)
 8008fc2:	462b      	mov	r3, r5
 8008fc4:	f000 f8e0 	bl	8009188 <fiprintf>
 8008fc8:	f000 f9a5 	bl	8009316 <abort>
 8008fcc:	4b04      	ldr	r3, [pc, #16]	; (8008fe0 <__assert_func+0x38>)
 8008fce:	461c      	mov	r4, r3
 8008fd0:	e7f3      	b.n	8008fba <__assert_func+0x12>
 8008fd2:	bf00      	nop
 8008fd4:	20000034 	.word	0x20000034
 8008fd8:	08009725 	.word	0x08009725
 8008fdc:	08009732 	.word	0x08009732
 8008fe0:	08009760 	.word	0x08009760

08008fe4 <_close_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	4d06      	ldr	r5, [pc, #24]	; (8009000 <_close_r+0x1c>)
 8008fe8:	2300      	movs	r3, #0
 8008fea:	4604      	mov	r4, r0
 8008fec:	4608      	mov	r0, r1
 8008fee:	602b      	str	r3, [r5, #0]
 8008ff0:	f7f8 fb95 	bl	800171e <_close>
 8008ff4:	1c43      	adds	r3, r0, #1
 8008ff6:	d102      	bne.n	8008ffe <_close_r+0x1a>
 8008ff8:	682b      	ldr	r3, [r5, #0]
 8008ffa:	b103      	cbz	r3, 8008ffe <_close_r+0x1a>
 8008ffc:	6023      	str	r3, [r4, #0]
 8008ffe:	bd38      	pop	{r3, r4, r5, pc}
 8009000:	20000464 	.word	0x20000464

08009004 <__sflush_r>:
 8009004:	898a      	ldrh	r2, [r1, #12]
 8009006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800900a:	4605      	mov	r5, r0
 800900c:	0710      	lsls	r0, r2, #28
 800900e:	460c      	mov	r4, r1
 8009010:	d458      	bmi.n	80090c4 <__sflush_r+0xc0>
 8009012:	684b      	ldr	r3, [r1, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	dc05      	bgt.n	8009024 <__sflush_r+0x20>
 8009018:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800901a:	2b00      	cmp	r3, #0
 800901c:	dc02      	bgt.n	8009024 <__sflush_r+0x20>
 800901e:	2000      	movs	r0, #0
 8009020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009024:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009026:	2e00      	cmp	r6, #0
 8009028:	d0f9      	beq.n	800901e <__sflush_r+0x1a>
 800902a:	2300      	movs	r3, #0
 800902c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009030:	682f      	ldr	r7, [r5, #0]
 8009032:	602b      	str	r3, [r5, #0]
 8009034:	d032      	beq.n	800909c <__sflush_r+0x98>
 8009036:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009038:	89a3      	ldrh	r3, [r4, #12]
 800903a:	075a      	lsls	r2, r3, #29
 800903c:	d505      	bpl.n	800904a <__sflush_r+0x46>
 800903e:	6863      	ldr	r3, [r4, #4]
 8009040:	1ac0      	subs	r0, r0, r3
 8009042:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009044:	b10b      	cbz	r3, 800904a <__sflush_r+0x46>
 8009046:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009048:	1ac0      	subs	r0, r0, r3
 800904a:	2300      	movs	r3, #0
 800904c:	4602      	mov	r2, r0
 800904e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009050:	6a21      	ldr	r1, [r4, #32]
 8009052:	4628      	mov	r0, r5
 8009054:	47b0      	blx	r6
 8009056:	1c43      	adds	r3, r0, #1
 8009058:	89a3      	ldrh	r3, [r4, #12]
 800905a:	d106      	bne.n	800906a <__sflush_r+0x66>
 800905c:	6829      	ldr	r1, [r5, #0]
 800905e:	291d      	cmp	r1, #29
 8009060:	d82c      	bhi.n	80090bc <__sflush_r+0xb8>
 8009062:	4a2a      	ldr	r2, [pc, #168]	; (800910c <__sflush_r+0x108>)
 8009064:	40ca      	lsrs	r2, r1
 8009066:	07d6      	lsls	r6, r2, #31
 8009068:	d528      	bpl.n	80090bc <__sflush_r+0xb8>
 800906a:	2200      	movs	r2, #0
 800906c:	6062      	str	r2, [r4, #4]
 800906e:	04d9      	lsls	r1, r3, #19
 8009070:	6922      	ldr	r2, [r4, #16]
 8009072:	6022      	str	r2, [r4, #0]
 8009074:	d504      	bpl.n	8009080 <__sflush_r+0x7c>
 8009076:	1c42      	adds	r2, r0, #1
 8009078:	d101      	bne.n	800907e <__sflush_r+0x7a>
 800907a:	682b      	ldr	r3, [r5, #0]
 800907c:	b903      	cbnz	r3, 8009080 <__sflush_r+0x7c>
 800907e:	6560      	str	r0, [r4, #84]	; 0x54
 8009080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009082:	602f      	str	r7, [r5, #0]
 8009084:	2900      	cmp	r1, #0
 8009086:	d0ca      	beq.n	800901e <__sflush_r+0x1a>
 8009088:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800908c:	4299      	cmp	r1, r3
 800908e:	d002      	beq.n	8009096 <__sflush_r+0x92>
 8009090:	4628      	mov	r0, r5
 8009092:	f7ff fc29 	bl	80088e8 <_free_r>
 8009096:	2000      	movs	r0, #0
 8009098:	6360      	str	r0, [r4, #52]	; 0x34
 800909a:	e7c1      	b.n	8009020 <__sflush_r+0x1c>
 800909c:	6a21      	ldr	r1, [r4, #32]
 800909e:	2301      	movs	r3, #1
 80090a0:	4628      	mov	r0, r5
 80090a2:	47b0      	blx	r6
 80090a4:	1c41      	adds	r1, r0, #1
 80090a6:	d1c7      	bne.n	8009038 <__sflush_r+0x34>
 80090a8:	682b      	ldr	r3, [r5, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d0c4      	beq.n	8009038 <__sflush_r+0x34>
 80090ae:	2b1d      	cmp	r3, #29
 80090b0:	d001      	beq.n	80090b6 <__sflush_r+0xb2>
 80090b2:	2b16      	cmp	r3, #22
 80090b4:	d101      	bne.n	80090ba <__sflush_r+0xb6>
 80090b6:	602f      	str	r7, [r5, #0]
 80090b8:	e7b1      	b.n	800901e <__sflush_r+0x1a>
 80090ba:	89a3      	ldrh	r3, [r4, #12]
 80090bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090c0:	81a3      	strh	r3, [r4, #12]
 80090c2:	e7ad      	b.n	8009020 <__sflush_r+0x1c>
 80090c4:	690f      	ldr	r7, [r1, #16]
 80090c6:	2f00      	cmp	r7, #0
 80090c8:	d0a9      	beq.n	800901e <__sflush_r+0x1a>
 80090ca:	0793      	lsls	r3, r2, #30
 80090cc:	680e      	ldr	r6, [r1, #0]
 80090ce:	bf08      	it	eq
 80090d0:	694b      	ldreq	r3, [r1, #20]
 80090d2:	600f      	str	r7, [r1, #0]
 80090d4:	bf18      	it	ne
 80090d6:	2300      	movne	r3, #0
 80090d8:	eba6 0807 	sub.w	r8, r6, r7
 80090dc:	608b      	str	r3, [r1, #8]
 80090de:	f1b8 0f00 	cmp.w	r8, #0
 80090e2:	dd9c      	ble.n	800901e <__sflush_r+0x1a>
 80090e4:	6a21      	ldr	r1, [r4, #32]
 80090e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090e8:	4643      	mov	r3, r8
 80090ea:	463a      	mov	r2, r7
 80090ec:	4628      	mov	r0, r5
 80090ee:	47b0      	blx	r6
 80090f0:	2800      	cmp	r0, #0
 80090f2:	dc06      	bgt.n	8009102 <__sflush_r+0xfe>
 80090f4:	89a3      	ldrh	r3, [r4, #12]
 80090f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090fa:	81a3      	strh	r3, [r4, #12]
 80090fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009100:	e78e      	b.n	8009020 <__sflush_r+0x1c>
 8009102:	4407      	add	r7, r0
 8009104:	eba8 0800 	sub.w	r8, r8, r0
 8009108:	e7e9      	b.n	80090de <__sflush_r+0xda>
 800910a:	bf00      	nop
 800910c:	20400001 	.word	0x20400001

08009110 <_fflush_r>:
 8009110:	b538      	push	{r3, r4, r5, lr}
 8009112:	690b      	ldr	r3, [r1, #16]
 8009114:	4605      	mov	r5, r0
 8009116:	460c      	mov	r4, r1
 8009118:	b913      	cbnz	r3, 8009120 <_fflush_r+0x10>
 800911a:	2500      	movs	r5, #0
 800911c:	4628      	mov	r0, r5
 800911e:	bd38      	pop	{r3, r4, r5, pc}
 8009120:	b118      	cbz	r0, 800912a <_fflush_r+0x1a>
 8009122:	6983      	ldr	r3, [r0, #24]
 8009124:	b90b      	cbnz	r3, 800912a <_fflush_r+0x1a>
 8009126:	f7fe ff89 	bl	800803c <__sinit>
 800912a:	4b14      	ldr	r3, [pc, #80]	; (800917c <_fflush_r+0x6c>)
 800912c:	429c      	cmp	r4, r3
 800912e:	d11b      	bne.n	8009168 <_fflush_r+0x58>
 8009130:	686c      	ldr	r4, [r5, #4]
 8009132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d0ef      	beq.n	800911a <_fflush_r+0xa>
 800913a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800913c:	07d0      	lsls	r0, r2, #31
 800913e:	d404      	bmi.n	800914a <_fflush_r+0x3a>
 8009140:	0599      	lsls	r1, r3, #22
 8009142:	d402      	bmi.n	800914a <_fflush_r+0x3a>
 8009144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009146:	f7ff f81c 	bl	8008182 <__retarget_lock_acquire_recursive>
 800914a:	4628      	mov	r0, r5
 800914c:	4621      	mov	r1, r4
 800914e:	f7ff ff59 	bl	8009004 <__sflush_r>
 8009152:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009154:	07da      	lsls	r2, r3, #31
 8009156:	4605      	mov	r5, r0
 8009158:	d4e0      	bmi.n	800911c <_fflush_r+0xc>
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	059b      	lsls	r3, r3, #22
 800915e:	d4dd      	bmi.n	800911c <_fflush_r+0xc>
 8009160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009162:	f7ff f80f 	bl	8008184 <__retarget_lock_release_recursive>
 8009166:	e7d9      	b.n	800911c <_fflush_r+0xc>
 8009168:	4b05      	ldr	r3, [pc, #20]	; (8009180 <_fflush_r+0x70>)
 800916a:	429c      	cmp	r4, r3
 800916c:	d101      	bne.n	8009172 <_fflush_r+0x62>
 800916e:	68ac      	ldr	r4, [r5, #8]
 8009170:	e7df      	b.n	8009132 <_fflush_r+0x22>
 8009172:	4b04      	ldr	r3, [pc, #16]	; (8009184 <_fflush_r+0x74>)
 8009174:	429c      	cmp	r4, r3
 8009176:	bf08      	it	eq
 8009178:	68ec      	ldreq	r4, [r5, #12]
 800917a:	e7da      	b.n	8009132 <_fflush_r+0x22>
 800917c:	0800957c 	.word	0x0800957c
 8009180:	0800959c 	.word	0x0800959c
 8009184:	0800955c 	.word	0x0800955c

08009188 <fiprintf>:
 8009188:	b40e      	push	{r1, r2, r3}
 800918a:	b503      	push	{r0, r1, lr}
 800918c:	4601      	mov	r1, r0
 800918e:	ab03      	add	r3, sp, #12
 8009190:	4805      	ldr	r0, [pc, #20]	; (80091a8 <fiprintf+0x20>)
 8009192:	f853 2b04 	ldr.w	r2, [r3], #4
 8009196:	6800      	ldr	r0, [r0, #0]
 8009198:	9301      	str	r3, [sp, #4]
 800919a:	f7ff fcaf 	bl	8008afc <_vfiprintf_r>
 800919e:	b002      	add	sp, #8
 80091a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80091a4:	b003      	add	sp, #12
 80091a6:	4770      	bx	lr
 80091a8:	20000034 	.word	0x20000034

080091ac <_lseek_r>:
 80091ac:	b538      	push	{r3, r4, r5, lr}
 80091ae:	4d07      	ldr	r5, [pc, #28]	; (80091cc <_lseek_r+0x20>)
 80091b0:	4604      	mov	r4, r0
 80091b2:	4608      	mov	r0, r1
 80091b4:	4611      	mov	r1, r2
 80091b6:	2200      	movs	r2, #0
 80091b8:	602a      	str	r2, [r5, #0]
 80091ba:	461a      	mov	r2, r3
 80091bc:	f7f8 fad6 	bl	800176c <_lseek>
 80091c0:	1c43      	adds	r3, r0, #1
 80091c2:	d102      	bne.n	80091ca <_lseek_r+0x1e>
 80091c4:	682b      	ldr	r3, [r5, #0]
 80091c6:	b103      	cbz	r3, 80091ca <_lseek_r+0x1e>
 80091c8:	6023      	str	r3, [r4, #0]
 80091ca:	bd38      	pop	{r3, r4, r5, pc}
 80091cc:	20000464 	.word	0x20000464

080091d0 <__swhatbuf_r>:
 80091d0:	b570      	push	{r4, r5, r6, lr}
 80091d2:	460e      	mov	r6, r1
 80091d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091d8:	2900      	cmp	r1, #0
 80091da:	b096      	sub	sp, #88	; 0x58
 80091dc:	4614      	mov	r4, r2
 80091de:	461d      	mov	r5, r3
 80091e0:	da08      	bge.n	80091f4 <__swhatbuf_r+0x24>
 80091e2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	602a      	str	r2, [r5, #0]
 80091ea:	061a      	lsls	r2, r3, #24
 80091ec:	d410      	bmi.n	8009210 <__swhatbuf_r+0x40>
 80091ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091f2:	e00e      	b.n	8009212 <__swhatbuf_r+0x42>
 80091f4:	466a      	mov	r2, sp
 80091f6:	f000 f895 	bl	8009324 <_fstat_r>
 80091fa:	2800      	cmp	r0, #0
 80091fc:	dbf1      	blt.n	80091e2 <__swhatbuf_r+0x12>
 80091fe:	9a01      	ldr	r2, [sp, #4]
 8009200:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009204:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009208:	425a      	negs	r2, r3
 800920a:	415a      	adcs	r2, r3
 800920c:	602a      	str	r2, [r5, #0]
 800920e:	e7ee      	b.n	80091ee <__swhatbuf_r+0x1e>
 8009210:	2340      	movs	r3, #64	; 0x40
 8009212:	2000      	movs	r0, #0
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	b016      	add	sp, #88	; 0x58
 8009218:	bd70      	pop	{r4, r5, r6, pc}
	...

0800921c <__smakebuf_r>:
 800921c:	898b      	ldrh	r3, [r1, #12]
 800921e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009220:	079d      	lsls	r5, r3, #30
 8009222:	4606      	mov	r6, r0
 8009224:	460c      	mov	r4, r1
 8009226:	d507      	bpl.n	8009238 <__smakebuf_r+0x1c>
 8009228:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800922c:	6023      	str	r3, [r4, #0]
 800922e:	6123      	str	r3, [r4, #16]
 8009230:	2301      	movs	r3, #1
 8009232:	6163      	str	r3, [r4, #20]
 8009234:	b002      	add	sp, #8
 8009236:	bd70      	pop	{r4, r5, r6, pc}
 8009238:	ab01      	add	r3, sp, #4
 800923a:	466a      	mov	r2, sp
 800923c:	f7ff ffc8 	bl	80091d0 <__swhatbuf_r>
 8009240:	9900      	ldr	r1, [sp, #0]
 8009242:	4605      	mov	r5, r0
 8009244:	4630      	mov	r0, r6
 8009246:	f7ff fbbb 	bl	80089c0 <_malloc_r>
 800924a:	b948      	cbnz	r0, 8009260 <__smakebuf_r+0x44>
 800924c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009250:	059a      	lsls	r2, r3, #22
 8009252:	d4ef      	bmi.n	8009234 <__smakebuf_r+0x18>
 8009254:	f023 0303 	bic.w	r3, r3, #3
 8009258:	f043 0302 	orr.w	r3, r3, #2
 800925c:	81a3      	strh	r3, [r4, #12]
 800925e:	e7e3      	b.n	8009228 <__smakebuf_r+0xc>
 8009260:	4b0d      	ldr	r3, [pc, #52]	; (8009298 <__smakebuf_r+0x7c>)
 8009262:	62b3      	str	r3, [r6, #40]	; 0x28
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	6020      	str	r0, [r4, #0]
 8009268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800926c:	81a3      	strh	r3, [r4, #12]
 800926e:	9b00      	ldr	r3, [sp, #0]
 8009270:	6163      	str	r3, [r4, #20]
 8009272:	9b01      	ldr	r3, [sp, #4]
 8009274:	6120      	str	r0, [r4, #16]
 8009276:	b15b      	cbz	r3, 8009290 <__smakebuf_r+0x74>
 8009278:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800927c:	4630      	mov	r0, r6
 800927e:	f000 f863 	bl	8009348 <_isatty_r>
 8009282:	b128      	cbz	r0, 8009290 <__smakebuf_r+0x74>
 8009284:	89a3      	ldrh	r3, [r4, #12]
 8009286:	f023 0303 	bic.w	r3, r3, #3
 800928a:	f043 0301 	orr.w	r3, r3, #1
 800928e:	81a3      	strh	r3, [r4, #12]
 8009290:	89a0      	ldrh	r0, [r4, #12]
 8009292:	4305      	orrs	r5, r0
 8009294:	81a5      	strh	r5, [r4, #12]
 8009296:	e7cd      	b.n	8009234 <__smakebuf_r+0x18>
 8009298:	08007fd5 	.word	0x08007fd5

0800929c <__ascii_mbtowc>:
 800929c:	b082      	sub	sp, #8
 800929e:	b901      	cbnz	r1, 80092a2 <__ascii_mbtowc+0x6>
 80092a0:	a901      	add	r1, sp, #4
 80092a2:	b142      	cbz	r2, 80092b6 <__ascii_mbtowc+0x1a>
 80092a4:	b14b      	cbz	r3, 80092ba <__ascii_mbtowc+0x1e>
 80092a6:	7813      	ldrb	r3, [r2, #0]
 80092a8:	600b      	str	r3, [r1, #0]
 80092aa:	7812      	ldrb	r2, [r2, #0]
 80092ac:	1e10      	subs	r0, r2, #0
 80092ae:	bf18      	it	ne
 80092b0:	2001      	movne	r0, #1
 80092b2:	b002      	add	sp, #8
 80092b4:	4770      	bx	lr
 80092b6:	4610      	mov	r0, r2
 80092b8:	e7fb      	b.n	80092b2 <__ascii_mbtowc+0x16>
 80092ba:	f06f 0001 	mvn.w	r0, #1
 80092be:	e7f8      	b.n	80092b2 <__ascii_mbtowc+0x16>

080092c0 <__malloc_lock>:
 80092c0:	4801      	ldr	r0, [pc, #4]	; (80092c8 <__malloc_lock+0x8>)
 80092c2:	f7fe bf5e 	b.w	8008182 <__retarget_lock_acquire_recursive>
 80092c6:	bf00      	nop
 80092c8:	20000458 	.word	0x20000458

080092cc <__malloc_unlock>:
 80092cc:	4801      	ldr	r0, [pc, #4]	; (80092d4 <__malloc_unlock+0x8>)
 80092ce:	f7fe bf59 	b.w	8008184 <__retarget_lock_release_recursive>
 80092d2:	bf00      	nop
 80092d4:	20000458 	.word	0x20000458

080092d8 <_read_r>:
 80092d8:	b538      	push	{r3, r4, r5, lr}
 80092da:	4d07      	ldr	r5, [pc, #28]	; (80092f8 <_read_r+0x20>)
 80092dc:	4604      	mov	r4, r0
 80092de:	4608      	mov	r0, r1
 80092e0:	4611      	mov	r1, r2
 80092e2:	2200      	movs	r2, #0
 80092e4:	602a      	str	r2, [r5, #0]
 80092e6:	461a      	mov	r2, r3
 80092e8:	f7f8 f9fc 	bl	80016e4 <_read>
 80092ec:	1c43      	adds	r3, r0, #1
 80092ee:	d102      	bne.n	80092f6 <_read_r+0x1e>
 80092f0:	682b      	ldr	r3, [r5, #0]
 80092f2:	b103      	cbz	r3, 80092f6 <_read_r+0x1e>
 80092f4:	6023      	str	r3, [r4, #0]
 80092f6:	bd38      	pop	{r3, r4, r5, pc}
 80092f8:	20000464 	.word	0x20000464

080092fc <__ascii_wctomb>:
 80092fc:	b149      	cbz	r1, 8009312 <__ascii_wctomb+0x16>
 80092fe:	2aff      	cmp	r2, #255	; 0xff
 8009300:	bf85      	ittet	hi
 8009302:	238a      	movhi	r3, #138	; 0x8a
 8009304:	6003      	strhi	r3, [r0, #0]
 8009306:	700a      	strbls	r2, [r1, #0]
 8009308:	f04f 30ff 	movhi.w	r0, #4294967295
 800930c:	bf98      	it	ls
 800930e:	2001      	movls	r0, #1
 8009310:	4770      	bx	lr
 8009312:	4608      	mov	r0, r1
 8009314:	4770      	bx	lr

08009316 <abort>:
 8009316:	b508      	push	{r3, lr}
 8009318:	2006      	movs	r0, #6
 800931a:	f000 f84d 	bl	80093b8 <raise>
 800931e:	2001      	movs	r0, #1
 8009320:	f7f8 f9d6 	bl	80016d0 <_exit>

08009324 <_fstat_r>:
 8009324:	b538      	push	{r3, r4, r5, lr}
 8009326:	4d07      	ldr	r5, [pc, #28]	; (8009344 <_fstat_r+0x20>)
 8009328:	2300      	movs	r3, #0
 800932a:	4604      	mov	r4, r0
 800932c:	4608      	mov	r0, r1
 800932e:	4611      	mov	r1, r2
 8009330:	602b      	str	r3, [r5, #0]
 8009332:	f7f8 fa00 	bl	8001736 <_fstat>
 8009336:	1c43      	adds	r3, r0, #1
 8009338:	d102      	bne.n	8009340 <_fstat_r+0x1c>
 800933a:	682b      	ldr	r3, [r5, #0]
 800933c:	b103      	cbz	r3, 8009340 <_fstat_r+0x1c>
 800933e:	6023      	str	r3, [r4, #0]
 8009340:	bd38      	pop	{r3, r4, r5, pc}
 8009342:	bf00      	nop
 8009344:	20000464 	.word	0x20000464

08009348 <_isatty_r>:
 8009348:	b538      	push	{r3, r4, r5, lr}
 800934a:	4d06      	ldr	r5, [pc, #24]	; (8009364 <_isatty_r+0x1c>)
 800934c:	2300      	movs	r3, #0
 800934e:	4604      	mov	r4, r0
 8009350:	4608      	mov	r0, r1
 8009352:	602b      	str	r3, [r5, #0]
 8009354:	f7f8 f9ff 	bl	8001756 <_isatty>
 8009358:	1c43      	adds	r3, r0, #1
 800935a:	d102      	bne.n	8009362 <_isatty_r+0x1a>
 800935c:	682b      	ldr	r3, [r5, #0]
 800935e:	b103      	cbz	r3, 8009362 <_isatty_r+0x1a>
 8009360:	6023      	str	r3, [r4, #0]
 8009362:	bd38      	pop	{r3, r4, r5, pc}
 8009364:	20000464 	.word	0x20000464

08009368 <_raise_r>:
 8009368:	291f      	cmp	r1, #31
 800936a:	b538      	push	{r3, r4, r5, lr}
 800936c:	4604      	mov	r4, r0
 800936e:	460d      	mov	r5, r1
 8009370:	d904      	bls.n	800937c <_raise_r+0x14>
 8009372:	2316      	movs	r3, #22
 8009374:	6003      	str	r3, [r0, #0]
 8009376:	f04f 30ff 	mov.w	r0, #4294967295
 800937a:	bd38      	pop	{r3, r4, r5, pc}
 800937c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800937e:	b112      	cbz	r2, 8009386 <_raise_r+0x1e>
 8009380:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009384:	b94b      	cbnz	r3, 800939a <_raise_r+0x32>
 8009386:	4620      	mov	r0, r4
 8009388:	f000 f830 	bl	80093ec <_getpid_r>
 800938c:	462a      	mov	r2, r5
 800938e:	4601      	mov	r1, r0
 8009390:	4620      	mov	r0, r4
 8009392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009396:	f000 b817 	b.w	80093c8 <_kill_r>
 800939a:	2b01      	cmp	r3, #1
 800939c:	d00a      	beq.n	80093b4 <_raise_r+0x4c>
 800939e:	1c59      	adds	r1, r3, #1
 80093a0:	d103      	bne.n	80093aa <_raise_r+0x42>
 80093a2:	2316      	movs	r3, #22
 80093a4:	6003      	str	r3, [r0, #0]
 80093a6:	2001      	movs	r0, #1
 80093a8:	e7e7      	b.n	800937a <_raise_r+0x12>
 80093aa:	2400      	movs	r4, #0
 80093ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093b0:	4628      	mov	r0, r5
 80093b2:	4798      	blx	r3
 80093b4:	2000      	movs	r0, #0
 80093b6:	e7e0      	b.n	800937a <_raise_r+0x12>

080093b8 <raise>:
 80093b8:	4b02      	ldr	r3, [pc, #8]	; (80093c4 <raise+0xc>)
 80093ba:	4601      	mov	r1, r0
 80093bc:	6818      	ldr	r0, [r3, #0]
 80093be:	f7ff bfd3 	b.w	8009368 <_raise_r>
 80093c2:	bf00      	nop
 80093c4:	20000034 	.word	0x20000034

080093c8 <_kill_r>:
 80093c8:	b538      	push	{r3, r4, r5, lr}
 80093ca:	4d07      	ldr	r5, [pc, #28]	; (80093e8 <_kill_r+0x20>)
 80093cc:	2300      	movs	r3, #0
 80093ce:	4604      	mov	r4, r0
 80093d0:	4608      	mov	r0, r1
 80093d2:	4611      	mov	r1, r2
 80093d4:	602b      	str	r3, [r5, #0]
 80093d6:	f7f8 f96b 	bl	80016b0 <_kill>
 80093da:	1c43      	adds	r3, r0, #1
 80093dc:	d102      	bne.n	80093e4 <_kill_r+0x1c>
 80093de:	682b      	ldr	r3, [r5, #0]
 80093e0:	b103      	cbz	r3, 80093e4 <_kill_r+0x1c>
 80093e2:	6023      	str	r3, [r4, #0]
 80093e4:	bd38      	pop	{r3, r4, r5, pc}
 80093e6:	bf00      	nop
 80093e8:	20000464 	.word	0x20000464

080093ec <_getpid_r>:
 80093ec:	f7f8 b958 	b.w	80016a0 <_getpid>

080093f0 <_init>:
 80093f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f2:	bf00      	nop
 80093f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093f6:	bc08      	pop	{r3}
 80093f8:	469e      	mov	lr, r3
 80093fa:	4770      	bx	lr

080093fc <_fini>:
 80093fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093fe:	bf00      	nop
 8009400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009402:	bc08      	pop	{r3}
 8009404:	469e      	mov	lr, r3
 8009406:	4770      	bx	lr
