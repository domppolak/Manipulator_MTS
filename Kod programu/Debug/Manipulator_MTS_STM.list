
Manipulator_MTS_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a10  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005b98  08005b98  00015b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005be0  08005be0  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08005be0  08005be0  00015be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005be8  08005be8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005be8  08005be8  00015be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bec  08005bec  00015bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08005bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000018  08005c08  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08005c08  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f0d  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a14  00000000  00000000  00033f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  00036970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  00037a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027db8  00000000  00000000  00038988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146e3  00000000  00000000  00060740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f498b  00000000  00000000  00074e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001697ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004434  00000000  00000000  00169800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b80 	.word	0x08005b80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08005b80 	.word	0x08005b80

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <motorA_init>:
uint32_t tim_channelServo;


// q1
void motorA_init(TIM_HandleTypeDef *tim, uint32_t tim_channel)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
	timA = tim;
 80004d6:	4a09      	ldr	r2, [pc, #36]	; (80004fc <motorA_init+0x30>)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	6013      	str	r3, [r2, #0]
	tim_channelA = tim_channel;
 80004dc:	4a08      	ldr	r2, [pc, #32]	; (8000500 <motorA_init+0x34>)
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(timA, tim_channelA);
 80004e2:	4b06      	ldr	r3, [pc, #24]	; (80004fc <motorA_init+0x30>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a06      	ldr	r2, [pc, #24]	; (8000500 <motorA_init+0x34>)
 80004e8:	6812      	ldr	r2, [r2, #0]
 80004ea:	4611      	mov	r1, r2
 80004ec:	4618      	mov	r0, r3
 80004ee:	f003 f95d 	bl	80037ac <HAL_TIM_PWM_Start>
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000034 	.word	0x20000034
 8000500:	20000040 	.word	0x20000040

08000504 <motorB_init>:
	HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_RESET);
}

// q2
void motorB_init(TIM_HandleTypeDef *tim, uint32_t tim_channel)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	6039      	str	r1, [r7, #0]
	timB = tim;
 800050e:	4a09      	ldr	r2, [pc, #36]	; (8000534 <motorB_init+0x30>)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	6013      	str	r3, [r2, #0]
	tim_channelB = tim_channel;
 8000514:	4a08      	ldr	r2, [pc, #32]	; (8000538 <motorB_init+0x34>)
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(timB, tim_channelB);
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <motorB_init+0x30>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a06      	ldr	r2, [pc, #24]	; (8000538 <motorB_init+0x34>)
 8000520:	6812      	ldr	r2, [r2, #0]
 8000522:	4611      	mov	r1, r2
 8000524:	4618      	mov	r0, r3
 8000526:	f003 f941 	bl	80037ac <HAL_TIM_PWM_Start>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000038 	.word	0x20000038
 8000538:	20000044 	.word	0x20000044

0800053c <servo_init>:
	HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_RESET);
}

// q3
void servo_init(TIM_HandleTypeDef *tim, uint32_t channel)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
	timServo = tim;
 8000546:	4a26      	ldr	r2, [pc, #152]	; (80005e0 <servo_init+0xa4>)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	6013      	str	r3, [r2, #0]
	tim_channelServo = channel;
 800054c:	4a25      	ldr	r2, [pc, #148]	; (80005e4 <servo_init+0xa8>)
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(timServo, tim_channelServo);
 8000552:	4b23      	ldr	r3, [pc, #140]	; (80005e0 <servo_init+0xa4>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a23      	ldr	r2, [pc, #140]	; (80005e4 <servo_init+0xa8>)
 8000558:	6812      	ldr	r2, [r2, #0]
 800055a:	4611      	mov	r1, r2
 800055c:	4618      	mov	r0, r3
 800055e:	f003 f925 	bl	80037ac <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(timServo, tim_channelServo, 0);
 8000562:	4b20      	ldr	r3, [pc, #128]	; (80005e4 <servo_init+0xa8>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d105      	bne.n	8000576 <servo_init+0x3a>
 800056a:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <servo_init+0xa4>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2200      	movs	r2, #0
 8000572:	635a      	str	r2, [r3, #52]	; 0x34
 8000574:	e02c      	b.n	80005d0 <servo_init+0x94>
 8000576:	4b1b      	ldr	r3, [pc, #108]	; (80005e4 <servo_init+0xa8>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2b04      	cmp	r3, #4
 800057c:	d105      	bne.n	800058a <servo_init+0x4e>
 800057e:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <servo_init+0xa4>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	2300      	movs	r3, #0
 8000586:	6393      	str	r3, [r2, #56]	; 0x38
 8000588:	e022      	b.n	80005d0 <servo_init+0x94>
 800058a:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <servo_init+0xa8>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b08      	cmp	r3, #8
 8000590:	d105      	bne.n	800059e <servo_init+0x62>
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <servo_init+0xa4>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	2300      	movs	r3, #0
 800059a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800059c:	e018      	b.n	80005d0 <servo_init+0x94>
 800059e:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <servo_init+0xa8>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b0c      	cmp	r3, #12
 80005a4:	d105      	bne.n	80005b2 <servo_init+0x76>
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <servo_init+0xa4>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	2300      	movs	r3, #0
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	e00e      	b.n	80005d0 <servo_init+0x94>
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <servo_init+0xa8>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b10      	cmp	r3, #16
 80005b8:	d105      	bne.n	80005c6 <servo_init+0x8a>
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <servo_init+0xa4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	2300      	movs	r3, #0
 80005c2:	6593      	str	r3, [r2, #88]	; 0x58
 80005c4:	e004      	b.n	80005d0 <servo_init+0x94>
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <servo_init+0xa4>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	2300      	movs	r3, #0
 80005ce:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(1000);
 80005d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d4:	f001 f850 	bl	8001678 <HAL_Delay>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	2000003c 	.word	0x2000003c
 80005e4:	20000048 	.word	0x20000048

080005e8 <servo_move>:

void servo_move(uint16_t angel, MotorDirection dir)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	460a      	mov	r2, r1
 80005f2:	80fb      	strh	r3, [r7, #6]
 80005f4:	4613      	mov	r3, r2
 80005f6:	717b      	strb	r3, [r7, #5]
	int pwm;
	if(angel > MAX_ANGEL){
 80005f8:	88fb      	ldrh	r3, [r7, #6]
 80005fa:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80005fe:	d902      	bls.n	8000606 <servo_move+0x1e>
		angel = MAX_ANGEL;
 8000600:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000604:	80fb      	strh	r3, [r7, #6]
	}
	else if(angel < MIN_ANGEL){
		angel = MIN_ANGEL;
	}

	if(dir){
 8000606:	797b      	ldrb	r3, [r7, #5]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d00e      	beq.n	800062a <servo_move+0x42>
		pwm = PWM_MIN + ((angel - MIN_ANGEL) * STEP) / 1000;
 800060c:	88fb      	ldrh	r3, [r7, #6]
 800060e:	f240 4257 	movw	r2, #1111	; 0x457
 8000612:	fb02 f303 	mul.w	r3, r2, r3
 8000616:	4a33      	ldr	r2, [pc, #204]	; (80006e4 <servo_move+0xfc>)
 8000618:	fb82 1203 	smull	r1, r2, r2, r3
 800061c:	1192      	asrs	r2, r2, #6
 800061e:	17db      	asrs	r3, r3, #31
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	e00d      	b.n	8000646 <servo_move+0x5e>
	}
	else{
		pwm = PWM_MAX - ((angel - MIN_ANGEL) * STEP) / 1000;
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	f240 4257 	movw	r2, #1111	; 0x457
 8000630:	fb02 f303 	mul.w	r3, r2, r3
 8000634:	4a2b      	ldr	r2, [pc, #172]	; (80006e4 <servo_move+0xfc>)
 8000636:	fb82 1203 	smull	r1, r2, r2, r3
 800063a:	1192      	asrs	r2, r2, #6
 800063c:	17db      	asrs	r3, r3, #31
 800063e:	1a9b      	subs	r3, r3, r2
 8000640:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000644:	60fb      	str	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(timServo, tim_channelServo, pwm+50);
 8000646:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <servo_move+0x100>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d107      	bne.n	800065e <servo_move+0x76>
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000654:	4b25      	ldr	r3, [pc, #148]	; (80006ec <servo_move+0x104>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800065c:	e03b      	b.n	80006d6 <servo_move+0xee>
	__HAL_TIM_SET_COMPARE(timServo, tim_channelServo, pwm+50);
 800065e:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <servo_move+0x100>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b04      	cmp	r3, #4
 8000664:	d108      	bne.n	8000678 <servo_move+0x90>
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f103 0132 	add.w	r1, r3, #50	; 0x32
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <servo_move+0x104>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	460b      	mov	r3, r1
 8000674:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000676:	e02e      	b.n	80006d6 <servo_move+0xee>
	__HAL_TIM_SET_COMPARE(timServo, tim_channelServo, pwm+50);
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <servo_move+0x100>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b08      	cmp	r3, #8
 800067e:	d108      	bne.n	8000692 <servo_move+0xaa>
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f103 0132 	add.w	r1, r3, #50	; 0x32
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <servo_move+0x104>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	460b      	mov	r3, r1
 800068e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000690:	e021      	b.n	80006d6 <servo_move+0xee>
	__HAL_TIM_SET_COMPARE(timServo, tim_channelServo, pwm+50);
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <servo_move+0x100>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2b0c      	cmp	r3, #12
 8000698:	d108      	bne.n	80006ac <servo_move+0xc4>
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	f103 0132 	add.w	r1, r3, #50	; 0x32
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <servo_move+0x104>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	460b      	mov	r3, r1
 80006a8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006aa:	e014      	b.n	80006d6 <servo_move+0xee>
	__HAL_TIM_SET_COMPARE(timServo, tim_channelServo, pwm+50);
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <servo_move+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b10      	cmp	r3, #16
 80006b2:	d108      	bne.n	80006c6 <servo_move+0xde>
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f103 0132 	add.w	r1, r3, #50	; 0x32
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <servo_move+0x104>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	460b      	mov	r3, r1
 80006c2:	6593      	str	r3, [r2, #88]	; 0x58
}
 80006c4:	e007      	b.n	80006d6 <servo_move+0xee>
	__HAL_TIM_SET_COMPARE(timServo, tim_channelServo, pwm+50);
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	f103 0132 	add.w	r1, r3, #50	; 0x32
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <servo_move+0x104>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	460b      	mov	r3, r1
 80006d4:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80006d6:	bf00      	nop
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	10624dd3 	.word	0x10624dd3
 80006e8:	20000048 	.word	0x20000048
 80006ec:	2000003c 	.word	0x2000003c

080006f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_DMA_Init+0x48>)
 80006f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006fa:	4a0f      	ldr	r2, [pc, #60]	; (8000738 <MX_DMA_Init+0x48>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6493      	str	r3, [r2, #72]	; 0x48
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <MX_DMA_Init+0x48>)
 8000704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2100      	movs	r1, #0
 8000712:	2010      	movs	r0, #16
 8000714:	f001 f8af 	bl	8001876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000718:	2010      	movs	r0, #16
 800071a:	f001 f8c8 	bl	80018ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2100      	movs	r1, #0
 8000722:	2011      	movs	r0, #17
 8000724:	f001 f8a7 	bl	8001876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000728:	2011      	movs	r0, #17
 800072a:	f001 f8c0 	bl	80018ae <HAL_NVIC_EnableIRQ>

}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000

0800073c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000752:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <MX_GPIO_Init+0xc0>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	4a29      	ldr	r2, [pc, #164]	; (80007fc <MX_GPIO_Init+0xc0>)
 8000758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800075c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075e:	4b27      	ldr	r3, [pc, #156]	; (80007fc <MX_GPIO_Init+0xc0>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b24      	ldr	r3, [pc, #144]	; (80007fc <MX_GPIO_Init+0xc0>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4a23      	ldr	r2, [pc, #140]	; (80007fc <MX_GPIO_Init+0xc0>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4b21      	ldr	r3, [pc, #132]	; (80007fc <MX_GPIO_Init+0xc0>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000782:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <MX_GPIO_Init+0xc0>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a1d      	ldr	r2, [pc, #116]	; (80007fc <MX_GPIO_Init+0xc0>)
 8000788:	f043 0310 	orr.w	r3, r3, #16
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_GPIO_Init+0xc0>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0310 	and.w	r3, r3, #16
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079a:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_GPIO_Init+0xc0>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	4a17      	ldr	r2, [pc, #92]	; (80007fc <MX_GPIO_Init+0xc0>)
 80007a0:	f043 0308 	orr.w	r3, r3, #8
 80007a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_GPIO_Init+0xc0>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	f003 0308 	and.w	r3, r3, #8
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_GPIO_Init+0xc0>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	4a11      	ldr	r2, [pc, #68]	; (80007fc <MX_GPIO_Init+0xc0>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_GPIO_Init+0xc0>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AIN2_Pin|AIN1_Pin|BIN2_Pin|BIN1_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 80007d0:	480b      	ldr	r0, [pc, #44]	; (8000800 <MX_GPIO_Init+0xc4>)
 80007d2:	f001 fc17 	bl	8002004 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN2_Pin|BIN1_Pin;
 80007d6:	f44f 4334 	mov.w	r3, #46080	; 0xb400
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_GPIO_Init+0xc4>)
 80007f0:	f001 fa5e 	bl	8001cb0 <HAL_GPIO_Init>

}
 80007f4:	bf00      	nop
 80007f6:	3728      	adds	r7, #40	; 0x28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40021000 	.word	0x40021000
 8000800:	48001000 	.word	0x48001000

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000808:	f000 feba 	bl	8001580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080c:	f000 f8b4 	bl	8000978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000810:	f7ff ff94 	bl	800073c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000814:	f000 fa2e 	bl	8000c74 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000818:	f000 fac6 	bl	8000da8 <MX_TIM2_Init>
  MX_TIM15_Init();
 800081c:	f000 fba6 	bl	8000f6c <MX_TIM15_Init>
  MX_DMA_Init();
 8000820:	f7ff ff66 	bl	80006f0 <MX_DMA_Init>
  MX_TIM4_Init();
 8000824:	f000 fb14 	bl	8000e50 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000828:	f000 fd6e 	bl	8001308 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800082c:	f000 fb66 	bl	8000efc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //q1
 8000830:	213c      	movs	r1, #60	; 0x3c
 8000832:	4841      	ldr	r0, [pc, #260]	; (8000938 <main+0x134>)
 8000834:	f003 f966 	bl	8003b04 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //q2
 8000838:	213c      	movs	r1, #60	; 0x3c
 800083a:	4840      	ldr	r0, [pc, #256]	; (800093c <main+0x138>)
 800083c:	f003 f962 	bl	8003b04 <HAL_TIM_Encoder_Start>
  servo_init(&htim15, TIM_CHANNEL_1);
 8000840:	2100      	movs	r1, #0
 8000842:	483f      	ldr	r0, [pc, #252]	; (8000940 <main+0x13c>)
 8000844:	f7ff fe7a 	bl	800053c <servo_init>
  motorA_init(&htim1, TIM_CHANNEL_2);
 8000848:	2104      	movs	r1, #4
 800084a:	483e      	ldr	r0, [pc, #248]	; (8000944 <main+0x140>)
 800084c:	f7ff fe3e 	bl	80004cc <motorA_init>
  motorB_init(&htim1, TIM_CHANNEL_4);
 8000850:	210c      	movs	r1, #12
 8000852:	483c      	ldr	r0, [pc, #240]	; (8000944 <main+0x140>)
 8000854:	f7ff fe56 	bl	8000504 <motorB_init>
  pid_init(pid1, kp, ki, kd); // limit jako ostatni argument?
 8000858:	4b3b      	ldr	r3, [pc, #236]	; (8000948 <main+0x144>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a3b      	ldr	r2, [pc, #236]	; (800094c <main+0x148>)
 800085e:	edd2 7a00 	vldr	s15, [r2]
 8000862:	4a3b      	ldr	r2, [pc, #236]	; (8000950 <main+0x14c>)
 8000864:	ed92 7a00 	vldr	s14, [r2]
 8000868:	4a3a      	ldr	r2, [pc, #232]	; (8000954 <main+0x150>)
 800086a:	edd2 6a00 	vldr	s13, [r2]
 800086e:	eeb0 1a66 	vmov.f32	s2, s13
 8000872:	eef0 0a47 	vmov.f32	s1, s14
 8000876:	eeb0 0a67 	vmov.f32	s0, s15
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f8d3 	bl	8000a26 <pid_init>
  pid_init(pid2, kp, ki, kd);
 8000880:	4b35      	ldr	r3, [pc, #212]	; (8000958 <main+0x154>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a31      	ldr	r2, [pc, #196]	; (800094c <main+0x148>)
 8000886:	edd2 7a00 	vldr	s15, [r2]
 800088a:	4a31      	ldr	r2, [pc, #196]	; (8000950 <main+0x14c>)
 800088c:	ed92 7a00 	vldr	s14, [r2]
 8000890:	4a30      	ldr	r2, [pc, #192]	; (8000954 <main+0x150>)
 8000892:	edd2 6a00 	vldr	s13, [r2]
 8000896:	eeb0 1a66 	vmov.f32	s2, s13
 800089a:	eef0 0a47 	vmov.f32	s1, s14
 800089e:	eeb0 0a67 	vmov.f32	s0, s15
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f8bf 	bl	8000a26 <pid_init>

  servo_move(450, 1);
 80008a8:	2101      	movs	r1, #1
 80008aa:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80008ae:	f7ff fe9b 	bl	80005e8 <servo_move>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(!moveFlag){
 80008b2:	4b2a      	ldr	r3, [pc, #168]	; (800095c <main+0x158>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d112      	bne.n	80008e0 <main+0xdc>
		  enc_pos1 = TIM2->CNT;
 80008ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b27      	ldr	r3, [pc, #156]	; (8000960 <main+0x15c>)
 80008c4:	601a      	str	r2, [r3, #0]
		  enc_pos2 = TIM4->CNT;
 80008c6:	4b27      	ldr	r3, [pc, #156]	; (8000964 <main+0x160>)
 80008c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ca:	461a      	mov	r2, r3
 80008cc:	4b26      	ldr	r3, [pc, #152]	; (8000968 <main+0x164>)
 80008ce:	601a      	str	r2, [r3, #0]
		  u1 = 0;
 80008d0:	4b26      	ldr	r3, [pc, #152]	; (800096c <main+0x168>)
 80008d2:	f04f 0200 	mov.w	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
		  u2 = 0;
 80008d8:	4b25      	ldr	r3, [pc, #148]	; (8000970 <main+0x16c>)
 80008da:	f04f 0200 	mov.w	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
	  }
	  if(moveFlag){
 80008e0:	4b1e      	ldr	r3, [pc, #120]	; (800095c <main+0x158>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d0e4      	beq.n	80008b2 <main+0xae>
		  u1 = pid_calculate(pid1,enc_pos1+Pos.q1,(TIM2->CNT));
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <main+0x144>)
 80008ea:	6818      	ldr	r0, [r3, #0]
 80008ec:	4b21      	ldr	r3, [pc, #132]	; (8000974 <main+0x170>)
 80008ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008f2:	461a      	mov	r2, r3
 80008f4:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <main+0x15c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4413      	add	r3, r2
 80008fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000900:	4619      	mov	r1, r3
 8000902:	f000 f8af 	bl	8000a64 <pid_calculate>
 8000906:	eef0 7a40 	vmov.f32	s15, s0
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <main+0x168>)
 800090c:	edc3 7a00 	vstr	s15, [r3]
		  u2 = pid_calculate(pid2, enc_pos2+Pos.q2, (TIM4->CNT));
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <main+0x154>)
 8000912:	6818      	ldr	r0, [r3, #0]
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <main+0x170>)
 8000916:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800091a:	461a      	mov	r2, r3
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <main+0x164>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4413      	add	r3, r2
 8000922:	4a10      	ldr	r2, [pc, #64]	; (8000964 <main+0x160>)
 8000924:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000926:	4619      	mov	r1, r3
 8000928:	f000 f89c 	bl	8000a64 <pid_calculate>
 800092c:	eef0 7a40 	vmov.f32	s15, s0
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <main+0x16c>)
 8000932:	edc3 7a00 	vstr	s15, [r3]
	  if(!moveFlag){
 8000936:	e7bc      	b.n	80008b2 <main+0xae>
 8000938:	200000c0 	.word	0x200000c0
 800093c:	2000010c 	.word	0x2000010c
 8000940:	200001a4 	.word	0x200001a4
 8000944:	20000074 	.word	0x20000074
 8000948:	20000060 	.word	0x20000060
 800094c:	20000000 	.word	0x20000000
 8000950:	20000004 	.word	0x20000004
 8000954:	20000008 	.word	0x20000008
 8000958:	20000064 	.word	0x20000064
 800095c:	2000004c 	.word	0x2000004c
 8000960:	20000058 	.word	0x20000058
 8000964:	40000800 	.word	0x40000800
 8000968:	2000005c 	.word	0x2000005c
 800096c:	20000050 	.word	0x20000050
 8000970:	20000054 	.word	0x20000054
 8000974:	20000068 	.word	0x20000068

08000978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b096      	sub	sp, #88	; 0x58
 800097c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	2244      	movs	r2, #68	; 0x44
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f005 f8f2 	bl	8005b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098c:	463b      	mov	r3, r7
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800099a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800099e:	f001 fb57 	bl	8002050 <HAL_PWREx_ControlVoltageScaling>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009a8:	f000 f838 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009ac:	2310      	movs	r3, #16
 80009ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009b0:	2301      	movs	r3, #1
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009b8:	2360      	movs	r3, #96	; 0x60
 80009ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009bc:	2302      	movs	r3, #2
 80009be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009c0:	2301      	movs	r3, #1
 80009c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009c4:	2301      	movs	r3, #1
 80009c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80009c8:	2328      	movs	r3, #40	; 0x28
 80009ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009cc:	2307      	movs	r3, #7
 80009ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 fb8d 	bl	80020fc <HAL_RCC_OscConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x74>
  {
    Error_Handler();
 80009e8:	f000 f818 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ec:	230f      	movs	r3, #15
 80009ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f0:	2303      	movs	r3, #3
 80009f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a00:	463b      	mov	r3, r7
 8000a02:	2104      	movs	r1, #4
 8000a04:	4618      	mov	r0, r3
 8000a06:	f001 ff61 	bl	80028cc <HAL_RCC_ClockConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a10:	f000 f804 	bl	8000a1c <Error_Handler>
  }
}
 8000a14:	bf00      	nop
 8000a16:	3758      	adds	r7, #88	; 0x58
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <Error_Handler+0x8>

08000a26 <pid_init>:
#include "pid.h"

#define ERR_TOTAL_MAX 255

void pid_init(PidStruct *pid, float kp, float ki, float kd)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b085      	sub	sp, #20
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	ed87 0a02 	vstr	s0, [r7, #8]
 8000a32:	edc7 0a01 	vstr	s1, [r7, #4]
 8000a36:	ed87 1a00 	vstr	s2, [r7]
	pid->previous_error = 0;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
	pid->total_error = 0;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]

	pid->kp = kp;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	68ba      	ldr	r2, [r7, #8]
 8000a4a:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	683a      	ldr	r2, [r7, #0]
 8000a56:	609a      	str	r2, [r3, #8]

}
 8000a58:	bf00      	nop
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <pid_calculate>:

// pid
// u = kp * e + ki * total_e + kd * (e - e_previous);
float pid_calculate(PidStruct *pid, int desire, int current)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b089      	sub	sp, #36	; 0x24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
	float p,i,d;

	int error = desire - current;
 8000a70:	68ba      	ldr	r2, [r7, #8]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	61fb      	str	r3, [r7, #28]
	pid->total_error += error;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	691a      	ldr	r2, [r3, #16]
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	441a      	add	r2, r3
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	611a      	str	r2, [r3, #16]



	if(pid->total_error > ERR_TOTAL_MAX){
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	691b      	ldr	r3, [r3, #16]
 8000a88:	2bff      	cmp	r3, #255	; 0xff
 8000a8a:	dd03      	ble.n	8000a94 <pid_calculate+0x30>
		pid->total_error = ERR_TOTAL_MAX;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	22ff      	movs	r2, #255	; 0xff
 8000a90:	611a      	str	r2, [r3, #16]
 8000a92:	e008      	b.n	8000aa6 <pid_calculate+0x42>
	}else if(pid->total_error < -ERR_TOTAL_MAX){
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	691b      	ldr	r3, [r3, #16]
 8000a98:	f113 0fff 	cmn.w	r3, #255	; 0xff
 8000a9c:	da03      	bge.n	8000aa6 <pid_calculate+0x42>
		pid->total_error = -ERR_TOTAL_MAX;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f06f 02fe 	mvn.w	r2, #254	; 0xfe
 8000aa4:	611a      	str	r2, [r3, #16]
	}

	p = (float)(pid->kp * error);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	ed93 7a00 	vldr	s14, [r3]
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	ee07 3a90 	vmov	s15, r3
 8000ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aba:	edc7 7a06 	vstr	s15, [r7, #24]
	i = (float)(pid->ki * pid->total_error);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	691b      	ldr	r3, [r3, #16]
 8000ac8:	ee07 3a90 	vmov	s15, r3
 8000acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ad4:	edc7 7a05 	vstr	s15, [r7, #20]
	d = (float)(pid->kd * (error - pid->previous_error));
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	ed93 7a02 	vldr	s14, [r3, #8]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	69fa      	ldr	r2, [r7, #28]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	ee07 3a90 	vmov	s15, r3
 8000aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000af2:	edc7 7a04 	vstr	s15, [r7, #16]

	pid->previous_error = error;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	69fa      	ldr	r2, [r7, #28]
 8000afa:	60da      	str	r2, [r3, #12]

	return p+i+d;
 8000afc:	ed97 7a06 	vldr	s14, [r7, #24]
 8000b00:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b08:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000b10:	eeb0 0a67 	vmov.f32	s0, s15
 8000b14:	3724      	adds	r7, #36	; 0x24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <HAL_MspInit+0x44>)
 8000b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <HAL_MspInit+0x44>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6613      	str	r3, [r2, #96]	; 0x60
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <HAL_MspInit+0x44>)
 8000b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <HAL_MspInit+0x44>)
 8000b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b42:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <HAL_MspInit+0x44>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b48:	6593      	str	r3, [r2, #88]	; 0x58
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_MspInit+0x44>)
 8000b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40021000 	.word	0x40021000

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <NMI_Handler+0x4>

08000b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb4:	f000 fd40 	bl	8001638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <DMA1_Channel6_IRQHandler+0x10>)
 8000bc2:	f000 ffc6 	bl	8001b52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000274 	.word	0x20000274

08000bd0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <DMA1_Channel7_IRQHandler+0x10>)
 8000bd6:	f000 ffbc 	bl	8001b52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200002bc 	.word	0x200002bc

08000be4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000be8:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8000bea:	f003 f819 	bl	8003c20 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8000bee:	4803      	ldr	r0, [pc, #12]	; (8000bfc <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8000bf0:	f003 f816 	bl	8003c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000074 	.word	0x20000074
 8000bfc:	200001a4 	.word	0x200001a4

08000c00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <TIM2_IRQHandler+0x10>)
 8000c06:	f003 f80b 	bl	8003c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200000c0 	.word	0x200000c0

08000c14 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <TIM4_IRQHandler+0x10>)
 8000c1a:	f003 f801 	bl	8003c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000010c 	.word	0x2000010c

08000c28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <USART2_IRQHandler+0x10>)
 8000c2e:	f003 ff65 	bl	8004afc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200001f0 	.word	0x200001f0

08000c3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c40:	4802      	ldr	r0, [pc, #8]	; (8000c4c <TIM6_DAC_IRQHandler+0x10>)
 8000c42:	f002 ffed 	bl	8003c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000158 	.word	0x20000158

08000c50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <SystemInit+0x20>)
 8000c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5a:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <SystemInit+0x20>)
 8000c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b096      	sub	sp, #88	; 0x58
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]
 8000c96:	615a      	str	r2, [r3, #20]
 8000c98:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	222c      	movs	r2, #44	; 0x2c
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f004 ff65 	bl	8005b70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ca6:	4b3e      	ldr	r3, [pc, #248]	; (8000da0 <MX_TIM1_Init+0x12c>)
 8000ca8:	4a3e      	ldr	r2, [pc, #248]	; (8000da4 <MX_TIM1_Init+0x130>)
 8000caa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 39;
 8000cac:	4b3c      	ldr	r3, [pc, #240]	; (8000da0 <MX_TIM1_Init+0x12c>)
 8000cae:	2227      	movs	r2, #39	; 0x27
 8000cb0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb2:	4b3b      	ldr	r3, [pc, #236]	; (8000da0 <MX_TIM1_Init+0x12c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000cb8:	4b39      	ldr	r3, [pc, #228]	; (8000da0 <MX_TIM1_Init+0x12c>)
 8000cba:	2263      	movs	r2, #99	; 0x63
 8000cbc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cbe:	4b38      	ldr	r3, [pc, #224]	; (8000da0 <MX_TIM1_Init+0x12c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cc4:	4b36      	ldr	r3, [pc, #216]	; (8000da0 <MX_TIM1_Init+0x12c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cca:	4b35      	ldr	r3, [pc, #212]	; (8000da0 <MX_TIM1_Init+0x12c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cd0:	4833      	ldr	r0, [pc, #204]	; (8000da0 <MX_TIM1_Init+0x12c>)
 8000cd2:	f002 fd14 	bl	80036fe <HAL_TIM_PWM_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000cdc:	f7ff fe9e 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	482b      	ldr	r0, [pc, #172]	; (8000da0 <MX_TIM1_Init+0x12c>)
 8000cf4:	f003 fd90 	bl	8004818 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000cfe:	f7ff fe8d 	bl	8000a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d02:	2360      	movs	r3, #96	; 0x60
 8000d04:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d16:	2300      	movs	r3, #0
 8000d18:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d22:	2204      	movs	r2, #4
 8000d24:	4619      	mov	r1, r3
 8000d26:	481e      	ldr	r0, [pc, #120]	; (8000da0 <MX_TIM1_Init+0x12c>)
 8000d28:	f003 f89a 	bl	8003e60 <HAL_TIM_PWM_ConfigChannel>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000d32:	f7ff fe73 	bl	8000a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4818      	ldr	r0, [pc, #96]	; (8000da0 <MX_TIM1_Init+0x12c>)
 8000d40:	f003 f88e 	bl	8003e60 <HAL_TIM_PWM_ConfigChannel>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000d4a:	f7ff fe67 	bl	8000a1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d66:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	4619      	mov	r1, r3
 8000d82:	4807      	ldr	r0, [pc, #28]	; (8000da0 <MX_TIM1_Init+0x12c>)
 8000d84:	f003 fdd0 	bl	8004928 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000d8e:	f7ff fe45 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d92:	4803      	ldr	r0, [pc, #12]	; (8000da0 <MX_TIM1_Init+0x12c>)
 8000d94:	f000 fa5a 	bl	800124c <HAL_TIM_MspPostInit>

}
 8000d98:	bf00      	nop
 8000d9a:	3758      	adds	r7, #88	; 0x58
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000074 	.word	0x20000074
 8000da4:	40012c00 	.word	0x40012c00

08000da8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	; 0x30
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	2224      	movs	r2, #36	; 0x24
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f004 feda 	bl	8005b70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dc6:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <MX_TIM2_Init+0xa4>)
 8000dc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dcc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000dce:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <MX_TIM2_Init+0xa4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <MX_TIM2_Init+0xa4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000dda:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <MX_TIM2_Init+0xa4>)
 8000ddc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000de0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de2:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <MX_TIM2_Init+0xa4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de8:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <MX_TIM2_Init+0xa4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000dee:	2303      	movs	r3, #3
 8000df0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000df6:	2301      	movs	r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000dfe:	230f      	movs	r3, #15
 8000e00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e06:	2301      	movs	r3, #1
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000e0e:	230f      	movs	r3, #15
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000e12:	f107 030c 	add.w	r3, r7, #12
 8000e16:	4619      	mov	r1, r3
 8000e18:	480c      	ldr	r0, [pc, #48]	; (8000e4c <MX_TIM2_Init+0xa4>)
 8000e1a:	f002 fdcd 	bl	80039b8 <HAL_TIM_Encoder_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000e24:	f7ff fdfa 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e30:	463b      	mov	r3, r7
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_TIM2_Init+0xa4>)
 8000e36:	f003 fcef 	bl	8004818 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000e40:	f7ff fdec 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	3730      	adds	r7, #48	; 0x30
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	200000c0 	.word	0x200000c0

08000e50 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08c      	sub	sp, #48	; 0x30
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	2224      	movs	r2, #36	; 0x24
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f004 fe86 	bl	8005b70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e64:	463b      	mov	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e6e:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <MX_TIM4_Init+0xa4>)
 8000e70:	4a21      	ldr	r2, [pc, #132]	; (8000ef8 <MX_TIM4_Init+0xa8>)
 8000e72:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e74:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <MX_TIM4_Init+0xa4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <MX_TIM4_Init+0xa4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000e80:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <MX_TIM4_Init+0xa4>)
 8000e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e86:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <MX_TIM4_Init+0xa4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <MX_TIM4_Init+0xa4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e94:	2303      	movs	r3, #3
 8000e96:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000eac:	2301      	movs	r3, #1
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000eb4:	230f      	movs	r3, #15
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <MX_TIM4_Init+0xa4>)
 8000ec0:	f002 fd7a 	bl	80039b8 <HAL_TIM_Encoder_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000eca:	f7ff fda7 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <MX_TIM4_Init+0xa4>)
 8000edc:	f003 fc9c 	bl	8004818 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000ee6:	f7ff fd99 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	3730      	adds	r7, #48	; 0x30
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000010c 	.word	0x2000010c
 8000ef8:	40000800 	.word	0x40000800

08000efc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <MX_TIM6_Init+0x68>)
 8000f0e:	4a16      	ldr	r2, [pc, #88]	; (8000f68 <MX_TIM6_Init+0x6c>)
 8000f10:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_TIM6_Init+0x68>)
 8000f14:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f18:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1a:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_TIM6_Init+0x68>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000f20:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <MX_TIM6_Init+0x68>)
 8000f22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f26:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f28:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_TIM6_Init+0x68>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f2e:	480d      	ldr	r0, [pc, #52]	; (8000f64 <MX_TIM6_Init+0x68>)
 8000f30:	f002 fb8e 	bl	8003650 <HAL_TIM_Base_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000f3a:	f7ff fd6f 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4806      	ldr	r0, [pc, #24]	; (8000f64 <MX_TIM6_Init+0x68>)
 8000f4c:	f003 fc64 	bl	8004818 <HAL_TIMEx_MasterConfigSynchronization>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000f56:	f7ff fd61 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000158 	.word	0x20000158
 8000f68:	40001000 	.word	0x40001000

08000f6c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b096      	sub	sp, #88	; 0x58
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f72:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]
 8000f8e:	615a      	str	r2, [r3, #20]
 8000f90:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	222c      	movs	r2, #44	; 0x2c
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f004 fde9 	bl	8005b70 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000f9e:	4b34      	ldr	r3, [pc, #208]	; (8001070 <MX_TIM15_Init+0x104>)
 8000fa0:	4a34      	ldr	r2, [pc, #208]	; (8001074 <MX_TIM15_Init+0x108>)
 8000fa2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1919;
 8000fa4:	4b32      	ldr	r3, [pc, #200]	; (8001070 <MX_TIM15_Init+0x104>)
 8000fa6:	f240 727f 	movw	r2, #1919	; 0x77f
 8000faa:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fac:	4b30      	ldr	r3, [pc, #192]	; (8001070 <MX_TIM15_Init+0x104>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8000fb2:	4b2f      	ldr	r3, [pc, #188]	; (8001070 <MX_TIM15_Init+0x104>)
 8000fb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fb8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fba:	4b2d      	ldr	r3, [pc, #180]	; (8001070 <MX_TIM15_Init+0x104>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000fc0:	4b2b      	ldr	r3, [pc, #172]	; (8001070 <MX_TIM15_Init+0x104>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <MX_TIM15_Init+0x104>)
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000fcc:	4828      	ldr	r0, [pc, #160]	; (8001070 <MX_TIM15_Init+0x104>)
 8000fce:	f002 fb96 	bl	80036fe <HAL_TIM_PWM_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8000fd8:	f7ff fd20 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000fe4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4821      	ldr	r0, [pc, #132]	; (8001070 <MX_TIM15_Init+0x104>)
 8000fec:	f003 fc14 	bl	8004818 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8000ff6:	f7ff fd11 	bl	8000a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ffa:	2360      	movs	r3, #96	; 0x60
 8000ffc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50;
 8000ffe:	2332      	movs	r3, #50	; 0x32
 8001000:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001002:	2300      	movs	r3, #0
 8001004:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001006:	2300      	movs	r3, #0
 8001008:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800100e:	2300      	movs	r3, #0
 8001010:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001012:	2300      	movs	r3, #0
 8001014:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001016:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800101a:	2200      	movs	r2, #0
 800101c:	4619      	mov	r1, r3
 800101e:	4814      	ldr	r0, [pc, #80]	; (8001070 <MX_TIM15_Init+0x104>)
 8001020:	f002 ff1e 	bl	8003e60 <HAL_TIM_PWM_ConfigChannel>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 800102a:	f7ff fcf7 	bl	8000a1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001046:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	4619      	mov	r1, r3
 8001050:	4807      	ldr	r0, [pc, #28]	; (8001070 <MX_TIM15_Init+0x104>)
 8001052:	f003 fc69 	bl	8004928 <HAL_TIMEx_ConfigBreakDeadTime>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM15_Init+0xf4>
  {
    Error_Handler();
 800105c:	f7ff fcde 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <MX_TIM15_Init+0x104>)
 8001062:	f000 f8f3 	bl	800124c <HAL_TIM_MspPostInit>

}
 8001066:	bf00      	nop
 8001068:	3758      	adds	r7, #88	; 0x58
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200001a4 	.word	0x200001a4
 8001074:	40014000 	.word	0x40014000

08001078 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a1a      	ldr	r2, [pc, #104]	; (80010f0 <HAL_TIM_PWM_MspInit+0x78>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d114      	bne.n	80010b4 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <HAL_TIM_PWM_MspInit+0x7c>)
 800108c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108e:	4a19      	ldr	r2, [pc, #100]	; (80010f4 <HAL_TIM_PWM_MspInit+0x7c>)
 8001090:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001094:	6613      	str	r3, [r2, #96]	; 0x60
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <HAL_TIM_PWM_MspInit+0x7c>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	2018      	movs	r0, #24
 80010a8:	f000 fbe5 	bl	8001876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80010ac:	2018      	movs	r0, #24
 80010ae:	f000 fbfe 	bl	80018ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80010b2:	e018      	b.n	80010e6 <HAL_TIM_PWM_MspInit+0x6e>
  else if(tim_pwmHandle->Instance==TIM15)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0f      	ldr	r2, [pc, #60]	; (80010f8 <HAL_TIM_PWM_MspInit+0x80>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d113      	bne.n	80010e6 <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_TIM_PWM_MspInit+0x7c>)
 80010c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c2:	4a0c      	ldr	r2, [pc, #48]	; (80010f4 <HAL_TIM_PWM_MspInit+0x7c>)
 80010c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c8:	6613      	str	r3, [r2, #96]	; 0x60
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_TIM_PWM_MspInit+0x7c>)
 80010cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	2018      	movs	r0, #24
 80010dc:	f000 fbcb 	bl	8001876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80010e0:	2018      	movs	r0, #24
 80010e2:	f000 fbe4 	bl	80018ae <HAL_NVIC_EnableIRQ>
}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40012c00 	.word	0x40012c00
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40014000 	.word	0x40014000

080010fc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08c      	sub	sp, #48	; 0x30
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800111c:	d131      	bne.n	8001182 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800111e:	4b35      	ldr	r3, [pc, #212]	; (80011f4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001122:	4a34      	ldr	r2, [pc, #208]	; (80011f4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6593      	str	r3, [r2, #88]	; 0x58
 800112a:	4b32      	ldr	r3, [pc, #200]	; (80011f4 <HAL_TIM_Encoder_MspInit+0xf8>)
 800112c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	61bb      	str	r3, [r7, #24]
 8001134:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	4a2e      	ldr	r2, [pc, #184]	; (80011f4 <HAL_TIM_Encoder_MspInit+0xf8>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC2_A2_Pin|ENC2_B2_Pin;
 800114e:	2303      	movs	r3, #3
 8001150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800115e:	2301      	movs	r3, #1
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4619      	mov	r1, r3
 8001168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116c:	f000 fda0 	bl	8001cb0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2100      	movs	r1, #0
 8001174:	201c      	movs	r0, #28
 8001176:	f000 fb7e 	bl	8001876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800117a:	201c      	movs	r0, #28
 800117c:	f000 fb97 	bl	80018ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001180:	e034      	b.n	80011ec <HAL_TIM_Encoder_MspInit+0xf0>
  else if(tim_encoderHandle->Instance==TIM4)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a1c      	ldr	r2, [pc, #112]	; (80011f8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d12f      	bne.n	80011ec <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_TIM_Encoder_MspInit+0xf8>)
 800118e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001190:	4a18      	ldr	r2, [pc, #96]	; (80011f4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001192:	f043 0304 	orr.w	r3, r3, #4
 8001196:	6593      	str	r3, [r2, #88]	; 0x58
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <HAL_TIM_Encoder_MspInit+0xf8>)
 800119a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a4:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <HAL_TIM_Encoder_MspInit+0xf8>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <HAL_TIM_Encoder_MspInit+0xf8>)
 80011aa:	f043 0302 	orr.w	r3, r3, #2
 80011ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <HAL_TIM_Encoder_MspInit+0xf8>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC1_B1_Pin|ENC1_A1_Pin;
 80011bc:	23c0      	movs	r3, #192	; 0xc0
 80011be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011cc:	2302      	movs	r3, #2
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d0:	f107 031c 	add.w	r3, r7, #28
 80011d4:	4619      	mov	r1, r3
 80011d6:	4809      	ldr	r0, [pc, #36]	; (80011fc <HAL_TIM_Encoder_MspInit+0x100>)
 80011d8:	f000 fd6a 	bl	8001cb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2100      	movs	r1, #0
 80011e0:	201e      	movs	r0, #30
 80011e2:	f000 fb48 	bl	8001876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011e6:	201e      	movs	r0, #30
 80011e8:	f000 fb61 	bl	80018ae <HAL_NVIC_EnableIRQ>
}
 80011ec:	bf00      	nop
 80011ee:	3730      	adds	r7, #48	; 0x30
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40000800 	.word	0x40000800
 80011fc:	48000400 	.word	0x48000400

08001200 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0d      	ldr	r2, [pc, #52]	; (8001244 <HAL_TIM_Base_MspInit+0x44>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d113      	bne.n	800123a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <HAL_TIM_Base_MspInit+0x48>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001216:	4a0c      	ldr	r2, [pc, #48]	; (8001248 <HAL_TIM_Base_MspInit+0x48>)
 8001218:	f043 0310 	orr.w	r3, r3, #16
 800121c:	6593      	str	r3, [r2, #88]	; 0x58
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_TIM_Base_MspInit+0x48>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	2036      	movs	r0, #54	; 0x36
 8001230:	f000 fb21 	bl	8001876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001234:	2036      	movs	r0, #54	; 0x36
 8001236:	f000 fb3a 	bl	80018ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40001000 	.word	0x40001000
 8001248:	40021000 	.word	0x40021000

0800124c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a23      	ldr	r2, [pc, #140]	; (80012f8 <HAL_TIM_MspPostInit+0xac>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d11d      	bne.n	80012aa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800126e:	4b23      	ldr	r3, [pc, #140]	; (80012fc <HAL_TIM_MspPostInit+0xb0>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	4a22      	ldr	r2, [pc, #136]	; (80012fc <HAL_TIM_MspPostInit+0xb0>)
 8001274:	f043 0310 	orr.w	r3, r3, #16
 8001278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <HAL_TIM_MspPostInit+0xb0>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	f003 0310 	and.w	r3, r3, #16
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8001286:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800128a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001298:	2301      	movs	r3, #1
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	4817      	ldr	r0, [pc, #92]	; (8001300 <HAL_TIM_MspPostInit+0xb4>)
 80012a4:	f000 fd04 	bl	8001cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80012a8:	e021      	b.n	80012ee <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM15)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a15      	ldr	r2, [pc, #84]	; (8001304 <HAL_TIM_MspPostInit+0xb8>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d11c      	bne.n	80012ee <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_TIM_MspPostInit+0xb0>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b8:	4a10      	ldr	r2, [pc, #64]	; (80012fc <HAL_TIM_MspPostInit+0xb0>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c0:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <HAL_TIM_MspPostInit+0xb0>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 80012cc:	2304      	movs	r3, #4
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80012dc:	230e      	movs	r3, #14
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ea:	f000 fce1 	bl	8001cb0 <HAL_GPIO_Init>
}
 80012ee:	bf00      	nop
 80012f0:	3728      	adds	r7, #40	; 0x28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40012c00 	.word	0x40012c00
 80012fc:	40021000 	.word	0x40021000
 8001300:	48001000 	.word	0x48001000
 8001304:	40014000 	.word	0x40014000

08001308 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_USART2_UART_Init+0x58>)
 800130e:	4a15      	ldr	r2, [pc, #84]	; (8001364 <MX_USART2_UART_Init+0x5c>)
 8001310:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <MX_USART2_UART_Init+0x58>)
 8001314:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001318:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_USART2_UART_Init+0x58>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_USART2_UART_Init+0x58>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_USART2_UART_Init+0x58>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_USART2_UART_Init+0x58>)
 800132e:	220c      	movs	r2, #12
 8001330:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <MX_USART2_UART_Init+0x58>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_USART2_UART_Init+0x58>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <MX_USART2_UART_Init+0x58>)
 8001340:	2200      	movs	r2, #0
 8001342:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_USART2_UART_Init+0x58>)
 8001346:	2200      	movs	r2, #0
 8001348:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_USART2_UART_Init+0x58>)
 800134c:	f003 fb88 	bl	8004a60 <HAL_UART_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001356:	f7ff fb61 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200001f0 	.word	0x200001f0
 8001364:	40004400 	.word	0x40004400

08001368 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b0ac      	sub	sp, #176	; 0xb0
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2288      	movs	r2, #136	; 0x88
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f004 fbf1 	bl	8005b70 <memset>
  if(uartHandle->Instance==USART2)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a5f      	ldr	r2, [pc, #380]	; (8001510 <HAL_UART_MspInit+0x1a8>)
 8001394:	4293      	cmp	r3, r2
 8001396:	f040 80b7 	bne.w	8001508 <HAL_UART_MspInit+0x1a0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800139a:	2302      	movs	r3, #2
 800139c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800139e:	2300      	movs	r3, #0
 80013a0:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4618      	mov	r0, r3
 80013a8:	f001 fc96 	bl	8002cd8 <HAL_RCCEx_PeriphCLKConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013b2:	f7ff fb33 	bl	8000a1c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013b6:	4b57      	ldr	r3, [pc, #348]	; (8001514 <HAL_UART_MspInit+0x1ac>)
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	4a56      	ldr	r2, [pc, #344]	; (8001514 <HAL_UART_MspInit+0x1ac>)
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c0:	6593      	str	r3, [r2, #88]	; 0x58
 80013c2:	4b54      	ldr	r3, [pc, #336]	; (8001514 <HAL_UART_MspInit+0x1ac>)
 80013c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	4b51      	ldr	r3, [pc, #324]	; (8001514 <HAL_UART_MspInit+0x1ac>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	4a50      	ldr	r2, [pc, #320]	; (8001514 <HAL_UART_MspInit+0x1ac>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013da:	4b4e      	ldr	r3, [pc, #312]	; (8001514 <HAL_UART_MspInit+0x1ac>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e6:	4b4b      	ldr	r3, [pc, #300]	; (8001514 <HAL_UART_MspInit+0x1ac>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	4a4a      	ldr	r2, [pc, #296]	; (8001514 <HAL_UART_MspInit+0x1ac>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f2:	4b48      	ldr	r3, [pc, #288]	; (8001514 <HAL_UART_MspInit+0x1ac>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013fe:	2308      	movs	r3, #8
 8001400:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001410:	2303      	movs	r3, #3
 8001412:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001416:	2307      	movs	r3, #7
 8001418:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001420:	4619      	mov	r1, r3
 8001422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001426:	f000 fc43 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800142a:	2320      	movs	r3, #32
 800142c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001442:	2307      	movs	r3, #7
 8001444:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001448:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800144c:	4619      	mov	r1, r3
 800144e:	4832      	ldr	r0, [pc, #200]	; (8001518 <HAL_UART_MspInit+0x1b0>)
 8001450:	f000 fc2e 	bl	8001cb0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001454:	4b31      	ldr	r3, [pc, #196]	; (800151c <HAL_UART_MspInit+0x1b4>)
 8001456:	4a32      	ldr	r2, [pc, #200]	; (8001520 <HAL_UART_MspInit+0x1b8>)
 8001458:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800145a:	4b30      	ldr	r3, [pc, #192]	; (800151c <HAL_UART_MspInit+0x1b4>)
 800145c:	2202      	movs	r2, #2
 800145e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001460:	4b2e      	ldr	r3, [pc, #184]	; (800151c <HAL_UART_MspInit+0x1b4>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001466:	4b2d      	ldr	r3, [pc, #180]	; (800151c <HAL_UART_MspInit+0x1b4>)
 8001468:	2200      	movs	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800146c:	4b2b      	ldr	r3, [pc, #172]	; (800151c <HAL_UART_MspInit+0x1b4>)
 800146e:	2280      	movs	r2, #128	; 0x80
 8001470:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001472:	4b2a      	ldr	r3, [pc, #168]	; (800151c <HAL_UART_MspInit+0x1b4>)
 8001474:	2200      	movs	r2, #0
 8001476:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001478:	4b28      	ldr	r3, [pc, #160]	; (800151c <HAL_UART_MspInit+0x1b4>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800147e:	4b27      	ldr	r3, [pc, #156]	; (800151c <HAL_UART_MspInit+0x1b4>)
 8001480:	2200      	movs	r2, #0
 8001482:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001484:	4b25      	ldr	r3, [pc, #148]	; (800151c <HAL_UART_MspInit+0x1b4>)
 8001486:	2200      	movs	r2, #0
 8001488:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800148a:	4824      	ldr	r0, [pc, #144]	; (800151c <HAL_UART_MspInit+0x1b4>)
 800148c:	f000 fa2a 	bl	80018e4 <HAL_DMA_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 8001496:	f7ff fac1 	bl	8000a1c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a1f      	ldr	r2, [pc, #124]	; (800151c <HAL_UART_MspInit+0x1b4>)
 800149e:	671a      	str	r2, [r3, #112]	; 0x70
 80014a0:	4a1e      	ldr	r2, [pc, #120]	; (800151c <HAL_UART_MspInit+0x1b4>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80014a6:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <HAL_UART_MspInit+0x1bc>)
 80014a8:	4a1f      	ldr	r2, [pc, #124]	; (8001528 <HAL_UART_MspInit+0x1c0>)
 80014aa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80014ac:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <HAL_UART_MspInit+0x1bc>)
 80014ae:	2202      	movs	r2, #2
 80014b0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014b2:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <HAL_UART_MspInit+0x1bc>)
 80014b4:	2210      	movs	r2, #16
 80014b6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <HAL_UART_MspInit+0x1bc>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014be:	4b19      	ldr	r3, [pc, #100]	; (8001524 <HAL_UART_MspInit+0x1bc>)
 80014c0:	2280      	movs	r2, #128	; 0x80
 80014c2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014c4:	4b17      	ldr	r3, [pc, #92]	; (8001524 <HAL_UART_MspInit+0x1bc>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ca:	4b16      	ldr	r3, [pc, #88]	; (8001524 <HAL_UART_MspInit+0x1bc>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <HAL_UART_MspInit+0x1bc>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <HAL_UART_MspInit+0x1bc>)
 80014d8:	2200      	movs	r2, #0
 80014da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80014dc:	4811      	ldr	r0, [pc, #68]	; (8001524 <HAL_UART_MspInit+0x1bc>)
 80014de:	f000 fa01 	bl	80018e4 <HAL_DMA_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_UART_MspInit+0x184>
    {
      Error_Handler();
 80014e8:	f7ff fa98 	bl	8000a1c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <HAL_UART_MspInit+0x1bc>)
 80014f0:	66da      	str	r2, [r3, #108]	; 0x6c
 80014f2:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <HAL_UART_MspInit+0x1bc>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2100      	movs	r1, #0
 80014fc:	2026      	movs	r0, #38	; 0x26
 80014fe:	f000 f9ba 	bl	8001876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001502:	2026      	movs	r0, #38	; 0x26
 8001504:	f000 f9d3 	bl	80018ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001508:	bf00      	nop
 800150a:	37b0      	adds	r7, #176	; 0xb0
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40004400 	.word	0x40004400
 8001514:	40021000 	.word	0x40021000
 8001518:	48000c00 	.word	0x48000c00
 800151c:	20000274 	.word	0x20000274
 8001520:	4002006c 	.word	0x4002006c
 8001524:	200002bc 	.word	0x200002bc
 8001528:	40020080 	.word	0x40020080

0800152c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800152c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001564 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001530:	f7ff fb8e 	bl	8000c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001534:	480c      	ldr	r0, [pc, #48]	; (8001568 <LoopForever+0x6>)
  ldr r1, =_edata
 8001536:	490d      	ldr	r1, [pc, #52]	; (800156c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001538:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <LoopForever+0xe>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800153c:	e002      	b.n	8001544 <LoopCopyDataInit>

0800153e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001542:	3304      	adds	r3, #4

08001544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001548:	d3f9      	bcc.n	800153e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <LoopForever+0x12>)
  ldr r4, =_ebss
 800154c:	4c0a      	ldr	r4, [pc, #40]	; (8001578 <LoopForever+0x16>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001550:	e001      	b.n	8001556 <LoopFillZerobss>

08001552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001554:	3204      	adds	r2, #4

08001556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001558:	d3fb      	bcc.n	8001552 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800155a:	f004 fae5 	bl	8005b28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800155e:	f7ff f951 	bl	8000804 <main>

08001562 <LoopForever>:

LoopForever:
    b LoopForever
 8001562:	e7fe      	b.n	8001562 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001564:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800156c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001570:	08005bf0 	.word	0x08005bf0
  ldr r2, =_sbss
 8001574:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001578:	20000308 	.word	0x20000308

0800157c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC1_2_IRQHandler>
	...

08001580 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <HAL_Init+0x3c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <HAL_Init+0x3c>)
 8001590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001594:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001596:	2003      	movs	r0, #3
 8001598:	f000 f962 	bl	8001860 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800159c:	2000      	movs	r0, #0
 800159e:	f000 f80f 	bl	80015c0 <HAL_InitTick>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	71fb      	strb	r3, [r7, #7]
 80015ac:	e001      	b.n	80015b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015ae:	f7ff fab7 	bl	8000b20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015b2:	79fb      	ldrb	r3, [r7, #7]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40022000 	.word	0x40022000

080015c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <HAL_InitTick+0x6c>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d023      	beq.n	800161c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_InitTick+0x70>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <HAL_InitTick+0x6c>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f96d 	bl	80018ca <HAL_SYSTICK_Config>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10f      	bne.n	8001616 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	d809      	bhi.n	8001610 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015fc:	2200      	movs	r2, #0
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001604:	f000 f937 	bl	8001876 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001608:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <HAL_InitTick+0x74>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e007      	b.n	8001620 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	e004      	b.n	8001620 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	73fb      	strb	r3, [r7, #15]
 800161a:	e001      	b.n	8001620 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001620:	7bfb      	ldrb	r3, [r7, #15]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000014 	.word	0x20000014
 8001630:	2000000c 	.word	0x2000000c
 8001634:	20000010 	.word	0x20000010

08001638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_IncTick+0x20>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_IncTick+0x24>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4413      	add	r3, r2
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <HAL_IncTick+0x24>)
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000014 	.word	0x20000014
 800165c:	20000304 	.word	0x20000304

08001660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return uwTick;
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <HAL_GetTick+0x14>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000304 	.word	0x20000304

08001678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001680:	f7ff ffee 	bl	8001660 <HAL_GetTick>
 8001684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001690:	d005      	beq.n	800169e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <HAL_Delay+0x44>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4413      	add	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800169e:	bf00      	nop
 80016a0:	f7ff ffde 	bl	8001660 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d8f7      	bhi.n	80016a0 <HAL_Delay+0x28>
  {
  }
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000014 	.word	0x20000014

080016c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016dc:	4013      	ands	r3, r2
 80016de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f2:	4a04      	ldr	r2, [pc, #16]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	60d3      	str	r3, [r2, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <__NVIC_GetPriorityGrouping+0x18>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	f003 0307 	and.w	r3, r3, #7
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	2b00      	cmp	r3, #0
 8001734:	db0b      	blt.n	800174e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	f003 021f 	and.w	r2, r3, #31
 800173c:	4907      	ldr	r1, [pc, #28]	; (800175c <__NVIC_EnableIRQ+0x38>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	095b      	lsrs	r3, r3, #5
 8001744:	2001      	movs	r0, #1
 8001746:	fa00 f202 	lsl.w	r2, r0, r2
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000e100 	.word	0xe000e100

08001760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db0a      	blt.n	800178a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	490c      	ldr	r1, [pc, #48]	; (80017ac <__NVIC_SetPriority+0x4c>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	0112      	lsls	r2, r2, #4
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	440b      	add	r3, r1
 8001784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001788:	e00a      	b.n	80017a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4908      	ldr	r1, [pc, #32]	; (80017b0 <__NVIC_SetPriority+0x50>)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	3b04      	subs	r3, #4
 8001798:	0112      	lsls	r2, r2, #4
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	440b      	add	r3, r1
 800179e:	761a      	strb	r2, [r3, #24]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000e100 	.word	0xe000e100
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f1c3 0307 	rsb	r3, r3, #7
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	bf28      	it	cs
 80017d2:	2304      	movcs	r3, #4
 80017d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3304      	adds	r3, #4
 80017da:	2b06      	cmp	r3, #6
 80017dc:	d902      	bls.n	80017e4 <NVIC_EncodePriority+0x30>
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3b03      	subs	r3, #3
 80017e2:	e000      	b.n	80017e6 <NVIC_EncodePriority+0x32>
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43da      	mvns	r2, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	401a      	ands	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	43d9      	mvns	r1, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	4313      	orrs	r3, r2
         );
}
 800180e:	4618      	mov	r0, r3
 8001810:	3724      	adds	r7, #36	; 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800182c:	d301      	bcc.n	8001832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800182e:	2301      	movs	r3, #1
 8001830:	e00f      	b.n	8001852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001832:	4a0a      	ldr	r2, [pc, #40]	; (800185c <SysTick_Config+0x40>)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183a:	210f      	movs	r1, #15
 800183c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001840:	f7ff ff8e 	bl	8001760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <SysTick_Config+0x40>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184a:	4b04      	ldr	r3, [pc, #16]	; (800185c <SysTick_Config+0x40>)
 800184c:	2207      	movs	r2, #7
 800184e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	e000e010 	.word	0xe000e010

08001860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ff29 	bl	80016c0 <__NVIC_SetPriorityGrouping>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001888:	f7ff ff3e 	bl	8001708 <__NVIC_GetPriorityGrouping>
 800188c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	6978      	ldr	r0, [r7, #20]
 8001894:	f7ff ff8e 	bl	80017b4 <NVIC_EncodePriority>
 8001898:	4602      	mov	r2, r0
 800189a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff5d 	bl	8001760 <__NVIC_SetPriority>
}
 80018a6:	bf00      	nop
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff31 	bl	8001724 <__NVIC_EnableIRQ>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff ffa2 	bl	800181c <SysTick_Config>
 80018d8:	4603      	mov	r3, r0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e098      	b.n	8001a28 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	4b4d      	ldr	r3, [pc, #308]	; (8001a34 <HAL_DMA_Init+0x150>)
 80018fe:	429a      	cmp	r2, r3
 8001900:	d80f      	bhi.n	8001922 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	4b4b      	ldr	r3, [pc, #300]	; (8001a38 <HAL_DMA_Init+0x154>)
 800190a:	4413      	add	r3, r2
 800190c:	4a4b      	ldr	r2, [pc, #300]	; (8001a3c <HAL_DMA_Init+0x158>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	091b      	lsrs	r3, r3, #4
 8001914:	009a      	lsls	r2, r3, #2
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a48      	ldr	r2, [pc, #288]	; (8001a40 <HAL_DMA_Init+0x15c>)
 800191e:	641a      	str	r2, [r3, #64]	; 0x40
 8001920:	e00e      	b.n	8001940 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	4b46      	ldr	r3, [pc, #280]	; (8001a44 <HAL_DMA_Init+0x160>)
 800192a:	4413      	add	r3, r2
 800192c:	4a43      	ldr	r2, [pc, #268]	; (8001a3c <HAL_DMA_Init+0x158>)
 800192e:	fba2 2303 	umull	r2, r3, r2, r3
 8001932:	091b      	lsrs	r3, r3, #4
 8001934:	009a      	lsls	r2, r3, #2
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a42      	ldr	r2, [pc, #264]	; (8001a48 <HAL_DMA_Init+0x164>)
 800193e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2202      	movs	r2, #2
 8001944:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800195a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001964:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001970:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800197c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800199a:	d039      	beq.n	8001a10 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	4a27      	ldr	r2, [pc, #156]	; (8001a40 <HAL_DMA_Init+0x15c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d11a      	bne.n	80019dc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019a6:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <HAL_DMA_Init+0x168>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	f003 031c 	and.w	r3, r3, #28
 80019b2:	210f      	movs	r1, #15
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	4924      	ldr	r1, [pc, #144]	; (8001a4c <HAL_DMA_Init+0x168>)
 80019bc:	4013      	ands	r3, r2
 80019be:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019c0:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <HAL_DMA_Init+0x168>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6859      	ldr	r1, [r3, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019cc:	f003 031c 	and.w	r3, r3, #28
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	491d      	ldr	r1, [pc, #116]	; (8001a4c <HAL_DMA_Init+0x168>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]
 80019da:	e019      	b.n	8001a10 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019dc:	4b1c      	ldr	r3, [pc, #112]	; (8001a50 <HAL_DMA_Init+0x16c>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e4:	f003 031c 	and.w	r3, r3, #28
 80019e8:	210f      	movs	r1, #15
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	4917      	ldr	r1, [pc, #92]	; (8001a50 <HAL_DMA_Init+0x16c>)
 80019f2:	4013      	ands	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019f6:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <HAL_DMA_Init+0x16c>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6859      	ldr	r1, [r3, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f003 031c 	and.w	r3, r3, #28
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	4911      	ldr	r1, [pc, #68]	; (8001a50 <HAL_DMA_Init+0x16c>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	40020407 	.word	0x40020407
 8001a38:	bffdfff8 	.word	0xbffdfff8
 8001a3c:	cccccccd 	.word	0xcccccccd
 8001a40:	40020000 	.word	0x40020000
 8001a44:	bffdfbf8 	.word	0xbffdfbf8
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	400200a8 	.word	0x400200a8
 8001a50:	400204a8 	.word	0x400204a8

08001a54 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d008      	beq.n	8001a7e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2204      	movs	r2, #4
 8001a70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e022      	b.n	8001ac4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 020e 	bic.w	r2, r2, #14
 8001a8c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0201 	bic.w	r2, r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f003 021c 	and.w	r2, r3, #28
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	2101      	movs	r1, #1
 8001aac:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d005      	beq.n	8001af4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2204      	movs	r2, #4
 8001aec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	73fb      	strb	r3, [r7, #15]
 8001af2:	e029      	b.n	8001b48 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 020e 	bic.w	r2, r2, #14
 8001b02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0201 	bic.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b18:	f003 021c 	and.w	r2, r3, #28
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	2101      	movs	r1, #1
 8001b22:	fa01 f202 	lsl.w	r2, r1, r2
 8001b26:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	4798      	blx	r3
    }
  }
  return status;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b084      	sub	sp, #16
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	f003 031c 	and.w	r3, r3, #28
 8001b72:	2204      	movs	r2, #4
 8001b74:	409a      	lsls	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d026      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x7a>
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d021      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0320 	and.w	r3, r3, #32
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d107      	bne.n	8001ba6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0204 	bic.w	r2, r2, #4
 8001ba4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	f003 021c 	and.w	r2, r3, #28
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	2104      	movs	r1, #4
 8001bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d071      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001bca:	e06c      	b.n	8001ca6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd0:	f003 031c 	and.w	r3, r3, #28
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d02e      	beq.n	8001c3e <HAL_DMA_IRQHandler+0xec>
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d029      	beq.n	8001c3e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0320 	and.w	r3, r3, #32
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10b      	bne.n	8001c10 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 020a 	bic.w	r2, r2, #10
 8001c06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c14:	f003 021c 	and.w	r2, r3, #28
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	2102      	movs	r1, #2
 8001c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c22:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d038      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c3c:	e033      	b.n	8001ca6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	f003 031c 	and.w	r3, r3, #28
 8001c46:	2208      	movs	r2, #8
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d02a      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x156>
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d025      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 020e 	bic.w	r2, r2, #14
 8001c6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c70:	f003 021c 	and.w	r2, r3, #28
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	2101      	movs	r1, #1
 8001c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d004      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ca6:	bf00      	nop
 8001ca8:	bf00      	nop
}
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cbe:	e17f      	b.n	8001fc0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 8171 	beq.w	8001fba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d005      	beq.n	8001cf0 <HAL_GPIO_Init+0x40>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d130      	bne.n	8001d52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d26:	2201      	movs	r2, #1
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	091b      	lsrs	r3, r3, #4
 8001d3c:	f003 0201 	and.w	r2, r3, #1
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d118      	bne.n	8001d90 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d64:	2201      	movs	r2, #1
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	08db      	lsrs	r3, r3, #3
 8001d7a:	f003 0201 	and.w	r2, r3, #1
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d017      	beq.n	8001dcc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	2203      	movs	r2, #3
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4013      	ands	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d123      	bne.n	8001e20 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	08da      	lsrs	r2, r3, #3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3208      	adds	r2, #8
 8001de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	220f      	movs	r2, #15
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	08da      	lsrs	r2, r3, #3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3208      	adds	r2, #8
 8001e1a:	6939      	ldr	r1, [r7, #16]
 8001e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0203 	and.w	r2, r3, #3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80ac 	beq.w	8001fba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e62:	4b5f      	ldr	r3, [pc, #380]	; (8001fe0 <HAL_GPIO_Init+0x330>)
 8001e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e66:	4a5e      	ldr	r2, [pc, #376]	; (8001fe0 <HAL_GPIO_Init+0x330>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e6e:	4b5c      	ldr	r3, [pc, #368]	; (8001fe0 <HAL_GPIO_Init+0x330>)
 8001e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e7a:	4a5a      	ldr	r2, [pc, #360]	; (8001fe4 <HAL_GPIO_Init+0x334>)
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	3302      	adds	r3, #2
 8001e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e86:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	220f      	movs	r2, #15
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ea4:	d025      	beq.n	8001ef2 <HAL_GPIO_Init+0x242>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a4f      	ldr	r2, [pc, #316]	; (8001fe8 <HAL_GPIO_Init+0x338>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d01f      	beq.n	8001eee <HAL_GPIO_Init+0x23e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a4e      	ldr	r2, [pc, #312]	; (8001fec <HAL_GPIO_Init+0x33c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d019      	beq.n	8001eea <HAL_GPIO_Init+0x23a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a4d      	ldr	r2, [pc, #308]	; (8001ff0 <HAL_GPIO_Init+0x340>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d013      	beq.n	8001ee6 <HAL_GPIO_Init+0x236>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a4c      	ldr	r2, [pc, #304]	; (8001ff4 <HAL_GPIO_Init+0x344>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d00d      	beq.n	8001ee2 <HAL_GPIO_Init+0x232>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a4b      	ldr	r2, [pc, #300]	; (8001ff8 <HAL_GPIO_Init+0x348>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d007      	beq.n	8001ede <HAL_GPIO_Init+0x22e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a4a      	ldr	r2, [pc, #296]	; (8001ffc <HAL_GPIO_Init+0x34c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d101      	bne.n	8001eda <HAL_GPIO_Init+0x22a>
 8001ed6:	2306      	movs	r3, #6
 8001ed8:	e00c      	b.n	8001ef4 <HAL_GPIO_Init+0x244>
 8001eda:	2307      	movs	r3, #7
 8001edc:	e00a      	b.n	8001ef4 <HAL_GPIO_Init+0x244>
 8001ede:	2305      	movs	r3, #5
 8001ee0:	e008      	b.n	8001ef4 <HAL_GPIO_Init+0x244>
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	e006      	b.n	8001ef4 <HAL_GPIO_Init+0x244>
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e004      	b.n	8001ef4 <HAL_GPIO_Init+0x244>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e002      	b.n	8001ef4 <HAL_GPIO_Init+0x244>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <HAL_GPIO_Init+0x244>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	f002 0203 	and.w	r2, r2, #3
 8001efa:	0092      	lsls	r2, r2, #2
 8001efc:	4093      	lsls	r3, r2
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f04:	4937      	ldr	r1, [pc, #220]	; (8001fe4 <HAL_GPIO_Init+0x334>)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f12:	4b3b      	ldr	r3, [pc, #236]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f36:	4a32      	ldr	r2, [pc, #200]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f3c:	4b30      	ldr	r3, [pc, #192]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f60:	4a27      	ldr	r2, [pc, #156]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f66:	4b26      	ldr	r3, [pc, #152]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f8a:	4a1d      	ldr	r2, [pc, #116]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f90:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fb4:	4a12      	ldr	r2, [pc, #72]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f47f ae78 	bne.w	8001cc0 <HAL_GPIO_Init+0x10>
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	bf00      	nop
 8001fd4:	371c      	adds	r7, #28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40010000 	.word	0x40010000
 8001fe8:	48000400 	.word	0x48000400
 8001fec:	48000800 	.word	0x48000800
 8001ff0:	48000c00 	.word	0x48000c00
 8001ff4:	48001000 	.word	0x48001000
 8001ff8:	48001400 	.word	0x48001400
 8001ffc:	48001800 	.word	0x48001800
 8002000:	40010400 	.word	0x40010400

08002004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
 8002010:	4613      	mov	r3, r2
 8002012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002014:	787b      	ldrb	r3, [r7, #1]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800201a:	887a      	ldrh	r2, [r7, #2]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002020:	e002      	b.n	8002028 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002022:	887a      	ldrh	r2, [r7, #2]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <HAL_PWREx_GetVoltageRange+0x18>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40007000 	.word	0x40007000

08002050 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800205e:	d130      	bne.n	80020c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002060:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800206c:	d038      	beq.n	80020e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800206e:	4b20      	ldr	r3, [pc, #128]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002076:	4a1e      	ldr	r2, [pc, #120]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002078:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800207c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800207e:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2232      	movs	r2, #50	; 0x32
 8002084:	fb02 f303 	mul.w	r3, r2, r3
 8002088:	4a1b      	ldr	r2, [pc, #108]	; (80020f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	0c9b      	lsrs	r3, r3, #18
 8002090:	3301      	adds	r3, #1
 8002092:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002094:	e002      	b.n	800209c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	3b01      	subs	r3, #1
 800209a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800209c:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a8:	d102      	bne.n	80020b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f2      	bne.n	8002096 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020bc:	d110      	bne.n	80020e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e00f      	b.n	80020e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ce:	d007      	beq.n	80020e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020d0:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020d8:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40007000 	.word	0x40007000
 80020f4:	2000000c 	.word	0x2000000c
 80020f8:	431bde83 	.word	0x431bde83

080020fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e3d8      	b.n	80028c0 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800210e:	4b97      	ldr	r3, [pc, #604]	; (800236c <HAL_RCC_OscConfig+0x270>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002118:	4b94      	ldr	r3, [pc, #592]	; (800236c <HAL_RCC_OscConfig+0x270>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 80e4 	beq.w	80022f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d007      	beq.n	8002146 <HAL_RCC_OscConfig+0x4a>
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	2b0c      	cmp	r3, #12
 800213a:	f040 808b 	bne.w	8002254 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b01      	cmp	r3, #1
 8002142:	f040 8087 	bne.w	8002254 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002146:	4b89      	ldr	r3, [pc, #548]	; (800236c <HAL_RCC_OscConfig+0x270>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <HAL_RCC_OscConfig+0x62>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e3b0      	b.n	80028c0 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a1a      	ldr	r2, [r3, #32]
 8002162:	4b82      	ldr	r3, [pc, #520]	; (800236c <HAL_RCC_OscConfig+0x270>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d004      	beq.n	8002178 <HAL_RCC_OscConfig+0x7c>
 800216e:	4b7f      	ldr	r3, [pc, #508]	; (800236c <HAL_RCC_OscConfig+0x270>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002176:	e005      	b.n	8002184 <HAL_RCC_OscConfig+0x88>
 8002178:	4b7c      	ldr	r3, [pc, #496]	; (800236c <HAL_RCC_OscConfig+0x270>)
 800217a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800217e:	091b      	lsrs	r3, r3, #4
 8002180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002184:	4293      	cmp	r3, r2
 8002186:	d223      	bcs.n	80021d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	4618      	mov	r0, r3
 800218e:	f000 fd43 	bl	8002c18 <RCC_SetFlashLatencyFromMSIRange>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e391      	b.n	80028c0 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800219c:	4b73      	ldr	r3, [pc, #460]	; (800236c <HAL_RCC_OscConfig+0x270>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a72      	ldr	r2, [pc, #456]	; (800236c <HAL_RCC_OscConfig+0x270>)
 80021a2:	f043 0308 	orr.w	r3, r3, #8
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	4b70      	ldr	r3, [pc, #448]	; (800236c <HAL_RCC_OscConfig+0x270>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	496d      	ldr	r1, [pc, #436]	; (800236c <HAL_RCC_OscConfig+0x270>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ba:	4b6c      	ldr	r3, [pc, #432]	; (800236c <HAL_RCC_OscConfig+0x270>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	4968      	ldr	r1, [pc, #416]	; (800236c <HAL_RCC_OscConfig+0x270>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
 80021ce:	e025      	b.n	800221c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021d0:	4b66      	ldr	r3, [pc, #408]	; (800236c <HAL_RCC_OscConfig+0x270>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a65      	ldr	r2, [pc, #404]	; (800236c <HAL_RCC_OscConfig+0x270>)
 80021d6:	f043 0308 	orr.w	r3, r3, #8
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	4b63      	ldr	r3, [pc, #396]	; (800236c <HAL_RCC_OscConfig+0x270>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4960      	ldr	r1, [pc, #384]	; (800236c <HAL_RCC_OscConfig+0x270>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ee:	4b5f      	ldr	r3, [pc, #380]	; (800236c <HAL_RCC_OscConfig+0x270>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	495b      	ldr	r1, [pc, #364]	; (800236c <HAL_RCC_OscConfig+0x270>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d109      	bne.n	800221c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4618      	mov	r0, r3
 800220e:	f000 fd03 	bl	8002c18 <RCC_SetFlashLatencyFromMSIRange>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e351      	b.n	80028c0 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800221c:	f000 fc38 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8002220:	4602      	mov	r2, r0
 8002222:	4b52      	ldr	r3, [pc, #328]	; (800236c <HAL_RCC_OscConfig+0x270>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	4950      	ldr	r1, [pc, #320]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 800222e:	5ccb      	ldrb	r3, [r1, r3]
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	fa22 f303 	lsr.w	r3, r2, r3
 8002238:	4a4e      	ldr	r2, [pc, #312]	; (8002374 <HAL_RCC_OscConfig+0x278>)
 800223a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800223c:	4b4e      	ldr	r3, [pc, #312]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff f9bd 	bl	80015c0 <HAL_InitTick>
 8002246:	4603      	mov	r3, r0
 8002248:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d052      	beq.n	80022f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	e335      	b.n	80028c0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d032      	beq.n	80022c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800225c:	4b43      	ldr	r3, [pc, #268]	; (800236c <HAL_RCC_OscConfig+0x270>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a42      	ldr	r2, [pc, #264]	; (800236c <HAL_RCC_OscConfig+0x270>)
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002268:	f7ff f9fa 	bl	8001660 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002270:	f7ff f9f6 	bl	8001660 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e31e      	b.n	80028c0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002282:	4b3a      	ldr	r3, [pc, #232]	; (800236c <HAL_RCC_OscConfig+0x270>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800228e:	4b37      	ldr	r3, [pc, #220]	; (800236c <HAL_RCC_OscConfig+0x270>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a36      	ldr	r2, [pc, #216]	; (800236c <HAL_RCC_OscConfig+0x270>)
 8002294:	f043 0308 	orr.w	r3, r3, #8
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	4b34      	ldr	r3, [pc, #208]	; (800236c <HAL_RCC_OscConfig+0x270>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	4931      	ldr	r1, [pc, #196]	; (800236c <HAL_RCC_OscConfig+0x270>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ac:	4b2f      	ldr	r3, [pc, #188]	; (800236c <HAL_RCC_OscConfig+0x270>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	492c      	ldr	r1, [pc, #176]	; (800236c <HAL_RCC_OscConfig+0x270>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	604b      	str	r3, [r1, #4]
 80022c0:	e01a      	b.n	80022f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022c2:	4b2a      	ldr	r3, [pc, #168]	; (800236c <HAL_RCC_OscConfig+0x270>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a29      	ldr	r2, [pc, #164]	; (800236c <HAL_RCC_OscConfig+0x270>)
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022ce:	f7ff f9c7 	bl	8001660 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022d6:	f7ff f9c3 	bl	8001660 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e2eb      	b.n	80028c0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022e8:	4b20      	ldr	r3, [pc, #128]	; (800236c <HAL_RCC_OscConfig+0x270>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1f0      	bne.n	80022d6 <HAL_RCC_OscConfig+0x1da>
 80022f4:	e000      	b.n	80022f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b00      	cmp	r3, #0
 8002302:	d074      	beq.n	80023ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	2b08      	cmp	r3, #8
 8002308:	d005      	beq.n	8002316 <HAL_RCC_OscConfig+0x21a>
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	2b0c      	cmp	r3, #12
 800230e:	d10e      	bne.n	800232e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2b03      	cmp	r3, #3
 8002314:	d10b      	bne.n	800232e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <HAL_RCC_OscConfig+0x270>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d064      	beq.n	80023ec <HAL_RCC_OscConfig+0x2f0>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d160      	bne.n	80023ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e2c8      	b.n	80028c0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002336:	d106      	bne.n	8002346 <HAL_RCC_OscConfig+0x24a>
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <HAL_RCC_OscConfig+0x270>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0b      	ldr	r2, [pc, #44]	; (800236c <HAL_RCC_OscConfig+0x270>)
 800233e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	e026      	b.n	8002394 <HAL_RCC_OscConfig+0x298>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800234e:	d115      	bne.n	800237c <HAL_RCC_OscConfig+0x280>
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_RCC_OscConfig+0x270>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a05      	ldr	r2, [pc, #20]	; (800236c <HAL_RCC_OscConfig+0x270>)
 8002356:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <HAL_RCC_OscConfig+0x270>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a02      	ldr	r2, [pc, #8]	; (800236c <HAL_RCC_OscConfig+0x270>)
 8002362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	e014      	b.n	8002394 <HAL_RCC_OscConfig+0x298>
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	08005b98 	.word	0x08005b98
 8002374:	2000000c 	.word	0x2000000c
 8002378:	20000010 	.word	0x20000010
 800237c:	4ba0      	ldr	r3, [pc, #640]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a9f      	ldr	r2, [pc, #636]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 8002382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	4b9d      	ldr	r3, [pc, #628]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a9c      	ldr	r2, [pc, #624]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 800238e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d013      	beq.n	80023c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239c:	f7ff f960 	bl	8001660 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a4:	f7ff f95c 	bl	8001660 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	; 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e284      	b.n	80028c0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023b6:	4b92      	ldr	r3, [pc, #584]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0x2a8>
 80023c2:	e014      	b.n	80023ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c4:	f7ff f94c 	bl	8001660 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023cc:	f7ff f948 	bl	8001660 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b64      	cmp	r3, #100	; 0x64
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e270      	b.n	80028c0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023de:	4b88      	ldr	r3, [pc, #544]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x2d0>
 80023ea:	e000      	b.n	80023ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d060      	beq.n	80024bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d005      	beq.n	800240c <HAL_RCC_OscConfig+0x310>
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2b0c      	cmp	r3, #12
 8002404:	d119      	bne.n	800243a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d116      	bne.n	800243a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800240c:	4b7c      	ldr	r3, [pc, #496]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_RCC_OscConfig+0x328>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e24d      	b.n	80028c0 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002424:	4b76      	ldr	r3, [pc, #472]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	061b      	lsls	r3, r3, #24
 8002432:	4973      	ldr	r1, [pc, #460]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 8002434:	4313      	orrs	r3, r2
 8002436:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002438:	e040      	b.n	80024bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d023      	beq.n	800248a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002442:	4b6f      	ldr	r3, [pc, #444]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a6e      	ldr	r2, [pc, #440]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 8002448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244e:	f7ff f907 	bl	8001660 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002456:	f7ff f903 	bl	8001660 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e22b      	b.n	80028c0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002468:	4b65      	ldr	r3, [pc, #404]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002474:	4b62      	ldr	r3, [pc, #392]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	061b      	lsls	r3, r3, #24
 8002482:	495f      	ldr	r1, [pc, #380]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]
 8002488:	e018      	b.n	80024bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800248a:	4b5d      	ldr	r3, [pc, #372]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a5c      	ldr	r2, [pc, #368]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 8002490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002496:	f7ff f8e3 	bl	8001660 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800249e:	f7ff f8df 	bl	8001660 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e207      	b.n	80028c0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024b0:	4b53      	ldr	r3, [pc, #332]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1f0      	bne.n	800249e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d03c      	beq.n	8002542 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d01c      	beq.n	800250a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d0:	4b4b      	ldr	r3, [pc, #300]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 80024d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024d6:	4a4a      	ldr	r2, [pc, #296]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e0:	f7ff f8be 	bl	8001660 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e8:	f7ff f8ba 	bl	8001660 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e1e2      	b.n	80028c0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024fa:	4b41      	ldr	r3, [pc, #260]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 80024fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0ef      	beq.n	80024e8 <HAL_RCC_OscConfig+0x3ec>
 8002508:	e01b      	b.n	8002542 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800250a:	4b3d      	ldr	r3, [pc, #244]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 800250c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002510:	4a3b      	ldr	r2, [pc, #236]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 8002512:	f023 0301 	bic.w	r3, r3, #1
 8002516:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251a:	f7ff f8a1 	bl	8001660 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002522:	f7ff f89d 	bl	8001660 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e1c5      	b.n	80028c0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002534:	4b32      	ldr	r3, [pc, #200]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 8002536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1ef      	bne.n	8002522 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 80a6 	beq.w	800269c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002550:	2300      	movs	r3, #0
 8002552:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002554:	4b2a      	ldr	r3, [pc, #168]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 8002556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10d      	bne.n	800257c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002560:	4b27      	ldr	r3, [pc, #156]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 8002562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002564:	4a26      	ldr	r2, [pc, #152]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 8002566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800256a:	6593      	str	r3, [r2, #88]	; 0x58
 800256c:	4b24      	ldr	r3, [pc, #144]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 800256e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002578:	2301      	movs	r3, #1
 800257a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800257c:	4b21      	ldr	r3, [pc, #132]	; (8002604 <HAL_RCC_OscConfig+0x508>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d118      	bne.n	80025ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002588:	4b1e      	ldr	r3, [pc, #120]	; (8002604 <HAL_RCC_OscConfig+0x508>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a1d      	ldr	r2, [pc, #116]	; (8002604 <HAL_RCC_OscConfig+0x508>)
 800258e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002592:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002594:	f7ff f864 	bl	8001660 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259c:	f7ff f860 	bl	8001660 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e188      	b.n	80028c0 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <HAL_RCC_OscConfig+0x508>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d108      	bne.n	80025d4 <HAL_RCC_OscConfig+0x4d8>
 80025c2:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 80025c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c8:	4a0d      	ldr	r2, [pc, #52]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025d2:	e029      	b.n	8002628 <HAL_RCC_OscConfig+0x52c>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b05      	cmp	r3, #5
 80025da:	d115      	bne.n	8002608 <HAL_RCC_OscConfig+0x50c>
 80025dc:	4b08      	ldr	r3, [pc, #32]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 80025de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e2:	4a07      	ldr	r2, [pc, #28]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 80025e4:	f043 0304 	orr.w	r3, r3, #4
 80025e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025ec:	4b04      	ldr	r3, [pc, #16]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 80025ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f2:	4a03      	ldr	r2, [pc, #12]	; (8002600 <HAL_RCC_OscConfig+0x504>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025fc:	e014      	b.n	8002628 <HAL_RCC_OscConfig+0x52c>
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	40007000 	.word	0x40007000
 8002608:	4b91      	ldr	r3, [pc, #580]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 800260a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260e:	4a90      	ldr	r2, [pc, #576]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 8002610:	f023 0301 	bic.w	r3, r3, #1
 8002614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002618:	4b8d      	ldr	r3, [pc, #564]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 800261a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261e:	4a8c      	ldr	r2, [pc, #560]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 8002620:	f023 0304 	bic.w	r3, r3, #4
 8002624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d016      	beq.n	800265e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002630:	f7ff f816 	bl	8001660 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002636:	e00a      	b.n	800264e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002638:	f7ff f812 	bl	8001660 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	f241 3288 	movw	r2, #5000	; 0x1388
 8002646:	4293      	cmp	r3, r2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e138      	b.n	80028c0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800264e:	4b80      	ldr	r3, [pc, #512]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 8002650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0ed      	beq.n	8002638 <HAL_RCC_OscConfig+0x53c>
 800265c:	e015      	b.n	800268a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265e:	f7fe ffff 	bl	8001660 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002664:	e00a      	b.n	800267c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002666:	f7fe fffb 	bl	8001660 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	f241 3288 	movw	r2, #5000	; 0x1388
 8002674:	4293      	cmp	r3, r2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e121      	b.n	80028c0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800267c:	4b74      	ldr	r3, [pc, #464]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1ed      	bne.n	8002666 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800268a:	7ffb      	ldrb	r3, [r7, #31]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d105      	bne.n	800269c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002690:	4b6f      	ldr	r3, [pc, #444]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 8002692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002694:	4a6e      	ldr	r2, [pc, #440]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 8002696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800269a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 810c 	beq.w	80028be <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	f040 80d4 	bne.w	8002858 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026b0:	4b67      	ldr	r3, [pc, #412]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f003 0203 	and.w	r2, r3, #3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d130      	bne.n	8002726 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	3b01      	subs	r3, #1
 80026d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d127      	bne.n	8002726 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d11f      	bne.n	8002726 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026f0:	2a07      	cmp	r2, #7
 80026f2:	bf14      	ite	ne
 80026f4:	2201      	movne	r2, #1
 80026f6:	2200      	moveq	r2, #0
 80026f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d113      	bne.n	8002726 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002708:	085b      	lsrs	r3, r3, #1
 800270a:	3b01      	subs	r3, #1
 800270c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800270e:	429a      	cmp	r2, r3
 8002710:	d109      	bne.n	8002726 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	085b      	lsrs	r3, r3, #1
 800271e:	3b01      	subs	r3, #1
 8002720:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002722:	429a      	cmp	r2, r3
 8002724:	d06e      	beq.n	8002804 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	2b0c      	cmp	r3, #12
 800272a:	d069      	beq.n	8002800 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800272c:	4b48      	ldr	r3, [pc, #288]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d105      	bne.n	8002744 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002738:	4b45      	ldr	r3, [pc, #276]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0bb      	b.n	80028c0 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002748:	4b41      	ldr	r3, [pc, #260]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a40      	ldr	r2, [pc, #256]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 800274e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002752:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002754:	f7fe ff84 	bl	8001660 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275c:	f7fe ff80 	bl	8001660 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e0a8      	b.n	80028c0 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800276e:	4b38      	ldr	r3, [pc, #224]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800277a:	4b35      	ldr	r3, [pc, #212]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	4b35      	ldr	r3, [pc, #212]	; (8002854 <HAL_RCC_OscConfig+0x758>)
 8002780:	4013      	ands	r3, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800278a:	3a01      	subs	r2, #1
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	4311      	orrs	r1, r2
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002794:	0212      	lsls	r2, r2, #8
 8002796:	4311      	orrs	r1, r2
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800279c:	0852      	lsrs	r2, r2, #1
 800279e:	3a01      	subs	r2, #1
 80027a0:	0552      	lsls	r2, r2, #21
 80027a2:	4311      	orrs	r1, r2
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027a8:	0852      	lsrs	r2, r2, #1
 80027aa:	3a01      	subs	r2, #1
 80027ac:	0652      	lsls	r2, r2, #25
 80027ae:	4311      	orrs	r1, r2
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027b4:	0912      	lsrs	r2, r2, #4
 80027b6:	0452      	lsls	r2, r2, #17
 80027b8:	430a      	orrs	r2, r1
 80027ba:	4925      	ldr	r1, [pc, #148]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a22      	ldr	r2, [pc, #136]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 80027c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027cc:	4b20      	ldr	r3, [pc, #128]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4a1f      	ldr	r2, [pc, #124]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 80027d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027d8:	f7fe ff42 	bl	8001660 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e0:	f7fe ff3e 	bl	8001660 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e066      	b.n	80028c0 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f2:	4b17      	ldr	r3, [pc, #92]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027fe:	e05e      	b.n	80028be <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e05d      	b.n	80028c0 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002804:	4b12      	ldr	r3, [pc, #72]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d156      	bne.n	80028be <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002810:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0e      	ldr	r2, [pc, #56]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 8002816:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800281a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4a0b      	ldr	r2, [pc, #44]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 8002822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002826:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002828:	f7fe ff1a 	bl	8001660 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002830:	f7fe ff16 	bl	8001660 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e03e      	b.n	80028c0 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002842:	4b03      	ldr	r3, [pc, #12]	; (8002850 <HAL_RCC_OscConfig+0x754>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0x734>
 800284e:	e036      	b.n	80028be <HAL_RCC_OscConfig+0x7c2>
 8002850:	40021000 	.word	0x40021000
 8002854:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b0c      	cmp	r3, #12
 800285c:	d02d      	beq.n	80028ba <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285e:	4b1a      	ldr	r3, [pc, #104]	; (80028c8 <HAL_RCC_OscConfig+0x7cc>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a19      	ldr	r2, [pc, #100]	; (80028c8 <HAL_RCC_OscConfig+0x7cc>)
 8002864:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002868:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800286a:	4b17      	ldr	r3, [pc, #92]	; (80028c8 <HAL_RCC_OscConfig+0x7cc>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d105      	bne.n	8002882 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002876:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <HAL_RCC_OscConfig+0x7cc>)
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	4a13      	ldr	r2, [pc, #76]	; (80028c8 <HAL_RCC_OscConfig+0x7cc>)
 800287c:	f023 0303 	bic.w	r3, r3, #3
 8002880:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002882:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <HAL_RCC_OscConfig+0x7cc>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	4a10      	ldr	r2, [pc, #64]	; (80028c8 <HAL_RCC_OscConfig+0x7cc>)
 8002888:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800288c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002890:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002892:	f7fe fee5 	bl	8001660 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289a:	f7fe fee1 	bl	8001660 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e009      	b.n	80028c0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_RCC_OscConfig+0x7cc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f0      	bne.n	800289a <HAL_RCC_OscConfig+0x79e>
 80028b8:	e001      	b.n	80028be <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3720      	adds	r7, #32
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000

080028cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0c8      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e0:	4b66      	ldr	r3, [pc, #408]	; (8002a7c <HAL_RCC_ClockConfig+0x1b0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d910      	bls.n	8002910 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ee:	4b63      	ldr	r3, [pc, #396]	; (8002a7c <HAL_RCC_ClockConfig+0x1b0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 0207 	bic.w	r2, r3, #7
 80028f6:	4961      	ldr	r1, [pc, #388]	; (8002a7c <HAL_RCC_ClockConfig+0x1b0>)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b5f      	ldr	r3, [pc, #380]	; (8002a7c <HAL_RCC_ClockConfig+0x1b0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0b0      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d04c      	beq.n	80029b6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b03      	cmp	r3, #3
 8002922:	d107      	bne.n	8002934 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002924:	4b56      	ldr	r3, [pc, #344]	; (8002a80 <HAL_RCC_ClockConfig+0x1b4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d121      	bne.n	8002974 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e09e      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b02      	cmp	r3, #2
 800293a:	d107      	bne.n	800294c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800293c:	4b50      	ldr	r3, [pc, #320]	; (8002a80 <HAL_RCC_ClockConfig+0x1b4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d115      	bne.n	8002974 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e092      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d107      	bne.n	8002964 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002954:	4b4a      	ldr	r3, [pc, #296]	; (8002a80 <HAL_RCC_ClockConfig+0x1b4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d109      	bne.n	8002974 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e086      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002964:	4b46      	ldr	r3, [pc, #280]	; (8002a80 <HAL_RCC_ClockConfig+0x1b4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e07e      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002974:	4b42      	ldr	r3, [pc, #264]	; (8002a80 <HAL_RCC_ClockConfig+0x1b4>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f023 0203 	bic.w	r2, r3, #3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	493f      	ldr	r1, [pc, #252]	; (8002a80 <HAL_RCC_ClockConfig+0x1b4>)
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002986:	f7fe fe6b 	bl	8001660 <HAL_GetTick>
 800298a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298c:	e00a      	b.n	80029a4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800298e:	f7fe fe67 	bl	8001660 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	f241 3288 	movw	r2, #5000	; 0x1388
 800299c:	4293      	cmp	r3, r2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e066      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a4:	4b36      	ldr	r3, [pc, #216]	; (8002a80 <HAL_RCC_ClockConfig+0x1b4>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 020c 	and.w	r2, r3, #12
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d1eb      	bne.n	800298e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d008      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c2:	4b2f      	ldr	r3, [pc, #188]	; (8002a80 <HAL_RCC_ClockConfig+0x1b4>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	492c      	ldr	r1, [pc, #176]	; (8002a80 <HAL_RCC_ClockConfig+0x1b4>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029d4:	4b29      	ldr	r3, [pc, #164]	; (8002a7c <HAL_RCC_ClockConfig+0x1b0>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d210      	bcs.n	8002a04 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e2:	4b26      	ldr	r3, [pc, #152]	; (8002a7c <HAL_RCC_ClockConfig+0x1b0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f023 0207 	bic.w	r2, r3, #7
 80029ea:	4924      	ldr	r1, [pc, #144]	; (8002a7c <HAL_RCC_ClockConfig+0x1b0>)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f2:	4b22      	ldr	r3, [pc, #136]	; (8002a7c <HAL_RCC_ClockConfig+0x1b0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d001      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e036      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a10:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <HAL_RCC_ClockConfig+0x1b4>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4918      	ldr	r1, [pc, #96]	; (8002a80 <HAL_RCC_ClockConfig+0x1b4>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d009      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a2e:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <HAL_RCC_ClockConfig+0x1b4>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4910      	ldr	r1, [pc, #64]	; (8002a80 <HAL_RCC_ClockConfig+0x1b4>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a42:	f000 f825 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8002a46:	4602      	mov	r2, r0
 8002a48:	4b0d      	ldr	r3, [pc, #52]	; (8002a80 <HAL_RCC_ClockConfig+0x1b4>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	490c      	ldr	r1, [pc, #48]	; (8002a84 <HAL_RCC_ClockConfig+0x1b8>)
 8002a54:	5ccb      	ldrb	r3, [r1, r3]
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5e:	4a0a      	ldr	r2, [pc, #40]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe fdaa 	bl	80015c0 <HAL_InitTick>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a70:	7afb      	ldrb	r3, [r7, #11]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40022000 	.word	0x40022000
 8002a80:	40021000 	.word	0x40021000
 8002a84:	08005b98 	.word	0x08005b98
 8002a88:	2000000c 	.word	0x2000000c
 8002a8c:	20000010 	.word	0x20000010

08002a90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b089      	sub	sp, #36	; 0x24
 8002a94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a9e:	4b3e      	ldr	r3, [pc, #248]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aa8:	4b3b      	ldr	r3, [pc, #236]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	2b0c      	cmp	r3, #12
 8002abc:	d121      	bne.n	8002b02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d11e      	bne.n	8002b02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ac4:	4b34      	ldr	r3, [pc, #208]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d107      	bne.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ad0:	4b31      	ldr	r3, [pc, #196]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	f003 030f 	and.w	r3, r3, #15
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	e005      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ae0:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002aec:	4a2b      	ldr	r2, [pc, #172]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10d      	bne.n	8002b18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b00:	e00a      	b.n	8002b18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d102      	bne.n	8002b0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b08:	4b25      	ldr	r3, [pc, #148]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b0a:	61bb      	str	r3, [r7, #24]
 8002b0c:	e004      	b.n	8002b18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d101      	bne.n	8002b18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b14:	4b23      	ldr	r3, [pc, #140]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	2b0c      	cmp	r3, #12
 8002b1c:	d134      	bne.n	8002b88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b1e:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d003      	beq.n	8002b36 <HAL_RCC_GetSysClockFreq+0xa6>
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d003      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0xac>
 8002b34:	e005      	b.n	8002b42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b36:	4b1a      	ldr	r3, [pc, #104]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b38:	617b      	str	r3, [r7, #20]
      break;
 8002b3a:	e005      	b.n	8002b48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b3c:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b3e:	617b      	str	r3, [r7, #20]
      break;
 8002b40:	e002      	b.n	8002b48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	617b      	str	r3, [r7, #20]
      break;
 8002b46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b48:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	3301      	adds	r3, #1
 8002b54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b56:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	0a1b      	lsrs	r3, r3, #8
 8002b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	fb03 f202 	mul.w	r2, r3, r2
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	0e5b      	lsrs	r3, r3, #25
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	3301      	adds	r3, #1
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b88:	69bb      	ldr	r3, [r7, #24]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3724      	adds	r7, #36	; 0x24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	08005bb0 	.word	0x08005bb0
 8002ba0:	00f42400 	.word	0x00f42400
 8002ba4:	007a1200 	.word	0x007a1200

08002ba8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bac:	4b03      	ldr	r3, [pc, #12]	; (8002bbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002bae:	681b      	ldr	r3, [r3, #0]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	2000000c 	.word	0x2000000c

08002bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bc4:	f7ff fff0 	bl	8002ba8 <HAL_RCC_GetHCLKFreq>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	0a1b      	lsrs	r3, r3, #8
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	4904      	ldr	r1, [pc, #16]	; (8002be8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bd6:	5ccb      	ldrb	r3, [r1, r3]
 8002bd8:	f003 031f 	and.w	r3, r3, #31
 8002bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40021000 	.word	0x40021000
 8002be8:	08005ba8 	.word	0x08005ba8

08002bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bf0:	f7ff ffda 	bl	8002ba8 <HAL_RCC_GetHCLKFreq>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	0adb      	lsrs	r3, r3, #11
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	4904      	ldr	r1, [pc, #16]	; (8002c14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c02:	5ccb      	ldrb	r3, [r1, r3]
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40021000 	.word	0x40021000
 8002c14:	08005ba8 	.word	0x08005ba8

08002c18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c20:	2300      	movs	r3, #0
 8002c22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c24:	4b2a      	ldr	r3, [pc, #168]	; (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c30:	f7ff fa00 	bl	8002034 <HAL_PWREx_GetVoltageRange>
 8002c34:	6178      	str	r0, [r7, #20]
 8002c36:	e014      	b.n	8002c62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c38:	4b25      	ldr	r3, [pc, #148]	; (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3c:	4a24      	ldr	r2, [pc, #144]	; (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c42:	6593      	str	r3, [r2, #88]	; 0x58
 8002c44:	4b22      	ldr	r3, [pc, #136]	; (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c50:	f7ff f9f0 	bl	8002034 <HAL_PWREx_GetVoltageRange>
 8002c54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c56:	4b1e      	ldr	r3, [pc, #120]	; (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	4a1d      	ldr	r2, [pc, #116]	; (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c60:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c68:	d10b      	bne.n	8002c82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b80      	cmp	r3, #128	; 0x80
 8002c6e:	d919      	bls.n	8002ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2ba0      	cmp	r3, #160	; 0xa0
 8002c74:	d902      	bls.n	8002c7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c76:	2302      	movs	r3, #2
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	e013      	b.n	8002ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	e010      	b.n	8002ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b80      	cmp	r3, #128	; 0x80
 8002c86:	d902      	bls.n	8002c8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c88:	2303      	movs	r3, #3
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	e00a      	b.n	8002ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b80      	cmp	r3, #128	; 0x80
 8002c92:	d102      	bne.n	8002c9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c94:	2302      	movs	r3, #2
 8002c96:	613b      	str	r3, [r7, #16]
 8002c98:	e004      	b.n	8002ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b70      	cmp	r3, #112	; 0x70
 8002c9e:	d101      	bne.n	8002ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f023 0207 	bic.w	r2, r3, #7
 8002cac:	4909      	ldr	r1, [pc, #36]	; (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cb4:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d001      	beq.n	8002cc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40022000 	.word	0x40022000

08002cd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d041      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cf8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cfc:	d02a      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002cfe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d02:	d824      	bhi.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d08:	d008      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d0e:	d81e      	bhi.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002d14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d18:	d010      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d1a:	e018      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d1c:	4b86      	ldr	r3, [pc, #536]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4a85      	ldr	r2, [pc, #532]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d26:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d28:	e015      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 fabb 	bl	80032ac <RCCEx_PLLSAI1_Config>
 8002d36:	4603      	mov	r3, r0
 8002d38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d3a:	e00c      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3320      	adds	r3, #32
 8002d40:	2100      	movs	r1, #0
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 fba6 	bl	8003494 <RCCEx_PLLSAI2_Config>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d4c:	e003      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	74fb      	strb	r3, [r7, #19]
      break;
 8002d52:	e000      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d56:	7cfb      	ldrb	r3, [r7, #19]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10b      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d5c:	4b76      	ldr	r3, [pc, #472]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d6a:	4973      	ldr	r1, [pc, #460]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d72:	e001      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d74:	7cfb      	ldrb	r3, [r7, #19]
 8002d76:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d041      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d8c:	d02a      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d92:	d824      	bhi.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d98:	d008      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d9e:	d81e      	bhi.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002da8:	d010      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002daa:	e018      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002dac:	4b62      	ldr	r3, [pc, #392]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	4a61      	ldr	r2, [pc, #388]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002db8:	e015      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 fa73 	bl	80032ac <RCCEx_PLLSAI1_Config>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dca:	e00c      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3320      	adds	r3, #32
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 fb5e 	bl	8003494 <RCCEx_PLLSAI2_Config>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ddc:	e003      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	74fb      	strb	r3, [r7, #19]
      break;
 8002de2:	e000      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002de4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002de6:	7cfb      	ldrb	r3, [r7, #19]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10b      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dec:	4b52      	ldr	r3, [pc, #328]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dfa:	494f      	ldr	r1, [pc, #316]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e02:	e001      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e04:	7cfb      	ldrb	r3, [r7, #19]
 8002e06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80a0 	beq.w	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e16:	2300      	movs	r3, #0
 8002e18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e1a:	4b47      	ldr	r3, [pc, #284]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00d      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e30:	4b41      	ldr	r3, [pc, #260]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	4a40      	ldr	r2, [pc, #256]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e3c:	4b3e      	ldr	r3, [pc, #248]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e4c:	4b3b      	ldr	r3, [pc, #236]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a3a      	ldr	r2, [pc, #232]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e58:	f7fe fc02 	bl	8001660 <HAL_GetTick>
 8002e5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e5e:	e009      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e60:	f7fe fbfe 	bl	8001660 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d902      	bls.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	74fb      	strb	r3, [r7, #19]
        break;
 8002e72:	e005      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e74:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0ef      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002e80:	7cfb      	ldrb	r3, [r7, #19]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d15c      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e86:	4b2c      	ldr	r3, [pc, #176]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d01f      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d019      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ea4:	4b24      	ldr	r3, [pc, #144]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002eb0:	4b21      	ldr	r3, [pc, #132]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb6:	4a20      	ldr	r2, [pc, #128]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ec0:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	4a1c      	ldr	r2, [pc, #112]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ed0:	4a19      	ldr	r2, [pc, #100]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d016      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee2:	f7fe fbbd 	bl	8001660 <HAL_GetTick>
 8002ee6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee8:	e00b      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eea:	f7fe fbb9 	bl	8001660 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d902      	bls.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	74fb      	strb	r3, [r7, #19]
            break;
 8002f00:	e006      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f02:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0ec      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002f10:	7cfb      	ldrb	r3, [r7, #19]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10c      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f16:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f26:	4904      	ldr	r1, [pc, #16]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f2e:	e009      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f30:	7cfb      	ldrb	r3, [r7, #19]
 8002f32:	74bb      	strb	r3, [r7, #18]
 8002f34:	e006      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f40:	7cfb      	ldrb	r3, [r7, #19]
 8002f42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f44:	7c7b      	ldrb	r3, [r7, #17]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d105      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4a:	4b9e      	ldr	r3, [pc, #632]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4e:	4a9d      	ldr	r2, [pc, #628]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f62:	4b98      	ldr	r3, [pc, #608]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f68:	f023 0203 	bic.w	r2, r3, #3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	4994      	ldr	r1, [pc, #592]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00a      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f84:	4b8f      	ldr	r3, [pc, #572]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8a:	f023 020c 	bic.w	r2, r3, #12
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f92:	498c      	ldr	r1, [pc, #560]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fa6:	4b87      	ldr	r3, [pc, #540]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	4983      	ldr	r1, [pc, #524]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0308 	and.w	r3, r3, #8
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00a      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fc8:	4b7e      	ldr	r3, [pc, #504]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	497b      	ldr	r1, [pc, #492]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fea:	4b76      	ldr	r3, [pc, #472]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff8:	4972      	ldr	r1, [pc, #456]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00a      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800300c:	4b6d      	ldr	r3, [pc, #436]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800300e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003012:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301a:	496a      	ldr	r1, [pc, #424]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800302e:	4b65      	ldr	r3, [pc, #404]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003034:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303c:	4961      	ldr	r1, [pc, #388]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003050:	4b5c      	ldr	r3, [pc, #368]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003056:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800305e:	4959      	ldr	r1, [pc, #356]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003072:	4b54      	ldr	r3, [pc, #336]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003078:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003080:	4950      	ldr	r1, [pc, #320]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003094:	4b4b      	ldr	r3, [pc, #300]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a2:	4948      	ldr	r1, [pc, #288]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030b6:	4b43      	ldr	r3, [pc, #268]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c4:	493f      	ldr	r1, [pc, #252]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d028      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030d8:	4b3a      	ldr	r3, [pc, #232]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e6:	4937      	ldr	r1, [pc, #220]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030f6:	d106      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030f8:	4b32      	ldr	r3, [pc, #200]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4a31      	ldr	r2, [pc, #196]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003102:	60d3      	str	r3, [r2, #12]
 8003104:	e011      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800310a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800310e:	d10c      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3304      	adds	r3, #4
 8003114:	2101      	movs	r1, #1
 8003116:	4618      	mov	r0, r3
 8003118:	f000 f8c8 	bl	80032ac <RCCEx_PLLSAI1_Config>
 800311c:	4603      	mov	r3, r0
 800311e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003120:	7cfb      	ldrb	r3, [r7, #19]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003126:	7cfb      	ldrb	r3, [r7, #19]
 8003128:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d028      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003136:	4b23      	ldr	r3, [pc, #140]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	491f      	ldr	r1, [pc, #124]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003150:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003154:	d106      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003156:	4b1b      	ldr	r3, [pc, #108]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	4a1a      	ldr	r2, [pc, #104]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003160:	60d3      	str	r3, [r2, #12]
 8003162:	e011      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800316c:	d10c      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3304      	adds	r3, #4
 8003172:	2101      	movs	r1, #1
 8003174:	4618      	mov	r0, r3
 8003176:	f000 f899 	bl	80032ac <RCCEx_PLLSAI1_Config>
 800317a:	4603      	mov	r3, r0
 800317c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800317e:	7cfb      	ldrb	r3, [r7, #19]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003184:	7cfb      	ldrb	r3, [r7, #19]
 8003186:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d02b      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a2:	4908      	ldr	r1, [pc, #32]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031b2:	d109      	bne.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	4a02      	ldr	r2, [pc, #8]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031be:	60d3      	str	r3, [r2, #12]
 80031c0:	e014      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80031c2:	bf00      	nop
 80031c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031d0:	d10c      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3304      	adds	r3, #4
 80031d6:	2101      	movs	r1, #1
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 f867 	bl	80032ac <RCCEx_PLLSAI1_Config>
 80031de:	4603      	mov	r3, r0
 80031e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031e2:	7cfb      	ldrb	r3, [r7, #19]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80031e8:	7cfb      	ldrb	r3, [r7, #19]
 80031ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d02f      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031f8:	4b2b      	ldr	r3, [pc, #172]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003206:	4928      	ldr	r1, [pc, #160]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003208:	4313      	orrs	r3, r2
 800320a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003212:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003216:	d10d      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3304      	adds	r3, #4
 800321c:	2102      	movs	r1, #2
 800321e:	4618      	mov	r0, r3
 8003220:	f000 f844 	bl	80032ac <RCCEx_PLLSAI1_Config>
 8003224:	4603      	mov	r3, r0
 8003226:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003228:	7cfb      	ldrb	r3, [r7, #19]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d014      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800322e:	7cfb      	ldrb	r3, [r7, #19]
 8003230:	74bb      	strb	r3, [r7, #18]
 8003232:	e011      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800323c:	d10c      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3320      	adds	r3, #32
 8003242:	2102      	movs	r1, #2
 8003244:	4618      	mov	r0, r3
 8003246:	f000 f925 	bl	8003494 <RCCEx_PLLSAI2_Config>
 800324a:	4603      	mov	r3, r0
 800324c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800324e:	7cfb      	ldrb	r3, [r7, #19]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003254:	7cfb      	ldrb	r3, [r7, #19]
 8003256:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003264:	4b10      	ldr	r3, [pc, #64]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003272:	490d      	ldr	r1, [pc, #52]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003286:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003296:	4904      	ldr	r1, [pc, #16]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800329e:	7cbb      	ldrb	r3, [r7, #18]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40021000 	.word	0x40021000

080032ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032ba:	4b75      	ldr	r3, [pc, #468]	; (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d018      	beq.n	80032f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80032c6:	4b72      	ldr	r3, [pc, #456]	; (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f003 0203 	and.w	r2, r3, #3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d10d      	bne.n	80032f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
       ||
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d009      	beq.n	80032f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032de:	4b6c      	ldr	r3, [pc, #432]	; (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	091b      	lsrs	r3, r3, #4
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
       ||
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d047      	beq.n	8003382 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
 80032f6:	e044      	b.n	8003382 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d018      	beq.n	8003332 <RCCEx_PLLSAI1_Config+0x86>
 8003300:	2b03      	cmp	r3, #3
 8003302:	d825      	bhi.n	8003350 <RCCEx_PLLSAI1_Config+0xa4>
 8003304:	2b01      	cmp	r3, #1
 8003306:	d002      	beq.n	800330e <RCCEx_PLLSAI1_Config+0x62>
 8003308:	2b02      	cmp	r3, #2
 800330a:	d009      	beq.n	8003320 <RCCEx_PLLSAI1_Config+0x74>
 800330c:	e020      	b.n	8003350 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800330e:	4b60      	ldr	r3, [pc, #384]	; (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d11d      	bne.n	8003356 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800331e:	e01a      	b.n	8003356 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003320:	4b5b      	ldr	r3, [pc, #364]	; (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003328:	2b00      	cmp	r3, #0
 800332a:	d116      	bne.n	800335a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003330:	e013      	b.n	800335a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003332:	4b57      	ldr	r3, [pc, #348]	; (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10f      	bne.n	800335e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800333e:	4b54      	ldr	r3, [pc, #336]	; (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800334e:	e006      	b.n	800335e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
      break;
 8003354:	e004      	b.n	8003360 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003356:	bf00      	nop
 8003358:	e002      	b.n	8003360 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800335a:	bf00      	nop
 800335c:	e000      	b.n	8003360 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800335e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10d      	bne.n	8003382 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003366:	4b4a      	ldr	r3, [pc, #296]	; (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6819      	ldr	r1, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	3b01      	subs	r3, #1
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	430b      	orrs	r3, r1
 800337c:	4944      	ldr	r1, [pc, #272]	; (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 800337e:	4313      	orrs	r3, r2
 8003380:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d17d      	bne.n	8003484 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003388:	4b41      	ldr	r3, [pc, #260]	; (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a40      	ldr	r2, [pc, #256]	; (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 800338e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003392:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003394:	f7fe f964 	bl	8001660 <HAL_GetTick>
 8003398:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800339a:	e009      	b.n	80033b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800339c:	f7fe f960 	bl	8001660 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d902      	bls.n	80033b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	73fb      	strb	r3, [r7, #15]
        break;
 80033ae:	e005      	b.n	80033bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033b0:	4b37      	ldr	r3, [pc, #220]	; (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1ef      	bne.n	800339c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d160      	bne.n	8003484 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d111      	bne.n	80033ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033c8:	4b31      	ldr	r3, [pc, #196]	; (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80033d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6892      	ldr	r2, [r2, #8]
 80033d8:	0211      	lsls	r1, r2, #8
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	68d2      	ldr	r2, [r2, #12]
 80033de:	0912      	lsrs	r2, r2, #4
 80033e0:	0452      	lsls	r2, r2, #17
 80033e2:	430a      	orrs	r2, r1
 80033e4:	492a      	ldr	r1, [pc, #168]	; (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	610b      	str	r3, [r1, #16]
 80033ea:	e027      	b.n	800343c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d112      	bne.n	8003418 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033f2:	4b27      	ldr	r3, [pc, #156]	; (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80033fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6892      	ldr	r2, [r2, #8]
 8003402:	0211      	lsls	r1, r2, #8
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6912      	ldr	r2, [r2, #16]
 8003408:	0852      	lsrs	r2, r2, #1
 800340a:	3a01      	subs	r2, #1
 800340c:	0552      	lsls	r2, r2, #21
 800340e:	430a      	orrs	r2, r1
 8003410:	491f      	ldr	r1, [pc, #124]	; (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003412:	4313      	orrs	r3, r2
 8003414:	610b      	str	r3, [r1, #16]
 8003416:	e011      	b.n	800343c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003418:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003420:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6892      	ldr	r2, [r2, #8]
 8003428:	0211      	lsls	r1, r2, #8
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6952      	ldr	r2, [r2, #20]
 800342e:	0852      	lsrs	r2, r2, #1
 8003430:	3a01      	subs	r2, #1
 8003432:	0652      	lsls	r2, r2, #25
 8003434:	430a      	orrs	r2, r1
 8003436:	4916      	ldr	r1, [pc, #88]	; (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003438:	4313      	orrs	r3, r2
 800343a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800343c:	4b14      	ldr	r3, [pc, #80]	; (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a13      	ldr	r2, [pc, #76]	; (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003442:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003446:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003448:	f7fe f90a 	bl	8001660 <HAL_GetTick>
 800344c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800344e:	e009      	b.n	8003464 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003450:	f7fe f906 	bl	8001660 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d902      	bls.n	8003464 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	73fb      	strb	r3, [r7, #15]
          break;
 8003462:	e005      	b.n	8003470 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003464:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0ef      	beq.n	8003450 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003476:	4b06      	ldr	r3, [pc, #24]	; (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003478:	691a      	ldr	r2, [r3, #16]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	4904      	ldr	r1, [pc, #16]	; (8003490 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003480:	4313      	orrs	r3, r2
 8003482:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003484:	7bfb      	ldrb	r3, [r7, #15]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40021000 	.word	0x40021000

08003494 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034a2:	4b6a      	ldr	r3, [pc, #424]	; (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d018      	beq.n	80034e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80034ae:	4b67      	ldr	r3, [pc, #412]	; (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f003 0203 	and.w	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d10d      	bne.n	80034da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
       ||
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80034c6:	4b61      	ldr	r3, [pc, #388]	; (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
       ||
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d047      	beq.n	800356a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	73fb      	strb	r3, [r7, #15]
 80034de:	e044      	b.n	800356a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d018      	beq.n	800351a <RCCEx_PLLSAI2_Config+0x86>
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d825      	bhi.n	8003538 <RCCEx_PLLSAI2_Config+0xa4>
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d002      	beq.n	80034f6 <RCCEx_PLLSAI2_Config+0x62>
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d009      	beq.n	8003508 <RCCEx_PLLSAI2_Config+0x74>
 80034f4:	e020      	b.n	8003538 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034f6:	4b55      	ldr	r3, [pc, #340]	; (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d11d      	bne.n	800353e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003506:	e01a      	b.n	800353e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003508:	4b50      	ldr	r3, [pc, #320]	; (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003510:	2b00      	cmp	r3, #0
 8003512:	d116      	bne.n	8003542 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003518:	e013      	b.n	8003542 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800351a:	4b4c      	ldr	r3, [pc, #304]	; (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10f      	bne.n	8003546 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003526:	4b49      	ldr	r3, [pc, #292]	; (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d109      	bne.n	8003546 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003536:	e006      	b.n	8003546 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	73fb      	strb	r3, [r7, #15]
      break;
 800353c:	e004      	b.n	8003548 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800353e:	bf00      	nop
 8003540:	e002      	b.n	8003548 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003542:	bf00      	nop
 8003544:	e000      	b.n	8003548 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003546:	bf00      	nop
    }

    if(status == HAL_OK)
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10d      	bne.n	800356a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800354e:	4b3f      	ldr	r3, [pc, #252]	; (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6819      	ldr	r1, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	3b01      	subs	r3, #1
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	430b      	orrs	r3, r1
 8003564:	4939      	ldr	r1, [pc, #228]	; (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003566:	4313      	orrs	r3, r2
 8003568:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d167      	bne.n	8003640 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003570:	4b36      	ldr	r3, [pc, #216]	; (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a35      	ldr	r2, [pc, #212]	; (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800357a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800357c:	f7fe f870 	bl	8001660 <HAL_GetTick>
 8003580:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003582:	e009      	b.n	8003598 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003584:	f7fe f86c 	bl	8001660 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d902      	bls.n	8003598 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	73fb      	strb	r3, [r7, #15]
        break;
 8003596:	e005      	b.n	80035a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003598:	4b2c      	ldr	r3, [pc, #176]	; (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1ef      	bne.n	8003584 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d14a      	bne.n	8003640 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d111      	bne.n	80035d4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035b0:	4b26      	ldr	r3, [pc, #152]	; (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6892      	ldr	r2, [r2, #8]
 80035c0:	0211      	lsls	r1, r2, #8
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	68d2      	ldr	r2, [r2, #12]
 80035c6:	0912      	lsrs	r2, r2, #4
 80035c8:	0452      	lsls	r2, r2, #17
 80035ca:	430a      	orrs	r2, r1
 80035cc:	491f      	ldr	r1, [pc, #124]	; (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	614b      	str	r3, [r1, #20]
 80035d2:	e011      	b.n	80035f8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035d4:	4b1d      	ldr	r3, [pc, #116]	; (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6892      	ldr	r2, [r2, #8]
 80035e4:	0211      	lsls	r1, r2, #8
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6912      	ldr	r2, [r2, #16]
 80035ea:	0852      	lsrs	r2, r2, #1
 80035ec:	3a01      	subs	r2, #1
 80035ee:	0652      	lsls	r2, r2, #25
 80035f0:	430a      	orrs	r2, r1
 80035f2:	4916      	ldr	r1, [pc, #88]	; (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80035f8:	4b14      	ldr	r3, [pc, #80]	; (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a13      	ldr	r2, [pc, #76]	; (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003602:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003604:	f7fe f82c 	bl	8001660 <HAL_GetTick>
 8003608:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800360a:	e009      	b.n	8003620 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800360c:	f7fe f828 	bl	8001660 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d902      	bls.n	8003620 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	73fb      	strb	r3, [r7, #15]
          break;
 800361e:	e005      	b.n	800362c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003620:	4b0a      	ldr	r3, [pc, #40]	; (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0ef      	beq.n	800360c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003632:	4b06      	ldr	r3, [pc, #24]	; (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	4904      	ldr	r1, [pc, #16]	; (800364c <RCCEx_PLLSAI2_Config+0x1b8>)
 800363c:	4313      	orrs	r3, r2
 800363e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003640:	7bfb      	ldrb	r3, [r7, #15]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40021000 	.word	0x40021000

08003650 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e049      	b.n	80036f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fd fdc2 	bl	8001200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3304      	adds	r3, #4
 800368c:	4619      	mov	r1, r3
 800368e:	4610      	mov	r0, r2
 8003690:	f000 fd2c 	bl	80040ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e049      	b.n	80037a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d106      	bne.n	800372a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7fd fca7 	bl	8001078 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2202      	movs	r2, #2
 800372e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3304      	adds	r3, #4
 800373a:	4619      	mov	r1, r3
 800373c:	4610      	mov	r0, r2
 800373e:	f000 fcd5 	bl	80040ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d109      	bne.n	80037d0 <HAL_TIM_PWM_Start+0x24>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	bf14      	ite	ne
 80037c8:	2301      	movne	r3, #1
 80037ca:	2300      	moveq	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	e03c      	b.n	800384a <HAL_TIM_PWM_Start+0x9e>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d109      	bne.n	80037ea <HAL_TIM_PWM_Start+0x3e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b01      	cmp	r3, #1
 80037e0:	bf14      	ite	ne
 80037e2:	2301      	movne	r3, #1
 80037e4:	2300      	moveq	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	e02f      	b.n	800384a <HAL_TIM_PWM_Start+0x9e>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d109      	bne.n	8003804 <HAL_TIM_PWM_Start+0x58>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	bf14      	ite	ne
 80037fc:	2301      	movne	r3, #1
 80037fe:	2300      	moveq	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	e022      	b.n	800384a <HAL_TIM_PWM_Start+0x9e>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	2b0c      	cmp	r3, #12
 8003808:	d109      	bne.n	800381e <HAL_TIM_PWM_Start+0x72>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b01      	cmp	r3, #1
 8003814:	bf14      	ite	ne
 8003816:	2301      	movne	r3, #1
 8003818:	2300      	moveq	r3, #0
 800381a:	b2db      	uxtb	r3, r3
 800381c:	e015      	b.n	800384a <HAL_TIM_PWM_Start+0x9e>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b10      	cmp	r3, #16
 8003822:	d109      	bne.n	8003838 <HAL_TIM_PWM_Start+0x8c>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b01      	cmp	r3, #1
 800382e:	bf14      	ite	ne
 8003830:	2301      	movne	r3, #1
 8003832:	2300      	moveq	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	e008      	b.n	800384a <HAL_TIM_PWM_Start+0x9e>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b01      	cmp	r3, #1
 8003842:	bf14      	ite	ne
 8003844:	2301      	movne	r3, #1
 8003846:	2300      	moveq	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e09c      	b.n	800398c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d104      	bne.n	8003862 <HAL_TIM_PWM_Start+0xb6>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003860:	e023      	b.n	80038aa <HAL_TIM_PWM_Start+0xfe>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b04      	cmp	r3, #4
 8003866:	d104      	bne.n	8003872 <HAL_TIM_PWM_Start+0xc6>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003870:	e01b      	b.n	80038aa <HAL_TIM_PWM_Start+0xfe>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b08      	cmp	r3, #8
 8003876:	d104      	bne.n	8003882 <HAL_TIM_PWM_Start+0xd6>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003880:	e013      	b.n	80038aa <HAL_TIM_PWM_Start+0xfe>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b0c      	cmp	r3, #12
 8003886:	d104      	bne.n	8003892 <HAL_TIM_PWM_Start+0xe6>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003890:	e00b      	b.n	80038aa <HAL_TIM_PWM_Start+0xfe>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b10      	cmp	r3, #16
 8003896:	d104      	bne.n	80038a2 <HAL_TIM_PWM_Start+0xf6>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038a0:	e003      	b.n	80038aa <HAL_TIM_PWM_Start+0xfe>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2202      	movs	r2, #2
 80038a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2201      	movs	r2, #1
 80038b0:	6839      	ldr	r1, [r7, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 ff8a 	bl	80047cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a35      	ldr	r2, [pc, #212]	; (8003994 <HAL_TIM_PWM_Start+0x1e8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d013      	beq.n	80038ea <HAL_TIM_PWM_Start+0x13e>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a34      	ldr	r2, [pc, #208]	; (8003998 <HAL_TIM_PWM_Start+0x1ec>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00e      	beq.n	80038ea <HAL_TIM_PWM_Start+0x13e>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a32      	ldr	r2, [pc, #200]	; (800399c <HAL_TIM_PWM_Start+0x1f0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d009      	beq.n	80038ea <HAL_TIM_PWM_Start+0x13e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a31      	ldr	r2, [pc, #196]	; (80039a0 <HAL_TIM_PWM_Start+0x1f4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d004      	beq.n	80038ea <HAL_TIM_PWM_Start+0x13e>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a2f      	ldr	r2, [pc, #188]	; (80039a4 <HAL_TIM_PWM_Start+0x1f8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d101      	bne.n	80038ee <HAL_TIM_PWM_Start+0x142>
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <HAL_TIM_PWM_Start+0x144>
 80038ee:	2300      	movs	r3, #0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d007      	beq.n	8003904 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003902:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a22      	ldr	r2, [pc, #136]	; (8003994 <HAL_TIM_PWM_Start+0x1e8>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d01d      	beq.n	800394a <HAL_TIM_PWM_Start+0x19e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003916:	d018      	beq.n	800394a <HAL_TIM_PWM_Start+0x19e>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a22      	ldr	r2, [pc, #136]	; (80039a8 <HAL_TIM_PWM_Start+0x1fc>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d013      	beq.n	800394a <HAL_TIM_PWM_Start+0x19e>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a21      	ldr	r2, [pc, #132]	; (80039ac <HAL_TIM_PWM_Start+0x200>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d00e      	beq.n	800394a <HAL_TIM_PWM_Start+0x19e>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a1f      	ldr	r2, [pc, #124]	; (80039b0 <HAL_TIM_PWM_Start+0x204>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d009      	beq.n	800394a <HAL_TIM_PWM_Start+0x19e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a17      	ldr	r2, [pc, #92]	; (8003998 <HAL_TIM_PWM_Start+0x1ec>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d004      	beq.n	800394a <HAL_TIM_PWM_Start+0x19e>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a15      	ldr	r2, [pc, #84]	; (800399c <HAL_TIM_PWM_Start+0x1f0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d115      	bne.n	8003976 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	4b18      	ldr	r3, [pc, #96]	; (80039b4 <HAL_TIM_PWM_Start+0x208>)
 8003952:	4013      	ands	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2b06      	cmp	r3, #6
 800395a:	d015      	beq.n	8003988 <HAL_TIM_PWM_Start+0x1dc>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003962:	d011      	beq.n	8003988 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0201 	orr.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003974:	e008      	b.n	8003988 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0201 	orr.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	e000      	b.n	800398a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003988:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40012c00 	.word	0x40012c00
 8003998:	40013400 	.word	0x40013400
 800399c:	40014000 	.word	0x40014000
 80039a0:	40014400 	.word	0x40014400
 80039a4:	40014800 	.word	0x40014800
 80039a8:	40000400 	.word	0x40000400
 80039ac:	40000800 	.word	0x40000800
 80039b0:	40000c00 	.word	0x40000c00
 80039b4:	00010007 	.word	0x00010007

080039b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e097      	b.n	8003afc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d106      	bne.n	80039e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7fd fb8b 	bl	80010fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2202      	movs	r2, #2
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80039fc:	f023 0307 	bic.w	r3, r3, #7
 8003a00:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	f000 fb6d 	bl	80040ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a3a:	f023 0303 	bic.w	r3, r3, #3
 8003a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	021b      	lsls	r3, r3, #8
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003a58:	f023 030c 	bic.w	r3, r3, #12
 8003a5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	021b      	lsls	r3, r3, #8
 8003a74:	4313      	orrs	r3, r2
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	011a      	lsls	r2, r3, #4
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	031b      	lsls	r3, r3, #12
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003a96:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003a9e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b14:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b1c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b24:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b2c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d110      	bne.n	8003b56 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d102      	bne.n	8003b40 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b3a:	7b7b      	ldrb	r3, [r7, #13]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d001      	beq.n	8003b44 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e069      	b.n	8003c18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b54:	e031      	b.n	8003bba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d110      	bne.n	8003b7e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b5c:	7bbb      	ldrb	r3, [r7, #14]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d102      	bne.n	8003b68 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b62:	7b3b      	ldrb	r3, [r7, #12]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d001      	beq.n	8003b6c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e055      	b.n	8003c18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b7c:	e01d      	b.n	8003bba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d108      	bne.n	8003b96 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b84:	7bbb      	ldrb	r3, [r7, #14]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d105      	bne.n	8003b96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b8a:	7b7b      	ldrb	r3, [r7, #13]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d102      	bne.n	8003b96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b90:	7b3b      	ldrb	r3, [r7, #12]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d001      	beq.n	8003b9a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e03e      	b.n	8003c18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2202      	movs	r2, #2
 8003bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <HAL_TIM_Encoder_Start+0xc4>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d008      	beq.n	8003bd8 <HAL_TIM_Encoder_Start+0xd4>
 8003bc6:	e00f      	b.n	8003be8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	2100      	movs	r1, #0
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 fdfb 	bl	80047cc <TIM_CCxChannelCmd>
      break;
 8003bd6:	e016      	b.n	8003c06 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	2104      	movs	r1, #4
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 fdf3 	bl	80047cc <TIM_CCxChannelCmd>
      break;
 8003be6:	e00e      	b.n	8003c06 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2201      	movs	r2, #1
 8003bee:	2100      	movs	r1, #0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fdeb 	bl	80047cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	2104      	movs	r1, #4
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fde4 	bl	80047cc <TIM_CCxChannelCmd>
      break;
 8003c04:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f042 0201 	orr.w	r2, r2, #1
 8003c14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d122      	bne.n	8003c7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d11b      	bne.n	8003c7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f06f 0202 	mvn.w	r2, #2
 8003c4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fa24 	bl	80040b0 <HAL_TIM_IC_CaptureCallback>
 8003c68:	e005      	b.n	8003c76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 fa16 	bl	800409c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 fa27 	bl	80040c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d122      	bne.n	8003cd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d11b      	bne.n	8003cd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f06f 0204 	mvn.w	r2, #4
 8003ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f9fa 	bl	80040b0 <HAL_TIM_IC_CaptureCallback>
 8003cbc:	e005      	b.n	8003cca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f9ec 	bl	800409c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f9fd 	bl	80040c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d122      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d11b      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f06f 0208 	mvn.w	r2, #8
 8003cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2204      	movs	r2, #4
 8003cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f9d0 	bl	80040b0 <HAL_TIM_IC_CaptureCallback>
 8003d10:	e005      	b.n	8003d1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f9c2 	bl	800409c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f9d3 	bl	80040c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f003 0310 	and.w	r3, r3, #16
 8003d2e:	2b10      	cmp	r3, #16
 8003d30:	d122      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	2b10      	cmp	r3, #16
 8003d3e:	d11b      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f06f 0210 	mvn.w	r2, #16
 8003d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2208      	movs	r2, #8
 8003d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f9a6 	bl	80040b0 <HAL_TIM_IC_CaptureCallback>
 8003d64:	e005      	b.n	8003d72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f998 	bl	800409c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f9a9 	bl	80040c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d10e      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d107      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f06f 0201 	mvn.w	r2, #1
 8003d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f972 	bl	8004088 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dae:	2b80      	cmp	r3, #128	; 0x80
 8003db0:	d10e      	bne.n	8003dd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dbc:	2b80      	cmp	r3, #128	; 0x80
 8003dbe:	d107      	bne.n	8003dd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fe34 	bl	8004a38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dde:	d10e      	bne.n	8003dfe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dea:	2b80      	cmp	r3, #128	; 0x80
 8003dec:	d107      	bne.n	8003dfe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fe27 	bl	8004a4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e08:	2b40      	cmp	r3, #64	; 0x40
 8003e0a:	d10e      	bne.n	8003e2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e16:	2b40      	cmp	r3, #64	; 0x40
 8003e18:	d107      	bne.n	8003e2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f957 	bl	80040d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	d10e      	bne.n	8003e56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f003 0320 	and.w	r3, r3, #32
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	d107      	bne.n	8003e56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f06f 0220 	mvn.w	r2, #32
 8003e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 fde7 	bl	8004a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e0ff      	b.n	800407e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b14      	cmp	r3, #20
 8003e8a:	f200 80f0 	bhi.w	800406e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003e8e:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e94:	08003ee9 	.word	0x08003ee9
 8003e98:	0800406f 	.word	0x0800406f
 8003e9c:	0800406f 	.word	0x0800406f
 8003ea0:	0800406f 	.word	0x0800406f
 8003ea4:	08003f29 	.word	0x08003f29
 8003ea8:	0800406f 	.word	0x0800406f
 8003eac:	0800406f 	.word	0x0800406f
 8003eb0:	0800406f 	.word	0x0800406f
 8003eb4:	08003f6b 	.word	0x08003f6b
 8003eb8:	0800406f 	.word	0x0800406f
 8003ebc:	0800406f 	.word	0x0800406f
 8003ec0:	0800406f 	.word	0x0800406f
 8003ec4:	08003fab 	.word	0x08003fab
 8003ec8:	0800406f 	.word	0x0800406f
 8003ecc:	0800406f 	.word	0x0800406f
 8003ed0:	0800406f 	.word	0x0800406f
 8003ed4:	08003fed 	.word	0x08003fed
 8003ed8:	0800406f 	.word	0x0800406f
 8003edc:	0800406f 	.word	0x0800406f
 8003ee0:	0800406f 	.word	0x0800406f
 8003ee4:	0800402d 	.word	0x0800402d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68b9      	ldr	r1, [r7, #8]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 f996 	bl	8004220 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699a      	ldr	r2, [r3, #24]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0208 	orr.w	r2, r2, #8
 8003f02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699a      	ldr	r2, [r3, #24]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0204 	bic.w	r2, r2, #4
 8003f12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6999      	ldr	r1, [r3, #24]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	619a      	str	r2, [r3, #24]
      break;
 8003f26:	e0a5      	b.n	8004074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fa06 	bl	8004340 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699a      	ldr	r2, [r3, #24]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699a      	ldr	r2, [r3, #24]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6999      	ldr	r1, [r3, #24]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	021a      	lsls	r2, r3, #8
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	619a      	str	r2, [r3, #24]
      break;
 8003f68:	e084      	b.n	8004074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68b9      	ldr	r1, [r7, #8]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 fa6f 	bl	8004454 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	69da      	ldr	r2, [r3, #28]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0208 	orr.w	r2, r2, #8
 8003f84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69da      	ldr	r2, [r3, #28]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0204 	bic.w	r2, r2, #4
 8003f94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	69d9      	ldr	r1, [r3, #28]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	691a      	ldr	r2, [r3, #16]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	61da      	str	r2, [r3, #28]
      break;
 8003fa8:	e064      	b.n	8004074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68b9      	ldr	r1, [r7, #8]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 fad7 	bl	8004564 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69da      	ldr	r2, [r3, #28]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	69da      	ldr	r2, [r3, #28]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	69d9      	ldr	r1, [r3, #28]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	021a      	lsls	r2, r3, #8
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	61da      	str	r2, [r3, #28]
      break;
 8003fea:	e043      	b.n	8004074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68b9      	ldr	r1, [r7, #8]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fb20 	bl	8004638 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0208 	orr.w	r2, r2, #8
 8004006:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0204 	bic.w	r2, r2, #4
 8004016:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800402a:	e023      	b.n	8004074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fb64 	bl	8004700 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004046:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004056:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	021a      	lsls	r2, r3, #8
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800406c:	e002      	b.n	8004074 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	75fb      	strb	r3, [r7, #23]
      break;
 8004072:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800407c:	7dfb      	ldrb	r3, [r7, #23]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop

08004088 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a40      	ldr	r2, [pc, #256]	; (8004200 <TIM_Base_SetConfig+0x114>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d013      	beq.n	800412c <TIM_Base_SetConfig+0x40>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410a:	d00f      	beq.n	800412c <TIM_Base_SetConfig+0x40>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a3d      	ldr	r2, [pc, #244]	; (8004204 <TIM_Base_SetConfig+0x118>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00b      	beq.n	800412c <TIM_Base_SetConfig+0x40>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a3c      	ldr	r2, [pc, #240]	; (8004208 <TIM_Base_SetConfig+0x11c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d007      	beq.n	800412c <TIM_Base_SetConfig+0x40>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a3b      	ldr	r2, [pc, #236]	; (800420c <TIM_Base_SetConfig+0x120>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d003      	beq.n	800412c <TIM_Base_SetConfig+0x40>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a3a      	ldr	r2, [pc, #232]	; (8004210 <TIM_Base_SetConfig+0x124>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d108      	bne.n	800413e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a2f      	ldr	r2, [pc, #188]	; (8004200 <TIM_Base_SetConfig+0x114>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d01f      	beq.n	8004186 <TIM_Base_SetConfig+0x9a>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414c:	d01b      	beq.n	8004186 <TIM_Base_SetConfig+0x9a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a2c      	ldr	r2, [pc, #176]	; (8004204 <TIM_Base_SetConfig+0x118>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d017      	beq.n	8004186 <TIM_Base_SetConfig+0x9a>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2b      	ldr	r2, [pc, #172]	; (8004208 <TIM_Base_SetConfig+0x11c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d013      	beq.n	8004186 <TIM_Base_SetConfig+0x9a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a2a      	ldr	r2, [pc, #168]	; (800420c <TIM_Base_SetConfig+0x120>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d00f      	beq.n	8004186 <TIM_Base_SetConfig+0x9a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a29      	ldr	r2, [pc, #164]	; (8004210 <TIM_Base_SetConfig+0x124>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00b      	beq.n	8004186 <TIM_Base_SetConfig+0x9a>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a28      	ldr	r2, [pc, #160]	; (8004214 <TIM_Base_SetConfig+0x128>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d007      	beq.n	8004186 <TIM_Base_SetConfig+0x9a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a27      	ldr	r2, [pc, #156]	; (8004218 <TIM_Base_SetConfig+0x12c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d003      	beq.n	8004186 <TIM_Base_SetConfig+0x9a>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a26      	ldr	r2, [pc, #152]	; (800421c <TIM_Base_SetConfig+0x130>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d108      	bne.n	8004198 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800418c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a10      	ldr	r2, [pc, #64]	; (8004200 <TIM_Base_SetConfig+0x114>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00f      	beq.n	80041e4 <TIM_Base_SetConfig+0xf8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a12      	ldr	r2, [pc, #72]	; (8004210 <TIM_Base_SetConfig+0x124>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00b      	beq.n	80041e4 <TIM_Base_SetConfig+0xf8>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a11      	ldr	r2, [pc, #68]	; (8004214 <TIM_Base_SetConfig+0x128>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d007      	beq.n	80041e4 <TIM_Base_SetConfig+0xf8>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a10      	ldr	r2, [pc, #64]	; (8004218 <TIM_Base_SetConfig+0x12c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d003      	beq.n	80041e4 <TIM_Base_SetConfig+0xf8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a0f      	ldr	r2, [pc, #60]	; (800421c <TIM_Base_SetConfig+0x130>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d103      	bne.n	80041ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	615a      	str	r2, [r3, #20]
}
 80041f2:	bf00      	nop
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40012c00 	.word	0x40012c00
 8004204:	40000400 	.word	0x40000400
 8004208:	40000800 	.word	0x40000800
 800420c:	40000c00 	.word	0x40000c00
 8004210:	40013400 	.word	0x40013400
 8004214:	40014000 	.word	0x40014000
 8004218:	40014400 	.word	0x40014400
 800421c:	40014800 	.word	0x40014800

08004220 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	f023 0201 	bic.w	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0303 	bic.w	r3, r3, #3
 800425a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f023 0302 	bic.w	r3, r3, #2
 800426c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	4313      	orrs	r3, r2
 8004276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a2c      	ldr	r2, [pc, #176]	; (800432c <TIM_OC1_SetConfig+0x10c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d00f      	beq.n	80042a0 <TIM_OC1_SetConfig+0x80>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a2b      	ldr	r2, [pc, #172]	; (8004330 <TIM_OC1_SetConfig+0x110>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d00b      	beq.n	80042a0 <TIM_OC1_SetConfig+0x80>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a2a      	ldr	r2, [pc, #168]	; (8004334 <TIM_OC1_SetConfig+0x114>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d007      	beq.n	80042a0 <TIM_OC1_SetConfig+0x80>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a29      	ldr	r2, [pc, #164]	; (8004338 <TIM_OC1_SetConfig+0x118>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d003      	beq.n	80042a0 <TIM_OC1_SetConfig+0x80>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a28      	ldr	r2, [pc, #160]	; (800433c <TIM_OC1_SetConfig+0x11c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d10c      	bne.n	80042ba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f023 0308 	bic.w	r3, r3, #8
 80042a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f023 0304 	bic.w	r3, r3, #4
 80042b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a1b      	ldr	r2, [pc, #108]	; (800432c <TIM_OC1_SetConfig+0x10c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00f      	beq.n	80042e2 <TIM_OC1_SetConfig+0xc2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a1a      	ldr	r2, [pc, #104]	; (8004330 <TIM_OC1_SetConfig+0x110>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00b      	beq.n	80042e2 <TIM_OC1_SetConfig+0xc2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a19      	ldr	r2, [pc, #100]	; (8004334 <TIM_OC1_SetConfig+0x114>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d007      	beq.n	80042e2 <TIM_OC1_SetConfig+0xc2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a18      	ldr	r2, [pc, #96]	; (8004338 <TIM_OC1_SetConfig+0x118>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d003      	beq.n	80042e2 <TIM_OC1_SetConfig+0xc2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a17      	ldr	r2, [pc, #92]	; (800433c <TIM_OC1_SetConfig+0x11c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d111      	bne.n	8004306 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	621a      	str	r2, [r3, #32]
}
 8004320:	bf00      	nop
 8004322:	371c      	adds	r7, #28
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	40012c00 	.word	0x40012c00
 8004330:	40013400 	.word	0x40013400
 8004334:	40014000 	.word	0x40014000
 8004338:	40014400 	.word	0x40014400
 800433c:	40014800 	.word	0x40014800

08004340 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	f023 0210 	bic.w	r2, r3, #16
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800436e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800437a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	021b      	lsls	r3, r3, #8
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	4313      	orrs	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f023 0320 	bic.w	r3, r3, #32
 800438e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	4313      	orrs	r3, r2
 800439a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a28      	ldr	r2, [pc, #160]	; (8004440 <TIM_OC2_SetConfig+0x100>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d003      	beq.n	80043ac <TIM_OC2_SetConfig+0x6c>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a27      	ldr	r2, [pc, #156]	; (8004444 <TIM_OC2_SetConfig+0x104>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d10d      	bne.n	80043c8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a1d      	ldr	r2, [pc, #116]	; (8004440 <TIM_OC2_SetConfig+0x100>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00f      	beq.n	80043f0 <TIM_OC2_SetConfig+0xb0>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a1c      	ldr	r2, [pc, #112]	; (8004444 <TIM_OC2_SetConfig+0x104>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00b      	beq.n	80043f0 <TIM_OC2_SetConfig+0xb0>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a1b      	ldr	r2, [pc, #108]	; (8004448 <TIM_OC2_SetConfig+0x108>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d007      	beq.n	80043f0 <TIM_OC2_SetConfig+0xb0>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a1a      	ldr	r2, [pc, #104]	; (800444c <TIM_OC2_SetConfig+0x10c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d003      	beq.n	80043f0 <TIM_OC2_SetConfig+0xb0>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a19      	ldr	r2, [pc, #100]	; (8004450 <TIM_OC2_SetConfig+0x110>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d113      	bne.n	8004418 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	621a      	str	r2, [r3, #32]
}
 8004432:	bf00      	nop
 8004434:	371c      	adds	r7, #28
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40012c00 	.word	0x40012c00
 8004444:	40013400 	.word	0x40013400
 8004448:	40014000 	.word	0x40014000
 800444c:	40014400 	.word	0x40014400
 8004450:	40014800 	.word	0x40014800

08004454 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0303 	bic.w	r3, r3, #3
 800448e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	021b      	lsls	r3, r3, #8
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a27      	ldr	r2, [pc, #156]	; (8004550 <TIM_OC3_SetConfig+0xfc>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d003      	beq.n	80044be <TIM_OC3_SetConfig+0x6a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a26      	ldr	r2, [pc, #152]	; (8004554 <TIM_OC3_SetConfig+0x100>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d10d      	bne.n	80044da <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	021b      	lsls	r3, r3, #8
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a1c      	ldr	r2, [pc, #112]	; (8004550 <TIM_OC3_SetConfig+0xfc>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00f      	beq.n	8004502 <TIM_OC3_SetConfig+0xae>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a1b      	ldr	r2, [pc, #108]	; (8004554 <TIM_OC3_SetConfig+0x100>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d00b      	beq.n	8004502 <TIM_OC3_SetConfig+0xae>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a1a      	ldr	r2, [pc, #104]	; (8004558 <TIM_OC3_SetConfig+0x104>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d007      	beq.n	8004502 <TIM_OC3_SetConfig+0xae>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a19      	ldr	r2, [pc, #100]	; (800455c <TIM_OC3_SetConfig+0x108>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d003      	beq.n	8004502 <TIM_OC3_SetConfig+0xae>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a18      	ldr	r2, [pc, #96]	; (8004560 <TIM_OC3_SetConfig+0x10c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d113      	bne.n	800452a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4313      	orrs	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	4313      	orrs	r3, r2
 8004528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	621a      	str	r2, [r3, #32]
}
 8004544:	bf00      	nop
 8004546:	371c      	adds	r7, #28
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	40012c00 	.word	0x40012c00
 8004554:	40013400 	.word	0x40013400
 8004558:	40014000 	.word	0x40014000
 800455c:	40014400 	.word	0x40014400
 8004560:	40014800 	.word	0x40014800

08004564 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800459e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	021b      	lsls	r3, r3, #8
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	031b      	lsls	r3, r3, #12
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a18      	ldr	r2, [pc, #96]	; (8004624 <TIM_OC4_SetConfig+0xc0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d00f      	beq.n	80045e8 <TIM_OC4_SetConfig+0x84>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a17      	ldr	r2, [pc, #92]	; (8004628 <TIM_OC4_SetConfig+0xc4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d00b      	beq.n	80045e8 <TIM_OC4_SetConfig+0x84>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a16      	ldr	r2, [pc, #88]	; (800462c <TIM_OC4_SetConfig+0xc8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d007      	beq.n	80045e8 <TIM_OC4_SetConfig+0x84>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a15      	ldr	r2, [pc, #84]	; (8004630 <TIM_OC4_SetConfig+0xcc>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d003      	beq.n	80045e8 <TIM_OC4_SetConfig+0x84>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a14      	ldr	r2, [pc, #80]	; (8004634 <TIM_OC4_SetConfig+0xd0>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d109      	bne.n	80045fc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	019b      	lsls	r3, r3, #6
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	621a      	str	r2, [r3, #32]
}
 8004616:	bf00      	nop
 8004618:	371c      	adds	r7, #28
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	40012c00 	.word	0x40012c00
 8004628:	40013400 	.word	0x40013400
 800462c:	40014000 	.word	0x40014000
 8004630:	40014400 	.word	0x40014400
 8004634:	40014800 	.word	0x40014800

08004638 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004638:	b480      	push	{r7}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800467c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	041b      	lsls	r3, r3, #16
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4313      	orrs	r3, r2
 8004688:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a17      	ldr	r2, [pc, #92]	; (80046ec <TIM_OC5_SetConfig+0xb4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d00f      	beq.n	80046b2 <TIM_OC5_SetConfig+0x7a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a16      	ldr	r2, [pc, #88]	; (80046f0 <TIM_OC5_SetConfig+0xb8>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d00b      	beq.n	80046b2 <TIM_OC5_SetConfig+0x7a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a15      	ldr	r2, [pc, #84]	; (80046f4 <TIM_OC5_SetConfig+0xbc>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d007      	beq.n	80046b2 <TIM_OC5_SetConfig+0x7a>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a14      	ldr	r2, [pc, #80]	; (80046f8 <TIM_OC5_SetConfig+0xc0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d003      	beq.n	80046b2 <TIM_OC5_SetConfig+0x7a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a13      	ldr	r2, [pc, #76]	; (80046fc <TIM_OC5_SetConfig+0xc4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d109      	bne.n	80046c6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	021b      	lsls	r3, r3, #8
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	621a      	str	r2, [r3, #32]
}
 80046e0:	bf00      	nop
 80046e2:	371c      	adds	r7, #28
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	40012c00 	.word	0x40012c00
 80046f0:	40013400 	.word	0x40013400
 80046f4:	40014000 	.word	0x40014000
 80046f8:	40014400 	.word	0x40014400
 80046fc:	40014800 	.word	0x40014800

08004700 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800472e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	021b      	lsls	r3, r3, #8
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4313      	orrs	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004746:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	051b      	lsls	r3, r3, #20
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	4313      	orrs	r3, r2
 8004752:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a18      	ldr	r2, [pc, #96]	; (80047b8 <TIM_OC6_SetConfig+0xb8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d00f      	beq.n	800477c <TIM_OC6_SetConfig+0x7c>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a17      	ldr	r2, [pc, #92]	; (80047bc <TIM_OC6_SetConfig+0xbc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d00b      	beq.n	800477c <TIM_OC6_SetConfig+0x7c>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a16      	ldr	r2, [pc, #88]	; (80047c0 <TIM_OC6_SetConfig+0xc0>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d007      	beq.n	800477c <TIM_OC6_SetConfig+0x7c>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a15      	ldr	r2, [pc, #84]	; (80047c4 <TIM_OC6_SetConfig+0xc4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d003      	beq.n	800477c <TIM_OC6_SetConfig+0x7c>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a14      	ldr	r2, [pc, #80]	; (80047c8 <TIM_OC6_SetConfig+0xc8>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d109      	bne.n	8004790 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004782:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	029b      	lsls	r3, r3, #10
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	621a      	str	r2, [r3, #32]
}
 80047aa:	bf00      	nop
 80047ac:	371c      	adds	r7, #28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40012c00 	.word	0x40012c00
 80047bc:	40013400 	.word	0x40013400
 80047c0:	40014000 	.word	0x40014000
 80047c4:	40014400 	.word	0x40014400
 80047c8:	40014800 	.word	0x40014800

080047cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f003 031f 	and.w	r3, r3, #31
 80047de:	2201      	movs	r2, #1
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a1a      	ldr	r2, [r3, #32]
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	43db      	mvns	r3, r3
 80047ee:	401a      	ands	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a1a      	ldr	r2, [r3, #32]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f003 031f 	and.w	r3, r3, #31
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	fa01 f303 	lsl.w	r3, r1, r3
 8004804:	431a      	orrs	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	621a      	str	r2, [r3, #32]
}
 800480a:	bf00      	nop
 800480c:	371c      	adds	r7, #28
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
	...

08004818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800482c:	2302      	movs	r3, #2
 800482e:	e068      	b.n	8004902 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a2e      	ldr	r2, [pc, #184]	; (8004910 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d004      	beq.n	8004864 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a2d      	ldr	r2, [pc, #180]	; (8004914 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d108      	bne.n	8004876 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800486a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a1e      	ldr	r2, [pc, #120]	; (8004910 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d01d      	beq.n	80048d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a2:	d018      	beq.n	80048d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a1b      	ldr	r2, [pc, #108]	; (8004918 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d013      	beq.n	80048d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a1a      	ldr	r2, [pc, #104]	; (800491c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00e      	beq.n	80048d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a18      	ldr	r2, [pc, #96]	; (8004920 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d009      	beq.n	80048d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a13      	ldr	r2, [pc, #76]	; (8004914 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d004      	beq.n	80048d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a14      	ldr	r2, [pc, #80]	; (8004924 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d10c      	bne.n	80048f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	40012c00 	.word	0x40012c00
 8004914:	40013400 	.word	0x40013400
 8004918:	40000400 	.word	0x40000400
 800491c:	40000800 	.word	0x40000800
 8004920:	40000c00 	.word	0x40000c00
 8004924:	40014000 	.word	0x40014000

08004928 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800493c:	2b01      	cmp	r3, #1
 800493e:	d101      	bne.n	8004944 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004940:	2302      	movs	r3, #2
 8004942:	e065      	b.n	8004a10 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	4313      	orrs	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4313      	orrs	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	4313      	orrs	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	041b      	lsls	r3, r3, #16
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a16      	ldr	r2, [pc, #88]	; (8004a1c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d004      	beq.n	80049d2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a14      	ldr	r2, [pc, #80]	; (8004a20 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d115      	bne.n	80049fe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	051b      	lsls	r3, r3, #20
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	40012c00 	.word	0x40012c00
 8004a20:	40013400 	.word	0x40013400

08004a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e040      	b.n	8004af4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fc fc70 	bl	8001368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2224      	movs	r2, #36	; 0x24
 8004a8c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0201 	bic.w	r2, r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fb2e 	bl	8005100 <UART_SetConfig>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d101      	bne.n	8004aae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e022      	b.n	8004af4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fdda 	bl	8005670 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004aca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689a      	ldr	r2, [r3, #8]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ada:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fe61 	bl	80057b4 <UART_CheckIdleState>
 8004af2:	4603      	mov	r3, r0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b0ba      	sub	sp, #232	; 0xe8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004b26:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004b30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d115      	bne.n	8004b64 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b3c:	f003 0320 	and.w	r3, r3, #32
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00f      	beq.n	8004b64 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b48:	f003 0320 	and.w	r3, r3, #32
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d009      	beq.n	8004b64 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 82a6 	beq.w	80050a6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	4798      	blx	r3
      }
      return;
 8004b62:	e2a0      	b.n	80050a6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004b64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 8117 	beq.w	8004d9c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d106      	bne.n	8004b88 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004b7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004b7e:	4b85      	ldr	r3, [pc, #532]	; (8004d94 <HAL_UART_IRQHandler+0x298>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 810a 	beq.w	8004d9c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d011      	beq.n	8004bb8 <HAL_UART_IRQHandler+0xbc>
 8004b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00b      	beq.n	8004bb8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bae:	f043 0201 	orr.w	r2, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d011      	beq.n	8004be8 <HAL_UART_IRQHandler+0xec>
 8004bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00b      	beq.n	8004be8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bde:	f043 0204 	orr.w	r2, r3, #4
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d011      	beq.n	8004c18 <HAL_UART_IRQHandler+0x11c>
 8004bf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00b      	beq.n	8004c18 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2204      	movs	r2, #4
 8004c06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c0e:	f043 0202 	orr.w	r2, r3, #2
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c1c:	f003 0308 	and.w	r3, r3, #8
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d017      	beq.n	8004c54 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c28:	f003 0320 	and.w	r3, r3, #32
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d105      	bne.n	8004c3c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c34:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00b      	beq.n	8004c54 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2208      	movs	r2, #8
 8004c42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c4a:	f043 0208 	orr.w	r2, r3, #8
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d012      	beq.n	8004c86 <HAL_UART_IRQHandler+0x18a>
 8004c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00c      	beq.n	8004c86 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c7c:	f043 0220 	orr.w	r2, r3, #32
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 820c 	beq.w	80050aa <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00d      	beq.n	8004cba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ca2:	f003 0320 	and.w	r3, r3, #32
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d007      	beq.n	8004cba <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cce:	2b40      	cmp	r3, #64	; 0x40
 8004cd0:	d005      	beq.n	8004cde <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004cd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cd6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d04f      	beq.n	8004d7e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fe75 	bl	80059ce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cee:	2b40      	cmp	r3, #64	; 0x40
 8004cf0:	d141      	bne.n	8004d76 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3308      	adds	r3, #8
 8004cf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3308      	adds	r3, #8
 8004d1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d2e:	e841 2300 	strex	r3, r2, [r1]
 8004d32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1d9      	bne.n	8004cf2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d013      	beq.n	8004d6e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4a:	4a13      	ldr	r2, [pc, #76]	; (8004d98 <HAL_UART_IRQHandler+0x29c>)
 8004d4c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fc febc 	bl	8001ad0 <HAL_DMA_Abort_IT>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d017      	beq.n	8004d8e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004d68:	4610      	mov	r0, r2
 8004d6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d6c:	e00f      	b.n	8004d8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f9b0 	bl	80050d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d74:	e00b      	b.n	8004d8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f9ac 	bl	80050d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d7c:	e007      	b.n	8004d8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f9a8 	bl	80050d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004d8c:	e18d      	b.n	80050aa <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d8e:	bf00      	nop
    return;
 8004d90:	e18b      	b.n	80050aa <HAL_UART_IRQHandler+0x5ae>
 8004d92:	bf00      	nop
 8004d94:	04000120 	.word	0x04000120
 8004d98:	08005a95 	.word	0x08005a95

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	f040 8146 	bne.w	8005032 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004daa:	f003 0310 	and.w	r3, r3, #16
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 813f 	beq.w	8005032 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004db8:	f003 0310 	and.w	r3, r3, #16
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8138 	beq.w	8005032 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2210      	movs	r2, #16
 8004dc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd4:	2b40      	cmp	r3, #64	; 0x40
 8004dd6:	f040 80b4 	bne.w	8004f42 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004de6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 815f 	beq.w	80050ae <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004df6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	f080 8157 	bcs.w	80050ae <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f040 8085 	bne.w	8004f26 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e28:	e853 3f00 	ldrex	r3, [r3]
 8004e2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	461a      	mov	r2, r3
 8004e42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e4a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e56:	e841 2300 	strex	r3, r2, [r1]
 8004e5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1da      	bne.n	8004e1c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	3308      	adds	r3, #8
 8004e6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e70:	e853 3f00 	ldrex	r3, [r3]
 8004e74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e78:	f023 0301 	bic.w	r3, r3, #1
 8004e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3308      	adds	r3, #8
 8004e86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e96:	e841 2300 	strex	r3, r2, [r1]
 8004e9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1e1      	bne.n	8004e66 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3308      	adds	r3, #8
 8004ea8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004eac:	e853 3f00 	ldrex	r3, [r3]
 8004eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3308      	adds	r3, #8
 8004ec2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ec6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ec8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ecc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e3      	bne.n	8004ea2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2220      	movs	r2, #32
 8004ede:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eee:	e853 3f00 	ldrex	r3, [r3]
 8004ef2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ef6:	f023 0310 	bic.w	r3, r3, #16
 8004efa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f08:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f0a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f10:	e841 2300 	strex	r3, r2, [r1]
 8004f14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e4      	bne.n	8004ee6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fc fd97 	bl	8001a54 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	4619      	mov	r1, r3
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f8d4 	bl	80050e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f40:	e0b5      	b.n	80050ae <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 80a7 	beq.w	80050b2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004f64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 80a2 	beq.w	80050b2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f76:	e853 3f00 	ldrex	r3, [r3]
 8004f7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f90:	647b      	str	r3, [r7, #68]	; 0x44
 8004f92:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f98:	e841 2300 	strex	r3, r2, [r1]
 8004f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1e4      	bne.n	8004f6e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3308      	adds	r3, #8
 8004faa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	e853 3f00 	ldrex	r3, [r3]
 8004fb2:	623b      	str	r3, [r7, #32]
   return(result);
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	f023 0301 	bic.w	r3, r3, #1
 8004fba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3308      	adds	r3, #8
 8004fc4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004fc8:	633a      	str	r2, [r7, #48]	; 0x30
 8004fca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fd0:	e841 2300 	strex	r3, r2, [r1]
 8004fd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1e3      	bne.n	8004fa4 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	e853 3f00 	ldrex	r3, [r3]
 8004ffa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 0310 	bic.w	r3, r3, #16
 8005002:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005010:	61fb      	str	r3, [r7, #28]
 8005012:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005014:	69b9      	ldr	r1, [r7, #24]
 8005016:	69fa      	ldr	r2, [r7, #28]
 8005018:	e841 2300 	strex	r3, r2, [r1]
 800501c:	617b      	str	r3, [r7, #20]
   return(result);
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1e4      	bne.n	8004fee <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005024:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005028:	4619      	mov	r1, r3
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f85c 	bl	80050e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005030:	e03f      	b.n	80050b2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00e      	beq.n	800505c <HAL_UART_IRQHandler+0x560>
 800503e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d008      	beq.n	800505c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005052:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fd5d 	bl	8005b14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800505a:	e02d      	b.n	80050b8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800505c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00e      	beq.n	8005086 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800506c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005070:	2b00      	cmp	r3, #0
 8005072:	d008      	beq.n	8005086 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01c      	beq.n	80050b6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	4798      	blx	r3
    }
    return;
 8005084:	e017      	b.n	80050b6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800508a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508e:	2b00      	cmp	r3, #0
 8005090:	d012      	beq.n	80050b8 <HAL_UART_IRQHandler+0x5bc>
 8005092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00c      	beq.n	80050b8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fd0e 	bl	8005ac0 <UART_EndTransmit_IT>
    return;
 80050a4:	e008      	b.n	80050b8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80050a6:	bf00      	nop
 80050a8:	e006      	b.n	80050b8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80050aa:	bf00      	nop
 80050ac:	e004      	b.n	80050b8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80050ae:	bf00      	nop
 80050b0:	e002      	b.n	80050b8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80050b2:	bf00      	nop
 80050b4:	e000      	b.n	80050b8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80050b6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80050b8:	37e8      	adds	r7, #232	; 0xe8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop

080050c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	460b      	mov	r3, r1
 80050f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005104:	b08a      	sub	sp, #40	; 0x28
 8005106:	af00      	add	r7, sp, #0
 8005108:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	431a      	orrs	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	431a      	orrs	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	4313      	orrs	r3, r2
 8005126:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	4ba4      	ldr	r3, [pc, #656]	; (80053c0 <UART_SetConfig+0x2c0>)
 8005130:	4013      	ands	r3, r2
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	6812      	ldr	r2, [r2, #0]
 8005136:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005138:	430b      	orrs	r3, r1
 800513a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a99      	ldr	r2, [pc, #612]	; (80053c4 <UART_SetConfig+0x2c4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d004      	beq.n	800516c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005168:	4313      	orrs	r3, r2
 800516a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517c:	430a      	orrs	r2, r1
 800517e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a90      	ldr	r2, [pc, #576]	; (80053c8 <UART_SetConfig+0x2c8>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d126      	bne.n	80051d8 <UART_SetConfig+0xd8>
 800518a:	4b90      	ldr	r3, [pc, #576]	; (80053cc <UART_SetConfig+0x2cc>)
 800518c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005190:	f003 0303 	and.w	r3, r3, #3
 8005194:	2b03      	cmp	r3, #3
 8005196:	d81b      	bhi.n	80051d0 <UART_SetConfig+0xd0>
 8005198:	a201      	add	r2, pc, #4	; (adr r2, 80051a0 <UART_SetConfig+0xa0>)
 800519a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519e:	bf00      	nop
 80051a0:	080051b1 	.word	0x080051b1
 80051a4:	080051c1 	.word	0x080051c1
 80051a8:	080051b9 	.word	0x080051b9
 80051ac:	080051c9 	.word	0x080051c9
 80051b0:	2301      	movs	r3, #1
 80051b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051b6:	e116      	b.n	80053e6 <UART_SetConfig+0x2e6>
 80051b8:	2302      	movs	r3, #2
 80051ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051be:	e112      	b.n	80053e6 <UART_SetConfig+0x2e6>
 80051c0:	2304      	movs	r3, #4
 80051c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c6:	e10e      	b.n	80053e6 <UART_SetConfig+0x2e6>
 80051c8:	2308      	movs	r3, #8
 80051ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ce:	e10a      	b.n	80053e6 <UART_SetConfig+0x2e6>
 80051d0:	2310      	movs	r3, #16
 80051d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d6:	e106      	b.n	80053e6 <UART_SetConfig+0x2e6>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a7c      	ldr	r2, [pc, #496]	; (80053d0 <UART_SetConfig+0x2d0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d138      	bne.n	8005254 <UART_SetConfig+0x154>
 80051e2:	4b7a      	ldr	r3, [pc, #488]	; (80053cc <UART_SetConfig+0x2cc>)
 80051e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e8:	f003 030c 	and.w	r3, r3, #12
 80051ec:	2b0c      	cmp	r3, #12
 80051ee:	d82d      	bhi.n	800524c <UART_SetConfig+0x14c>
 80051f0:	a201      	add	r2, pc, #4	; (adr r2, 80051f8 <UART_SetConfig+0xf8>)
 80051f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f6:	bf00      	nop
 80051f8:	0800522d 	.word	0x0800522d
 80051fc:	0800524d 	.word	0x0800524d
 8005200:	0800524d 	.word	0x0800524d
 8005204:	0800524d 	.word	0x0800524d
 8005208:	0800523d 	.word	0x0800523d
 800520c:	0800524d 	.word	0x0800524d
 8005210:	0800524d 	.word	0x0800524d
 8005214:	0800524d 	.word	0x0800524d
 8005218:	08005235 	.word	0x08005235
 800521c:	0800524d 	.word	0x0800524d
 8005220:	0800524d 	.word	0x0800524d
 8005224:	0800524d 	.word	0x0800524d
 8005228:	08005245 	.word	0x08005245
 800522c:	2300      	movs	r3, #0
 800522e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005232:	e0d8      	b.n	80053e6 <UART_SetConfig+0x2e6>
 8005234:	2302      	movs	r3, #2
 8005236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800523a:	e0d4      	b.n	80053e6 <UART_SetConfig+0x2e6>
 800523c:	2304      	movs	r3, #4
 800523e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005242:	e0d0      	b.n	80053e6 <UART_SetConfig+0x2e6>
 8005244:	2308      	movs	r3, #8
 8005246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800524a:	e0cc      	b.n	80053e6 <UART_SetConfig+0x2e6>
 800524c:	2310      	movs	r3, #16
 800524e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005252:	e0c8      	b.n	80053e6 <UART_SetConfig+0x2e6>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a5e      	ldr	r2, [pc, #376]	; (80053d4 <UART_SetConfig+0x2d4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d125      	bne.n	80052aa <UART_SetConfig+0x1aa>
 800525e:	4b5b      	ldr	r3, [pc, #364]	; (80053cc <UART_SetConfig+0x2cc>)
 8005260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005264:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005268:	2b30      	cmp	r3, #48	; 0x30
 800526a:	d016      	beq.n	800529a <UART_SetConfig+0x19a>
 800526c:	2b30      	cmp	r3, #48	; 0x30
 800526e:	d818      	bhi.n	80052a2 <UART_SetConfig+0x1a2>
 8005270:	2b20      	cmp	r3, #32
 8005272:	d00a      	beq.n	800528a <UART_SetConfig+0x18a>
 8005274:	2b20      	cmp	r3, #32
 8005276:	d814      	bhi.n	80052a2 <UART_SetConfig+0x1a2>
 8005278:	2b00      	cmp	r3, #0
 800527a:	d002      	beq.n	8005282 <UART_SetConfig+0x182>
 800527c:	2b10      	cmp	r3, #16
 800527e:	d008      	beq.n	8005292 <UART_SetConfig+0x192>
 8005280:	e00f      	b.n	80052a2 <UART_SetConfig+0x1a2>
 8005282:	2300      	movs	r3, #0
 8005284:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005288:	e0ad      	b.n	80053e6 <UART_SetConfig+0x2e6>
 800528a:	2302      	movs	r3, #2
 800528c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005290:	e0a9      	b.n	80053e6 <UART_SetConfig+0x2e6>
 8005292:	2304      	movs	r3, #4
 8005294:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005298:	e0a5      	b.n	80053e6 <UART_SetConfig+0x2e6>
 800529a:	2308      	movs	r3, #8
 800529c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052a0:	e0a1      	b.n	80053e6 <UART_SetConfig+0x2e6>
 80052a2:	2310      	movs	r3, #16
 80052a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052a8:	e09d      	b.n	80053e6 <UART_SetConfig+0x2e6>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a4a      	ldr	r2, [pc, #296]	; (80053d8 <UART_SetConfig+0x2d8>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d125      	bne.n	8005300 <UART_SetConfig+0x200>
 80052b4:	4b45      	ldr	r3, [pc, #276]	; (80053cc <UART_SetConfig+0x2cc>)
 80052b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052be:	2bc0      	cmp	r3, #192	; 0xc0
 80052c0:	d016      	beq.n	80052f0 <UART_SetConfig+0x1f0>
 80052c2:	2bc0      	cmp	r3, #192	; 0xc0
 80052c4:	d818      	bhi.n	80052f8 <UART_SetConfig+0x1f8>
 80052c6:	2b80      	cmp	r3, #128	; 0x80
 80052c8:	d00a      	beq.n	80052e0 <UART_SetConfig+0x1e0>
 80052ca:	2b80      	cmp	r3, #128	; 0x80
 80052cc:	d814      	bhi.n	80052f8 <UART_SetConfig+0x1f8>
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d002      	beq.n	80052d8 <UART_SetConfig+0x1d8>
 80052d2:	2b40      	cmp	r3, #64	; 0x40
 80052d4:	d008      	beq.n	80052e8 <UART_SetConfig+0x1e8>
 80052d6:	e00f      	b.n	80052f8 <UART_SetConfig+0x1f8>
 80052d8:	2300      	movs	r3, #0
 80052da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052de:	e082      	b.n	80053e6 <UART_SetConfig+0x2e6>
 80052e0:	2302      	movs	r3, #2
 80052e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e6:	e07e      	b.n	80053e6 <UART_SetConfig+0x2e6>
 80052e8:	2304      	movs	r3, #4
 80052ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ee:	e07a      	b.n	80053e6 <UART_SetConfig+0x2e6>
 80052f0:	2308      	movs	r3, #8
 80052f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052f6:	e076      	b.n	80053e6 <UART_SetConfig+0x2e6>
 80052f8:	2310      	movs	r3, #16
 80052fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052fe:	e072      	b.n	80053e6 <UART_SetConfig+0x2e6>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a35      	ldr	r2, [pc, #212]	; (80053dc <UART_SetConfig+0x2dc>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d12a      	bne.n	8005360 <UART_SetConfig+0x260>
 800530a:	4b30      	ldr	r3, [pc, #192]	; (80053cc <UART_SetConfig+0x2cc>)
 800530c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005314:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005318:	d01a      	beq.n	8005350 <UART_SetConfig+0x250>
 800531a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800531e:	d81b      	bhi.n	8005358 <UART_SetConfig+0x258>
 8005320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005324:	d00c      	beq.n	8005340 <UART_SetConfig+0x240>
 8005326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800532a:	d815      	bhi.n	8005358 <UART_SetConfig+0x258>
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <UART_SetConfig+0x238>
 8005330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005334:	d008      	beq.n	8005348 <UART_SetConfig+0x248>
 8005336:	e00f      	b.n	8005358 <UART_SetConfig+0x258>
 8005338:	2300      	movs	r3, #0
 800533a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800533e:	e052      	b.n	80053e6 <UART_SetConfig+0x2e6>
 8005340:	2302      	movs	r3, #2
 8005342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005346:	e04e      	b.n	80053e6 <UART_SetConfig+0x2e6>
 8005348:	2304      	movs	r3, #4
 800534a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800534e:	e04a      	b.n	80053e6 <UART_SetConfig+0x2e6>
 8005350:	2308      	movs	r3, #8
 8005352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005356:	e046      	b.n	80053e6 <UART_SetConfig+0x2e6>
 8005358:	2310      	movs	r3, #16
 800535a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800535e:	e042      	b.n	80053e6 <UART_SetConfig+0x2e6>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a17      	ldr	r2, [pc, #92]	; (80053c4 <UART_SetConfig+0x2c4>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d13a      	bne.n	80053e0 <UART_SetConfig+0x2e0>
 800536a:	4b18      	ldr	r3, [pc, #96]	; (80053cc <UART_SetConfig+0x2cc>)
 800536c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005370:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005374:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005378:	d01a      	beq.n	80053b0 <UART_SetConfig+0x2b0>
 800537a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800537e:	d81b      	bhi.n	80053b8 <UART_SetConfig+0x2b8>
 8005380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005384:	d00c      	beq.n	80053a0 <UART_SetConfig+0x2a0>
 8005386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800538a:	d815      	bhi.n	80053b8 <UART_SetConfig+0x2b8>
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <UART_SetConfig+0x298>
 8005390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005394:	d008      	beq.n	80053a8 <UART_SetConfig+0x2a8>
 8005396:	e00f      	b.n	80053b8 <UART_SetConfig+0x2b8>
 8005398:	2300      	movs	r3, #0
 800539a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800539e:	e022      	b.n	80053e6 <UART_SetConfig+0x2e6>
 80053a0:	2302      	movs	r3, #2
 80053a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053a6:	e01e      	b.n	80053e6 <UART_SetConfig+0x2e6>
 80053a8:	2304      	movs	r3, #4
 80053aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ae:	e01a      	b.n	80053e6 <UART_SetConfig+0x2e6>
 80053b0:	2308      	movs	r3, #8
 80053b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053b6:	e016      	b.n	80053e6 <UART_SetConfig+0x2e6>
 80053b8:	2310      	movs	r3, #16
 80053ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053be:	e012      	b.n	80053e6 <UART_SetConfig+0x2e6>
 80053c0:	efff69f3 	.word	0xefff69f3
 80053c4:	40008000 	.word	0x40008000
 80053c8:	40013800 	.word	0x40013800
 80053cc:	40021000 	.word	0x40021000
 80053d0:	40004400 	.word	0x40004400
 80053d4:	40004800 	.word	0x40004800
 80053d8:	40004c00 	.word	0x40004c00
 80053dc:	40005000 	.word	0x40005000
 80053e0:	2310      	movs	r3, #16
 80053e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a9f      	ldr	r2, [pc, #636]	; (8005668 <UART_SetConfig+0x568>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d17a      	bne.n	80054e6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d824      	bhi.n	8005442 <UART_SetConfig+0x342>
 80053f8:	a201      	add	r2, pc, #4	; (adr r2, 8005400 <UART_SetConfig+0x300>)
 80053fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fe:	bf00      	nop
 8005400:	08005425 	.word	0x08005425
 8005404:	08005443 	.word	0x08005443
 8005408:	0800542d 	.word	0x0800542d
 800540c:	08005443 	.word	0x08005443
 8005410:	08005433 	.word	0x08005433
 8005414:	08005443 	.word	0x08005443
 8005418:	08005443 	.word	0x08005443
 800541c:	08005443 	.word	0x08005443
 8005420:	0800543b 	.word	0x0800543b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005424:	f7fd fbcc 	bl	8002bc0 <HAL_RCC_GetPCLK1Freq>
 8005428:	61f8      	str	r0, [r7, #28]
        break;
 800542a:	e010      	b.n	800544e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800542c:	4b8f      	ldr	r3, [pc, #572]	; (800566c <UART_SetConfig+0x56c>)
 800542e:	61fb      	str	r3, [r7, #28]
        break;
 8005430:	e00d      	b.n	800544e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005432:	f7fd fb2d 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8005436:	61f8      	str	r0, [r7, #28]
        break;
 8005438:	e009      	b.n	800544e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800543a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800543e:	61fb      	str	r3, [r7, #28]
        break;
 8005440:	e005      	b.n	800544e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800544c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 80fb 	beq.w	800564c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	4613      	mov	r3, r2
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	4413      	add	r3, r2
 8005460:	69fa      	ldr	r2, [r7, #28]
 8005462:	429a      	cmp	r2, r3
 8005464:	d305      	bcc.n	8005472 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800546c:	69fa      	ldr	r2, [r7, #28]
 800546e:	429a      	cmp	r2, r3
 8005470:	d903      	bls.n	800547a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005478:	e0e8      	b.n	800564c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	2200      	movs	r2, #0
 800547e:	461c      	mov	r4, r3
 8005480:	4615      	mov	r5, r2
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	f04f 0300 	mov.w	r3, #0
 800548a:	022b      	lsls	r3, r5, #8
 800548c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005490:	0222      	lsls	r2, r4, #8
 8005492:	68f9      	ldr	r1, [r7, #12]
 8005494:	6849      	ldr	r1, [r1, #4]
 8005496:	0849      	lsrs	r1, r1, #1
 8005498:	2000      	movs	r0, #0
 800549a:	4688      	mov	r8, r1
 800549c:	4681      	mov	r9, r0
 800549e:	eb12 0a08 	adds.w	sl, r2, r8
 80054a2:	eb43 0b09 	adc.w	fp, r3, r9
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	603b      	str	r3, [r7, #0]
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054b4:	4650      	mov	r0, sl
 80054b6:	4659      	mov	r1, fp
 80054b8:	f7fa fe86 	bl	80001c8 <__aeabi_uldivmod>
 80054bc:	4602      	mov	r2, r0
 80054be:	460b      	mov	r3, r1
 80054c0:	4613      	mov	r3, r2
 80054c2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054ca:	d308      	bcc.n	80054de <UART_SetConfig+0x3de>
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054d2:	d204      	bcs.n	80054de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	60da      	str	r2, [r3, #12]
 80054dc:	e0b6      	b.n	800564c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80054e4:	e0b2      	b.n	800564c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ee:	d15e      	bne.n	80055ae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80054f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054f4:	2b08      	cmp	r3, #8
 80054f6:	d828      	bhi.n	800554a <UART_SetConfig+0x44a>
 80054f8:	a201      	add	r2, pc, #4	; (adr r2, 8005500 <UART_SetConfig+0x400>)
 80054fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fe:	bf00      	nop
 8005500:	08005525 	.word	0x08005525
 8005504:	0800552d 	.word	0x0800552d
 8005508:	08005535 	.word	0x08005535
 800550c:	0800554b 	.word	0x0800554b
 8005510:	0800553b 	.word	0x0800553b
 8005514:	0800554b 	.word	0x0800554b
 8005518:	0800554b 	.word	0x0800554b
 800551c:	0800554b 	.word	0x0800554b
 8005520:	08005543 	.word	0x08005543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005524:	f7fd fb4c 	bl	8002bc0 <HAL_RCC_GetPCLK1Freq>
 8005528:	61f8      	str	r0, [r7, #28]
        break;
 800552a:	e014      	b.n	8005556 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800552c:	f7fd fb5e 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 8005530:	61f8      	str	r0, [r7, #28]
        break;
 8005532:	e010      	b.n	8005556 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005534:	4b4d      	ldr	r3, [pc, #308]	; (800566c <UART_SetConfig+0x56c>)
 8005536:	61fb      	str	r3, [r7, #28]
        break;
 8005538:	e00d      	b.n	8005556 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800553a:	f7fd faa9 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 800553e:	61f8      	str	r0, [r7, #28]
        break;
 8005540:	e009      	b.n	8005556 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005546:	61fb      	str	r3, [r7, #28]
        break;
 8005548:	e005      	b.n	8005556 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800554a:	2300      	movs	r3, #0
 800554c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005554:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d077      	beq.n	800564c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	005a      	lsls	r2, r3, #1
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	085b      	lsrs	r3, r3, #1
 8005566:	441a      	add	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005570:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	2b0f      	cmp	r3, #15
 8005576:	d916      	bls.n	80055a6 <UART_SetConfig+0x4a6>
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800557e:	d212      	bcs.n	80055a6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	b29b      	uxth	r3, r3
 8005584:	f023 030f 	bic.w	r3, r3, #15
 8005588:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	085b      	lsrs	r3, r3, #1
 800558e:	b29b      	uxth	r3, r3
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	b29a      	uxth	r2, r3
 8005596:	8afb      	ldrh	r3, [r7, #22]
 8005598:	4313      	orrs	r3, r2
 800559a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	8afa      	ldrh	r2, [r7, #22]
 80055a2:	60da      	str	r2, [r3, #12]
 80055a4:	e052      	b.n	800564c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055ac:	e04e      	b.n	800564c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d827      	bhi.n	8005606 <UART_SetConfig+0x506>
 80055b6:	a201      	add	r2, pc, #4	; (adr r2, 80055bc <UART_SetConfig+0x4bc>)
 80055b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055bc:	080055e1 	.word	0x080055e1
 80055c0:	080055e9 	.word	0x080055e9
 80055c4:	080055f1 	.word	0x080055f1
 80055c8:	08005607 	.word	0x08005607
 80055cc:	080055f7 	.word	0x080055f7
 80055d0:	08005607 	.word	0x08005607
 80055d4:	08005607 	.word	0x08005607
 80055d8:	08005607 	.word	0x08005607
 80055dc:	080055ff 	.word	0x080055ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055e0:	f7fd faee 	bl	8002bc0 <HAL_RCC_GetPCLK1Freq>
 80055e4:	61f8      	str	r0, [r7, #28]
        break;
 80055e6:	e014      	b.n	8005612 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055e8:	f7fd fb00 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 80055ec:	61f8      	str	r0, [r7, #28]
        break;
 80055ee:	e010      	b.n	8005612 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055f0:	4b1e      	ldr	r3, [pc, #120]	; (800566c <UART_SetConfig+0x56c>)
 80055f2:	61fb      	str	r3, [r7, #28]
        break;
 80055f4:	e00d      	b.n	8005612 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055f6:	f7fd fa4b 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 80055fa:	61f8      	str	r0, [r7, #28]
        break;
 80055fc:	e009      	b.n	8005612 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005602:	61fb      	str	r3, [r7, #28]
        break;
 8005604:	e005      	b.n	8005612 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005610:	bf00      	nop
    }

    if (pclk != 0U)
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d019      	beq.n	800564c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	085a      	lsrs	r2, r3, #1
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	441a      	add	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	fbb2 f3f3 	udiv	r3, r2, r3
 800562a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	2b0f      	cmp	r3, #15
 8005630:	d909      	bls.n	8005646 <UART_SetConfig+0x546>
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005638:	d205      	bcs.n	8005646 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	b29a      	uxth	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60da      	str	r2, [r3, #12]
 8005644:	e002      	b.n	800564c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005658:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800565c:	4618      	mov	r0, r3
 800565e:	3728      	adds	r7, #40	; 0x28
 8005660:	46bd      	mov	sp, r7
 8005662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005666:	bf00      	nop
 8005668:	40008000 	.word	0x40008000
 800566c:	00f42400 	.word	0x00f42400

08005670 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00a      	beq.n	800569a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00a      	beq.n	80056bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00a      	beq.n	80056de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	f003 0308 	and.w	r3, r3, #8
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00a      	beq.n	8005700 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	f003 0310 	and.w	r3, r3, #16
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00a      	beq.n	8005722 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	f003 0320 	and.w	r3, r3, #32
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574c:	2b00      	cmp	r3, #0
 800574e:	d01a      	beq.n	8005786 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800576e:	d10a      	bne.n	8005786 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00a      	beq.n	80057a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	605a      	str	r2, [r3, #4]
  }
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af02      	add	r7, sp, #8
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057c4:	f7fb ff4c 	bl	8001660 <HAL_GetTick>
 80057c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0308 	and.w	r3, r3, #8
 80057d4:	2b08      	cmp	r3, #8
 80057d6:	d10e      	bne.n	80057f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f82d 	bl	8005846 <UART_WaitOnFlagUntilTimeout>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e023      	b.n	800583e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0304 	and.w	r3, r3, #4
 8005800:	2b04      	cmp	r3, #4
 8005802:	d10e      	bne.n	8005822 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005804:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f817 	bl	8005846 <UART_WaitOnFlagUntilTimeout>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e00d      	b.n	800583e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2220      	movs	r2, #32
 8005826:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2220      	movs	r2, #32
 800582c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b09c      	sub	sp, #112	; 0x70
 800584a:	af00      	add	r7, sp, #0
 800584c:	60f8      	str	r0, [r7, #12]
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	603b      	str	r3, [r7, #0]
 8005852:	4613      	mov	r3, r2
 8005854:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005856:	e0a5      	b.n	80059a4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800585a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800585e:	f000 80a1 	beq.w	80059a4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005862:	f7fb fefd 	bl	8001660 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800586e:	429a      	cmp	r2, r3
 8005870:	d302      	bcc.n	8005878 <UART_WaitOnFlagUntilTimeout+0x32>
 8005872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005874:	2b00      	cmp	r3, #0
 8005876:	d13e      	bne.n	80058f6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005880:	e853 3f00 	ldrex	r3, [r3]
 8005884:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005888:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800588c:	667b      	str	r3, [r7, #100]	; 0x64
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	461a      	mov	r2, r3
 8005894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005896:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005898:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800589c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800589e:	e841 2300 	strex	r3, r2, [r1]
 80058a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80058a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1e6      	bne.n	8005878 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3308      	adds	r3, #8
 80058b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b4:	e853 3f00 	ldrex	r3, [r3]
 80058b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058bc:	f023 0301 	bic.w	r3, r3, #1
 80058c0:	663b      	str	r3, [r7, #96]	; 0x60
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	3308      	adds	r3, #8
 80058c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80058ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80058cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058d2:	e841 2300 	strex	r3, r2, [r1]
 80058d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80058d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1e5      	bne.n	80058aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2220      	movs	r2, #32
 80058e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2220      	movs	r2, #32
 80058e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e067      	b.n	80059c6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b00      	cmp	r3, #0
 8005902:	d04f      	beq.n	80059a4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800590e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005912:	d147      	bne.n	80059a4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800591c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005926:	e853 3f00 	ldrex	r3, [r3]
 800592a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005932:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	461a      	mov	r2, r3
 800593a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800593c:	637b      	str	r3, [r7, #52]	; 0x34
 800593e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005940:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005942:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005944:	e841 2300 	strex	r3, r2, [r1]
 8005948:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800594a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e6      	bne.n	800591e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3308      	adds	r3, #8
 8005956:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	e853 3f00 	ldrex	r3, [r3]
 800595e:	613b      	str	r3, [r7, #16]
   return(result);
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	66bb      	str	r3, [r7, #104]	; 0x68
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3308      	adds	r3, #8
 800596e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005970:	623a      	str	r2, [r7, #32]
 8005972:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005974:	69f9      	ldr	r1, [r7, #28]
 8005976:	6a3a      	ldr	r2, [r7, #32]
 8005978:	e841 2300 	strex	r3, r2, [r1]
 800597c:	61bb      	str	r3, [r7, #24]
   return(result);
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1e5      	bne.n	8005950 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2220      	movs	r2, #32
 8005988:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2220      	movs	r2, #32
 800598e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2220      	movs	r2, #32
 8005994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e010      	b.n	80059c6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	69da      	ldr	r2, [r3, #28]
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	4013      	ands	r3, r2
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	bf0c      	ite	eq
 80059b4:	2301      	moveq	r3, #1
 80059b6:	2300      	movne	r3, #0
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	461a      	mov	r2, r3
 80059bc:	79fb      	ldrb	r3, [r7, #7]
 80059be:	429a      	cmp	r2, r3
 80059c0:	f43f af4a 	beq.w	8005858 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3770      	adds	r7, #112	; 0x70
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b095      	sub	sp, #84	; 0x54
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059de:	e853 3f00 	ldrex	r3, [r3]
 80059e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	461a      	mov	r2, r3
 80059f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059f4:	643b      	str	r3, [r7, #64]	; 0x40
 80059f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059fc:	e841 2300 	strex	r3, r2, [r1]
 8005a00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1e6      	bne.n	80059d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	e853 3f00 	ldrex	r3, [r3]
 8005a16:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	f023 0301 	bic.w	r3, r3, #1
 8005a1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	3308      	adds	r3, #8
 8005a26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a30:	e841 2300 	strex	r3, r2, [r1]
 8005a34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1e5      	bne.n	8005a08 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d118      	bne.n	8005a76 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	e853 3f00 	ldrex	r3, [r3]
 8005a50:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	f023 0310 	bic.w	r3, r3, #16
 8005a58:	647b      	str	r3, [r7, #68]	; 0x44
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	461a      	mov	r2, r3
 8005a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a62:	61bb      	str	r3, [r7, #24]
 8005a64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a66:	6979      	ldr	r1, [r7, #20]
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	e841 2300 	strex	r3, r2, [r1]
 8005a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1e6      	bne.n	8005a44 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005a88:	bf00      	nop
 8005a8a:	3754      	adds	r7, #84	; 0x54
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f7ff fb0e 	bl	80050d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ab8:	bf00      	nop
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005adc:	61fb      	str	r3, [r7, #28]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	61bb      	str	r3, [r7, #24]
 8005ae8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	6979      	ldr	r1, [r7, #20]
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	e841 2300 	strex	r3, r2, [r1]
 8005af2:	613b      	str	r3, [r7, #16]
   return(result);
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1e6      	bne.n	8005ac8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2220      	movs	r2, #32
 8005afe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7ff fada 	bl	80050c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b0c:	bf00      	nop
 8005b0e:	3720      	adds	r7, #32
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <__libc_init_array>:
 8005b28:	b570      	push	{r4, r5, r6, lr}
 8005b2a:	4d0d      	ldr	r5, [pc, #52]	; (8005b60 <__libc_init_array+0x38>)
 8005b2c:	4c0d      	ldr	r4, [pc, #52]	; (8005b64 <__libc_init_array+0x3c>)
 8005b2e:	1b64      	subs	r4, r4, r5
 8005b30:	10a4      	asrs	r4, r4, #2
 8005b32:	2600      	movs	r6, #0
 8005b34:	42a6      	cmp	r6, r4
 8005b36:	d109      	bne.n	8005b4c <__libc_init_array+0x24>
 8005b38:	4d0b      	ldr	r5, [pc, #44]	; (8005b68 <__libc_init_array+0x40>)
 8005b3a:	4c0c      	ldr	r4, [pc, #48]	; (8005b6c <__libc_init_array+0x44>)
 8005b3c:	f000 f820 	bl	8005b80 <_init>
 8005b40:	1b64      	subs	r4, r4, r5
 8005b42:	10a4      	asrs	r4, r4, #2
 8005b44:	2600      	movs	r6, #0
 8005b46:	42a6      	cmp	r6, r4
 8005b48:	d105      	bne.n	8005b56 <__libc_init_array+0x2e>
 8005b4a:	bd70      	pop	{r4, r5, r6, pc}
 8005b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b50:	4798      	blx	r3
 8005b52:	3601      	adds	r6, #1
 8005b54:	e7ee      	b.n	8005b34 <__libc_init_array+0xc>
 8005b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b5a:	4798      	blx	r3
 8005b5c:	3601      	adds	r6, #1
 8005b5e:	e7f2      	b.n	8005b46 <__libc_init_array+0x1e>
 8005b60:	08005be8 	.word	0x08005be8
 8005b64:	08005be8 	.word	0x08005be8
 8005b68:	08005be8 	.word	0x08005be8
 8005b6c:	08005bec 	.word	0x08005bec

08005b70 <memset>:
 8005b70:	4402      	add	r2, r0
 8005b72:	4603      	mov	r3, r0
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d100      	bne.n	8005b7a <memset+0xa>
 8005b78:	4770      	bx	lr
 8005b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b7e:	e7f9      	b.n	8005b74 <memset+0x4>

08005b80 <_init>:
 8005b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b82:	bf00      	nop
 8005b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b86:	bc08      	pop	{r3}
 8005b88:	469e      	mov	lr, r3
 8005b8a:	4770      	bx	lr

08005b8c <_fini>:
 8005b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8e:	bf00      	nop
 8005b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b92:	bc08      	pop	{r3}
 8005b94:	469e      	mov	lr, r3
 8005b96:	4770      	bx	lr
