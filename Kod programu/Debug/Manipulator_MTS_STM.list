
Manipulator_MTS_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005834  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080059bc  080059bc  000159bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a04  08005a04  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08005a04  08005a04  00015a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a0c  08005a0c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a0c  08005a0c  00015a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a10  08005a10  00015a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08005a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000018  08005a2c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08005a2c  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013611  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002875  00000000  00000000  00033659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  00035ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  00036f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002703  00000000  00000000  00037e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b4d  00000000  00000000  0003a58b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f47fa  00000000  00000000  0004e0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001428d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004388  00000000  00000000  00142924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080059a4 	.word	0x080059a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	080059a4 	.word	0x080059a4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d2:	4b10      	ldr	r3, [pc, #64]	; (8000514 <MX_DMA_Init+0x48>)
 80004d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004d6:	4a0f      	ldr	r2, [pc, #60]	; (8000514 <MX_DMA_Init+0x48>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6493      	str	r3, [r2, #72]	; 0x48
 80004de:	4b0d      	ldr	r3, [pc, #52]	; (8000514 <MX_DMA_Init+0x48>)
 80004e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2100      	movs	r1, #0
 80004ee:	2010      	movs	r0, #16
 80004f0:	f001 f8d3 	bl	800169a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004f4:	2010      	movs	r0, #16
 80004f6:	f001 f8ec 	bl	80016d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2100      	movs	r1, #0
 80004fe:	2011      	movs	r0, #17
 8000500:	f001 f8cb 	bl	800169a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000504:	2011      	movs	r0, #17
 8000506:	f001 f8e4 	bl	80016d2 <HAL_NVIC_EnableIRQ>

}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40021000 	.word	0x40021000

08000518 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	; 0x28
 800051c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800052e:	4b2a      	ldr	r3, [pc, #168]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a29      	ldr	r2, [pc, #164]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053a:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <MX_GPIO_Init+0xc0>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	4a23      	ldr	r2, [pc, #140]	; (80005d8 <MX_GPIO_Init+0xc0>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000552:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800055e:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	4a1d      	ldr	r2, [pc, #116]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000564:	f043 0310 	orr.w	r3, r3, #16
 8000568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056a:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <MX_GPIO_Init+0xc0>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	f003 0310 	and.w	r3, r3, #16
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000576:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	4a17      	ldr	r2, [pc, #92]	; (80005d8 <MX_GPIO_Init+0xc0>)
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000582:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	f003 0308 	and.w	r3, r3, #8
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058e:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000592:	4a11      	ldr	r2, [pc, #68]	; (80005d8 <MX_GPIO_Init+0xc0>)
 8000594:	f043 0302 	orr.w	r3, r3, #2
 8000598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800059a:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <MX_GPIO_Init+0xc0>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	f003 0302 	and.w	r3, r3, #2
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AIN2_Pin|AIN1_Pin|BIN2_Pin|BIN1_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 80005ac:	480b      	ldr	r0, [pc, #44]	; (80005dc <MX_GPIO_Init+0xc4>)
 80005ae:	f001 fc3b 	bl	8001e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN2_Pin|BIN1_Pin;
 80005b2:	f44f 4334 	mov.w	r3, #46080	; 0xb400
 80005b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b8:	2301      	movs	r3, #1
 80005ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c0:	2300      	movs	r3, #0
 80005c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	4619      	mov	r1, r3
 80005ca:	4804      	ldr	r0, [pc, #16]	; (80005dc <MX_GPIO_Init+0xc4>)
 80005cc:	f001 fa82 	bl	8001ad4 <HAL_GPIO_Init>

}
 80005d0:	bf00      	nop
 80005d2:	3728      	adds	r7, #40	; 0x28
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40021000 	.word	0x40021000
 80005dc:	48001000 	.word	0x48001000

080005e0 <motorB_Direction>:
		HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_SET);
	}
}

void motorB_Direction(MotorDirection dir){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	if(dir == CW){
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d10b      	bne.n	8000608 <motorB_Direction+0x28>
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f6:	480e      	ldr	r0, [pc, #56]	; (8000630 <motorB_Direction+0x50>)
 80005f8:	f001 fc16 	bl	8001e28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000602:	480b      	ldr	r0, [pc, #44]	; (8000630 <motorB_Direction+0x50>)
 8000604:	f001 fc10 	bl	8001e28 <HAL_GPIO_WritePin>
	}

	if(dir == CCW){
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d10b      	bne.n	8000626 <motorB_Direction+0x46>
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000614:	4806      	ldr	r0, [pc, #24]	; (8000630 <motorB_Direction+0x50>)
 8000616:	f001 fc07 	bl	8001e28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000620:	4803      	ldr	r0, [pc, #12]	; (8000630 <motorB_Direction+0x50>)
 8000622:	f001 fc01 	bl	8001e28 <HAL_GPIO_WritePin>
	}
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	48001000 	.word	0x48001000

08000634 <motorB_move>:
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, abs(pwm));
}

void motorB_move(int32_t pwm){
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	if(pwm > htim1.Instance->ARR){
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <motorB_move+0x64>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	429a      	cmp	r2, r3
 8000646:	d204      	bcs.n	8000652 <motorB_move+0x1e>
		pwm = htim1.Instance->ARR;
 8000648:	4b13      	ldr	r3, [pc, #76]	; (8000698 <motorB_move+0x64>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	e00b      	b.n	800066a <motorB_move+0x36>
	}
	else if(pwm < -htim1.Instance->ARR){
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <motorB_move+0x64>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000658:	425a      	negs	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	429a      	cmp	r2, r3
 800065e:	d904      	bls.n	800066a <motorB_move+0x36>
		pwm = -htim1.Instance->ARR;
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <motorB_move+0x64>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000666:	425b      	negs	r3, r3
 8000668:	607b      	str	r3, [r7, #4]
	}

	if(pwm >= 0){
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b00      	cmp	r3, #0
 800066e:	db03      	blt.n	8000678 <motorB_move+0x44>
		motorB_Direction(CW);
 8000670:	2001      	movs	r0, #1
 8000672:	f7ff ffb5 	bl	80005e0 <motorB_Direction>
 8000676:	e002      	b.n	800067e <motorB_move+0x4a>
	}else{
		motorB_Direction(CCW);
 8000678:	2000      	movs	r0, #0
 800067a:	f7ff ffb1 	bl	80005e0 <motorB_Direction>
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, abs(pwm));
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000684:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <motorB_move+0x64>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000038 	.word	0x20000038

0800069c <motorB_stopMotor>:
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
	HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_RESET);
}

void motorB_stopMotor(){
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <motorB_stopMotor+0x28>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2200      	movs	r2, #0
 80006a6:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ae:	4806      	ldr	r0, [pc, #24]	; (80006c8 <motorB_stopMotor+0x2c>)
 80006b0:	f001 fbba 	bl	8001e28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ba:	4803      	ldr	r0, [pc, #12]	; (80006c8 <motorB_stopMotor+0x2c>)
 80006bc:	f001 fbb4 	bl	8001e28 <HAL_GPIO_WritePin>
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000038 	.word	0x20000038
 80006c8:	48001000 	.word	0x48001000

080006cc <servo_moveAngel>:

// 45 = 450
// step ((1000*(PWM_MAX - PWM_MIN) / (MAX_ANGEL - MIN_ANGEL));
void servo_moveAngel(uint16_t angel, MotorDirection dir){
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	460a      	mov	r2, r1
 80006d6:	80fb      	strh	r3, [r7, #6]
 80006d8:	4613      	mov	r3, r2
 80006da:	717b      	strb	r3, [r7, #5]
	uint16_t pwm;
	if(angel > MAX_ANGEL){
 80006dc:	88fb      	ldrh	r3, [r7, #6]
 80006de:	2bb4      	cmp	r3, #180	; 0xb4
 80006e0:	d901      	bls.n	80006e6 <servo_moveAngel+0x1a>
		angel = MAX_ANGEL;
 80006e2:	23b4      	movs	r3, #180	; 0xb4
 80006e4:	80fb      	strh	r3, [r7, #6]
	}
	else if(angel < MIN_ANGEL){
		angel = MIN_ANGEL;
	}

	if(dir == CW){
 80006e6:	797b      	ldrb	r3, [r7, #5]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d110      	bne.n	800070e <servo_moveAngel+0x42>
		pwm = PWM_MIN + (angel*(PWM_MAX - PWM_MIN)/MAX_ANGEL); // excel mowi ze wylicza dobrze
 80006ec:	88fb      	ldrh	r3, [r7, #6]
 80006ee:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80006f2:	fb02 f303 	mul.w	r3, r2, r3
 80006f6:	4a14      	ldr	r2, [pc, #80]	; (8000748 <servo_moveAngel+0x7c>)
 80006f8:	fb82 1203 	smull	r1, r2, r2, r3
 80006fc:	441a      	add	r2, r3
 80006fe:	11d2      	asrs	r2, r2, #7
 8000700:	17db      	asrs	r3, r3, #31
 8000702:	1ad3      	subs	r3, r2, r3
 8000704:	b29b      	uxth	r3, r3
 8000706:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800070a:	81fb      	strh	r3, [r7, #14]
 800070c:	e00f      	b.n	800072e <servo_moveAngel+0x62>
		// pwm = PWM_MIN + ((angel - MIN_ANGEL) * step) / 1000;
	}
	else{
		pwm = PWM_MAX - (angel*(PWM_MAX - PWM_MIN)/MAX_ANGEL);
 800070e:	88fb      	ldrh	r3, [r7, #6]
 8000710:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000714:	fb02 f303 	mul.w	r3, r2, r3
 8000718:	4a0b      	ldr	r2, [pc, #44]	; (8000748 <servo_moveAngel+0x7c>)
 800071a:	fb82 1203 	smull	r1, r2, r2, r3
 800071e:	441a      	add	r2, r3
 8000720:	11d2      	asrs	r2, r2, #7
 8000722:	17db      	asrs	r3, r3, #31
 8000724:	1a9b      	subs	r3, r3, r2
 8000726:	b29b      	uxth	r3, r3
 8000728:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 800072c:	81fb      	strh	r3, [r7, #14]
	}

	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, pwm + 50);
 800072e:	89fb      	ldrh	r3, [r7, #14]
 8000730:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <servo_moveAngel+0x80>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	635a      	str	r2, [r3, #52]	; 0x34
}
 800073a:	bf00      	nop
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	b60b60b7 	.word	0xb60b60b7
 800074c:	20000168 	.word	0x20000168

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000756:	f000 fe25 	bl	80013a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075a:	f000 f87f 	bl	800085c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075e:	f7ff fedb 	bl	8000518 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000762:	f000 f99b 	bl	8000a9c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000766:	f000 fa33 	bl	8000bd0 <MX_TIM2_Init>
  MX_TIM15_Init();
 800076a:	f000 fb13 	bl	8000d94 <MX_TIM15_Init>
  MX_DMA_Init();
 800076e:	f7ff fead 	bl	80004cc <MX_DMA_Init>
  MX_TIM4_Init();
 8000772:	f000 fa81 	bl	8000c78 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000776:	f000 fcd9 	bl	800112c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800077a:	f000 fad3 	bl	8000d24 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1); //servo   		q3
 800077e:	2100      	movs	r1, #0
 8000780:	482f      	ldr	r0, [pc, #188]	; (8000840 <main+0xf0>)
 8000782:	f002 ff25 	bl	80035d0 <HAL_TIM_PWM_Start>
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // silnik 1 	q1
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // silnik 2		q2
 8000786:	210c      	movs	r1, #12
 8000788:	482e      	ldr	r0, [pc, #184]	; (8000844 <main+0xf4>)
 800078a:	f002 ff21 	bl	80035d0 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 1000); // serwo pozycja startowa
 800078e:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <main+0xf0>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000796:	635a      	str	r2, [r3, #52]	; 0x34
  //pid_init(pid1, kp, ki, kd); / silnik 1
  pid_init(pid2, kp, ki, kd);
 8000798:	4b2b      	ldr	r3, [pc, #172]	; (8000848 <main+0xf8>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a2b      	ldr	r2, [pc, #172]	; (800084c <main+0xfc>)
 800079e:	edd2 7a00 	vldr	s15, [r2]
 80007a2:	4a2b      	ldr	r2, [pc, #172]	; (8000850 <main+0x100>)
 80007a4:	ed92 7a00 	vldr	s14, [r2]
 80007a8:	4a2a      	ldr	r2, [pc, #168]	; (8000854 <main+0x104>)
 80007aa:	edd2 6a00 	vldr	s13, [r2]
 80007ae:	eeb0 1a66 	vmov.f32	s2, s13
 80007b2:	eef0 0a47 	vmov.f32	s1, s14
 80007b6:	eeb0 0a67 	vmov.f32	s0, s15
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f8a5 	bl	800090a <pid_init>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //silnik 2
 80007c0:	213c      	movs	r1, #60	; 0x3c
 80007c2:	4825      	ldr	r0, [pc, #148]	; (8000858 <main+0x108>)
 80007c4:	f003 f8b0 	bl	8003928 <HAL_TIM_Encoder_Start>
  //HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //silnik 1

	//HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_SET);
  motorB_Direction(CW);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f7ff ff09 	bl	80005e0 <motorB_Direction>
  for(int i=0; i<20; i++){
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	e00b      	b.n	80007ec <main+0x9c>
	  motorB_move(50-i);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff2a 	bl	8000634 <motorB_move>
	  HAL_Delay(10);
 80007e0:	200a      	movs	r0, #10
 80007e2:	f000 fe5b 	bl	800149c <HAL_Delay>
  for(int i=0; i<20; i++){
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	3301      	adds	r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b13      	cmp	r3, #19
 80007f0:	ddf0      	ble.n	80007d4 <main+0x84>

  }
  HAL_Delay(200);
 80007f2:	20c8      	movs	r0, #200	; 0xc8
 80007f4:	f000 fe52 	bl	800149c <HAL_Delay>
  motorB_stopMotor();
 80007f8:	f7ff ff50 	bl	800069c <motorB_stopMotor>
	  servo_move(90, CW);
	  HAL_Delay(500);*/



	  servo_moveAngel(0, CW);
 80007fc:	2101      	movs	r1, #1
 80007fe:	2000      	movs	r0, #0
 8000800:	f7ff ff64 	bl	80006cc <servo_moveAngel>
	  HAL_Delay(1000);
 8000804:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000808:	f000 fe48 	bl	800149c <HAL_Delay>
	  servo_moveAngel(45, CW);
 800080c:	2101      	movs	r1, #1
 800080e:	202d      	movs	r0, #45	; 0x2d
 8000810:	f7ff ff5c 	bl	80006cc <servo_moveAngel>
	  HAL_Delay(1000);
 8000814:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000818:	f000 fe40 	bl	800149c <HAL_Delay>
	  servo_moveAngel(90, 0);
 800081c:	2100      	movs	r1, #0
 800081e:	205a      	movs	r0, #90	; 0x5a
 8000820:	f7ff ff54 	bl	80006cc <servo_moveAngel>
	  HAL_Delay(1000);
 8000824:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000828:	f000 fe38 	bl	800149c <HAL_Delay>
	  servo_moveAngel(180, CW);
 800082c:	2101      	movs	r1, #1
 800082e:	20b4      	movs	r0, #180	; 0xb4
 8000830:	f7ff ff4c 	bl	80006cc <servo_moveAngel>
	  HAL_Delay(1000);
 8000834:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000838:	f000 fe30 	bl	800149c <HAL_Delay>
	  servo_moveAngel(0, CW);
 800083c:	e7de      	b.n	80007fc <main+0xac>
 800083e:	bf00      	nop
 8000840:	20000168 	.word	0x20000168
 8000844:	20000038 	.word	0x20000038
 8000848:	20000034 	.word	0x20000034
 800084c:	20000000 	.word	0x20000000
 8000850:	20000004 	.word	0x20000004
 8000854:	20000008 	.word	0x20000008
 8000858:	20000084 	.word	0x20000084

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b096      	sub	sp, #88	; 0x58
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	2244      	movs	r2, #68	; 0x44
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f005 f892 	bl	8005994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	463b      	mov	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800087e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000882:	f001 faf7 	bl	8001e74 <HAL_PWREx_ControlVoltageScaling>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800088c:	f000 f838 	bl	8000900 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000890:	2310      	movs	r3, #16
 8000892:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000894:	2301      	movs	r3, #1
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800089c:	2360      	movs	r3, #96	; 0x60
 800089e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a0:	2302      	movs	r3, #2
 80008a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008a4:	2301      	movs	r3, #1
 80008a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008a8:	2301      	movs	r3, #1
 80008aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80008ac:	2328      	movs	r3, #40	; 0x28
 80008ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008b0:	2307      	movs	r3, #7
 80008b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008b8:	2302      	movs	r3, #2
 80008ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4618      	mov	r0, r3
 80008c2:	f001 fb2d 	bl	8001f20 <HAL_RCC_OscConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80008cc:	f000 f818 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d0:	230f      	movs	r3, #15
 80008d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d4:	2303      	movs	r3, #3
 80008d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008e4:	463b      	mov	r3, r7
 80008e6:	2104      	movs	r1, #4
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 ff01 	bl	80026f0 <HAL_RCC_ClockConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80008f4:	f000 f804 	bl	8000900 <Error_Handler>
  }
}
 80008f8:	bf00      	nop
 80008fa:	3758      	adds	r7, #88	; 0x58
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	e7fe      	b.n	8000908 <Error_Handler+0x8>

0800090a <pid_init>:
#include "pid.h"

#define ERR_TOTAL_MAX 255

void pid_init(PidStruct *pid, float kp, float ki, float kd)
{
 800090a:	b480      	push	{r7}
 800090c:	b085      	sub	sp, #20
 800090e:	af00      	add	r7, sp, #0
 8000910:	60f8      	str	r0, [r7, #12]
 8000912:	ed87 0a02 	vstr	s0, [r7, #8]
 8000916:	edc7 0a01 	vstr	s1, [r7, #4]
 800091a:	ed87 1a00 	vstr	s2, [r7]
	pid->previous_error = 0;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	2200      	movs	r2, #0
 8000922:	60da      	str	r2, [r3, #12]
	pid->total_error = 0;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]

	pid->kp = kp;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	68ba      	ldr	r2, [r7, #8]
 800092e:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	683a      	ldr	r2, [r7, #0]
 800093a:	609a      	str	r2, [r3, #8]

}
 800093c:	bf00      	nop
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_MspInit+0x44>)
 8000950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000952:	4a0e      	ldr	r2, [pc, #56]	; (800098c <HAL_MspInit+0x44>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6613      	str	r3, [r2, #96]	; 0x60
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <HAL_MspInit+0x44>)
 800095c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <HAL_MspInit+0x44>)
 8000968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <HAL_MspInit+0x44>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000970:	6593      	str	r3, [r2, #88]	; 0x58
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_MspInit+0x44>)
 8000974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <NMI_Handler+0x4>

08000996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <HardFault_Handler+0x4>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <MemManage_Handler+0x4>

080009a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <UsageFault_Handler+0x4>

080009ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009dc:	f000 fd3e 	bl	800145c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <DMA1_Channel6_IRQHandler+0x10>)
 80009ea:	f000 ffc4 	bl	8001976 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000238 	.word	0x20000238

080009f8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <DMA1_Channel7_IRQHandler+0x10>)
 80009fe:	f000 ffba 	bl	8001976 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000280 	.word	0x20000280

08000a0c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a10:	4803      	ldr	r0, [pc, #12]	; (8000a20 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8000a12:	f003 f817 	bl	8003a44 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8000a16:	4803      	ldr	r0, [pc, #12]	; (8000a24 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8000a18:	f003 f814 	bl	8003a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000038 	.word	0x20000038
 8000a24:	20000168 	.word	0x20000168

08000a28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <TIM2_IRQHandler+0x10>)
 8000a2e:	f003 f809 	bl	8003a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000084 	.word	0x20000084

08000a3c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <TIM4_IRQHandler+0x10>)
 8000a42:	f002 ffff 	bl	8003a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000d0 	.word	0x200000d0

08000a50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <USART2_IRQHandler+0x10>)
 8000a56:	f003 ff63 	bl	8004920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200001b4 	.word	0x200001b4

08000a64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <TIM6_DAC_IRQHandler+0x10>)
 8000a6a:	f002 ffeb 	bl	8003a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000011c 	.word	0x2000011c

08000a78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <SystemInit+0x20>)
 8000a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a82:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <SystemInit+0x20>)
 8000a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b096      	sub	sp, #88	; 0x58
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]
 8000abe:	615a      	str	r2, [r3, #20]
 8000ac0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	222c      	movs	r2, #44	; 0x2c
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f004 ff63 	bl	8005994 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ace:	4b3e      	ldr	r3, [pc, #248]	; (8000bc8 <MX_TIM1_Init+0x12c>)
 8000ad0:	4a3e      	ldr	r2, [pc, #248]	; (8000bcc <MX_TIM1_Init+0x130>)
 8000ad2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 39;
 8000ad4:	4b3c      	ldr	r3, [pc, #240]	; (8000bc8 <MX_TIM1_Init+0x12c>)
 8000ad6:	2227      	movs	r2, #39	; 0x27
 8000ad8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ada:	4b3b      	ldr	r3, [pc, #236]	; (8000bc8 <MX_TIM1_Init+0x12c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000ae0:	4b39      	ldr	r3, [pc, #228]	; (8000bc8 <MX_TIM1_Init+0x12c>)
 8000ae2:	2263      	movs	r2, #99	; 0x63
 8000ae4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae6:	4b38      	ldr	r3, [pc, #224]	; (8000bc8 <MX_TIM1_Init+0x12c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aec:	4b36      	ldr	r3, [pc, #216]	; (8000bc8 <MX_TIM1_Init+0x12c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af2:	4b35      	ldr	r3, [pc, #212]	; (8000bc8 <MX_TIM1_Init+0x12c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000af8:	4833      	ldr	r0, [pc, #204]	; (8000bc8 <MX_TIM1_Init+0x12c>)
 8000afa:	f002 fd12 	bl	8003522 <HAL_TIM_PWM_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000b04:	f7ff fefc 	bl	8000900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b18:	4619      	mov	r1, r3
 8000b1a:	482b      	ldr	r0, [pc, #172]	; (8000bc8 <MX_TIM1_Init+0x12c>)
 8000b1c:	f003 fd8e 	bl	800463c <HAL_TIMEx_MasterConfigSynchronization>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000b26:	f7ff feeb 	bl	8000900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b2a:	2360      	movs	r3, #96	; 0x60
 8000b2c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b32:	2300      	movs	r3, #0
 8000b34:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b36:	2300      	movs	r3, #0
 8000b38:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b42:	2300      	movs	r3, #0
 8000b44:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b4a:	2204      	movs	r2, #4
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	481e      	ldr	r0, [pc, #120]	; (8000bc8 <MX_TIM1_Init+0x12c>)
 8000b50:	f003 f898 	bl	8003c84 <HAL_TIM_PWM_ConfigChannel>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000b5a:	f7ff fed1 	bl	8000900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b62:	220c      	movs	r2, #12
 8000b64:	4619      	mov	r1, r3
 8000b66:	4818      	ldr	r0, [pc, #96]	; (8000bc8 <MX_TIM1_Init+0x12c>)
 8000b68:	f003 f88c 	bl	8003c84 <HAL_TIM_PWM_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000b72:	f7ff fec5 	bl	8000900 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b8e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <MX_TIM1_Init+0x12c>)
 8000bac:	f003 fdce 	bl	800474c <HAL_TIMEx_ConfigBreakDeadTime>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000bb6:	f7ff fea3 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bba:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <MX_TIM1_Init+0x12c>)
 8000bbc:	f000 fa58 	bl	8001070 <HAL_TIM_MspPostInit>

}
 8000bc0:	bf00      	nop
 8000bc2:	3758      	adds	r7, #88	; 0x58
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000038 	.word	0x20000038
 8000bcc:	40012c00 	.word	0x40012c00

08000bd0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08c      	sub	sp, #48	; 0x30
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bd6:	f107 030c 	add.w	r3, r7, #12
 8000bda:	2224      	movs	r2, #36	; 0x24
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f004 fed8 	bl	8005994 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be4:	463b      	mov	r3, r7
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <MX_TIM2_Init+0xa4>)
 8000bf0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <MX_TIM2_Init+0xa4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <MX_TIM2_Init+0xa4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <MX_TIM2_Init+0xa4>)
 8000c04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_TIM2_Init+0xa4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <MX_TIM2_Init+0xa4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c16:	2303      	movs	r3, #3
 8000c18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000c26:	230f      	movs	r3, #15
 8000c28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000c36:	230f      	movs	r3, #15
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000c3a:	f107 030c 	add.w	r3, r7, #12
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480c      	ldr	r0, [pc, #48]	; (8000c74 <MX_TIM2_Init+0xa4>)
 8000c42:	f002 fdcb 	bl	80037dc <HAL_TIM_Encoder_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000c4c:	f7ff fe58 	bl	8000900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c50:	2300      	movs	r3, #0
 8000c52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c58:	463b      	mov	r3, r7
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_TIM2_Init+0xa4>)
 8000c5e:	f003 fced 	bl	800463c <HAL_TIMEx_MasterConfigSynchronization>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000c68:	f7ff fe4a 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	3730      	adds	r7, #48	; 0x30
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000084 	.word	0x20000084

08000c78 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	; 0x30
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	2224      	movs	r2, #36	; 0x24
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f004 fe84 	bl	8005994 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c96:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <MX_TIM4_Init+0xa4>)
 8000c98:	4a21      	ldr	r2, [pc, #132]	; (8000d20 <MX_TIM4_Init+0xa8>)
 8000c9a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <MX_TIM4_Init+0xa4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca2:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <MX_TIM4_Init+0xa4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <MX_TIM4_Init+0xa4>)
 8000caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_TIM4_Init+0xa4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <MX_TIM4_Init+0xa4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000ccc:	230f      	movs	r3, #15
 8000cce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000cdc:	230f      	movs	r3, #15
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	480d      	ldr	r0, [pc, #52]	; (8000d1c <MX_TIM4_Init+0xa4>)
 8000ce8:	f002 fd78 	bl	80037dc <HAL_TIM_Encoder_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000cf2:	f7ff fe05 	bl	8000900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cfe:	463b      	mov	r3, r7
 8000d00:	4619      	mov	r1, r3
 8000d02:	4806      	ldr	r0, [pc, #24]	; (8000d1c <MX_TIM4_Init+0xa4>)
 8000d04:	f003 fc9a 	bl	800463c <HAL_TIMEx_MasterConfigSynchronization>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d0e:	f7ff fdf7 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	3730      	adds	r7, #48	; 0x30
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200000d0 	.word	0x200000d0
 8000d20:	40000800 	.word	0x40000800

08000d24 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <MX_TIM6_Init+0x68>)
 8000d36:	4a16      	ldr	r2, [pc, #88]	; (8000d90 <MX_TIM6_Init+0x6c>)
 8000d38:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_TIM6_Init+0x68>)
 8000d3c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d40:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <MX_TIM6_Init+0x68>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000d48:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <MX_TIM6_Init+0x68>)
 8000d4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d4e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_TIM6_Init+0x68>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d56:	480d      	ldr	r0, [pc, #52]	; (8000d8c <MX_TIM6_Init+0x68>)
 8000d58:	f002 fb8c 	bl	8003474 <HAL_TIM_Base_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000d62:	f7ff fdcd 	bl	8000900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	4619      	mov	r1, r3
 8000d72:	4806      	ldr	r0, [pc, #24]	; (8000d8c <MX_TIM6_Init+0x68>)
 8000d74:	f003 fc62 	bl	800463c <HAL_TIMEx_MasterConfigSynchronization>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000d7e:	f7ff fdbf 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	2000011c 	.word	0x2000011c
 8000d90:	40001000 	.word	0x40001000

08000d94 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b096      	sub	sp, #88	; 0x58
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]
 8000db6:	615a      	str	r2, [r3, #20]
 8000db8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	222c      	movs	r2, #44	; 0x2c
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f004 fde7 	bl	8005994 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000dc6:	4b33      	ldr	r3, [pc, #204]	; (8000e94 <MX_TIM15_Init+0x100>)
 8000dc8:	4a33      	ldr	r2, [pc, #204]	; (8000e98 <MX_TIM15_Init+0x104>)
 8000dca:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 79;
 8000dcc:	4b31      	ldr	r3, [pc, #196]	; (8000e94 <MX_TIM15_Init+0x100>)
 8000dce:	224f      	movs	r2, #79	; 0x4f
 8000dd0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd2:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <MX_TIM15_Init+0x100>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8000dd8:	4b2e      	ldr	r3, [pc, #184]	; (8000e94 <MX_TIM15_Init+0x100>)
 8000dda:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000dde:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de0:	4b2c      	ldr	r3, [pc, #176]	; (8000e94 <MX_TIM15_Init+0x100>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000de6:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <MX_TIM15_Init+0x100>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dec:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <MX_TIM15_Init+0x100>)
 8000dee:	2280      	movs	r2, #128	; 0x80
 8000df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000df2:	4828      	ldr	r0, [pc, #160]	; (8000e94 <MX_TIM15_Init+0x100>)
 8000df4:	f002 fb95 	bl	8003522 <HAL_TIM_PWM_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000dfe:	f7ff fd7f 	bl	8000900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e02:	2300      	movs	r3, #0
 8000e04:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000e0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4820      	ldr	r0, [pc, #128]	; (8000e94 <MX_TIM15_Init+0x100>)
 8000e12:	f003 fc13 	bl	800463c <HAL_TIMEx_MasterConfigSynchronization>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000e1c:	f7ff fd70 	bl	8000900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e20:	2360      	movs	r3, #96	; 0x60
 8000e22:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e34:	2300      	movs	r3, #0
 8000e36:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e40:	2200      	movs	r2, #0
 8000e42:	4619      	mov	r1, r3
 8000e44:	4813      	ldr	r0, [pc, #76]	; (8000e94 <MX_TIM15_Init+0x100>)
 8000e46:	f002 ff1d 	bl	8003c84 <HAL_TIM_PWM_ConfigChannel>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000e50:	f7ff fd56 	bl	8000900 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e6c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	4619      	mov	r1, r3
 8000e76:	4807      	ldr	r0, [pc, #28]	; (8000e94 <MX_TIM15_Init+0x100>)
 8000e78:	f003 fc68 	bl	800474c <HAL_TIMEx_ConfigBreakDeadTime>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8000e82:	f7ff fd3d 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000e86:	4803      	ldr	r0, [pc, #12]	; (8000e94 <MX_TIM15_Init+0x100>)
 8000e88:	f000 f8f2 	bl	8001070 <HAL_TIM_MspPostInit>

}
 8000e8c:	bf00      	nop
 8000e8e:	3758      	adds	r7, #88	; 0x58
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000168 	.word	0x20000168
 8000e98:	40014000 	.word	0x40014000

08000e9c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a1a      	ldr	r2, [pc, #104]	; (8000f14 <HAL_TIM_PWM_MspInit+0x78>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d114      	bne.n	8000ed8 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <HAL_TIM_PWM_MspInit+0x7c>)
 8000eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb2:	4a19      	ldr	r2, [pc, #100]	; (8000f18 <HAL_TIM_PWM_MspInit+0x7c>)
 8000eb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000eb8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <HAL_TIM_PWM_MspInit+0x7c>)
 8000ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2018      	movs	r0, #24
 8000ecc:	f000 fbe5 	bl	800169a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000ed0:	2018      	movs	r0, #24
 8000ed2:	f000 fbfe 	bl	80016d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8000ed6:	e018      	b.n	8000f0a <HAL_TIM_PWM_MspInit+0x6e>
  else if(tim_pwmHandle->Instance==TIM15)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0f      	ldr	r2, [pc, #60]	; (8000f1c <HAL_TIM_PWM_MspInit+0x80>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d113      	bne.n	8000f0a <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <HAL_TIM_PWM_MspInit+0x7c>)
 8000ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee6:	4a0c      	ldr	r2, [pc, #48]	; (8000f18 <HAL_TIM_PWM_MspInit+0x7c>)
 8000ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eec:	6613      	str	r3, [r2, #96]	; 0x60
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <HAL_TIM_PWM_MspInit+0x7c>)
 8000ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	2018      	movs	r0, #24
 8000f00:	f000 fbcb 	bl	800169a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000f04:	2018      	movs	r0, #24
 8000f06:	f000 fbe4 	bl	80016d2 <HAL_NVIC_EnableIRQ>
}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40012c00 	.word	0x40012c00
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40014000 	.word	0x40014000

08000f20 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08c      	sub	sp, #48	; 0x30
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f40:	d131      	bne.n	8000fa6 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f42:	4b35      	ldr	r3, [pc, #212]	; (8001018 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f46:	4a34      	ldr	r2, [pc, #208]	; (8001018 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f4e:	4b32      	ldr	r3, [pc, #200]	; (8001018 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	61bb      	str	r3, [r7, #24]
 8000f58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	4a2e      	ldr	r2, [pc, #184]	; (8001018 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f66:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC2_A2_Pin|ENC2_B2_Pin;
 8000f72:	2303      	movs	r3, #3
 8000f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f82:	2301      	movs	r3, #1
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f90:	f000 fda0 	bl	8001ad4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2100      	movs	r1, #0
 8000f98:	201c      	movs	r0, #28
 8000f9a:	f000 fb7e 	bl	800169a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f9e:	201c      	movs	r0, #28
 8000fa0:	f000 fb97 	bl	80016d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000fa4:	e034      	b.n	8001010 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(tim_encoderHandle->Instance==TIM4)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a1c      	ldr	r2, [pc, #112]	; (800101c <HAL_TIM_Encoder_MspInit+0xfc>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d12f      	bne.n	8001010 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb4:	4a18      	ldr	r2, [pc, #96]	; (8001018 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000fb6:	f043 0304 	orr.w	r3, r3, #4
 8000fba:	6593      	str	r3, [r2, #88]	; 0x58
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc0:	f003 0304 	and.w	r3, r3, #4
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fcc:	4a12      	ldr	r2, [pc, #72]	; (8001018 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000fce:	f043 0302 	orr.w	r3, r3, #2
 8000fd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd4:	4b10      	ldr	r3, [pc, #64]	; (8001018 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC1_B1_Pin|ENC1_A1_Pin;
 8000fe0:	23c0      	movs	r3, #192	; 0xc0
 8000fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4809      	ldr	r0, [pc, #36]	; (8001020 <HAL_TIM_Encoder_MspInit+0x100>)
 8000ffc:	f000 fd6a 	bl	8001ad4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	201e      	movs	r0, #30
 8001006:	f000 fb48 	bl	800169a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800100a:	201e      	movs	r0, #30
 800100c:	f000 fb61 	bl	80016d2 <HAL_NVIC_EnableIRQ>
}
 8001010:	bf00      	nop
 8001012:	3730      	adds	r7, #48	; 0x30
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40021000 	.word	0x40021000
 800101c:	40000800 	.word	0x40000800
 8001020:	48000400 	.word	0x48000400

08001024 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <HAL_TIM_Base_MspInit+0x44>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d113      	bne.n	800105e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <HAL_TIM_Base_MspInit+0x48>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103a:	4a0c      	ldr	r2, [pc, #48]	; (800106c <HAL_TIM_Base_MspInit+0x48>)
 800103c:	f043 0310 	orr.w	r3, r3, #16
 8001040:	6593      	str	r3, [r2, #88]	; 0x58
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_TIM_Base_MspInit+0x48>)
 8001044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	2036      	movs	r0, #54	; 0x36
 8001054:	f000 fb21 	bl	800169a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001058:	2036      	movs	r0, #54	; 0x36
 800105a:	f000 fb3a 	bl	80016d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40001000 	.word	0x40001000
 800106c:	40021000 	.word	0x40021000

08001070 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a23      	ldr	r2, [pc, #140]	; (800111c <HAL_TIM_MspPostInit+0xac>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d11d      	bne.n	80010ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001092:	4b23      	ldr	r3, [pc, #140]	; (8001120 <HAL_TIM_MspPostInit+0xb0>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	4a22      	ldr	r2, [pc, #136]	; (8001120 <HAL_TIM_MspPostInit+0xb0>)
 8001098:	f043 0310 	orr.w	r3, r3, #16
 800109c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109e:	4b20      	ldr	r3, [pc, #128]	; (8001120 <HAL_TIM_MspPostInit+0xb0>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	f003 0310 	and.w	r3, r3, #16
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 80010aa:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80010ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010bc:	2301      	movs	r3, #1
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	4817      	ldr	r0, [pc, #92]	; (8001124 <HAL_TIM_MspPostInit+0xb4>)
 80010c8:	f000 fd04 	bl	8001ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80010cc:	e021      	b.n	8001112 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM15)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a15      	ldr	r2, [pc, #84]	; (8001128 <HAL_TIM_MspPostInit+0xb8>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d11c      	bne.n	8001112 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <HAL_TIM_MspPostInit+0xb0>)
 80010da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010dc:	4a10      	ldr	r2, [pc, #64]	; (8001120 <HAL_TIM_MspPostInit+0xb0>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e4:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <HAL_TIM_MspPostInit+0xb0>)
 80010e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 80010f0:	2304      	movs	r3, #4
 80010f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001100:	230e      	movs	r3, #14
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4619      	mov	r1, r3
 800110a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110e:	f000 fce1 	bl	8001ad4 <HAL_GPIO_Init>
}
 8001112:	bf00      	nop
 8001114:	3728      	adds	r7, #40	; 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40012c00 	.word	0x40012c00
 8001120:	40021000 	.word	0x40021000
 8001124:	48001000 	.word	0x48001000
 8001128:	40014000 	.word	0x40014000

0800112c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <MX_USART2_UART_Init+0x58>)
 8001132:	4a15      	ldr	r2, [pc, #84]	; (8001188 <MX_USART2_UART_Init+0x5c>)
 8001134:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <MX_USART2_UART_Init+0x58>)
 8001138:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800113c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_USART2_UART_Init+0x58>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_USART2_UART_Init+0x58>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_USART2_UART_Init+0x58>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_USART2_UART_Init+0x58>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <MX_USART2_UART_Init+0x58>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_USART2_UART_Init+0x58>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <MX_USART2_UART_Init+0x58>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_USART2_UART_Init+0x58>)
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <MX_USART2_UART_Init+0x58>)
 8001170:	f003 fb88 	bl	8004884 <HAL_UART_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800117a:	f7ff fbc1 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200001b4 	.word	0x200001b4
 8001188:	40004400 	.word	0x40004400

0800118c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b0ac      	sub	sp, #176	; 0xb0
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2288      	movs	r2, #136	; 0x88
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f004 fbf1 	bl	8005994 <memset>
  if(uartHandle->Instance==USART2)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a5f      	ldr	r2, [pc, #380]	; (8001334 <HAL_UART_MspInit+0x1a8>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	f040 80b7 	bne.w	800132c <HAL_UART_MspInit+0x1a0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011be:	2302      	movs	r3, #2
 80011c0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 fc96 	bl	8002afc <HAL_RCCEx_PeriphCLKConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011d6:	f7ff fb93 	bl	8000900 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011da:	4b57      	ldr	r3, [pc, #348]	; (8001338 <HAL_UART_MspInit+0x1ac>)
 80011dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011de:	4a56      	ldr	r2, [pc, #344]	; (8001338 <HAL_UART_MspInit+0x1ac>)
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e4:	6593      	str	r3, [r2, #88]	; 0x58
 80011e6:	4b54      	ldr	r3, [pc, #336]	; (8001338 <HAL_UART_MspInit+0x1ac>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	4b51      	ldr	r3, [pc, #324]	; (8001338 <HAL_UART_MspInit+0x1ac>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	4a50      	ldr	r2, [pc, #320]	; (8001338 <HAL_UART_MspInit+0x1ac>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fe:	4b4e      	ldr	r3, [pc, #312]	; (8001338 <HAL_UART_MspInit+0x1ac>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800120a:	4b4b      	ldr	r3, [pc, #300]	; (8001338 <HAL_UART_MspInit+0x1ac>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	4a4a      	ldr	r2, [pc, #296]	; (8001338 <HAL_UART_MspInit+0x1ac>)
 8001210:	f043 0308 	orr.w	r3, r3, #8
 8001214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001216:	4b48      	ldr	r3, [pc, #288]	; (8001338 <HAL_UART_MspInit+0x1ac>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001222:	2308      	movs	r3, #8
 8001224:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800123a:	2307      	movs	r3, #7
 800123c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001244:	4619      	mov	r1, r3
 8001246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124a:	f000 fc43 	bl	8001ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800124e:	2320      	movs	r3, #32
 8001250:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001266:	2307      	movs	r3, #7
 8001268:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800126c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001270:	4619      	mov	r1, r3
 8001272:	4832      	ldr	r0, [pc, #200]	; (800133c <HAL_UART_MspInit+0x1b0>)
 8001274:	f000 fc2e 	bl	8001ad4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001278:	4b31      	ldr	r3, [pc, #196]	; (8001340 <HAL_UART_MspInit+0x1b4>)
 800127a:	4a32      	ldr	r2, [pc, #200]	; (8001344 <HAL_UART_MspInit+0x1b8>)
 800127c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800127e:	4b30      	ldr	r3, [pc, #192]	; (8001340 <HAL_UART_MspInit+0x1b4>)
 8001280:	2202      	movs	r2, #2
 8001282:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001284:	4b2e      	ldr	r3, [pc, #184]	; (8001340 <HAL_UART_MspInit+0x1b4>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800128a:	4b2d      	ldr	r3, [pc, #180]	; (8001340 <HAL_UART_MspInit+0x1b4>)
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001290:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <HAL_UART_MspInit+0x1b4>)
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001296:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <HAL_UART_MspInit+0x1b4>)
 8001298:	2200      	movs	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800129c:	4b28      	ldr	r3, [pc, #160]	; (8001340 <HAL_UART_MspInit+0x1b4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80012a2:	4b27      	ldr	r3, [pc, #156]	; (8001340 <HAL_UART_MspInit+0x1b4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012a8:	4b25      	ldr	r3, [pc, #148]	; (8001340 <HAL_UART_MspInit+0x1b4>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80012ae:	4824      	ldr	r0, [pc, #144]	; (8001340 <HAL_UART_MspInit+0x1b4>)
 80012b0:	f000 fa2a 	bl	8001708 <HAL_DMA_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 80012ba:	f7ff fb21 	bl	8000900 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a1f      	ldr	r2, [pc, #124]	; (8001340 <HAL_UART_MspInit+0x1b4>)
 80012c2:	671a      	str	r2, [r3, #112]	; 0x70
 80012c4:	4a1e      	ldr	r2, [pc, #120]	; (8001340 <HAL_UART_MspInit+0x1b4>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80012ca:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <HAL_UART_MspInit+0x1bc>)
 80012cc:	4a1f      	ldr	r2, [pc, #124]	; (800134c <HAL_UART_MspInit+0x1c0>)
 80012ce:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <HAL_UART_MspInit+0x1bc>)
 80012d2:	2202      	movs	r2, #2
 80012d4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <HAL_UART_MspInit+0x1bc>)
 80012d8:	2210      	movs	r2, #16
 80012da:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <HAL_UART_MspInit+0x1bc>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <HAL_UART_MspInit+0x1bc>)
 80012e4:	2280      	movs	r2, #128	; 0x80
 80012e6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012e8:	4b17      	ldr	r3, [pc, #92]	; (8001348 <HAL_UART_MspInit+0x1bc>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HAL_UART_MspInit+0x1bc>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80012f4:	4b14      	ldr	r3, [pc, #80]	; (8001348 <HAL_UART_MspInit+0x1bc>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012fa:	4b13      	ldr	r3, [pc, #76]	; (8001348 <HAL_UART_MspInit+0x1bc>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001300:	4811      	ldr	r0, [pc, #68]	; (8001348 <HAL_UART_MspInit+0x1bc>)
 8001302:	f000 fa01 	bl	8001708 <HAL_DMA_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <HAL_UART_MspInit+0x184>
    {
      Error_Handler();
 800130c:	f7ff faf8 	bl	8000900 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <HAL_UART_MspInit+0x1bc>)
 8001314:	66da      	str	r2, [r3, #108]	; 0x6c
 8001316:	4a0c      	ldr	r2, [pc, #48]	; (8001348 <HAL_UART_MspInit+0x1bc>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800131c:	2200      	movs	r2, #0
 800131e:	2100      	movs	r1, #0
 8001320:	2026      	movs	r0, #38	; 0x26
 8001322:	f000 f9ba 	bl	800169a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001326:	2026      	movs	r0, #38	; 0x26
 8001328:	f000 f9d3 	bl	80016d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800132c:	bf00      	nop
 800132e:	37b0      	adds	r7, #176	; 0xb0
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40004400 	.word	0x40004400
 8001338:	40021000 	.word	0x40021000
 800133c:	48000c00 	.word	0x48000c00
 8001340:	20000238 	.word	0x20000238
 8001344:	4002006c 	.word	0x4002006c
 8001348:	20000280 	.word	0x20000280
 800134c:	40020080 	.word	0x40020080

08001350 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001388 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001354:	f7ff fb90 	bl	8000a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001358:	480c      	ldr	r0, [pc, #48]	; (800138c <LoopForever+0x6>)
  ldr r1, =_edata
 800135a:	490d      	ldr	r1, [pc, #52]	; (8001390 <LoopForever+0xa>)
  ldr r2, =_sidata
 800135c:	4a0d      	ldr	r2, [pc, #52]	; (8001394 <LoopForever+0xe>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001360:	e002      	b.n	8001368 <LoopCopyDataInit>

08001362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001366:	3304      	adds	r3, #4

08001368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800136c:	d3f9      	bcc.n	8001362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001370:	4c0a      	ldr	r4, [pc, #40]	; (800139c <LoopForever+0x16>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001374:	e001      	b.n	800137a <LoopFillZerobss>

08001376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001378:	3204      	adds	r2, #4

0800137a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800137c:	d3fb      	bcc.n	8001376 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800137e:	f004 fae5 	bl	800594c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001382:	f7ff f9e5 	bl	8000750 <main>

08001386 <LoopForever>:

LoopForever:
    b LoopForever
 8001386:	e7fe      	b.n	8001386 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001388:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800138c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001390:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001394:	08005a14 	.word	0x08005a14
  ldr r2, =_sbss
 8001398:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800139c:	200002cc 	.word	0x200002cc

080013a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC1_2_IRQHandler>
	...

080013a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <HAL_Init+0x3c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <HAL_Init+0x3c>)
 80013b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ba:	2003      	movs	r0, #3
 80013bc:	f000 f962 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013c0:	2000      	movs	r0, #0
 80013c2:	f000 f80f 	bl	80013e4 <HAL_InitTick>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d002      	beq.n	80013d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	71fb      	strb	r3, [r7, #7]
 80013d0:	e001      	b.n	80013d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013d2:	f7ff fab9 	bl	8000948 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013d6:	79fb      	ldrb	r3, [r7, #7]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40022000 	.word	0x40022000

080013e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013f0:	4b17      	ldr	r3, [pc, #92]	; (8001450 <HAL_InitTick+0x6c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d023      	beq.n	8001440 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <HAL_InitTick+0x70>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b14      	ldr	r3, [pc, #80]	; (8001450 <HAL_InitTick+0x6c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001406:	fbb3 f3f1 	udiv	r3, r3, r1
 800140a:	fbb2 f3f3 	udiv	r3, r2, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f96d 	bl	80016ee <HAL_SYSTICK_Config>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10f      	bne.n	800143a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b0f      	cmp	r3, #15
 800141e:	d809      	bhi.n	8001434 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001420:	2200      	movs	r2, #0
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	f000 f937 	bl	800169a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800142c:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <HAL_InitTick+0x74>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e007      	b.n	8001444 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	e004      	b.n	8001444 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	e001      	b.n	8001444 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000014 	.word	0x20000014
 8001454:	2000000c 	.word	0x2000000c
 8001458:	20000010 	.word	0x20000010

0800145c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_IncTick+0x20>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_IncTick+0x24>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	4a04      	ldr	r2, [pc, #16]	; (8001480 <HAL_IncTick+0x24>)
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000014 	.word	0x20000014
 8001480:	200002c8 	.word	0x200002c8

08001484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return uwTick;
 8001488:	4b03      	ldr	r3, [pc, #12]	; (8001498 <HAL_GetTick+0x14>)
 800148a:	681b      	ldr	r3, [r3, #0]
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	200002c8 	.word	0x200002c8

0800149c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a4:	f7ff ffee 	bl	8001484 <HAL_GetTick>
 80014a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b4:	d005      	beq.n	80014c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_Delay+0x44>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4413      	add	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014c2:	bf00      	nop
 80014c4:	f7ff ffde 	bl	8001484 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d8f7      	bhi.n	80014c4 <HAL_Delay+0x28>
  {
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000014 	.word	0x20000014

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4907      	ldr	r1, [pc, #28]	; (8001580 <__NVIC_EnableIRQ+0x38>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000e100 	.word	0xe000e100

08001584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	db0a      	blt.n	80015ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	490c      	ldr	r1, [pc, #48]	; (80015d0 <__NVIC_SetPriority+0x4c>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	440b      	add	r3, r1
 80015a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ac:	e00a      	b.n	80015c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4908      	ldr	r1, [pc, #32]	; (80015d4 <__NVIC_SetPriority+0x50>)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	3b04      	subs	r3, #4
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	761a      	strb	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	; 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f1c3 0307 	rsb	r3, r3, #7
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	bf28      	it	cs
 80015f6:	2304      	movcs	r3, #4
 80015f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3304      	adds	r3, #4
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d902      	bls.n	8001608 <NVIC_EncodePriority+0x30>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3b03      	subs	r3, #3
 8001606:	e000      	b.n	800160a <NVIC_EncodePriority+0x32>
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	f04f 32ff 	mov.w	r2, #4294967295
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	401a      	ands	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43d9      	mvns	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	4313      	orrs	r3, r2
         );
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	; 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001650:	d301      	bcc.n	8001656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001652:	2301      	movs	r3, #1
 8001654:	e00f      	b.n	8001676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <SysTick_Config+0x40>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165e:	210f      	movs	r1, #15
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f7ff ff8e 	bl	8001584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <SysTick_Config+0x40>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <SysTick_Config+0x40>)
 8001670:	2207      	movs	r2, #7
 8001672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	e000e010 	.word	0xe000e010

08001684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ff29 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016ac:	f7ff ff3e 	bl	800152c <__NVIC_GetPriorityGrouping>
 80016b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	6978      	ldr	r0, [r7, #20]
 80016b8:	f7ff ff8e 	bl	80015d8 <NVIC_EncodePriority>
 80016bc:	4602      	mov	r2, r0
 80016be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff5d 	bl	8001584 <__NVIC_SetPriority>
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff31 	bl	8001548 <__NVIC_EnableIRQ>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ffa2 	bl	8001640 <SysTick_Config>
 80016fc:	4603      	mov	r3, r0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e098      	b.n	800184c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	4b4d      	ldr	r3, [pc, #308]	; (8001858 <HAL_DMA_Init+0x150>)
 8001722:	429a      	cmp	r2, r3
 8001724:	d80f      	bhi.n	8001746 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	4b4b      	ldr	r3, [pc, #300]	; (800185c <HAL_DMA_Init+0x154>)
 800172e:	4413      	add	r3, r2
 8001730:	4a4b      	ldr	r2, [pc, #300]	; (8001860 <HAL_DMA_Init+0x158>)
 8001732:	fba2 2303 	umull	r2, r3, r2, r3
 8001736:	091b      	lsrs	r3, r3, #4
 8001738:	009a      	lsls	r2, r3, #2
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a48      	ldr	r2, [pc, #288]	; (8001864 <HAL_DMA_Init+0x15c>)
 8001742:	641a      	str	r2, [r3, #64]	; 0x40
 8001744:	e00e      	b.n	8001764 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	4b46      	ldr	r3, [pc, #280]	; (8001868 <HAL_DMA_Init+0x160>)
 800174e:	4413      	add	r3, r2
 8001750:	4a43      	ldr	r2, [pc, #268]	; (8001860 <HAL_DMA_Init+0x158>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	091b      	lsrs	r3, r3, #4
 8001758:	009a      	lsls	r2, r3, #2
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a42      	ldr	r2, [pc, #264]	; (800186c <HAL_DMA_Init+0x164>)
 8001762:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2202      	movs	r2, #2
 8001768:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800177a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800177e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001788:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001794:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017be:	d039      	beq.n	8001834 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	4a27      	ldr	r2, [pc, #156]	; (8001864 <HAL_DMA_Init+0x15c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d11a      	bne.n	8001800 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80017ca:	4b29      	ldr	r3, [pc, #164]	; (8001870 <HAL_DMA_Init+0x168>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f003 031c 	and.w	r3, r3, #28
 80017d6:	210f      	movs	r1, #15
 80017d8:	fa01 f303 	lsl.w	r3, r1, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	4924      	ldr	r1, [pc, #144]	; (8001870 <HAL_DMA_Init+0x168>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80017e4:	4b22      	ldr	r3, [pc, #136]	; (8001870 <HAL_DMA_Init+0x168>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6859      	ldr	r1, [r3, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f0:	f003 031c 	and.w	r3, r3, #28
 80017f4:	fa01 f303 	lsl.w	r3, r1, r3
 80017f8:	491d      	ldr	r1, [pc, #116]	; (8001870 <HAL_DMA_Init+0x168>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]
 80017fe:	e019      	b.n	8001834 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001800:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <HAL_DMA_Init+0x16c>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001808:	f003 031c 	and.w	r3, r3, #28
 800180c:	210f      	movs	r1, #15
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	4917      	ldr	r1, [pc, #92]	; (8001874 <HAL_DMA_Init+0x16c>)
 8001816:	4013      	ands	r3, r2
 8001818:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800181a:	4b16      	ldr	r3, [pc, #88]	; (8001874 <HAL_DMA_Init+0x16c>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6859      	ldr	r1, [r3, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	f003 031c 	and.w	r3, r3, #28
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	4911      	ldr	r1, [pc, #68]	; (8001874 <HAL_DMA_Init+0x16c>)
 8001830:	4313      	orrs	r3, r2
 8001832:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	40020407 	.word	0x40020407
 800185c:	bffdfff8 	.word	0xbffdfff8
 8001860:	cccccccd 	.word	0xcccccccd
 8001864:	40020000 	.word	0x40020000
 8001868:	bffdfbf8 	.word	0xbffdfbf8
 800186c:	40020400 	.word	0x40020400
 8001870:	400200a8 	.word	0x400200a8
 8001874:	400204a8 	.word	0x400204a8

08001878 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d008      	beq.n	80018a2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2204      	movs	r2, #4
 8001894:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e022      	b.n	80018e8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 020e 	bic.w	r2, r2, #14
 80018b0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0201 	bic.w	r2, r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	f003 021c 	and.w	r2, r3, #28
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	2101      	movs	r1, #1
 80018d0:	fa01 f202 	lsl.w	r2, r1, r2
 80018d4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d005      	beq.n	8001918 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2204      	movs	r2, #4
 8001910:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	73fb      	strb	r3, [r7, #15]
 8001916:	e029      	b.n	800196c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 020e 	bic.w	r2, r2, #14
 8001926:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0201 	bic.w	r2, r2, #1
 8001936:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193c:	f003 021c 	and.w	r2, r3, #28
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	2101      	movs	r1, #1
 8001946:	fa01 f202 	lsl.w	r2, r1, r2
 800194a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	4798      	blx	r3
    }
  }
  return status;
 800196c:	7bfb      	ldrb	r3, [r7, #15]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b084      	sub	sp, #16
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	f003 031c 	and.w	r3, r3, #28
 8001996:	2204      	movs	r2, #4
 8001998:	409a      	lsls	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4013      	ands	r3, r2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d026      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x7a>
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d021      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0320 	and.w	r3, r3, #32
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d107      	bne.n	80019ca <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0204 	bic.w	r2, r2, #4
 80019c8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	f003 021c 	and.w	r2, r3, #28
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	2104      	movs	r1, #4
 80019d8:	fa01 f202 	lsl.w	r2, r1, r2
 80019dc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d071      	beq.n	8001aca <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80019ee:	e06c      	b.n	8001aca <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f4:	f003 031c 	and.w	r3, r3, #28
 80019f8:	2202      	movs	r2, #2
 80019fa:	409a      	lsls	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d02e      	beq.n	8001a62 <HAL_DMA_IRQHandler+0xec>
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d029      	beq.n	8001a62 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0320 	and.w	r3, r3, #32
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10b      	bne.n	8001a34 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 020a 	bic.w	r2, r2, #10
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a38:	f003 021c 	and.w	r2, r3, #28
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	2102      	movs	r1, #2
 8001a42:	fa01 f202 	lsl.w	r2, r1, r2
 8001a46:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d038      	beq.n	8001aca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a60:	e033      	b.n	8001aca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	f003 031c 	and.w	r3, r3, #28
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d02a      	beq.n	8001acc <HAL_DMA_IRQHandler+0x156>
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d025      	beq.n	8001acc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 020e 	bic.w	r2, r2, #14
 8001a8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a94:	f003 021c 	and.w	r2, r3, #28
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d004      	beq.n	8001acc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001aca:	bf00      	nop
 8001acc:	bf00      	nop
}
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b087      	sub	sp, #28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae2:	e17f      	b.n	8001de4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2101      	movs	r1, #1
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	fa01 f303 	lsl.w	r3, r1, r3
 8001af0:	4013      	ands	r3, r2
 8001af2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 8171 	beq.w	8001dde <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d005      	beq.n	8001b14 <HAL_GPIO_Init+0x40>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d130      	bne.n	8001b76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	2203      	movs	r2, #3
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4013      	ands	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	091b      	lsrs	r3, r3, #4
 8001b60:	f003 0201 	and.w	r2, r3, #1
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d118      	bne.n	8001bb4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b88:	2201      	movs	r2, #1
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	08db      	lsrs	r3, r3, #3
 8001b9e:	f003 0201 	and.w	r2, r3, #1
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d017      	beq.n	8001bf0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d123      	bne.n	8001c44 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	08da      	lsrs	r2, r3, #3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3208      	adds	r2, #8
 8001c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c08:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	220f      	movs	r2, #15
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	691a      	ldr	r2, [r3, #16]
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	08da      	lsrs	r2, r3, #3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3208      	adds	r2, #8
 8001c3e:	6939      	ldr	r1, [r7, #16]
 8001c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	2203      	movs	r2, #3
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0203 	and.w	r2, r3, #3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 80ac 	beq.w	8001dde <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c86:	4b5f      	ldr	r3, [pc, #380]	; (8001e04 <HAL_GPIO_Init+0x330>)
 8001c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8a:	4a5e      	ldr	r2, [pc, #376]	; (8001e04 <HAL_GPIO_Init+0x330>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6613      	str	r3, [r2, #96]	; 0x60
 8001c92:	4b5c      	ldr	r3, [pc, #368]	; (8001e04 <HAL_GPIO_Init+0x330>)
 8001c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c9e:	4a5a      	ldr	r2, [pc, #360]	; (8001e08 <HAL_GPIO_Init+0x334>)
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	089b      	lsrs	r3, r3, #2
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001caa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	220f      	movs	r2, #15
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cc8:	d025      	beq.n	8001d16 <HAL_GPIO_Init+0x242>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a4f      	ldr	r2, [pc, #316]	; (8001e0c <HAL_GPIO_Init+0x338>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d01f      	beq.n	8001d12 <HAL_GPIO_Init+0x23e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4e      	ldr	r2, [pc, #312]	; (8001e10 <HAL_GPIO_Init+0x33c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d019      	beq.n	8001d0e <HAL_GPIO_Init+0x23a>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a4d      	ldr	r2, [pc, #308]	; (8001e14 <HAL_GPIO_Init+0x340>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d013      	beq.n	8001d0a <HAL_GPIO_Init+0x236>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4c      	ldr	r2, [pc, #304]	; (8001e18 <HAL_GPIO_Init+0x344>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d00d      	beq.n	8001d06 <HAL_GPIO_Init+0x232>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a4b      	ldr	r2, [pc, #300]	; (8001e1c <HAL_GPIO_Init+0x348>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d007      	beq.n	8001d02 <HAL_GPIO_Init+0x22e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4a      	ldr	r2, [pc, #296]	; (8001e20 <HAL_GPIO_Init+0x34c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d101      	bne.n	8001cfe <HAL_GPIO_Init+0x22a>
 8001cfa:	2306      	movs	r3, #6
 8001cfc:	e00c      	b.n	8001d18 <HAL_GPIO_Init+0x244>
 8001cfe:	2307      	movs	r3, #7
 8001d00:	e00a      	b.n	8001d18 <HAL_GPIO_Init+0x244>
 8001d02:	2305      	movs	r3, #5
 8001d04:	e008      	b.n	8001d18 <HAL_GPIO_Init+0x244>
 8001d06:	2304      	movs	r3, #4
 8001d08:	e006      	b.n	8001d18 <HAL_GPIO_Init+0x244>
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e004      	b.n	8001d18 <HAL_GPIO_Init+0x244>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e002      	b.n	8001d18 <HAL_GPIO_Init+0x244>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_GPIO_Init+0x244>
 8001d16:	2300      	movs	r3, #0
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	f002 0203 	and.w	r2, r2, #3
 8001d1e:	0092      	lsls	r2, r2, #2
 8001d20:	4093      	lsls	r3, r2
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d28:	4937      	ldr	r1, [pc, #220]	; (8001e08 <HAL_GPIO_Init+0x334>)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	089b      	lsrs	r3, r3, #2
 8001d2e:	3302      	adds	r3, #2
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d36:	4b3b      	ldr	r3, [pc, #236]	; (8001e24 <HAL_GPIO_Init+0x350>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d5a:	4a32      	ldr	r2, [pc, #200]	; (8001e24 <HAL_GPIO_Init+0x350>)
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d60:	4b30      	ldr	r3, [pc, #192]	; (8001e24 <HAL_GPIO_Init+0x350>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d84:	4a27      	ldr	r2, [pc, #156]	; (8001e24 <HAL_GPIO_Init+0x350>)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d8a:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <HAL_GPIO_Init+0x350>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dae:	4a1d      	ldr	r2, [pc, #116]	; (8001e24 <HAL_GPIO_Init+0x350>)
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001db4:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <HAL_GPIO_Init+0x350>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dd8:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <HAL_GPIO_Init+0x350>)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	3301      	adds	r3, #1
 8001de2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa22 f303 	lsr.w	r3, r2, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f47f ae78 	bne.w	8001ae4 <HAL_GPIO_Init+0x10>
  }
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	371c      	adds	r7, #28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40010000 	.word	0x40010000
 8001e0c:	48000400 	.word	0x48000400
 8001e10:	48000800 	.word	0x48000800
 8001e14:	48000c00 	.word	0x48000c00
 8001e18:	48001000 	.word	0x48001000
 8001e1c:	48001400 	.word	0x48001400
 8001e20:	48001800 	.word	0x48001800
 8001e24:	40010400 	.word	0x40010400

08001e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	807b      	strh	r3, [r7, #2]
 8001e34:	4613      	mov	r3, r2
 8001e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e38:	787b      	ldrb	r3, [r7, #1]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e3e:	887a      	ldrh	r2, [r7, #2]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e44:	e002      	b.n	8001e4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e46:	887a      	ldrh	r2, [r7, #2]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40007000 	.word	0x40007000

08001e74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e82:	d130      	bne.n	8001ee6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e84:	4b23      	ldr	r3, [pc, #140]	; (8001f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e90:	d038      	beq.n	8001f04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e9a:	4a1e      	ldr	r2, [pc, #120]	; (8001f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ea0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ea2:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2232      	movs	r2, #50	; 0x32
 8001ea8:	fb02 f303 	mul.w	r3, r2, r3
 8001eac:	4a1b      	ldr	r2, [pc, #108]	; (8001f1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001eae:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb2:	0c9b      	lsrs	r3, r3, #18
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eb8:	e002      	b.n	8001ec0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ec0:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ecc:	d102      	bne.n	8001ed4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f2      	bne.n	8001eba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee0:	d110      	bne.n	8001f04 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e00f      	b.n	8001f06 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef2:	d007      	beq.n	8001f04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ef4:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001efc:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001efe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40007000 	.word	0x40007000
 8001f18:	2000000c 	.word	0x2000000c
 8001f1c:	431bde83 	.word	0x431bde83

08001f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e3d8      	b.n	80026e4 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f32:	4b97      	ldr	r3, [pc, #604]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f3c:	4b94      	ldr	r3, [pc, #592]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 80e4 	beq.w	800211c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d007      	beq.n	8001f6a <HAL_RCC_OscConfig+0x4a>
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	2b0c      	cmp	r3, #12
 8001f5e:	f040 808b 	bne.w	8002078 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	f040 8087 	bne.w	8002078 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f6a:	4b89      	ldr	r3, [pc, #548]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d005      	beq.n	8001f82 <HAL_RCC_OscConfig+0x62>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e3b0      	b.n	80026e4 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1a      	ldr	r2, [r3, #32]
 8001f86:	4b82      	ldr	r3, [pc, #520]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d004      	beq.n	8001f9c <HAL_RCC_OscConfig+0x7c>
 8001f92:	4b7f      	ldr	r3, [pc, #508]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f9a:	e005      	b.n	8001fa8 <HAL_RCC_OscConfig+0x88>
 8001f9c:	4b7c      	ldr	r3, [pc, #496]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 8001f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa2:	091b      	lsrs	r3, r3, #4
 8001fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d223      	bcs.n	8001ff4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f000 fd43 	bl	8002a3c <RCC_SetFlashLatencyFromMSIRange>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e391      	b.n	80026e4 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc0:	4b73      	ldr	r3, [pc, #460]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a72      	ldr	r2, [pc, #456]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 8001fc6:	f043 0308 	orr.w	r3, r3, #8
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	4b70      	ldr	r3, [pc, #448]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	496d      	ldr	r1, [pc, #436]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fde:	4b6c      	ldr	r3, [pc, #432]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	021b      	lsls	r3, r3, #8
 8001fec:	4968      	ldr	r1, [pc, #416]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
 8001ff2:	e025      	b.n	8002040 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ff4:	4b66      	ldr	r3, [pc, #408]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a65      	ldr	r2, [pc, #404]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 8001ffa:	f043 0308 	orr.w	r3, r3, #8
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	4b63      	ldr	r3, [pc, #396]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	4960      	ldr	r1, [pc, #384]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 800200e:	4313      	orrs	r3, r2
 8002010:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002012:	4b5f      	ldr	r3, [pc, #380]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	495b      	ldr	r1, [pc, #364]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 8002022:	4313      	orrs	r3, r2
 8002024:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d109      	bne.n	8002040 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	4618      	mov	r0, r3
 8002032:	f000 fd03 	bl	8002a3c <RCC_SetFlashLatencyFromMSIRange>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e351      	b.n	80026e4 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002040:	f000 fc38 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 8002044:	4602      	mov	r2, r0
 8002046:	4b52      	ldr	r3, [pc, #328]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	091b      	lsrs	r3, r3, #4
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	4950      	ldr	r1, [pc, #320]	; (8002194 <HAL_RCC_OscConfig+0x274>)
 8002052:	5ccb      	ldrb	r3, [r1, r3]
 8002054:	f003 031f 	and.w	r3, r3, #31
 8002058:	fa22 f303 	lsr.w	r3, r2, r3
 800205c:	4a4e      	ldr	r2, [pc, #312]	; (8002198 <HAL_RCC_OscConfig+0x278>)
 800205e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002060:	4b4e      	ldr	r3, [pc, #312]	; (800219c <HAL_RCC_OscConfig+0x27c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff f9bd 	bl	80013e4 <HAL_InitTick>
 800206a:	4603      	mov	r3, r0
 800206c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800206e:	7bfb      	ldrb	r3, [r7, #15]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d052      	beq.n	800211a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	e335      	b.n	80026e4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d032      	beq.n	80020e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002080:	4b43      	ldr	r3, [pc, #268]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a42      	ldr	r2, [pc, #264]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800208c:	f7ff f9fa 	bl	8001484 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002094:	f7ff f9f6 	bl	8001484 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e31e      	b.n	80026e4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020a6:	4b3a      	ldr	r3, [pc, #232]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020b2:	4b37      	ldr	r3, [pc, #220]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a36      	ldr	r2, [pc, #216]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 80020b8:	f043 0308 	orr.w	r3, r3, #8
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	4b34      	ldr	r3, [pc, #208]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	4931      	ldr	r1, [pc, #196]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020d0:	4b2f      	ldr	r3, [pc, #188]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	021b      	lsls	r3, r3, #8
 80020de:	492c      	ldr	r1, [pc, #176]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]
 80020e4:	e01a      	b.n	800211c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020e6:	4b2a      	ldr	r3, [pc, #168]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a29      	ldr	r2, [pc, #164]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 80020ec:	f023 0301 	bic.w	r3, r3, #1
 80020f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020f2:	f7ff f9c7 	bl	8001484 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020fa:	f7ff f9c3 	bl	8001484 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e2eb      	b.n	80026e4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800210c:	4b20      	ldr	r3, [pc, #128]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1f0      	bne.n	80020fa <HAL_RCC_OscConfig+0x1da>
 8002118:	e000      	b.n	800211c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800211a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b00      	cmp	r3, #0
 8002126:	d074      	beq.n	8002212 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	2b08      	cmp	r3, #8
 800212c:	d005      	beq.n	800213a <HAL_RCC_OscConfig+0x21a>
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b0c      	cmp	r3, #12
 8002132:	d10e      	bne.n	8002152 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2b03      	cmp	r3, #3
 8002138:	d10b      	bne.n	8002152 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d064      	beq.n	8002210 <HAL_RCC_OscConfig+0x2f0>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d160      	bne.n	8002210 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e2c8      	b.n	80026e4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x24a>
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0b      	ldr	r2, [pc, #44]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 8002162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	e026      	b.n	80021b8 <HAL_RCC_OscConfig+0x298>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002172:	d115      	bne.n	80021a0 <HAL_RCC_OscConfig+0x280>
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a05      	ldr	r2, [pc, #20]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 800217a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a02      	ldr	r2, [pc, #8]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 8002186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	e014      	b.n	80021b8 <HAL_RCC_OscConfig+0x298>
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000
 8002194:	080059bc 	.word	0x080059bc
 8002198:	2000000c 	.word	0x2000000c
 800219c:	20000010 	.word	0x20000010
 80021a0:	4ba0      	ldr	r3, [pc, #640]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a9f      	ldr	r2, [pc, #636]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 80021a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b9d      	ldr	r3, [pc, #628]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a9c      	ldr	r2, [pc, #624]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 80021b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d013      	beq.n	80021e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c0:	f7ff f960 	bl	8001484 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c8:	f7ff f95c 	bl	8001484 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b64      	cmp	r3, #100	; 0x64
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e284      	b.n	80026e4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021da:	4b92      	ldr	r3, [pc, #584]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0x2a8>
 80021e6:	e014      	b.n	8002212 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e8:	f7ff f94c 	bl	8001484 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f0:	f7ff f948 	bl	8001484 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	; 0x64
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e270      	b.n	80026e4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002202:	4b88      	ldr	r3, [pc, #544]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x2d0>
 800220e:	e000      	b.n	8002212 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d060      	beq.n	80022e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	2b04      	cmp	r3, #4
 8002222:	d005      	beq.n	8002230 <HAL_RCC_OscConfig+0x310>
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d119      	bne.n	800225e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d116      	bne.n	800225e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002230:	4b7c      	ldr	r3, [pc, #496]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_RCC_OscConfig+0x328>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e24d      	b.n	80026e4 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002248:	4b76      	ldr	r3, [pc, #472]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	061b      	lsls	r3, r3, #24
 8002256:	4973      	ldr	r1, [pc, #460]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800225c:	e040      	b.n	80022e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d023      	beq.n	80022ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002266:	4b6f      	ldr	r3, [pc, #444]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a6e      	ldr	r2, [pc, #440]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 800226c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002272:	f7ff f907 	bl	8001484 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800227a:	f7ff f903 	bl	8001484 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e22b      	b.n	80026e4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800228c:	4b65      	ldr	r3, [pc, #404]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0f0      	beq.n	800227a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002298:	4b62      	ldr	r3, [pc, #392]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	061b      	lsls	r3, r3, #24
 80022a6:	495f      	ldr	r1, [pc, #380]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	604b      	str	r3, [r1, #4]
 80022ac:	e018      	b.n	80022e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ae:	4b5d      	ldr	r3, [pc, #372]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a5c      	ldr	r2, [pc, #368]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 80022b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ba:	f7ff f8e3 	bl	8001484 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c2:	f7ff f8df 	bl	8001484 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e207      	b.n	80026e4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022d4:	4b53      	ldr	r3, [pc, #332]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f0      	bne.n	80022c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d03c      	beq.n	8002366 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d01c      	beq.n	800232e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f4:	4b4b      	ldr	r3, [pc, #300]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 80022f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022fa:	4a4a      	ldr	r2, [pc, #296]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002304:	f7ff f8be 	bl	8001484 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800230c:	f7ff f8ba 	bl	8001484 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e1e2      	b.n	80026e4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800231e:	4b41      	ldr	r3, [pc, #260]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 8002320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0ef      	beq.n	800230c <HAL_RCC_OscConfig+0x3ec>
 800232c:	e01b      	b.n	8002366 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800232e:	4b3d      	ldr	r3, [pc, #244]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 8002330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002334:	4a3b      	ldr	r2, [pc, #236]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 8002336:	f023 0301 	bic.w	r3, r3, #1
 800233a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233e:	f7ff f8a1 	bl	8001484 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002346:	f7ff f89d 	bl	8001484 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e1c5      	b.n	80026e4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002358:	4b32      	ldr	r3, [pc, #200]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 800235a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1ef      	bne.n	8002346 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 80a6 	beq.w	80024c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002374:	2300      	movs	r3, #0
 8002376:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002378:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 800237a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10d      	bne.n	80023a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002384:	4b27      	ldr	r3, [pc, #156]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 8002386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002388:	4a26      	ldr	r2, [pc, #152]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 800238a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238e:	6593      	str	r3, [r2, #88]	; 0x58
 8002390:	4b24      	ldr	r3, [pc, #144]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 8002392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800239c:	2301      	movs	r3, #1
 800239e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023a0:	4b21      	ldr	r3, [pc, #132]	; (8002428 <HAL_RCC_OscConfig+0x508>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d118      	bne.n	80023de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023ac:	4b1e      	ldr	r3, [pc, #120]	; (8002428 <HAL_RCC_OscConfig+0x508>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a1d      	ldr	r2, [pc, #116]	; (8002428 <HAL_RCC_OscConfig+0x508>)
 80023b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b8:	f7ff f864 	bl	8001484 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c0:	f7ff f860 	bl	8001484 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e188      	b.n	80026e4 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023d2:	4b15      	ldr	r3, [pc, #84]	; (8002428 <HAL_RCC_OscConfig+0x508>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d108      	bne.n	80023f8 <HAL_RCC_OscConfig+0x4d8>
 80023e6:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 80023e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ec:	4a0d      	ldr	r2, [pc, #52]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023f6:	e029      	b.n	800244c <HAL_RCC_OscConfig+0x52c>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b05      	cmp	r3, #5
 80023fe:	d115      	bne.n	800242c <HAL_RCC_OscConfig+0x50c>
 8002400:	4b08      	ldr	r3, [pc, #32]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 8002402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002406:	4a07      	ldr	r2, [pc, #28]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 8002408:	f043 0304 	orr.w	r3, r3, #4
 800240c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002410:	4b04      	ldr	r3, [pc, #16]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 8002412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002416:	4a03      	ldr	r2, [pc, #12]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002420:	e014      	b.n	800244c <HAL_RCC_OscConfig+0x52c>
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000
 8002428:	40007000 	.word	0x40007000
 800242c:	4b91      	ldr	r3, [pc, #580]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 800242e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002432:	4a90      	ldr	r2, [pc, #576]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800243c:	4b8d      	ldr	r3, [pc, #564]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 800243e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002442:	4a8c      	ldr	r2, [pc, #560]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 8002444:	f023 0304 	bic.w	r3, r3, #4
 8002448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d016      	beq.n	8002482 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002454:	f7ff f816 	bl	8001484 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800245a:	e00a      	b.n	8002472 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245c:	f7ff f812 	bl	8001484 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f241 3288 	movw	r2, #5000	; 0x1388
 800246a:	4293      	cmp	r3, r2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e138      	b.n	80026e4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002472:	4b80      	ldr	r3, [pc, #512]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 8002474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0ed      	beq.n	800245c <HAL_RCC_OscConfig+0x53c>
 8002480:	e015      	b.n	80024ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002482:	f7fe ffff 	bl	8001484 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002488:	e00a      	b.n	80024a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248a:	f7fe fffb 	bl	8001484 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f241 3288 	movw	r2, #5000	; 0x1388
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e121      	b.n	80026e4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024a0:	4b74      	ldr	r3, [pc, #464]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 80024a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1ed      	bne.n	800248a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024ae:	7ffb      	ldrb	r3, [r7, #31]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d105      	bne.n	80024c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b4:	4b6f      	ldr	r3, [pc, #444]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b8:	4a6e      	ldr	r2, [pc, #440]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 80024ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024be:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 810c 	beq.w	80026e2 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	f040 80d4 	bne.w	800267c <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024d4:	4b67      	ldr	r3, [pc, #412]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f003 0203 	and.w	r2, r3, #3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d130      	bne.n	800254a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	3b01      	subs	r3, #1
 80024f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d127      	bne.n	800254a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002504:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002506:	429a      	cmp	r2, r3
 8002508:	d11f      	bne.n	800254a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002514:	2a07      	cmp	r2, #7
 8002516:	bf14      	ite	ne
 8002518:	2201      	movne	r2, #1
 800251a:	2200      	moveq	r2, #0
 800251c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800251e:	4293      	cmp	r3, r2
 8002520:	d113      	bne.n	800254a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252c:	085b      	lsrs	r3, r3, #1
 800252e:	3b01      	subs	r3, #1
 8002530:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d109      	bne.n	800254a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	085b      	lsrs	r3, r3, #1
 8002542:	3b01      	subs	r3, #1
 8002544:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002546:	429a      	cmp	r2, r3
 8002548:	d06e      	beq.n	8002628 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	2b0c      	cmp	r3, #12
 800254e:	d069      	beq.n	8002624 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002550:	4b48      	ldr	r3, [pc, #288]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d105      	bne.n	8002568 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800255c:	4b45      	ldr	r3, [pc, #276]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0bb      	b.n	80026e4 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800256c:	4b41      	ldr	r3, [pc, #260]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a40      	ldr	r2, [pc, #256]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 8002572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002576:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002578:	f7fe ff84 	bl	8001484 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002580:	f7fe ff80 	bl	8001484 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e0a8      	b.n	80026e4 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002592:	4b38      	ldr	r3, [pc, #224]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800259e:	4b35      	ldr	r3, [pc, #212]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	4b35      	ldr	r3, [pc, #212]	; (8002678 <HAL_RCC_OscConfig+0x758>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025ae:	3a01      	subs	r2, #1
 80025b0:	0112      	lsls	r2, r2, #4
 80025b2:	4311      	orrs	r1, r2
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025b8:	0212      	lsls	r2, r2, #8
 80025ba:	4311      	orrs	r1, r2
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025c0:	0852      	lsrs	r2, r2, #1
 80025c2:	3a01      	subs	r2, #1
 80025c4:	0552      	lsls	r2, r2, #21
 80025c6:	4311      	orrs	r1, r2
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025cc:	0852      	lsrs	r2, r2, #1
 80025ce:	3a01      	subs	r2, #1
 80025d0:	0652      	lsls	r2, r2, #25
 80025d2:	4311      	orrs	r1, r2
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025d8:	0912      	lsrs	r2, r2, #4
 80025da:	0452      	lsls	r2, r2, #17
 80025dc:	430a      	orrs	r2, r1
 80025de:	4925      	ldr	r1, [pc, #148]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025e4:	4b23      	ldr	r3, [pc, #140]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a22      	ldr	r2, [pc, #136]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 80025ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025f0:	4b20      	ldr	r3, [pc, #128]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4a1f      	ldr	r2, [pc, #124]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 80025f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025fc:	f7fe ff42 	bl	8001484 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002604:	f7fe ff3e 	bl	8001484 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e066      	b.n	80026e4 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002616:	4b17      	ldr	r3, [pc, #92]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f0      	beq.n	8002604 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002622:	e05e      	b.n	80026e2 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e05d      	b.n	80026e4 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002628:	4b12      	ldr	r3, [pc, #72]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d156      	bne.n	80026e2 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002634:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0e      	ldr	r2, [pc, #56]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 800263a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800263e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4a0b      	ldr	r2, [pc, #44]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 8002646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800264a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800264c:	f7fe ff1a 	bl	8001484 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002654:	f7fe ff16 	bl	8001484 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e03e      	b.n	80026e4 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002666:	4b03      	ldr	r3, [pc, #12]	; (8002674 <HAL_RCC_OscConfig+0x754>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x734>
 8002672:	e036      	b.n	80026e2 <HAL_RCC_OscConfig+0x7c2>
 8002674:	40021000 	.word	0x40021000
 8002678:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	2b0c      	cmp	r3, #12
 8002680:	d02d      	beq.n	80026de <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002682:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <HAL_RCC_OscConfig+0x7cc>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a19      	ldr	r2, [pc, #100]	; (80026ec <HAL_RCC_OscConfig+0x7cc>)
 8002688:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800268c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800268e:	4b17      	ldr	r3, [pc, #92]	; (80026ec <HAL_RCC_OscConfig+0x7cc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d105      	bne.n	80026a6 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800269a:	4b14      	ldr	r3, [pc, #80]	; (80026ec <HAL_RCC_OscConfig+0x7cc>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	4a13      	ldr	r2, [pc, #76]	; (80026ec <HAL_RCC_OscConfig+0x7cc>)
 80026a0:	f023 0303 	bic.w	r3, r3, #3
 80026a4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026a6:	4b11      	ldr	r3, [pc, #68]	; (80026ec <HAL_RCC_OscConfig+0x7cc>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	4a10      	ldr	r2, [pc, #64]	; (80026ec <HAL_RCC_OscConfig+0x7cc>)
 80026ac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80026b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b6:	f7fe fee5 	bl	8001484 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026be:	f7fe fee1 	bl	8001484 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e009      	b.n	80026e4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_RCC_OscConfig+0x7cc>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f0      	bne.n	80026be <HAL_RCC_OscConfig+0x79e>
 80026dc:	e001      	b.n	80026e2 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3720      	adds	r7, #32
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40021000 	.word	0x40021000

080026f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0c8      	b.n	8002896 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002704:	4b66      	ldr	r3, [pc, #408]	; (80028a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d910      	bls.n	8002734 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b63      	ldr	r3, [pc, #396]	; (80028a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 0207 	bic.w	r2, r3, #7
 800271a:	4961      	ldr	r1, [pc, #388]	; (80028a0 <HAL_RCC_ClockConfig+0x1b0>)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	4313      	orrs	r3, r2
 8002720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002722:	4b5f      	ldr	r3, [pc, #380]	; (80028a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0b0      	b.n	8002896 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d04c      	beq.n	80027da <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b03      	cmp	r3, #3
 8002746:	d107      	bne.n	8002758 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002748:	4b56      	ldr	r3, [pc, #344]	; (80028a4 <HAL_RCC_ClockConfig+0x1b4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d121      	bne.n	8002798 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e09e      	b.n	8002896 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d107      	bne.n	8002770 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002760:	4b50      	ldr	r3, [pc, #320]	; (80028a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d115      	bne.n	8002798 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e092      	b.n	8002896 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d107      	bne.n	8002788 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002778:	4b4a      	ldr	r3, [pc, #296]	; (80028a4 <HAL_RCC_ClockConfig+0x1b4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d109      	bne.n	8002798 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e086      	b.n	8002896 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002788:	4b46      	ldr	r3, [pc, #280]	; (80028a4 <HAL_RCC_ClockConfig+0x1b4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e07e      	b.n	8002896 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002798:	4b42      	ldr	r3, [pc, #264]	; (80028a4 <HAL_RCC_ClockConfig+0x1b4>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f023 0203 	bic.w	r2, r3, #3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	493f      	ldr	r1, [pc, #252]	; (80028a4 <HAL_RCC_ClockConfig+0x1b4>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027aa:	f7fe fe6b 	bl	8001484 <HAL_GetTick>
 80027ae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b0:	e00a      	b.n	80027c8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b2:	f7fe fe67 	bl	8001484 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e066      	b.n	8002896 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c8:	4b36      	ldr	r3, [pc, #216]	; (80028a4 <HAL_RCC_ClockConfig+0x1b4>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 020c 	and.w	r2, r3, #12
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d1eb      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d008      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e6:	4b2f      	ldr	r3, [pc, #188]	; (80028a4 <HAL_RCC_ClockConfig+0x1b4>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	492c      	ldr	r1, [pc, #176]	; (80028a4 <HAL_RCC_ClockConfig+0x1b4>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027f8:	4b29      	ldr	r3, [pc, #164]	; (80028a0 <HAL_RCC_ClockConfig+0x1b0>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d210      	bcs.n	8002828 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 0207 	bic.w	r2, r3, #7
 800280e:	4924      	ldr	r1, [pc, #144]	; (80028a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b22      	ldr	r3, [pc, #136]	; (80028a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e036      	b.n	8002896 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002834:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4918      	ldr	r1, [pc, #96]	; (80028a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d009      	beq.n	8002866 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002852:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4910      	ldr	r1, [pc, #64]	; (80028a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002866:	f000 f825 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 800286a:	4602      	mov	r2, r0
 800286c:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <HAL_RCC_ClockConfig+0x1b4>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	490c      	ldr	r1, [pc, #48]	; (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002878:	5ccb      	ldrb	r3, [r1, r3]
 800287a:	f003 031f 	and.w	r3, r3, #31
 800287e:	fa22 f303 	lsr.w	r3, r2, r3
 8002882:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002886:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe fdaa 	bl	80013e4 <HAL_InitTick>
 8002890:	4603      	mov	r3, r0
 8002892:	72fb      	strb	r3, [r7, #11]

  return status;
 8002894:	7afb      	ldrb	r3, [r7, #11]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40022000 	.word	0x40022000
 80028a4:	40021000 	.word	0x40021000
 80028a8:	080059bc 	.word	0x080059bc
 80028ac:	2000000c 	.word	0x2000000c
 80028b0:	20000010 	.word	0x20000010

080028b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b089      	sub	sp, #36	; 0x24
 80028b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	2300      	movs	r3, #0
 80028c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028c2:	4b3e      	ldr	r3, [pc, #248]	; (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028cc:	4b3b      	ldr	r3, [pc, #236]	; (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0x34>
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	2b0c      	cmp	r3, #12
 80028e0:	d121      	bne.n	8002926 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d11e      	bne.n	8002926 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028e8:	4b34      	ldr	r3, [pc, #208]	; (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d107      	bne.n	8002904 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028f4:	4b31      	ldr	r3, [pc, #196]	; (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 80028f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028fa:	0a1b      	lsrs	r3, r3, #8
 80028fc:	f003 030f 	and.w	r3, r3, #15
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	e005      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002904:	4b2d      	ldr	r3, [pc, #180]	; (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002910:	4a2b      	ldr	r2, [pc, #172]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002918:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10d      	bne.n	800293c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002924:	e00a      	b.n	800293c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	2b04      	cmp	r3, #4
 800292a:	d102      	bne.n	8002932 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800292c:	4b25      	ldr	r3, [pc, #148]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800292e:	61bb      	str	r3, [r7, #24]
 8002930:	e004      	b.n	800293c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	2b08      	cmp	r3, #8
 8002936:	d101      	bne.n	800293c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002938:	4b23      	ldr	r3, [pc, #140]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800293a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	2b0c      	cmp	r3, #12
 8002940:	d134      	bne.n	80029ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002942:	4b1e      	ldr	r3, [pc, #120]	; (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d003      	beq.n	800295a <HAL_RCC_GetSysClockFreq+0xa6>
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2b03      	cmp	r3, #3
 8002956:	d003      	beq.n	8002960 <HAL_RCC_GetSysClockFreq+0xac>
 8002958:	e005      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800295a:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800295c:	617b      	str	r3, [r7, #20]
      break;
 800295e:	e005      	b.n	800296c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002960:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002962:	617b      	str	r3, [r7, #20]
      break;
 8002964:	e002      	b.n	800296c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	617b      	str	r3, [r7, #20]
      break;
 800296a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800296c:	4b13      	ldr	r3, [pc, #76]	; (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	3301      	adds	r3, #1
 8002978:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	0a1b      	lsrs	r3, r3, #8
 8002980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	fb03 f202 	mul.w	r2, r3, r2
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002990:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002992:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	0e5b      	lsrs	r3, r3, #25
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	3301      	adds	r3, #1
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029ac:	69bb      	ldr	r3, [r7, #24]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3724      	adds	r7, #36	; 0x24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000
 80029c0:	080059d4 	.word	0x080059d4
 80029c4:	00f42400 	.word	0x00f42400
 80029c8:	007a1200 	.word	0x007a1200

080029cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029d0:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029d2:	681b      	ldr	r3, [r3, #0]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	2000000c 	.word	0x2000000c

080029e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029e8:	f7ff fff0 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 80029ec:	4602      	mov	r2, r0
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	0a1b      	lsrs	r3, r3, #8
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	4904      	ldr	r1, [pc, #16]	; (8002a0c <HAL_RCC_GetPCLK1Freq+0x28>)
 80029fa:	5ccb      	ldrb	r3, [r1, r3]
 80029fc:	f003 031f 	and.w	r3, r3, #31
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	080059cc 	.word	0x080059cc

08002a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a14:	f7ff ffda 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	0adb      	lsrs	r3, r3, #11
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	4904      	ldr	r1, [pc, #16]	; (8002a38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a26:	5ccb      	ldrb	r3, [r1, r3]
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40021000 	.word	0x40021000
 8002a38:	080059cc 	.word	0x080059cc

08002a3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a44:	2300      	movs	r3, #0
 8002a46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a48:	4b2a      	ldr	r3, [pc, #168]	; (8002af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a54:	f7ff fa00 	bl	8001e58 <HAL_PWREx_GetVoltageRange>
 8002a58:	6178      	str	r0, [r7, #20]
 8002a5a:	e014      	b.n	8002a86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a5c:	4b25      	ldr	r3, [pc, #148]	; (8002af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a60:	4a24      	ldr	r2, [pc, #144]	; (8002af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a66:	6593      	str	r3, [r2, #88]	; 0x58
 8002a68:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a74:	f7ff f9f0 	bl	8001e58 <HAL_PWREx_GetVoltageRange>
 8002a78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a7a:	4b1e      	ldr	r3, [pc, #120]	; (8002af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7e:	4a1d      	ldr	r2, [pc, #116]	; (8002af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a8c:	d10b      	bne.n	8002aa6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b80      	cmp	r3, #128	; 0x80
 8002a92:	d919      	bls.n	8002ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2ba0      	cmp	r3, #160	; 0xa0
 8002a98:	d902      	bls.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	e013      	b.n	8002ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	e010      	b.n	8002ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b80      	cmp	r3, #128	; 0x80
 8002aaa:	d902      	bls.n	8002ab2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002aac:	2303      	movs	r3, #3
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	e00a      	b.n	8002ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b80      	cmp	r3, #128	; 0x80
 8002ab6:	d102      	bne.n	8002abe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ab8:	2302      	movs	r3, #2
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	e004      	b.n	8002ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b70      	cmp	r3, #112	; 0x70
 8002ac2:	d101      	bne.n	8002ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f023 0207 	bic.w	r2, r3, #7
 8002ad0:	4909      	ldr	r1, [pc, #36]	; (8002af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ad8:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d001      	beq.n	8002aea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40022000 	.word	0x40022000

08002afc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b04:	2300      	movs	r3, #0
 8002b06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b08:	2300      	movs	r3, #0
 8002b0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d041      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b20:	d02a      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b26:	d824      	bhi.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b2c:	d008      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b32:	d81e      	bhi.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b3c:	d010      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b3e:	e018      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b40:	4b86      	ldr	r3, [pc, #536]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4a85      	ldr	r2, [pc, #532]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b4c:	e015      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3304      	adds	r3, #4
 8002b52:	2100      	movs	r1, #0
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 fabb 	bl	80030d0 <RCCEx_PLLSAI1_Config>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b5e:	e00c      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3320      	adds	r3, #32
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fba6 	bl	80032b8 <RCCEx_PLLSAI2_Config>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b70:	e003      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	74fb      	strb	r3, [r7, #19]
      break;
 8002b76:	e000      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b7a:	7cfb      	ldrb	r3, [r7, #19]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10b      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b80:	4b76      	ldr	r3, [pc, #472]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b8e:	4973      	ldr	r1, [pc, #460]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b96:	e001      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b98:	7cfb      	ldrb	r3, [r7, #19]
 8002b9a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d041      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002bb0:	d02a      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002bb2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002bb6:	d824      	bhi.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bbc:	d008      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002bbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bc2:	d81e      	bhi.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00a      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bcc:	d010      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bce:	e018      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bd0:	4b62      	ldr	r3, [pc, #392]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4a61      	ldr	r2, [pc, #388]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bda:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bdc:	e015      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3304      	adds	r3, #4
 8002be2:	2100      	movs	r1, #0
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 fa73 	bl	80030d0 <RCCEx_PLLSAI1_Config>
 8002bea:	4603      	mov	r3, r0
 8002bec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bee:	e00c      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3320      	adds	r3, #32
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fb5e 	bl	80032b8 <RCCEx_PLLSAI2_Config>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c00:	e003      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	74fb      	strb	r3, [r7, #19]
      break;
 8002c06:	e000      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002c08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c0a:	7cfb      	ldrb	r3, [r7, #19]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10b      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c10:	4b52      	ldr	r3, [pc, #328]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c1e:	494f      	ldr	r1, [pc, #316]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c26:	e001      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c28:	7cfb      	ldrb	r3, [r7, #19]
 8002c2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80a0 	beq.w	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c3e:	4b47      	ldr	r3, [pc, #284]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00d      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c54:	4b41      	ldr	r3, [pc, #260]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c58:	4a40      	ldr	r2, [pc, #256]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c60:	4b3e      	ldr	r3, [pc, #248]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c70:	4b3b      	ldr	r3, [pc, #236]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a3a      	ldr	r2, [pc, #232]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c7c:	f7fe fc02 	bl	8001484 <HAL_GetTick>
 8002c80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c82:	e009      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c84:	f7fe fbfe 	bl	8001484 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d902      	bls.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	74fb      	strb	r3, [r7, #19]
        break;
 8002c96:	e005      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c98:	4b31      	ldr	r3, [pc, #196]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0ef      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002ca4:	7cfb      	ldrb	r3, [r7, #19]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d15c      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002caa:	4b2c      	ldr	r3, [pc, #176]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01f      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d019      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cc8:	4b24      	ldr	r3, [pc, #144]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cd4:	4b21      	ldr	r3, [pc, #132]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cda:	4a20      	ldr	r2, [pc, #128]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ce4:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cea:	4a1c      	ldr	r2, [pc, #112]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cf4:	4a19      	ldr	r2, [pc, #100]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d016      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d06:	f7fe fbbd 	bl	8001484 <HAL_GetTick>
 8002d0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d0c:	e00b      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0e:	f7fe fbb9 	bl	8001484 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d902      	bls.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	74fb      	strb	r3, [r7, #19]
            break;
 8002d24:	e006      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d26:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0ec      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002d34:	7cfb      	ldrb	r3, [r7, #19]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d3a:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d4a:	4904      	ldr	r1, [pc, #16]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d52:	e009      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d54:	7cfb      	ldrb	r3, [r7, #19]
 8002d56:	74bb      	strb	r3, [r7, #18]
 8002d58:	e006      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002d5a:	bf00      	nop
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d64:	7cfb      	ldrb	r3, [r7, #19]
 8002d66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d68:	7c7b      	ldrb	r3, [r7, #17]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d105      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6e:	4b9e      	ldr	r3, [pc, #632]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d72:	4a9d      	ldr	r2, [pc, #628]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d86:	4b98      	ldr	r3, [pc, #608]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8c:	f023 0203 	bic.w	r2, r3, #3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	4994      	ldr	r1, [pc, #592]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002da8:	4b8f      	ldr	r3, [pc, #572]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dae:	f023 020c 	bic.w	r2, r3, #12
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db6:	498c      	ldr	r1, [pc, #560]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dca:	4b87      	ldr	r3, [pc, #540]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	4983      	ldr	r1, [pc, #524]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dec:	4b7e      	ldr	r3, [pc, #504]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	497b      	ldr	r1, [pc, #492]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e0e:	4b76      	ldr	r3, [pc, #472]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e1c:	4972      	ldr	r1, [pc, #456]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0320 	and.w	r3, r3, #32
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e30:	4b6d      	ldr	r3, [pc, #436]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3e:	496a      	ldr	r1, [pc, #424]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e52:	4b65      	ldr	r3, [pc, #404]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e60:	4961      	ldr	r1, [pc, #388]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e74:	4b5c      	ldr	r3, [pc, #368]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e82:	4959      	ldr	r1, [pc, #356]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e96:	4b54      	ldr	r3, [pc, #336]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea4:	4950      	ldr	r1, [pc, #320]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00a      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002eb8:	4b4b      	ldr	r3, [pc, #300]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec6:	4948      	ldr	r1, [pc, #288]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002eda:	4b43      	ldr	r3, [pc, #268]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee8:	493f      	ldr	r1, [pc, #252]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d028      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002efc:	4b3a      	ldr	r3, [pc, #232]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f0a:	4937      	ldr	r1, [pc, #220]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f1a:	d106      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f1c:	4b32      	ldr	r3, [pc, #200]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4a31      	ldr	r2, [pc, #196]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f26:	60d3      	str	r3, [r2, #12]
 8002f28:	e011      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f32:	d10c      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3304      	adds	r3, #4
 8002f38:	2101      	movs	r1, #1
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 f8c8 	bl	80030d0 <RCCEx_PLLSAI1_Config>
 8002f40:	4603      	mov	r3, r0
 8002f42:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f44:	7cfb      	ldrb	r3, [r7, #19]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002f4a:	7cfb      	ldrb	r3, [r7, #19]
 8002f4c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d028      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f5a:	4b23      	ldr	r3, [pc, #140]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f60:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	491f      	ldr	r1, [pc, #124]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f78:	d106      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	4a1a      	ldr	r2, [pc, #104]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f84:	60d3      	str	r3, [r2, #12]
 8002f86:	e011      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f90:	d10c      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3304      	adds	r3, #4
 8002f96:	2101      	movs	r1, #1
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 f899 	bl	80030d0 <RCCEx_PLLSAI1_Config>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fa2:	7cfb      	ldrb	r3, [r7, #19]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002fa8:	7cfb      	ldrb	r3, [r7, #19]
 8002faa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d02b      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc6:	4908      	ldr	r1, [pc, #32]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fd6:	d109      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fd8:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4a02      	ldr	r2, [pc, #8]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fe2:	60d3      	str	r3, [r2, #12]
 8002fe4:	e014      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 f867 	bl	80030d0 <RCCEx_PLLSAI1_Config>
 8003002:	4603      	mov	r3, r0
 8003004:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003006:	7cfb      	ldrb	r3, [r7, #19]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800300c:	7cfb      	ldrb	r3, [r7, #19]
 800300e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d02f      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800301c:	4b2b      	ldr	r3, [pc, #172]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003022:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800302a:	4928      	ldr	r1, [pc, #160]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003036:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800303a:	d10d      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3304      	adds	r3, #4
 8003040:	2102      	movs	r1, #2
 8003042:	4618      	mov	r0, r3
 8003044:	f000 f844 	bl	80030d0 <RCCEx_PLLSAI1_Config>
 8003048:	4603      	mov	r3, r0
 800304a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800304c:	7cfb      	ldrb	r3, [r7, #19]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d014      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003052:	7cfb      	ldrb	r3, [r7, #19]
 8003054:	74bb      	strb	r3, [r7, #18]
 8003056:	e011      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800305c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003060:	d10c      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3320      	adds	r3, #32
 8003066:	2102      	movs	r1, #2
 8003068:	4618      	mov	r0, r3
 800306a:	f000 f925 	bl	80032b8 <RCCEx_PLLSAI2_Config>
 800306e:	4603      	mov	r3, r0
 8003070:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003072:	7cfb      	ldrb	r3, [r7, #19]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00a      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003088:	4b10      	ldr	r3, [pc, #64]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800308a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003096:	490d      	ldr	r1, [pc, #52]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00b      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030aa:	4b08      	ldr	r3, [pc, #32]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ba:	4904      	ldr	r1, [pc, #16]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40021000 	.word	0x40021000

080030d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030de:	4b75      	ldr	r3, [pc, #468]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d018      	beq.n	800311c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030ea:	4b72      	ldr	r3, [pc, #456]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f003 0203 	and.w	r2, r3, #3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d10d      	bne.n	8003116 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
       ||
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d009      	beq.n	8003116 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003102:	4b6c      	ldr	r3, [pc, #432]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	091b      	lsrs	r3, r3, #4
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
       ||
 8003112:	429a      	cmp	r2, r3
 8003114:	d047      	beq.n	80031a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	73fb      	strb	r3, [r7, #15]
 800311a:	e044      	b.n	80031a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b03      	cmp	r3, #3
 8003122:	d018      	beq.n	8003156 <RCCEx_PLLSAI1_Config+0x86>
 8003124:	2b03      	cmp	r3, #3
 8003126:	d825      	bhi.n	8003174 <RCCEx_PLLSAI1_Config+0xa4>
 8003128:	2b01      	cmp	r3, #1
 800312a:	d002      	beq.n	8003132 <RCCEx_PLLSAI1_Config+0x62>
 800312c:	2b02      	cmp	r3, #2
 800312e:	d009      	beq.n	8003144 <RCCEx_PLLSAI1_Config+0x74>
 8003130:	e020      	b.n	8003174 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003132:	4b60      	ldr	r3, [pc, #384]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d11d      	bne.n	800317a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003142:	e01a      	b.n	800317a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003144:	4b5b      	ldr	r3, [pc, #364]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314c:	2b00      	cmp	r3, #0
 800314e:	d116      	bne.n	800317e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003154:	e013      	b.n	800317e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003156:	4b57      	ldr	r3, [pc, #348]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10f      	bne.n	8003182 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003162:	4b54      	ldr	r3, [pc, #336]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d109      	bne.n	8003182 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003172:	e006      	b.n	8003182 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	73fb      	strb	r3, [r7, #15]
      break;
 8003178:	e004      	b.n	8003184 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800317a:	bf00      	nop
 800317c:	e002      	b.n	8003184 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800317e:	bf00      	nop
 8003180:	e000      	b.n	8003184 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003182:	bf00      	nop
    }

    if(status == HAL_OK)
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10d      	bne.n	80031a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800318a:	4b4a      	ldr	r3, [pc, #296]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6819      	ldr	r1, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	3b01      	subs	r3, #1
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	430b      	orrs	r3, r1
 80031a0:	4944      	ldr	r1, [pc, #272]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d17d      	bne.n	80032a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031ac:	4b41      	ldr	r3, [pc, #260]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a40      	ldr	r2, [pc, #256]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031b8:	f7fe f964 	bl	8001484 <HAL_GetTick>
 80031bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031be:	e009      	b.n	80031d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031c0:	f7fe f960 	bl	8001484 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d902      	bls.n	80031d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	73fb      	strb	r3, [r7, #15]
        break;
 80031d2:	e005      	b.n	80031e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031d4:	4b37      	ldr	r3, [pc, #220]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1ef      	bne.n	80031c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d160      	bne.n	80032a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d111      	bne.n	8003210 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031ec:	4b31      	ldr	r3, [pc, #196]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80031f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6892      	ldr	r2, [r2, #8]
 80031fc:	0211      	lsls	r1, r2, #8
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	68d2      	ldr	r2, [r2, #12]
 8003202:	0912      	lsrs	r2, r2, #4
 8003204:	0452      	lsls	r2, r2, #17
 8003206:	430a      	orrs	r2, r1
 8003208:	492a      	ldr	r1, [pc, #168]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800320a:	4313      	orrs	r3, r2
 800320c:	610b      	str	r3, [r1, #16]
 800320e:	e027      	b.n	8003260 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d112      	bne.n	800323c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003216:	4b27      	ldr	r3, [pc, #156]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800321e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6892      	ldr	r2, [r2, #8]
 8003226:	0211      	lsls	r1, r2, #8
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6912      	ldr	r2, [r2, #16]
 800322c:	0852      	lsrs	r2, r2, #1
 800322e:	3a01      	subs	r2, #1
 8003230:	0552      	lsls	r2, r2, #21
 8003232:	430a      	orrs	r2, r1
 8003234:	491f      	ldr	r1, [pc, #124]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003236:	4313      	orrs	r3, r2
 8003238:	610b      	str	r3, [r1, #16]
 800323a:	e011      	b.n	8003260 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800323c:	4b1d      	ldr	r3, [pc, #116]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003244:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6892      	ldr	r2, [r2, #8]
 800324c:	0211      	lsls	r1, r2, #8
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6952      	ldr	r2, [r2, #20]
 8003252:	0852      	lsrs	r2, r2, #1
 8003254:	3a01      	subs	r2, #1
 8003256:	0652      	lsls	r2, r2, #25
 8003258:	430a      	orrs	r2, r1
 800325a:	4916      	ldr	r1, [pc, #88]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800325c:	4313      	orrs	r3, r2
 800325e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003260:	4b14      	ldr	r3, [pc, #80]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a13      	ldr	r2, [pc, #76]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003266:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800326a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326c:	f7fe f90a 	bl	8001484 <HAL_GetTick>
 8003270:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003272:	e009      	b.n	8003288 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003274:	f7fe f906 	bl	8001484 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d902      	bls.n	8003288 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	73fb      	strb	r3, [r7, #15]
          break;
 8003286:	e005      	b.n	8003294 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003288:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0ef      	beq.n	8003274 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d106      	bne.n	80032a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800329a:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800329c:	691a      	ldr	r2, [r3, #16]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	4904      	ldr	r1, [pc, #16]	; (80032b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40021000 	.word	0x40021000

080032b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032c6:	4b6a      	ldr	r3, [pc, #424]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d018      	beq.n	8003304 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80032d2:	4b67      	ldr	r3, [pc, #412]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f003 0203 	and.w	r2, r3, #3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d10d      	bne.n	80032fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
       ||
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d009      	beq.n	80032fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80032ea:	4b61      	ldr	r3, [pc, #388]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	091b      	lsrs	r3, r3, #4
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
       ||
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d047      	beq.n	800338e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	73fb      	strb	r3, [r7, #15]
 8003302:	e044      	b.n	800338e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b03      	cmp	r3, #3
 800330a:	d018      	beq.n	800333e <RCCEx_PLLSAI2_Config+0x86>
 800330c:	2b03      	cmp	r3, #3
 800330e:	d825      	bhi.n	800335c <RCCEx_PLLSAI2_Config+0xa4>
 8003310:	2b01      	cmp	r3, #1
 8003312:	d002      	beq.n	800331a <RCCEx_PLLSAI2_Config+0x62>
 8003314:	2b02      	cmp	r3, #2
 8003316:	d009      	beq.n	800332c <RCCEx_PLLSAI2_Config+0x74>
 8003318:	e020      	b.n	800335c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800331a:	4b55      	ldr	r3, [pc, #340]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d11d      	bne.n	8003362 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800332a:	e01a      	b.n	8003362 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800332c:	4b50      	ldr	r3, [pc, #320]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003334:	2b00      	cmp	r3, #0
 8003336:	d116      	bne.n	8003366 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800333c:	e013      	b.n	8003366 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800333e:	4b4c      	ldr	r3, [pc, #304]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10f      	bne.n	800336a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800334a:	4b49      	ldr	r3, [pc, #292]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d109      	bne.n	800336a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800335a:	e006      	b.n	800336a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
      break;
 8003360:	e004      	b.n	800336c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003362:	bf00      	nop
 8003364:	e002      	b.n	800336c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003366:	bf00      	nop
 8003368:	e000      	b.n	800336c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800336a:	bf00      	nop
    }

    if(status == HAL_OK)
 800336c:	7bfb      	ldrb	r3, [r7, #15]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10d      	bne.n	800338e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003372:	4b3f      	ldr	r3, [pc, #252]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6819      	ldr	r1, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	3b01      	subs	r3, #1
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	430b      	orrs	r3, r1
 8003388:	4939      	ldr	r1, [pc, #228]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 800338a:	4313      	orrs	r3, r2
 800338c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800338e:	7bfb      	ldrb	r3, [r7, #15]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d167      	bne.n	8003464 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003394:	4b36      	ldr	r3, [pc, #216]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a35      	ldr	r2, [pc, #212]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 800339a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800339e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033a0:	f7fe f870 	bl	8001484 <HAL_GetTick>
 80033a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033a6:	e009      	b.n	80033bc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033a8:	f7fe f86c 	bl	8001484 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d902      	bls.n	80033bc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	73fb      	strb	r3, [r7, #15]
        break;
 80033ba:	e005      	b.n	80033c8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033bc:	4b2c      	ldr	r3, [pc, #176]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1ef      	bne.n	80033a8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d14a      	bne.n	8003464 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d111      	bne.n	80033f8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033d4:	4b26      	ldr	r3, [pc, #152]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80033dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6892      	ldr	r2, [r2, #8]
 80033e4:	0211      	lsls	r1, r2, #8
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68d2      	ldr	r2, [r2, #12]
 80033ea:	0912      	lsrs	r2, r2, #4
 80033ec:	0452      	lsls	r2, r2, #17
 80033ee:	430a      	orrs	r2, r1
 80033f0:	491f      	ldr	r1, [pc, #124]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	614b      	str	r3, [r1, #20]
 80033f6:	e011      	b.n	800341c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033f8:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003400:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6892      	ldr	r2, [r2, #8]
 8003408:	0211      	lsls	r1, r2, #8
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6912      	ldr	r2, [r2, #16]
 800340e:	0852      	lsrs	r2, r2, #1
 8003410:	3a01      	subs	r2, #1
 8003412:	0652      	lsls	r2, r2, #25
 8003414:	430a      	orrs	r2, r1
 8003416:	4916      	ldr	r1, [pc, #88]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003418:	4313      	orrs	r3, r2
 800341a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800341c:	4b14      	ldr	r3, [pc, #80]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a13      	ldr	r2, [pc, #76]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003426:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003428:	f7fe f82c 	bl	8001484 <HAL_GetTick>
 800342c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800342e:	e009      	b.n	8003444 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003430:	f7fe f828 	bl	8001484 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d902      	bls.n	8003444 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	73fb      	strb	r3, [r7, #15]
          break;
 8003442:	e005      	b.n	8003450 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003444:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0ef      	beq.n	8003430 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003456:	4b06      	ldr	r3, [pc, #24]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003458:	695a      	ldr	r2, [r3, #20]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	4904      	ldr	r1, [pc, #16]	; (8003470 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003460:	4313      	orrs	r3, r2
 8003462:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003464:	7bfb      	ldrb	r3, [r7, #15]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40021000 	.word	0x40021000

08003474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e049      	b.n	800351a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fd fdc2 	bl	8001024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f000 fd2c 	bl	8003f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e049      	b.n	80035c8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d106      	bne.n	800354e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7fd fca7 	bl	8000e9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2202      	movs	r2, #2
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3304      	adds	r3, #4
 800355e:	4619      	mov	r1, r3
 8003560:	4610      	mov	r0, r2
 8003562:	f000 fcd5 	bl	8003f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d109      	bne.n	80035f4 <HAL_TIM_PWM_Start+0x24>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	bf14      	ite	ne
 80035ec:	2301      	movne	r3, #1
 80035ee:	2300      	moveq	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	e03c      	b.n	800366e <HAL_TIM_PWM_Start+0x9e>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d109      	bne.n	800360e <HAL_TIM_PWM_Start+0x3e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b01      	cmp	r3, #1
 8003604:	bf14      	ite	ne
 8003606:	2301      	movne	r3, #1
 8003608:	2300      	moveq	r3, #0
 800360a:	b2db      	uxtb	r3, r3
 800360c:	e02f      	b.n	800366e <HAL_TIM_PWM_Start+0x9e>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b08      	cmp	r3, #8
 8003612:	d109      	bne.n	8003628 <HAL_TIM_PWM_Start+0x58>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b01      	cmp	r3, #1
 800361e:	bf14      	ite	ne
 8003620:	2301      	movne	r3, #1
 8003622:	2300      	moveq	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	e022      	b.n	800366e <HAL_TIM_PWM_Start+0x9e>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	2b0c      	cmp	r3, #12
 800362c:	d109      	bne.n	8003642 <HAL_TIM_PWM_Start+0x72>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b01      	cmp	r3, #1
 8003638:	bf14      	ite	ne
 800363a:	2301      	movne	r3, #1
 800363c:	2300      	moveq	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	e015      	b.n	800366e <HAL_TIM_PWM_Start+0x9e>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b10      	cmp	r3, #16
 8003646:	d109      	bne.n	800365c <HAL_TIM_PWM_Start+0x8c>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b01      	cmp	r3, #1
 8003652:	bf14      	ite	ne
 8003654:	2301      	movne	r3, #1
 8003656:	2300      	moveq	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	e008      	b.n	800366e <HAL_TIM_PWM_Start+0x9e>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b01      	cmp	r3, #1
 8003666:	bf14      	ite	ne
 8003668:	2301      	movne	r3, #1
 800366a:	2300      	moveq	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e09c      	b.n	80037b0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d104      	bne.n	8003686 <HAL_TIM_PWM_Start+0xb6>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003684:	e023      	b.n	80036ce <HAL_TIM_PWM_Start+0xfe>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b04      	cmp	r3, #4
 800368a:	d104      	bne.n	8003696 <HAL_TIM_PWM_Start+0xc6>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003694:	e01b      	b.n	80036ce <HAL_TIM_PWM_Start+0xfe>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b08      	cmp	r3, #8
 800369a:	d104      	bne.n	80036a6 <HAL_TIM_PWM_Start+0xd6>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036a4:	e013      	b.n	80036ce <HAL_TIM_PWM_Start+0xfe>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b0c      	cmp	r3, #12
 80036aa:	d104      	bne.n	80036b6 <HAL_TIM_PWM_Start+0xe6>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036b4:	e00b      	b.n	80036ce <HAL_TIM_PWM_Start+0xfe>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b10      	cmp	r3, #16
 80036ba:	d104      	bne.n	80036c6 <HAL_TIM_PWM_Start+0xf6>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036c4:	e003      	b.n	80036ce <HAL_TIM_PWM_Start+0xfe>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2202      	movs	r2, #2
 80036ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2201      	movs	r2, #1
 80036d4:	6839      	ldr	r1, [r7, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 ff8a 	bl	80045f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a35      	ldr	r2, [pc, #212]	; (80037b8 <HAL_TIM_PWM_Start+0x1e8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d013      	beq.n	800370e <HAL_TIM_PWM_Start+0x13e>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a34      	ldr	r2, [pc, #208]	; (80037bc <HAL_TIM_PWM_Start+0x1ec>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d00e      	beq.n	800370e <HAL_TIM_PWM_Start+0x13e>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a32      	ldr	r2, [pc, #200]	; (80037c0 <HAL_TIM_PWM_Start+0x1f0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d009      	beq.n	800370e <HAL_TIM_PWM_Start+0x13e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a31      	ldr	r2, [pc, #196]	; (80037c4 <HAL_TIM_PWM_Start+0x1f4>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d004      	beq.n	800370e <HAL_TIM_PWM_Start+0x13e>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a2f      	ldr	r2, [pc, #188]	; (80037c8 <HAL_TIM_PWM_Start+0x1f8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d101      	bne.n	8003712 <HAL_TIM_PWM_Start+0x142>
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <HAL_TIM_PWM_Start+0x144>
 8003712:	2300      	movs	r3, #0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d007      	beq.n	8003728 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003726:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a22      	ldr	r2, [pc, #136]	; (80037b8 <HAL_TIM_PWM_Start+0x1e8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d01d      	beq.n	800376e <HAL_TIM_PWM_Start+0x19e>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800373a:	d018      	beq.n	800376e <HAL_TIM_PWM_Start+0x19e>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a22      	ldr	r2, [pc, #136]	; (80037cc <HAL_TIM_PWM_Start+0x1fc>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d013      	beq.n	800376e <HAL_TIM_PWM_Start+0x19e>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a21      	ldr	r2, [pc, #132]	; (80037d0 <HAL_TIM_PWM_Start+0x200>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00e      	beq.n	800376e <HAL_TIM_PWM_Start+0x19e>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a1f      	ldr	r2, [pc, #124]	; (80037d4 <HAL_TIM_PWM_Start+0x204>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d009      	beq.n	800376e <HAL_TIM_PWM_Start+0x19e>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a17      	ldr	r2, [pc, #92]	; (80037bc <HAL_TIM_PWM_Start+0x1ec>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d004      	beq.n	800376e <HAL_TIM_PWM_Start+0x19e>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a15      	ldr	r2, [pc, #84]	; (80037c0 <HAL_TIM_PWM_Start+0x1f0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d115      	bne.n	800379a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	4b18      	ldr	r3, [pc, #96]	; (80037d8 <HAL_TIM_PWM_Start+0x208>)
 8003776:	4013      	ands	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b06      	cmp	r3, #6
 800377e:	d015      	beq.n	80037ac <HAL_TIM_PWM_Start+0x1dc>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003786:	d011      	beq.n	80037ac <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003798:	e008      	b.n	80037ac <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0201 	orr.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	e000      	b.n	80037ae <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40012c00 	.word	0x40012c00
 80037bc:	40013400 	.word	0x40013400
 80037c0:	40014000 	.word	0x40014000
 80037c4:	40014400 	.word	0x40014400
 80037c8:	40014800 	.word	0x40014800
 80037cc:	40000400 	.word	0x40000400
 80037d0:	40000800 	.word	0x40000800
 80037d4:	40000c00 	.word	0x40000c00
 80037d8:	00010007 	.word	0x00010007

080037dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e097      	b.n	8003920 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d106      	bne.n	800380a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7fd fb8b 	bl	8000f20 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2202      	movs	r2, #2
 800380e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003820:	f023 0307 	bic.w	r3, r3, #7
 8003824:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3304      	adds	r3, #4
 800382e:	4619      	mov	r1, r3
 8003830:	4610      	mov	r0, r2
 8003832:	f000 fb6d 	bl	8003f10 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800385e:	f023 0303 	bic.w	r3, r3, #3
 8003862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	4313      	orrs	r3, r2
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800387c:	f023 030c 	bic.w	r3, r3, #12
 8003880:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003888:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800388c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	4313      	orrs	r3, r2
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	011a      	lsls	r2, r3, #4
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	031b      	lsls	r3, r3, #12
 80038ac:	4313      	orrs	r3, r2
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80038ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80038c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	4313      	orrs	r3, r2
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003938:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003940:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003948:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003950:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d110      	bne.n	800397a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d102      	bne.n	8003964 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800395e:	7b7b      	ldrb	r3, [r7, #13]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d001      	beq.n	8003968 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e069      	b.n	8003a3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003978:	e031      	b.n	80039de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b04      	cmp	r3, #4
 800397e:	d110      	bne.n	80039a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003980:	7bbb      	ldrb	r3, [r7, #14]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d102      	bne.n	800398c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003986:	7b3b      	ldrb	r3, [r7, #12]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d001      	beq.n	8003990 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e055      	b.n	8003a3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039a0:	e01d      	b.n	80039de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d108      	bne.n	80039ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80039a8:	7bbb      	ldrb	r3, [r7, #14]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d105      	bne.n	80039ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039ae:	7b7b      	ldrb	r3, [r7, #13]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d102      	bne.n	80039ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80039b4:	7b3b      	ldrb	r3, [r7, #12]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d001      	beq.n	80039be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e03e      	b.n	8003a3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2202      	movs	r2, #2
 80039c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2202      	movs	r2, #2
 80039ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2202      	movs	r2, #2
 80039d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2202      	movs	r2, #2
 80039da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_TIM_Encoder_Start+0xc4>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d008      	beq.n	80039fc <HAL_TIM_Encoder_Start+0xd4>
 80039ea:	e00f      	b.n	8003a0c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2201      	movs	r2, #1
 80039f2:	2100      	movs	r1, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fdfb 	bl	80045f0 <TIM_CCxChannelCmd>
      break;
 80039fa:	e016      	b.n	8003a2a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2201      	movs	r2, #1
 8003a02:	2104      	movs	r1, #4
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fdf3 	bl	80045f0 <TIM_CCxChannelCmd>
      break;
 8003a0a:	e00e      	b.n	8003a2a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2201      	movs	r2, #1
 8003a12:	2100      	movs	r1, #0
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 fdeb 	bl	80045f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	2104      	movs	r1, #4
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 fde4 	bl	80045f0 <TIM_CCxChannelCmd>
      break;
 8003a28:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0201 	orr.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d122      	bne.n	8003aa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d11b      	bne.n	8003aa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f06f 0202 	mvn.w	r2, #2
 8003a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fa24 	bl	8003ed4 <HAL_TIM_IC_CaptureCallback>
 8003a8c:	e005      	b.n	8003a9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fa16 	bl	8003ec0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 fa27 	bl	8003ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d122      	bne.n	8003af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d11b      	bne.n	8003af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f06f 0204 	mvn.w	r2, #4
 8003ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f9fa 	bl	8003ed4 <HAL_TIM_IC_CaptureCallback>
 8003ae0:	e005      	b.n	8003aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f9ec 	bl	8003ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f9fd 	bl	8003ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d122      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d11b      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f06f 0208 	mvn.w	r2, #8
 8003b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2204      	movs	r2, #4
 8003b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f9d0 	bl	8003ed4 <HAL_TIM_IC_CaptureCallback>
 8003b34:	e005      	b.n	8003b42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f9c2 	bl	8003ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f9d3 	bl	8003ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 0310 	and.w	r3, r3, #16
 8003b52:	2b10      	cmp	r3, #16
 8003b54:	d122      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0310 	and.w	r3, r3, #16
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d11b      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f06f 0210 	mvn.w	r2, #16
 8003b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2208      	movs	r2, #8
 8003b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f9a6 	bl	8003ed4 <HAL_TIM_IC_CaptureCallback>
 8003b88:	e005      	b.n	8003b96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f998 	bl	8003ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f9a9 	bl	8003ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d10e      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d107      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f06f 0201 	mvn.w	r2, #1
 8003bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f972 	bl	8003eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd2:	2b80      	cmp	r3, #128	; 0x80
 8003bd4:	d10e      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be0:	2b80      	cmp	r3, #128	; 0x80
 8003be2:	d107      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fe34 	bl	800485c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c02:	d10e      	bne.n	8003c22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0e:	2b80      	cmp	r3, #128	; 0x80
 8003c10:	d107      	bne.n	8003c22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 fe27 	bl	8004870 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2c:	2b40      	cmp	r3, #64	; 0x40
 8003c2e:	d10e      	bne.n	8003c4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3a:	2b40      	cmp	r3, #64	; 0x40
 8003c3c:	d107      	bne.n	8003c4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f957 	bl	8003efc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	2b20      	cmp	r3, #32
 8003c5a:	d10e      	bne.n	8003c7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d107      	bne.n	8003c7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f06f 0220 	mvn.w	r2, #32
 8003c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 fde7 	bl	8004848 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c7a:	bf00      	nop
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e0ff      	b.n	8003ea2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b14      	cmp	r3, #20
 8003cae:	f200 80f0 	bhi.w	8003e92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003cb2:	a201      	add	r2, pc, #4	; (adr r2, 8003cb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb8:	08003d0d 	.word	0x08003d0d
 8003cbc:	08003e93 	.word	0x08003e93
 8003cc0:	08003e93 	.word	0x08003e93
 8003cc4:	08003e93 	.word	0x08003e93
 8003cc8:	08003d4d 	.word	0x08003d4d
 8003ccc:	08003e93 	.word	0x08003e93
 8003cd0:	08003e93 	.word	0x08003e93
 8003cd4:	08003e93 	.word	0x08003e93
 8003cd8:	08003d8f 	.word	0x08003d8f
 8003cdc:	08003e93 	.word	0x08003e93
 8003ce0:	08003e93 	.word	0x08003e93
 8003ce4:	08003e93 	.word	0x08003e93
 8003ce8:	08003dcf 	.word	0x08003dcf
 8003cec:	08003e93 	.word	0x08003e93
 8003cf0:	08003e93 	.word	0x08003e93
 8003cf4:	08003e93 	.word	0x08003e93
 8003cf8:	08003e11 	.word	0x08003e11
 8003cfc:	08003e93 	.word	0x08003e93
 8003d00:	08003e93 	.word	0x08003e93
 8003d04:	08003e93 	.word	0x08003e93
 8003d08:	08003e51 	.word	0x08003e51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68b9      	ldr	r1, [r7, #8]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 f996 	bl	8004044 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699a      	ldr	r2, [r3, #24]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0208 	orr.w	r2, r2, #8
 8003d26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699a      	ldr	r2, [r3, #24]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0204 	bic.w	r2, r2, #4
 8003d36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6999      	ldr	r1, [r3, #24]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	691a      	ldr	r2, [r3, #16]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	619a      	str	r2, [r3, #24]
      break;
 8003d4a:	e0a5      	b.n	8003e98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fa06 	bl	8004164 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6999      	ldr	r1, [r3, #24]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	021a      	lsls	r2, r3, #8
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	619a      	str	r2, [r3, #24]
      break;
 8003d8c:	e084      	b.n	8003e98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68b9      	ldr	r1, [r7, #8]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fa6f 	bl	8004278 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69da      	ldr	r2, [r3, #28]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 0208 	orr.w	r2, r2, #8
 8003da8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69da      	ldr	r2, [r3, #28]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0204 	bic.w	r2, r2, #4
 8003db8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69d9      	ldr	r1, [r3, #28]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	691a      	ldr	r2, [r3, #16]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	61da      	str	r2, [r3, #28]
      break;
 8003dcc:	e064      	b.n	8003e98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68b9      	ldr	r1, [r7, #8]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fad7 	bl	8004388 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69da      	ldr	r2, [r3, #28]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69da      	ldr	r2, [r3, #28]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69d9      	ldr	r1, [r3, #28]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	021a      	lsls	r2, r3, #8
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	61da      	str	r2, [r3, #28]
      break;
 8003e0e:	e043      	b.n	8003e98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68b9      	ldr	r1, [r7, #8]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 fb20 	bl	800445c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0208 	orr.w	r2, r2, #8
 8003e2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0204 	bic.w	r2, r2, #4
 8003e3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	691a      	ldr	r2, [r3, #16]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e4e:	e023      	b.n	8003e98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68b9      	ldr	r1, [r7, #8]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fb64 	bl	8004524 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	021a      	lsls	r2, r3, #8
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e90:	e002      	b.n	8003e98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	75fb      	strb	r3, [r7, #23]
      break;
 8003e96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop

08003eac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a40      	ldr	r2, [pc, #256]	; (8004024 <TIM_Base_SetConfig+0x114>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d013      	beq.n	8003f50 <TIM_Base_SetConfig+0x40>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2e:	d00f      	beq.n	8003f50 <TIM_Base_SetConfig+0x40>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a3d      	ldr	r2, [pc, #244]	; (8004028 <TIM_Base_SetConfig+0x118>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00b      	beq.n	8003f50 <TIM_Base_SetConfig+0x40>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a3c      	ldr	r2, [pc, #240]	; (800402c <TIM_Base_SetConfig+0x11c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d007      	beq.n	8003f50 <TIM_Base_SetConfig+0x40>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a3b      	ldr	r2, [pc, #236]	; (8004030 <TIM_Base_SetConfig+0x120>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d003      	beq.n	8003f50 <TIM_Base_SetConfig+0x40>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a3a      	ldr	r2, [pc, #232]	; (8004034 <TIM_Base_SetConfig+0x124>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d108      	bne.n	8003f62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a2f      	ldr	r2, [pc, #188]	; (8004024 <TIM_Base_SetConfig+0x114>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d01f      	beq.n	8003faa <TIM_Base_SetConfig+0x9a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f70:	d01b      	beq.n	8003faa <TIM_Base_SetConfig+0x9a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a2c      	ldr	r2, [pc, #176]	; (8004028 <TIM_Base_SetConfig+0x118>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d017      	beq.n	8003faa <TIM_Base_SetConfig+0x9a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2b      	ldr	r2, [pc, #172]	; (800402c <TIM_Base_SetConfig+0x11c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <TIM_Base_SetConfig+0x9a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a2a      	ldr	r2, [pc, #168]	; (8004030 <TIM_Base_SetConfig+0x120>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00f      	beq.n	8003faa <TIM_Base_SetConfig+0x9a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a29      	ldr	r2, [pc, #164]	; (8004034 <TIM_Base_SetConfig+0x124>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00b      	beq.n	8003faa <TIM_Base_SetConfig+0x9a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a28      	ldr	r2, [pc, #160]	; (8004038 <TIM_Base_SetConfig+0x128>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d007      	beq.n	8003faa <TIM_Base_SetConfig+0x9a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a27      	ldr	r2, [pc, #156]	; (800403c <TIM_Base_SetConfig+0x12c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d003      	beq.n	8003faa <TIM_Base_SetConfig+0x9a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a26      	ldr	r2, [pc, #152]	; (8004040 <TIM_Base_SetConfig+0x130>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d108      	bne.n	8003fbc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a10      	ldr	r2, [pc, #64]	; (8004024 <TIM_Base_SetConfig+0x114>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00f      	beq.n	8004008 <TIM_Base_SetConfig+0xf8>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a12      	ldr	r2, [pc, #72]	; (8004034 <TIM_Base_SetConfig+0x124>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00b      	beq.n	8004008 <TIM_Base_SetConfig+0xf8>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a11      	ldr	r2, [pc, #68]	; (8004038 <TIM_Base_SetConfig+0x128>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d007      	beq.n	8004008 <TIM_Base_SetConfig+0xf8>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a10      	ldr	r2, [pc, #64]	; (800403c <TIM_Base_SetConfig+0x12c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d003      	beq.n	8004008 <TIM_Base_SetConfig+0xf8>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a0f      	ldr	r2, [pc, #60]	; (8004040 <TIM_Base_SetConfig+0x130>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d103      	bne.n	8004010 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	615a      	str	r2, [r3, #20]
}
 8004016:	bf00      	nop
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40012c00 	.word	0x40012c00
 8004028:	40000400 	.word	0x40000400
 800402c:	40000800 	.word	0x40000800
 8004030:	40000c00 	.word	0x40000c00
 8004034:	40013400 	.word	0x40013400
 8004038:	40014000 	.word	0x40014000
 800403c:	40014400 	.word	0x40014400
 8004040:	40014800 	.word	0x40014800

08004044 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	f023 0201 	bic.w	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 0303 	bic.w	r3, r3, #3
 800407e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f023 0302 	bic.w	r3, r3, #2
 8004090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a2c      	ldr	r2, [pc, #176]	; (8004150 <TIM_OC1_SetConfig+0x10c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00f      	beq.n	80040c4 <TIM_OC1_SetConfig+0x80>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a2b      	ldr	r2, [pc, #172]	; (8004154 <TIM_OC1_SetConfig+0x110>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00b      	beq.n	80040c4 <TIM_OC1_SetConfig+0x80>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a2a      	ldr	r2, [pc, #168]	; (8004158 <TIM_OC1_SetConfig+0x114>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d007      	beq.n	80040c4 <TIM_OC1_SetConfig+0x80>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a29      	ldr	r2, [pc, #164]	; (800415c <TIM_OC1_SetConfig+0x118>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d003      	beq.n	80040c4 <TIM_OC1_SetConfig+0x80>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a28      	ldr	r2, [pc, #160]	; (8004160 <TIM_OC1_SetConfig+0x11c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d10c      	bne.n	80040de <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f023 0308 	bic.w	r3, r3, #8
 80040ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f023 0304 	bic.w	r3, r3, #4
 80040dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a1b      	ldr	r2, [pc, #108]	; (8004150 <TIM_OC1_SetConfig+0x10c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d00f      	beq.n	8004106 <TIM_OC1_SetConfig+0xc2>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a1a      	ldr	r2, [pc, #104]	; (8004154 <TIM_OC1_SetConfig+0x110>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00b      	beq.n	8004106 <TIM_OC1_SetConfig+0xc2>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a19      	ldr	r2, [pc, #100]	; (8004158 <TIM_OC1_SetConfig+0x114>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d007      	beq.n	8004106 <TIM_OC1_SetConfig+0xc2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a18      	ldr	r2, [pc, #96]	; (800415c <TIM_OC1_SetConfig+0x118>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d003      	beq.n	8004106 <TIM_OC1_SetConfig+0xc2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a17      	ldr	r2, [pc, #92]	; (8004160 <TIM_OC1_SetConfig+0x11c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d111      	bne.n	800412a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800410c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	621a      	str	r2, [r3, #32]
}
 8004144:	bf00      	nop
 8004146:	371c      	adds	r7, #28
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	40012c00 	.word	0x40012c00
 8004154:	40013400 	.word	0x40013400
 8004158:	40014000 	.word	0x40014000
 800415c:	40014400 	.word	0x40014400
 8004160:	40014800 	.word	0x40014800

08004164 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f023 0210 	bic.w	r2, r3, #16
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800419e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	021b      	lsls	r3, r3, #8
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f023 0320 	bic.w	r3, r3, #32
 80041b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4313      	orrs	r3, r2
 80041be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a28      	ldr	r2, [pc, #160]	; (8004264 <TIM_OC2_SetConfig+0x100>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d003      	beq.n	80041d0 <TIM_OC2_SetConfig+0x6c>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a27      	ldr	r2, [pc, #156]	; (8004268 <TIM_OC2_SetConfig+0x104>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d10d      	bne.n	80041ec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a1d      	ldr	r2, [pc, #116]	; (8004264 <TIM_OC2_SetConfig+0x100>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00f      	beq.n	8004214 <TIM_OC2_SetConfig+0xb0>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a1c      	ldr	r2, [pc, #112]	; (8004268 <TIM_OC2_SetConfig+0x104>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00b      	beq.n	8004214 <TIM_OC2_SetConfig+0xb0>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a1b      	ldr	r2, [pc, #108]	; (800426c <TIM_OC2_SetConfig+0x108>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d007      	beq.n	8004214 <TIM_OC2_SetConfig+0xb0>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a1a      	ldr	r2, [pc, #104]	; (8004270 <TIM_OC2_SetConfig+0x10c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d003      	beq.n	8004214 <TIM_OC2_SetConfig+0xb0>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a19      	ldr	r2, [pc, #100]	; (8004274 <TIM_OC2_SetConfig+0x110>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d113      	bne.n	800423c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800421a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004222:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	621a      	str	r2, [r3, #32]
}
 8004256:	bf00      	nop
 8004258:	371c      	adds	r7, #28
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40012c00 	.word	0x40012c00
 8004268:	40013400 	.word	0x40013400
 800426c:	40014000 	.word	0x40014000
 8004270:	40014400 	.word	0x40014400
 8004274:	40014800 	.word	0x40014800

08004278 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0303 	bic.w	r3, r3, #3
 80042b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a27      	ldr	r2, [pc, #156]	; (8004374 <TIM_OC3_SetConfig+0xfc>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d003      	beq.n	80042e2 <TIM_OC3_SetConfig+0x6a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a26      	ldr	r2, [pc, #152]	; (8004378 <TIM_OC3_SetConfig+0x100>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d10d      	bne.n	80042fe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a1c      	ldr	r2, [pc, #112]	; (8004374 <TIM_OC3_SetConfig+0xfc>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d00f      	beq.n	8004326 <TIM_OC3_SetConfig+0xae>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a1b      	ldr	r2, [pc, #108]	; (8004378 <TIM_OC3_SetConfig+0x100>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00b      	beq.n	8004326 <TIM_OC3_SetConfig+0xae>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a1a      	ldr	r2, [pc, #104]	; (800437c <TIM_OC3_SetConfig+0x104>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d007      	beq.n	8004326 <TIM_OC3_SetConfig+0xae>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a19      	ldr	r2, [pc, #100]	; (8004380 <TIM_OC3_SetConfig+0x108>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d003      	beq.n	8004326 <TIM_OC3_SetConfig+0xae>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a18      	ldr	r2, [pc, #96]	; (8004384 <TIM_OC3_SetConfig+0x10c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d113      	bne.n	800434e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800432c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	4313      	orrs	r3, r2
 800434c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	621a      	str	r2, [r3, #32]
}
 8004368:	bf00      	nop
 800436a:	371c      	adds	r7, #28
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	40012c00 	.word	0x40012c00
 8004378:	40013400 	.word	0x40013400
 800437c:	40014000 	.word	0x40014000
 8004380:	40014400 	.word	0x40014400
 8004384:	40014800 	.word	0x40014800

08004388 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	021b      	lsls	r3, r3, #8
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	031b      	lsls	r3, r3, #12
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a18      	ldr	r2, [pc, #96]	; (8004448 <TIM_OC4_SetConfig+0xc0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d00f      	beq.n	800440c <TIM_OC4_SetConfig+0x84>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a17      	ldr	r2, [pc, #92]	; (800444c <TIM_OC4_SetConfig+0xc4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d00b      	beq.n	800440c <TIM_OC4_SetConfig+0x84>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a16      	ldr	r2, [pc, #88]	; (8004450 <TIM_OC4_SetConfig+0xc8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d007      	beq.n	800440c <TIM_OC4_SetConfig+0x84>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a15      	ldr	r2, [pc, #84]	; (8004454 <TIM_OC4_SetConfig+0xcc>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d003      	beq.n	800440c <TIM_OC4_SetConfig+0x84>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a14      	ldr	r2, [pc, #80]	; (8004458 <TIM_OC4_SetConfig+0xd0>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d109      	bne.n	8004420 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004412:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	019b      	lsls	r3, r3, #6
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	621a      	str	r2, [r3, #32]
}
 800443a:	bf00      	nop
 800443c:	371c      	adds	r7, #28
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40012c00 	.word	0x40012c00
 800444c:	40013400 	.word	0x40013400
 8004450:	40014000 	.word	0x40014000
 8004454:	40014400 	.word	0x40014400
 8004458:	40014800 	.word	0x40014800

0800445c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800448a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80044a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	041b      	lsls	r3, r3, #16
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a17      	ldr	r2, [pc, #92]	; (8004510 <TIM_OC5_SetConfig+0xb4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00f      	beq.n	80044d6 <TIM_OC5_SetConfig+0x7a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a16      	ldr	r2, [pc, #88]	; (8004514 <TIM_OC5_SetConfig+0xb8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00b      	beq.n	80044d6 <TIM_OC5_SetConfig+0x7a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a15      	ldr	r2, [pc, #84]	; (8004518 <TIM_OC5_SetConfig+0xbc>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d007      	beq.n	80044d6 <TIM_OC5_SetConfig+0x7a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a14      	ldr	r2, [pc, #80]	; (800451c <TIM_OC5_SetConfig+0xc0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d003      	beq.n	80044d6 <TIM_OC5_SetConfig+0x7a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a13      	ldr	r2, [pc, #76]	; (8004520 <TIM_OC5_SetConfig+0xc4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d109      	bne.n	80044ea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	621a      	str	r2, [r3, #32]
}
 8004504:	bf00      	nop
 8004506:	371c      	adds	r7, #28
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	40012c00 	.word	0x40012c00
 8004514:	40013400 	.word	0x40013400
 8004518:	40014000 	.word	0x40014000
 800451c:	40014400 	.word	0x40014400
 8004520:	40014800 	.word	0x40014800

08004524 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	021b      	lsls	r3, r3, #8
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	4313      	orrs	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800456a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	051b      	lsls	r3, r3, #20
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4313      	orrs	r3, r2
 8004576:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a18      	ldr	r2, [pc, #96]	; (80045dc <TIM_OC6_SetConfig+0xb8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00f      	beq.n	80045a0 <TIM_OC6_SetConfig+0x7c>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a17      	ldr	r2, [pc, #92]	; (80045e0 <TIM_OC6_SetConfig+0xbc>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d00b      	beq.n	80045a0 <TIM_OC6_SetConfig+0x7c>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a16      	ldr	r2, [pc, #88]	; (80045e4 <TIM_OC6_SetConfig+0xc0>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d007      	beq.n	80045a0 <TIM_OC6_SetConfig+0x7c>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a15      	ldr	r2, [pc, #84]	; (80045e8 <TIM_OC6_SetConfig+0xc4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d003      	beq.n	80045a0 <TIM_OC6_SetConfig+0x7c>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a14      	ldr	r2, [pc, #80]	; (80045ec <TIM_OC6_SetConfig+0xc8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d109      	bne.n	80045b4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	029b      	lsls	r3, r3, #10
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	621a      	str	r2, [r3, #32]
}
 80045ce:	bf00      	nop
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	40012c00 	.word	0x40012c00
 80045e0:	40013400 	.word	0x40013400
 80045e4:	40014000 	.word	0x40014000
 80045e8:	40014400 	.word	0x40014400
 80045ec:	40014800 	.word	0x40014800

080045f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f003 031f 	and.w	r3, r3, #31
 8004602:	2201      	movs	r2, #1
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a1a      	ldr	r2, [r3, #32]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	43db      	mvns	r3, r3
 8004612:	401a      	ands	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a1a      	ldr	r2, [r3, #32]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f003 031f 	and.w	r3, r3, #31
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	fa01 f303 	lsl.w	r3, r1, r3
 8004628:	431a      	orrs	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	621a      	str	r2, [r3, #32]
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
	...

0800463c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004650:	2302      	movs	r3, #2
 8004652:	e068      	b.n	8004726 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a2e      	ldr	r2, [pc, #184]	; (8004734 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d004      	beq.n	8004688 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a2d      	ldr	r2, [pc, #180]	; (8004738 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d108      	bne.n	800469a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800468e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a1e      	ldr	r2, [pc, #120]	; (8004734 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d01d      	beq.n	80046fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c6:	d018      	beq.n	80046fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a1b      	ldr	r2, [pc, #108]	; (800473c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d013      	beq.n	80046fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a1a      	ldr	r2, [pc, #104]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d00e      	beq.n	80046fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a18      	ldr	r2, [pc, #96]	; (8004744 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d009      	beq.n	80046fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a13      	ldr	r2, [pc, #76]	; (8004738 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d004      	beq.n	80046fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a14      	ldr	r2, [pc, #80]	; (8004748 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d10c      	bne.n	8004714 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004700:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	4313      	orrs	r3, r2
 800470a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40012c00 	.word	0x40012c00
 8004738:	40013400 	.word	0x40013400
 800473c:	40000400 	.word	0x40000400
 8004740:	40000800 	.word	0x40000800
 8004744:	40000c00 	.word	0x40000c00
 8004748:	40014000 	.word	0x40014000

0800474c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004764:	2302      	movs	r3, #2
 8004766:	e065      	b.n	8004834 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	4313      	orrs	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	4313      	orrs	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	041b      	lsls	r3, r3, #16
 80047de:	4313      	orrs	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a16      	ldr	r2, [pc, #88]	; (8004840 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d004      	beq.n	80047f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a14      	ldr	r2, [pc, #80]	; (8004844 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d115      	bne.n	8004822 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	051b      	lsls	r3, r3, #20
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	40012c00 	.word	0x40012c00
 8004844:	40013400 	.word	0x40013400

08004848 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e040      	b.n	8004918 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7fc fc70 	bl	800118c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2224      	movs	r2, #36	; 0x24
 80048b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0201 	bic.w	r2, r2, #1
 80048c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fb2e 	bl	8004f24 <UART_SetConfig>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d101      	bne.n	80048d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e022      	b.n	8004918 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fdda 	bl	8005494 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689a      	ldr	r2, [r3, #8]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0201 	orr.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fe61 	bl	80055d8 <UART_CheckIdleState>
 8004916:	4603      	mov	r3, r0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b0ba      	sub	sp, #232	; 0xe8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004946:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800494a:	f640 030f 	movw	r3, #2063	; 0x80f
 800494e:	4013      	ands	r3, r2
 8004950:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004958:	2b00      	cmp	r3, #0
 800495a:	d115      	bne.n	8004988 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800495c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004960:	f003 0320 	and.w	r3, r3, #32
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00f      	beq.n	8004988 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b00      	cmp	r3, #0
 8004972:	d009      	beq.n	8004988 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 82a6 	beq.w	8004eca <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	4798      	blx	r3
      }
      return;
 8004986:	e2a0      	b.n	8004eca <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004988:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 8117 	beq.w	8004bc0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d106      	bne.n	80049ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800499e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80049a2:	4b85      	ldr	r3, [pc, #532]	; (8004bb8 <HAL_UART_IRQHandler+0x298>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 810a 	beq.w	8004bc0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d011      	beq.n	80049dc <HAL_UART_IRQHandler+0xbc>
 80049b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00b      	beq.n	80049dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2201      	movs	r2, #1
 80049ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049d2:	f043 0201 	orr.w	r2, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d011      	beq.n	8004a0c <HAL_UART_IRQHandler+0xec>
 80049e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00b      	beq.n	8004a0c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2202      	movs	r2, #2
 80049fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a02:	f043 0204 	orr.w	r2, r3, #4
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d011      	beq.n	8004a3c <HAL_UART_IRQHandler+0x11c>
 8004a18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00b      	beq.n	8004a3c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2204      	movs	r2, #4
 8004a2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a32:	f043 0202 	orr.w	r2, r3, #2
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d017      	beq.n	8004a78 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a4c:	f003 0320 	and.w	r3, r3, #32
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d105      	bne.n	8004a60 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004a54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a58:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00b      	beq.n	8004a78 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2208      	movs	r2, #8
 8004a66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a6e:	f043 0208 	orr.w	r2, r3, #8
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d012      	beq.n	8004aaa <HAL_UART_IRQHandler+0x18a>
 8004a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00c      	beq.n	8004aaa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aa0:	f043 0220 	orr.w	r2, r3, #32
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 820c 	beq.w	8004ece <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aba:	f003 0320 	and.w	r3, r3, #32
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00d      	beq.n	8004ade <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d007      	beq.n	8004ade <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ae4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af2:	2b40      	cmp	r3, #64	; 0x40
 8004af4:	d005      	beq.n	8004b02 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004afa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d04f      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fe75 	bl	80057f2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b12:	2b40      	cmp	r3, #64	; 0x40
 8004b14:	d141      	bne.n	8004b9a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3308      	adds	r3, #8
 8004b1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b24:	e853 3f00 	ldrex	r3, [r3]
 8004b28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3308      	adds	r3, #8
 8004b3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1d9      	bne.n	8004b16 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d013      	beq.n	8004b92 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6e:	4a13      	ldr	r2, [pc, #76]	; (8004bbc <HAL_UART_IRQHandler+0x29c>)
 8004b70:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fc febc 	bl	80018f4 <HAL_DMA_Abort_IT>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d017      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b90:	e00f      	b.n	8004bb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f9b0 	bl	8004ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b98:	e00b      	b.n	8004bb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f9ac 	bl	8004ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba0:	e007      	b.n	8004bb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f9a8 	bl	8004ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004bb0:	e18d      	b.n	8004ece <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb2:	bf00      	nop
    return;
 8004bb4:	e18b      	b.n	8004ece <HAL_UART_IRQHandler+0x5ae>
 8004bb6:	bf00      	nop
 8004bb8:	04000120 	.word	0x04000120
 8004bbc:	080058b9 	.word	0x080058b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	f040 8146 	bne.w	8004e56 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bce:	f003 0310 	and.w	r3, r3, #16
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 813f 	beq.w	8004e56 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 8138 	beq.w	8004e56 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2210      	movs	r2, #16
 8004bec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf8:	2b40      	cmp	r3, #64	; 0x40
 8004bfa:	f040 80b4 	bne.w	8004d66 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c0a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 815f 	beq.w	8004ed2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	f080 8157 	bcs.w	8004ed2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0320 	and.w	r3, r3, #32
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f040 8085 	bne.w	8004d4a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c4c:	e853 3f00 	ldrex	r3, [r3]
 8004c50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	461a      	mov	r2, r3
 8004c66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c6e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c7a:	e841 2300 	strex	r3, r2, [r1]
 8004c7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1da      	bne.n	8004c40 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3308      	adds	r3, #8
 8004c90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c94:	e853 3f00 	ldrex	r3, [r3]
 8004c98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c9c:	f023 0301 	bic.w	r3, r3, #1
 8004ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3308      	adds	r3, #8
 8004caa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004cae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004cb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004cb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004cba:	e841 2300 	strex	r3, r2, [r1]
 8004cbe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004cc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1e1      	bne.n	8004c8a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3308      	adds	r3, #8
 8004ccc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cd0:	e853 3f00 	ldrex	r3, [r3]
 8004cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3308      	adds	r3, #8
 8004ce6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004cea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004cec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004cf0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cf2:	e841 2300 	strex	r3, r2, [r1]
 8004cf6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1e3      	bne.n	8004cc6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2220      	movs	r2, #32
 8004d02:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d1a:	f023 0310 	bic.w	r3, r3, #16
 8004d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d2e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e4      	bne.n	8004d0a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fc fd97 	bl	8001878 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f8d4 	bl	8004f0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d64:	e0b5      	b.n	8004ed2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 80a7 	beq.w	8004ed6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004d88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 80a2 	beq.w	8004ed6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9a:	e853 3f00 	ldrex	r3, [r3]
 8004d9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004da6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004db4:	647b      	str	r3, [r7, #68]	; 0x44
 8004db6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dbc:	e841 2300 	strex	r3, r2, [r1]
 8004dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1e4      	bne.n	8004d92 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3308      	adds	r3, #8
 8004dce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	e853 3f00 	ldrex	r3, [r3]
 8004dd6:	623b      	str	r3, [r7, #32]
   return(result);
 8004dd8:	6a3b      	ldr	r3, [r7, #32]
 8004dda:	f023 0301 	bic.w	r3, r3, #1
 8004dde:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3308      	adds	r3, #8
 8004de8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004dec:	633a      	str	r2, [r7, #48]	; 0x30
 8004dee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004df4:	e841 2300 	strex	r3, r2, [r1]
 8004df8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e3      	bne.n	8004dc8 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2220      	movs	r2, #32
 8004e04:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	e853 3f00 	ldrex	r3, [r3]
 8004e1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0310 	bic.w	r3, r3, #16
 8004e26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e34:	61fb      	str	r3, [r7, #28]
 8004e36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	69b9      	ldr	r1, [r7, #24]
 8004e3a:	69fa      	ldr	r2, [r7, #28]
 8004e3c:	e841 2300 	strex	r3, r2, [r1]
 8004e40:	617b      	str	r3, [r7, #20]
   return(result);
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e4      	bne.n	8004e12 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f85c 	bl	8004f0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e54:	e03f      	b.n	8004ed6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00e      	beq.n	8004e80 <HAL_UART_IRQHandler+0x560>
 8004e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d008      	beq.n	8004e80 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 fd5d 	bl	8005938 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e7e:	e02d      	b.n	8004edc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00e      	beq.n	8004eaa <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d008      	beq.n	8004eaa <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d01c      	beq.n	8004eda <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	4798      	blx	r3
    }
    return;
 8004ea8:	e017      	b.n	8004eda <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d012      	beq.n	8004edc <HAL_UART_IRQHandler+0x5bc>
 8004eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00c      	beq.n	8004edc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fd0e 	bl	80058e4 <UART_EndTransmit_IT>
    return;
 8004ec8:	e008      	b.n	8004edc <HAL_UART_IRQHandler+0x5bc>
      return;
 8004eca:	bf00      	nop
 8004ecc:	e006      	b.n	8004edc <HAL_UART_IRQHandler+0x5bc>
    return;
 8004ece:	bf00      	nop
 8004ed0:	e004      	b.n	8004edc <HAL_UART_IRQHandler+0x5bc>
      return;
 8004ed2:	bf00      	nop
 8004ed4:	e002      	b.n	8004edc <HAL_UART_IRQHandler+0x5bc>
      return;
 8004ed6:	bf00      	nop
 8004ed8:	e000      	b.n	8004edc <HAL_UART_IRQHandler+0x5bc>
    return;
 8004eda:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004edc:	37e8      	adds	r7, #232	; 0xe8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop

08004ee4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f28:	b08a      	sub	sp, #40	; 0x28
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	431a      	orrs	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	4ba4      	ldr	r3, [pc, #656]	; (80051e4 <UART_SetConfig+0x2c0>)
 8004f54:	4013      	ands	r3, r2
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	6812      	ldr	r2, [r2, #0]
 8004f5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a99      	ldr	r2, [pc, #612]	; (80051e8 <UART_SetConfig+0x2c4>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d004      	beq.n	8004f90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a90      	ldr	r2, [pc, #576]	; (80051ec <UART_SetConfig+0x2c8>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d126      	bne.n	8004ffc <UART_SetConfig+0xd8>
 8004fae:	4b90      	ldr	r3, [pc, #576]	; (80051f0 <UART_SetConfig+0x2cc>)
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb4:	f003 0303 	and.w	r3, r3, #3
 8004fb8:	2b03      	cmp	r3, #3
 8004fba:	d81b      	bhi.n	8004ff4 <UART_SetConfig+0xd0>
 8004fbc:	a201      	add	r2, pc, #4	; (adr r2, 8004fc4 <UART_SetConfig+0xa0>)
 8004fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc2:	bf00      	nop
 8004fc4:	08004fd5 	.word	0x08004fd5
 8004fc8:	08004fe5 	.word	0x08004fe5
 8004fcc:	08004fdd 	.word	0x08004fdd
 8004fd0:	08004fed 	.word	0x08004fed
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fda:	e116      	b.n	800520a <UART_SetConfig+0x2e6>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe2:	e112      	b.n	800520a <UART_SetConfig+0x2e6>
 8004fe4:	2304      	movs	r3, #4
 8004fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fea:	e10e      	b.n	800520a <UART_SetConfig+0x2e6>
 8004fec:	2308      	movs	r3, #8
 8004fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ff2:	e10a      	b.n	800520a <UART_SetConfig+0x2e6>
 8004ff4:	2310      	movs	r3, #16
 8004ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ffa:	e106      	b.n	800520a <UART_SetConfig+0x2e6>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a7c      	ldr	r2, [pc, #496]	; (80051f4 <UART_SetConfig+0x2d0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d138      	bne.n	8005078 <UART_SetConfig+0x154>
 8005006:	4b7a      	ldr	r3, [pc, #488]	; (80051f0 <UART_SetConfig+0x2cc>)
 8005008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500c:	f003 030c 	and.w	r3, r3, #12
 8005010:	2b0c      	cmp	r3, #12
 8005012:	d82d      	bhi.n	8005070 <UART_SetConfig+0x14c>
 8005014:	a201      	add	r2, pc, #4	; (adr r2, 800501c <UART_SetConfig+0xf8>)
 8005016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501a:	bf00      	nop
 800501c:	08005051 	.word	0x08005051
 8005020:	08005071 	.word	0x08005071
 8005024:	08005071 	.word	0x08005071
 8005028:	08005071 	.word	0x08005071
 800502c:	08005061 	.word	0x08005061
 8005030:	08005071 	.word	0x08005071
 8005034:	08005071 	.word	0x08005071
 8005038:	08005071 	.word	0x08005071
 800503c:	08005059 	.word	0x08005059
 8005040:	08005071 	.word	0x08005071
 8005044:	08005071 	.word	0x08005071
 8005048:	08005071 	.word	0x08005071
 800504c:	08005069 	.word	0x08005069
 8005050:	2300      	movs	r3, #0
 8005052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005056:	e0d8      	b.n	800520a <UART_SetConfig+0x2e6>
 8005058:	2302      	movs	r3, #2
 800505a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800505e:	e0d4      	b.n	800520a <UART_SetConfig+0x2e6>
 8005060:	2304      	movs	r3, #4
 8005062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005066:	e0d0      	b.n	800520a <UART_SetConfig+0x2e6>
 8005068:	2308      	movs	r3, #8
 800506a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800506e:	e0cc      	b.n	800520a <UART_SetConfig+0x2e6>
 8005070:	2310      	movs	r3, #16
 8005072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005076:	e0c8      	b.n	800520a <UART_SetConfig+0x2e6>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a5e      	ldr	r2, [pc, #376]	; (80051f8 <UART_SetConfig+0x2d4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d125      	bne.n	80050ce <UART_SetConfig+0x1aa>
 8005082:	4b5b      	ldr	r3, [pc, #364]	; (80051f0 <UART_SetConfig+0x2cc>)
 8005084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005088:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800508c:	2b30      	cmp	r3, #48	; 0x30
 800508e:	d016      	beq.n	80050be <UART_SetConfig+0x19a>
 8005090:	2b30      	cmp	r3, #48	; 0x30
 8005092:	d818      	bhi.n	80050c6 <UART_SetConfig+0x1a2>
 8005094:	2b20      	cmp	r3, #32
 8005096:	d00a      	beq.n	80050ae <UART_SetConfig+0x18a>
 8005098:	2b20      	cmp	r3, #32
 800509a:	d814      	bhi.n	80050c6 <UART_SetConfig+0x1a2>
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <UART_SetConfig+0x182>
 80050a0:	2b10      	cmp	r3, #16
 80050a2:	d008      	beq.n	80050b6 <UART_SetConfig+0x192>
 80050a4:	e00f      	b.n	80050c6 <UART_SetConfig+0x1a2>
 80050a6:	2300      	movs	r3, #0
 80050a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ac:	e0ad      	b.n	800520a <UART_SetConfig+0x2e6>
 80050ae:	2302      	movs	r3, #2
 80050b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050b4:	e0a9      	b.n	800520a <UART_SetConfig+0x2e6>
 80050b6:	2304      	movs	r3, #4
 80050b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050bc:	e0a5      	b.n	800520a <UART_SetConfig+0x2e6>
 80050be:	2308      	movs	r3, #8
 80050c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050c4:	e0a1      	b.n	800520a <UART_SetConfig+0x2e6>
 80050c6:	2310      	movs	r3, #16
 80050c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050cc:	e09d      	b.n	800520a <UART_SetConfig+0x2e6>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a4a      	ldr	r2, [pc, #296]	; (80051fc <UART_SetConfig+0x2d8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d125      	bne.n	8005124 <UART_SetConfig+0x200>
 80050d8:	4b45      	ldr	r3, [pc, #276]	; (80051f0 <UART_SetConfig+0x2cc>)
 80050da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050e2:	2bc0      	cmp	r3, #192	; 0xc0
 80050e4:	d016      	beq.n	8005114 <UART_SetConfig+0x1f0>
 80050e6:	2bc0      	cmp	r3, #192	; 0xc0
 80050e8:	d818      	bhi.n	800511c <UART_SetConfig+0x1f8>
 80050ea:	2b80      	cmp	r3, #128	; 0x80
 80050ec:	d00a      	beq.n	8005104 <UART_SetConfig+0x1e0>
 80050ee:	2b80      	cmp	r3, #128	; 0x80
 80050f0:	d814      	bhi.n	800511c <UART_SetConfig+0x1f8>
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <UART_SetConfig+0x1d8>
 80050f6:	2b40      	cmp	r3, #64	; 0x40
 80050f8:	d008      	beq.n	800510c <UART_SetConfig+0x1e8>
 80050fa:	e00f      	b.n	800511c <UART_SetConfig+0x1f8>
 80050fc:	2300      	movs	r3, #0
 80050fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005102:	e082      	b.n	800520a <UART_SetConfig+0x2e6>
 8005104:	2302      	movs	r3, #2
 8005106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800510a:	e07e      	b.n	800520a <UART_SetConfig+0x2e6>
 800510c:	2304      	movs	r3, #4
 800510e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005112:	e07a      	b.n	800520a <UART_SetConfig+0x2e6>
 8005114:	2308      	movs	r3, #8
 8005116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800511a:	e076      	b.n	800520a <UART_SetConfig+0x2e6>
 800511c:	2310      	movs	r3, #16
 800511e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005122:	e072      	b.n	800520a <UART_SetConfig+0x2e6>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a35      	ldr	r2, [pc, #212]	; (8005200 <UART_SetConfig+0x2dc>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d12a      	bne.n	8005184 <UART_SetConfig+0x260>
 800512e:	4b30      	ldr	r3, [pc, #192]	; (80051f0 <UART_SetConfig+0x2cc>)
 8005130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005138:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800513c:	d01a      	beq.n	8005174 <UART_SetConfig+0x250>
 800513e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005142:	d81b      	bhi.n	800517c <UART_SetConfig+0x258>
 8005144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005148:	d00c      	beq.n	8005164 <UART_SetConfig+0x240>
 800514a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800514e:	d815      	bhi.n	800517c <UART_SetConfig+0x258>
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <UART_SetConfig+0x238>
 8005154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005158:	d008      	beq.n	800516c <UART_SetConfig+0x248>
 800515a:	e00f      	b.n	800517c <UART_SetConfig+0x258>
 800515c:	2300      	movs	r3, #0
 800515e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005162:	e052      	b.n	800520a <UART_SetConfig+0x2e6>
 8005164:	2302      	movs	r3, #2
 8005166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800516a:	e04e      	b.n	800520a <UART_SetConfig+0x2e6>
 800516c:	2304      	movs	r3, #4
 800516e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005172:	e04a      	b.n	800520a <UART_SetConfig+0x2e6>
 8005174:	2308      	movs	r3, #8
 8005176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800517a:	e046      	b.n	800520a <UART_SetConfig+0x2e6>
 800517c:	2310      	movs	r3, #16
 800517e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005182:	e042      	b.n	800520a <UART_SetConfig+0x2e6>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a17      	ldr	r2, [pc, #92]	; (80051e8 <UART_SetConfig+0x2c4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d13a      	bne.n	8005204 <UART_SetConfig+0x2e0>
 800518e:	4b18      	ldr	r3, [pc, #96]	; (80051f0 <UART_SetConfig+0x2cc>)
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005194:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005198:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800519c:	d01a      	beq.n	80051d4 <UART_SetConfig+0x2b0>
 800519e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051a2:	d81b      	bhi.n	80051dc <UART_SetConfig+0x2b8>
 80051a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051a8:	d00c      	beq.n	80051c4 <UART_SetConfig+0x2a0>
 80051aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051ae:	d815      	bhi.n	80051dc <UART_SetConfig+0x2b8>
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <UART_SetConfig+0x298>
 80051b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b8:	d008      	beq.n	80051cc <UART_SetConfig+0x2a8>
 80051ba:	e00f      	b.n	80051dc <UART_SetConfig+0x2b8>
 80051bc:	2300      	movs	r3, #0
 80051be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c2:	e022      	b.n	800520a <UART_SetConfig+0x2e6>
 80051c4:	2302      	movs	r3, #2
 80051c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ca:	e01e      	b.n	800520a <UART_SetConfig+0x2e6>
 80051cc:	2304      	movs	r3, #4
 80051ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d2:	e01a      	b.n	800520a <UART_SetConfig+0x2e6>
 80051d4:	2308      	movs	r3, #8
 80051d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051da:	e016      	b.n	800520a <UART_SetConfig+0x2e6>
 80051dc:	2310      	movs	r3, #16
 80051de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051e2:	e012      	b.n	800520a <UART_SetConfig+0x2e6>
 80051e4:	efff69f3 	.word	0xefff69f3
 80051e8:	40008000 	.word	0x40008000
 80051ec:	40013800 	.word	0x40013800
 80051f0:	40021000 	.word	0x40021000
 80051f4:	40004400 	.word	0x40004400
 80051f8:	40004800 	.word	0x40004800
 80051fc:	40004c00 	.word	0x40004c00
 8005200:	40005000 	.word	0x40005000
 8005204:	2310      	movs	r3, #16
 8005206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a9f      	ldr	r2, [pc, #636]	; (800548c <UART_SetConfig+0x568>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d17a      	bne.n	800530a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005214:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005218:	2b08      	cmp	r3, #8
 800521a:	d824      	bhi.n	8005266 <UART_SetConfig+0x342>
 800521c:	a201      	add	r2, pc, #4	; (adr r2, 8005224 <UART_SetConfig+0x300>)
 800521e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005222:	bf00      	nop
 8005224:	08005249 	.word	0x08005249
 8005228:	08005267 	.word	0x08005267
 800522c:	08005251 	.word	0x08005251
 8005230:	08005267 	.word	0x08005267
 8005234:	08005257 	.word	0x08005257
 8005238:	08005267 	.word	0x08005267
 800523c:	08005267 	.word	0x08005267
 8005240:	08005267 	.word	0x08005267
 8005244:	0800525f 	.word	0x0800525f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005248:	f7fd fbcc 	bl	80029e4 <HAL_RCC_GetPCLK1Freq>
 800524c:	61f8      	str	r0, [r7, #28]
        break;
 800524e:	e010      	b.n	8005272 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005250:	4b8f      	ldr	r3, [pc, #572]	; (8005490 <UART_SetConfig+0x56c>)
 8005252:	61fb      	str	r3, [r7, #28]
        break;
 8005254:	e00d      	b.n	8005272 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005256:	f7fd fb2d 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 800525a:	61f8      	str	r0, [r7, #28]
        break;
 800525c:	e009      	b.n	8005272 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800525e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005262:	61fb      	str	r3, [r7, #28]
        break;
 8005264:	e005      	b.n	8005272 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005270:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 80fb 	beq.w	8005470 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	4613      	mov	r3, r2
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	4413      	add	r3, r2
 8005284:	69fa      	ldr	r2, [r7, #28]
 8005286:	429a      	cmp	r2, r3
 8005288:	d305      	bcc.n	8005296 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005290:	69fa      	ldr	r2, [r7, #28]
 8005292:	429a      	cmp	r2, r3
 8005294:	d903      	bls.n	800529e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800529c:	e0e8      	b.n	8005470 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	2200      	movs	r2, #0
 80052a2:	461c      	mov	r4, r3
 80052a4:	4615      	mov	r5, r2
 80052a6:	f04f 0200 	mov.w	r2, #0
 80052aa:	f04f 0300 	mov.w	r3, #0
 80052ae:	022b      	lsls	r3, r5, #8
 80052b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80052b4:	0222      	lsls	r2, r4, #8
 80052b6:	68f9      	ldr	r1, [r7, #12]
 80052b8:	6849      	ldr	r1, [r1, #4]
 80052ba:	0849      	lsrs	r1, r1, #1
 80052bc:	2000      	movs	r0, #0
 80052be:	4688      	mov	r8, r1
 80052c0:	4681      	mov	r9, r0
 80052c2:	eb12 0a08 	adds.w	sl, r2, r8
 80052c6:	eb43 0b09 	adc.w	fp, r3, r9
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	603b      	str	r3, [r7, #0]
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052d8:	4650      	mov	r0, sl
 80052da:	4659      	mov	r1, fp
 80052dc:	f7fa ff74 	bl	80001c8 <__aeabi_uldivmod>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4613      	mov	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ee:	d308      	bcc.n	8005302 <UART_SetConfig+0x3de>
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052f6:	d204      	bcs.n	8005302 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	60da      	str	r2, [r3, #12]
 8005300:	e0b6      	b.n	8005470 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005308:	e0b2      	b.n	8005470 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005312:	d15e      	bne.n	80053d2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005314:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005318:	2b08      	cmp	r3, #8
 800531a:	d828      	bhi.n	800536e <UART_SetConfig+0x44a>
 800531c:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <UART_SetConfig+0x400>)
 800531e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005322:	bf00      	nop
 8005324:	08005349 	.word	0x08005349
 8005328:	08005351 	.word	0x08005351
 800532c:	08005359 	.word	0x08005359
 8005330:	0800536f 	.word	0x0800536f
 8005334:	0800535f 	.word	0x0800535f
 8005338:	0800536f 	.word	0x0800536f
 800533c:	0800536f 	.word	0x0800536f
 8005340:	0800536f 	.word	0x0800536f
 8005344:	08005367 	.word	0x08005367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005348:	f7fd fb4c 	bl	80029e4 <HAL_RCC_GetPCLK1Freq>
 800534c:	61f8      	str	r0, [r7, #28]
        break;
 800534e:	e014      	b.n	800537a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005350:	f7fd fb5e 	bl	8002a10 <HAL_RCC_GetPCLK2Freq>
 8005354:	61f8      	str	r0, [r7, #28]
        break;
 8005356:	e010      	b.n	800537a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005358:	4b4d      	ldr	r3, [pc, #308]	; (8005490 <UART_SetConfig+0x56c>)
 800535a:	61fb      	str	r3, [r7, #28]
        break;
 800535c:	e00d      	b.n	800537a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800535e:	f7fd faa9 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 8005362:	61f8      	str	r0, [r7, #28]
        break;
 8005364:	e009      	b.n	800537a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800536a:	61fb      	str	r3, [r7, #28]
        break;
 800536c:	e005      	b.n	800537a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800536e:	2300      	movs	r3, #0
 8005370:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005378:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d077      	beq.n	8005470 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	005a      	lsls	r2, r3, #1
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	085b      	lsrs	r3, r3, #1
 800538a:	441a      	add	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	fbb2 f3f3 	udiv	r3, r2, r3
 8005394:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	2b0f      	cmp	r3, #15
 800539a:	d916      	bls.n	80053ca <UART_SetConfig+0x4a6>
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a2:	d212      	bcs.n	80053ca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	f023 030f 	bic.w	r3, r3, #15
 80053ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	085b      	lsrs	r3, r3, #1
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	8afb      	ldrh	r3, [r7, #22]
 80053bc:	4313      	orrs	r3, r2
 80053be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	8afa      	ldrh	r2, [r7, #22]
 80053c6:	60da      	str	r2, [r3, #12]
 80053c8:	e052      	b.n	8005470 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80053d0:	e04e      	b.n	8005470 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053d6:	2b08      	cmp	r3, #8
 80053d8:	d827      	bhi.n	800542a <UART_SetConfig+0x506>
 80053da:	a201      	add	r2, pc, #4	; (adr r2, 80053e0 <UART_SetConfig+0x4bc>)
 80053dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e0:	08005405 	.word	0x08005405
 80053e4:	0800540d 	.word	0x0800540d
 80053e8:	08005415 	.word	0x08005415
 80053ec:	0800542b 	.word	0x0800542b
 80053f0:	0800541b 	.word	0x0800541b
 80053f4:	0800542b 	.word	0x0800542b
 80053f8:	0800542b 	.word	0x0800542b
 80053fc:	0800542b 	.word	0x0800542b
 8005400:	08005423 	.word	0x08005423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005404:	f7fd faee 	bl	80029e4 <HAL_RCC_GetPCLK1Freq>
 8005408:	61f8      	str	r0, [r7, #28]
        break;
 800540a:	e014      	b.n	8005436 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800540c:	f7fd fb00 	bl	8002a10 <HAL_RCC_GetPCLK2Freq>
 8005410:	61f8      	str	r0, [r7, #28]
        break;
 8005412:	e010      	b.n	8005436 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005414:	4b1e      	ldr	r3, [pc, #120]	; (8005490 <UART_SetConfig+0x56c>)
 8005416:	61fb      	str	r3, [r7, #28]
        break;
 8005418:	e00d      	b.n	8005436 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800541a:	f7fd fa4b 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 800541e:	61f8      	str	r0, [r7, #28]
        break;
 8005420:	e009      	b.n	8005436 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005426:	61fb      	str	r3, [r7, #28]
        break;
 8005428:	e005      	b.n	8005436 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005434:	bf00      	nop
    }

    if (pclk != 0U)
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d019      	beq.n	8005470 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	085a      	lsrs	r2, r3, #1
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	441a      	add	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	fbb2 f3f3 	udiv	r3, r2, r3
 800544e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	2b0f      	cmp	r3, #15
 8005454:	d909      	bls.n	800546a <UART_SetConfig+0x546>
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800545c:	d205      	bcs.n	800546a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	b29a      	uxth	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	60da      	str	r2, [r3, #12]
 8005468:	e002      	b.n	8005470 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800547c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005480:	4618      	mov	r0, r3
 8005482:	3728      	adds	r7, #40	; 0x28
 8005484:	46bd      	mov	sp, r7
 8005486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800548a:	bf00      	nop
 800548c:	40008000 	.word	0x40008000
 8005490:	00f42400 	.word	0x00f42400

08005494 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00a      	beq.n	8005502 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	f003 0308 	and.w	r3, r3, #8
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	f003 0310 	and.w	r3, r3, #16
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00a      	beq.n	8005546 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00a      	beq.n	8005568 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01a      	beq.n	80055aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005592:	d10a      	bne.n	80055aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	605a      	str	r2, [r3, #4]
  }
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af02      	add	r7, sp, #8
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055e8:	f7fb ff4c 	bl	8001484 <HAL_GetTick>
 80055ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0308 	and.w	r3, r3, #8
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d10e      	bne.n	800561a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f82d 	bl	800566a <UART_WaitOnFlagUntilTimeout>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e023      	b.n	8005662 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b04      	cmp	r3, #4
 8005626:	d10e      	bne.n	8005646 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005628:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f817 	bl	800566a <UART_WaitOnFlagUntilTimeout>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e00d      	b.n	8005662 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2220      	movs	r2, #32
 800564a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2220      	movs	r2, #32
 8005650:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b09c      	sub	sp, #112	; 0x70
 800566e:	af00      	add	r7, sp, #0
 8005670:	60f8      	str	r0, [r7, #12]
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	603b      	str	r3, [r7, #0]
 8005676:	4613      	mov	r3, r2
 8005678:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800567a:	e0a5      	b.n	80057c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800567c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800567e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005682:	f000 80a1 	beq.w	80057c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005686:	f7fb fefd 	bl	8001484 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005692:	429a      	cmp	r2, r3
 8005694:	d302      	bcc.n	800569c <UART_WaitOnFlagUntilTimeout+0x32>
 8005696:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005698:	2b00      	cmp	r3, #0
 800569a:	d13e      	bne.n	800571a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80056aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056b0:	667b      	str	r3, [r7, #100]	; 0x64
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80056c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80056c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e6      	bne.n	800569c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3308      	adds	r3, #8
 80056d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d8:	e853 3f00 	ldrex	r3, [r3]
 80056dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e0:	f023 0301 	bic.w	r3, r3, #1
 80056e4:	663b      	str	r3, [r7, #96]	; 0x60
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3308      	adds	r3, #8
 80056ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80056f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056f6:	e841 2300 	strex	r3, r2, [r1]
 80056fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80056fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1e5      	bne.n	80056ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2220      	movs	r2, #32
 8005706:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2220      	movs	r2, #32
 800570c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e067      	b.n	80057ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b00      	cmp	r3, #0
 8005726:	d04f      	beq.n	80057c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005736:	d147      	bne.n	80057c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005740:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574a:	e853 3f00 	ldrex	r3, [r3]
 800574e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005756:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	461a      	mov	r2, r3
 800575e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005760:	637b      	str	r3, [r7, #52]	; 0x34
 8005762:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005764:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005768:	e841 2300 	strex	r3, r2, [r1]
 800576c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800576e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1e6      	bne.n	8005742 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3308      	adds	r3, #8
 800577a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	613b      	str	r3, [r7, #16]
   return(result);
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	f023 0301 	bic.w	r3, r3, #1
 800578a:	66bb      	str	r3, [r7, #104]	; 0x68
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3308      	adds	r3, #8
 8005792:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005794:	623a      	str	r2, [r7, #32]
 8005796:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005798:	69f9      	ldr	r1, [r7, #28]
 800579a:	6a3a      	ldr	r2, [r7, #32]
 800579c:	e841 2300 	strex	r3, r2, [r1]
 80057a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1e5      	bne.n	8005774 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2220      	movs	r2, #32
 80057ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2220      	movs	r2, #32
 80057b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2220      	movs	r2, #32
 80057b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e010      	b.n	80057ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	69da      	ldr	r2, [r3, #28]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	4013      	ands	r3, r2
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	bf0c      	ite	eq
 80057d8:	2301      	moveq	r3, #1
 80057da:	2300      	movne	r3, #0
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	461a      	mov	r2, r3
 80057e0:	79fb      	ldrb	r3, [r7, #7]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	f43f af4a 	beq.w	800567c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3770      	adds	r7, #112	; 0x70
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b095      	sub	sp, #84	; 0x54
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005802:	e853 3f00 	ldrex	r3, [r3]
 8005806:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800580e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	461a      	mov	r2, r3
 8005816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005818:	643b      	str	r3, [r7, #64]	; 0x40
 800581a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800581e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005820:	e841 2300 	strex	r3, r2, [r1]
 8005824:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1e6      	bne.n	80057fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3308      	adds	r3, #8
 8005832:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	e853 3f00 	ldrex	r3, [r3]
 800583a:	61fb      	str	r3, [r7, #28]
   return(result);
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	f023 0301 	bic.w	r3, r3, #1
 8005842:	64bb      	str	r3, [r7, #72]	; 0x48
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3308      	adds	r3, #8
 800584a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800584c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800584e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005850:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005854:	e841 2300 	strex	r3, r2, [r1]
 8005858:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1e5      	bne.n	800582c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005864:	2b01      	cmp	r3, #1
 8005866:	d118      	bne.n	800589a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	60bb      	str	r3, [r7, #8]
   return(result);
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f023 0310 	bic.w	r3, r3, #16
 800587c:	647b      	str	r3, [r7, #68]	; 0x44
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005886:	61bb      	str	r3, [r7, #24]
 8005888:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	6979      	ldr	r1, [r7, #20]
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	613b      	str	r3, [r7, #16]
   return(result);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e6      	bne.n	8005868 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2220      	movs	r2, #32
 800589e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	665a      	str	r2, [r3, #100]	; 0x64
}
 80058ac:	bf00      	nop
 80058ae:	3754      	adds	r7, #84	; 0x54
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f7ff fb0e 	bl	8004ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058dc:	bf00      	nop
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b088      	sub	sp, #32
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	e853 3f00 	ldrex	r3, [r3]
 80058f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005900:	61fb      	str	r3, [r7, #28]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	61bb      	str	r3, [r7, #24]
 800590c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	6979      	ldr	r1, [r7, #20]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	e841 2300 	strex	r3, r2, [r1]
 8005916:	613b      	str	r3, [r7, #16]
   return(result);
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1e6      	bne.n	80058ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2220      	movs	r2, #32
 8005922:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7ff fada 	bl	8004ee4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005930:	bf00      	nop
 8005932:	3720      	adds	r7, #32
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <__libc_init_array>:
 800594c:	b570      	push	{r4, r5, r6, lr}
 800594e:	4d0d      	ldr	r5, [pc, #52]	; (8005984 <__libc_init_array+0x38>)
 8005950:	4c0d      	ldr	r4, [pc, #52]	; (8005988 <__libc_init_array+0x3c>)
 8005952:	1b64      	subs	r4, r4, r5
 8005954:	10a4      	asrs	r4, r4, #2
 8005956:	2600      	movs	r6, #0
 8005958:	42a6      	cmp	r6, r4
 800595a:	d109      	bne.n	8005970 <__libc_init_array+0x24>
 800595c:	4d0b      	ldr	r5, [pc, #44]	; (800598c <__libc_init_array+0x40>)
 800595e:	4c0c      	ldr	r4, [pc, #48]	; (8005990 <__libc_init_array+0x44>)
 8005960:	f000 f820 	bl	80059a4 <_init>
 8005964:	1b64      	subs	r4, r4, r5
 8005966:	10a4      	asrs	r4, r4, #2
 8005968:	2600      	movs	r6, #0
 800596a:	42a6      	cmp	r6, r4
 800596c:	d105      	bne.n	800597a <__libc_init_array+0x2e>
 800596e:	bd70      	pop	{r4, r5, r6, pc}
 8005970:	f855 3b04 	ldr.w	r3, [r5], #4
 8005974:	4798      	blx	r3
 8005976:	3601      	adds	r6, #1
 8005978:	e7ee      	b.n	8005958 <__libc_init_array+0xc>
 800597a:	f855 3b04 	ldr.w	r3, [r5], #4
 800597e:	4798      	blx	r3
 8005980:	3601      	adds	r6, #1
 8005982:	e7f2      	b.n	800596a <__libc_init_array+0x1e>
 8005984:	08005a0c 	.word	0x08005a0c
 8005988:	08005a0c 	.word	0x08005a0c
 800598c:	08005a0c 	.word	0x08005a0c
 8005990:	08005a10 	.word	0x08005a10

08005994 <memset>:
 8005994:	4402      	add	r2, r0
 8005996:	4603      	mov	r3, r0
 8005998:	4293      	cmp	r3, r2
 800599a:	d100      	bne.n	800599e <memset+0xa>
 800599c:	4770      	bx	lr
 800599e:	f803 1b01 	strb.w	r1, [r3], #1
 80059a2:	e7f9      	b.n	8005998 <memset+0x4>

080059a4 <_init>:
 80059a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a6:	bf00      	nop
 80059a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059aa:	bc08      	pop	{r3}
 80059ac:	469e      	mov	lr, r3
 80059ae:	4770      	bx	lr

080059b0 <_fini>:
 80059b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b2:	bf00      	nop
 80059b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059b6:	bc08      	pop	{r3}
 80059b8:	469e      	mov	lr, r3
 80059ba:	4770      	bx	lr
