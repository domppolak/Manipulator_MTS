
Manipulator_MTS_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005c04  08005c04  00015c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c90  08005c90  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005c90  08005c90  00015c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c98  08005c98  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c98  08005c98  00015c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c9c  08005c9c  00015c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005ca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000070  08005d10  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08005d10  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001263a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c9  00000000  00000000  000326da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  00034da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  00035d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002756f  00000000  00000000  00036c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013caa  00000000  00000000  0005e1df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4aa2  00000000  00000000  00071e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016692b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000458c  00000000  00000000  0016697c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005bec 	.word	0x08005bec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005bec 	.word	0x08005bec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <MX_DMA_Init+0x48>)
 800057c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800057e:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <MX_DMA_Init+0x48>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6493      	str	r3, [r2, #72]	; 0x48
 8000586:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <MX_DMA_Init+0x48>)
 8000588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	2010      	movs	r0, #16
 8000598:	f000 ff41 	bl	800141e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800059c:	2010      	movs	r0, #16
 800059e:	f000 ff5a 	bl	8001456 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	2011      	movs	r0, #17
 80005a8:	f000 ff39 	bl	800141e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80005ac:	2011      	movs	r0, #17
 80005ae:	f000 ff52 	bl	8001456 <HAL_NVIC_EnableIRQ>

}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000

080005c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	; 0x28
 80005c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d6:	4b2a      	ldr	r3, [pc, #168]	; (8000680 <MX_GPIO_Init+0xc0>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	4a29      	ldr	r2, [pc, #164]	; (8000680 <MX_GPIO_Init+0xc0>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e2:	4b27      	ldr	r3, [pc, #156]	; (8000680 <MX_GPIO_Init+0xc0>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	4b24      	ldr	r3, [pc, #144]	; (8000680 <MX_GPIO_Init+0xc0>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	4a23      	ldr	r2, [pc, #140]	; (8000680 <MX_GPIO_Init+0xc0>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fa:	4b21      	ldr	r3, [pc, #132]	; (8000680 <MX_GPIO_Init+0xc0>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000606:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <MX_GPIO_Init+0xc0>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	4a1d      	ldr	r2, [pc, #116]	; (8000680 <MX_GPIO_Init+0xc0>)
 800060c:	f043 0310 	orr.w	r3, r3, #16
 8000610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000612:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <MX_GPIO_Init+0xc0>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	f003 0310 	and.w	r3, r3, #16
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <MX_GPIO_Init+0xc0>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	4a17      	ldr	r2, [pc, #92]	; (8000680 <MX_GPIO_Init+0xc0>)
 8000624:	f043 0308 	orr.w	r3, r3, #8
 8000628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_GPIO_Init+0xc0>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_GPIO_Init+0xc0>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	4a11      	ldr	r2, [pc, #68]	; (8000680 <MX_GPIO_Init+0xc0>)
 800063c:	f043 0302 	orr.w	r3, r3, #2
 8000640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_GPIO_Init+0xc0>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AIN2_Pin|AIN1_Pin|BIN2_Pin|BIN1_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 8000654:	480b      	ldr	r0, [pc, #44]	; (8000684 <MX_GPIO_Init+0xc4>)
 8000656:	f001 faa9 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN2_Pin|BIN1_Pin;
 800065a:	f44f 4334 	mov.w	r3, #46080	; 0xb400
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	2301      	movs	r3, #1
 8000662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2300      	movs	r3, #0
 800066a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4619      	mov	r1, r3
 8000672:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_GPIO_Init+0xc4>)
 8000674:	f001 f8f0 	bl	8001858 <HAL_GPIO_Init>

}
 8000678:	bf00      	nop
 800067a:	3728      	adds	r7, #40	; 0x28
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40021000 	.word	0x40021000
 8000684:	48001000 	.word	0x48001000

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068c:	f000 fd70 	bl	8001170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000690:	f000 f818 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000694:	f7ff ff94 	bl	80005c0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000698:	f000 f942 	bl	8000920 <MX_TIM1_Init>
  MX_TIM2_Init();
 800069c:	f000 f9da 	bl	8000a54 <MX_TIM2_Init>
  MX_TIM15_Init();
 80006a0:	f000 fa82 	bl	8000ba8 <MX_TIM15_Init>
  MX_DMA_Init();
 80006a4:	f7ff ff66 	bl	8000574 <MX_DMA_Init>
  MX_TIM4_Init();
 80006a8:	f000 fa28 	bl	8000afc <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80006ac:	f000 fc24 	bl	8000ef8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  sprintf(Data, "123456789012\n\r");
 80006b0:	4902      	ldr	r1, [pc, #8]	; (80006bc <main+0x34>)
 80006b2:	4803      	ldr	r0, [pc, #12]	; (80006c0 <main+0x38>)
 80006b4:	f004 fe2c 	bl	8005310 <siprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <main+0x30>
 80006ba:	bf00      	nop
 80006bc:	08005c04 	.word	0x08005c04
 80006c0:	2000008c 	.word	0x2000008c

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b096      	sub	sp, #88	; 0x58
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	2244      	movs	r2, #68	; 0x44
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 fe14 	bl	8005300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	463b      	mov	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ea:	f001 fa85 	bl	8001bf8 <HAL_PWREx_ControlVoltageScaling>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006f4:	f000 f838 	bl	8000768 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006f8:	2310      	movs	r3, #16
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000704:	2360      	movs	r3, #96	; 0x60
 8000706:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000708:	2302      	movs	r3, #2
 800070a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800070c:	2301      	movs	r3, #1
 800070e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000710:	2301      	movs	r3, #1
 8000712:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000714:	2328      	movs	r3, #40	; 0x28
 8000716:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000718:	2307      	movs	r3, #7
 800071a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000720:	2302      	movs	r3, #2
 8000722:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	4618      	mov	r0, r3
 800072a:	f001 fabb 	bl	8001ca4 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000734:	f000 f818 	bl	8000768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2303      	movs	r3, #3
 800073e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800074c:	463b      	mov	r3, r7
 800074e:	2104      	movs	r1, #4
 8000750:	4618      	mov	r0, r3
 8000752:	f001 fe8f 	bl	8002474 <HAL_RCC_ClockConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800075c:	f000 f804 	bl	8000768 <Error_Handler>
  }
}
 8000760:	bf00      	nop
 8000762:	3758      	adds	r7, #88	; 0x58
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000770:	e7fe      	b.n	8000770 <Error_Handler+0x8>
	...

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <HAL_MspInit+0x44>)
 800077c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800077e:	4a0e      	ldr	r2, [pc, #56]	; (80007b8 <HAL_MspInit+0x44>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6613      	str	r3, [r2, #96]	; 0x60
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <HAL_MspInit+0x44>)
 8000788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_MspInit+0x44>)
 8000794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000796:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <HAL_MspInit+0x44>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	6593      	str	r3, [r2, #88]	; 0x58
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_MspInit+0x44>)
 80007a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <NMI_Handler+0x4>

080007c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <HardFault_Handler+0x4>

080007c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <MemManage_Handler+0x4>

080007ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <BusFault_Handler+0x4>

080007d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <UsageFault_Handler+0x4>

080007da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000808:	f000 fd0e 	bl	8001228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}

08000810 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000814:	4802      	ldr	r0, [pc, #8]	; (8000820 <DMA1_Channel6_IRQHandler+0x10>)
 8000816:	f000 ff70 	bl	80016fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000254 	.word	0x20000254

08000824 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000828:	4802      	ldr	r0, [pc, #8]	; (8000834 <DMA1_Channel7_IRQHandler+0x10>)
 800082a:	f000 ff66 	bl	80016fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2000029c 	.word	0x2000029c

08000838 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800083e:	f002 fdd8 	bl	80033f2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8000842:	4803      	ldr	r0, [pc, #12]	; (8000850 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8000844:	f002 fdd5 	bl	80033f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200000a0 	.word	0x200000a0
 8000850:	20000184 	.word	0x20000184

08000854 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000858:	4802      	ldr	r0, [pc, #8]	; (8000864 <TIM2_IRQHandler+0x10>)
 800085a:	f002 fdca 	bl	80033f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200000ec 	.word	0x200000ec

08000868 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800086c:	4802      	ldr	r0, [pc, #8]	; (8000878 <TIM4_IRQHandler+0x10>)
 800086e:	f002 fdc0 	bl	80033f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000138 	.word	0x20000138

0800087c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000880:	4802      	ldr	r0, [pc, #8]	; (800088c <USART2_IRQHandler+0x10>)
 8000882:	f003 fcfd 	bl	8004280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200001d0 	.word	0x200001d0

08000890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000898:	4a14      	ldr	r2, [pc, #80]	; (80008ec <_sbrk+0x5c>)
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <_sbrk+0x60>)
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a4:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <_sbrk+0x64>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d102      	bne.n	80008b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <_sbrk+0x64>)
 80008ae:	4a12      	ldr	r2, [pc, #72]	; (80008f8 <_sbrk+0x68>)
 80008b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <_sbrk+0x64>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d207      	bcs.n	80008d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c0:	f004 fcf4 	bl	80052ac <__errno>
 80008c4:	4603      	mov	r3, r0
 80008c6:	220c      	movs	r2, #12
 80008c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295
 80008ce:	e009      	b.n	80008e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <_sbrk+0x64>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008d6:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <_sbrk+0x64>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <_sbrk+0x64>)
 80008e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008e2:	68fb      	ldr	r3, [r7, #12]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20018000 	.word	0x20018000
 80008f0:	00000400 	.word	0x00000400
 80008f4:	2000009c 	.word	0x2000009c
 80008f8:	200002f8 	.word	0x200002f8

080008fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <SystemInit+0x20>)
 8000902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000906:	4a05      	ldr	r2, [pc, #20]	; (800091c <SystemInit+0x20>)
 8000908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800090c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b096      	sub	sp, #88	; 0x58
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000926:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000932:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]
 8000942:	615a      	str	r2, [r3, #20]
 8000944:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	222c      	movs	r2, #44	; 0x2c
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f004 fcd7 	bl	8005300 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000952:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <MX_TIM1_Init+0x12c>)
 8000954:	4a3e      	ldr	r2, [pc, #248]	; (8000a50 <MX_TIM1_Init+0x130>)
 8000956:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 40;
 8000958:	4b3c      	ldr	r3, [pc, #240]	; (8000a4c <MX_TIM1_Init+0x12c>)
 800095a:	2228      	movs	r2, #40	; 0x28
 800095c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095e:	4b3b      	ldr	r3, [pc, #236]	; (8000a4c <MX_TIM1_Init+0x12c>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000964:	4b39      	ldr	r3, [pc, #228]	; (8000a4c <MX_TIM1_Init+0x12c>)
 8000966:	2264      	movs	r2, #100	; 0x64
 8000968:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096a:	4b38      	ldr	r3, [pc, #224]	; (8000a4c <MX_TIM1_Init+0x12c>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000970:	4b36      	ldr	r3, [pc, #216]	; (8000a4c <MX_TIM1_Init+0x12c>)
 8000972:	2200      	movs	r2, #0
 8000974:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000976:	4b35      	ldr	r3, [pc, #212]	; (8000a4c <MX_TIM1_Init+0x12c>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800097c:	4833      	ldr	r0, [pc, #204]	; (8000a4c <MX_TIM1_Init+0x12c>)
 800097e:	f002 fc3b 	bl	80031f8 <HAL_TIM_PWM_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000988:	f7ff feee 	bl	8000768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098c:	2300      	movs	r3, #0
 800098e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000990:	2300      	movs	r3, #0
 8000992:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000998:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800099c:	4619      	mov	r1, r3
 800099e:	482b      	ldr	r0, [pc, #172]	; (8000a4c <MX_TIM1_Init+0x12c>)
 80009a0:	f003 fafc 	bl	8003f9c <HAL_TIMEx_MasterConfigSynchronization>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80009aa:	f7ff fedd 	bl	8000768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ae:	2360      	movs	r3, #96	; 0x60
 80009b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b6:	2300      	movs	r3, #0
 80009b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009ba:	2300      	movs	r3, #0
 80009bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009c2:	2300      	movs	r3, #0
 80009c4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009c6:	2300      	movs	r3, #0
 80009c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009ce:	2204      	movs	r2, #4
 80009d0:	4619      	mov	r1, r3
 80009d2:	481e      	ldr	r0, [pc, #120]	; (8000a4c <MX_TIM1_Init+0x12c>)
 80009d4:	f002 fe2c 	bl	8003630 <HAL_TIM_PWM_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80009de:	f7ff fec3 	bl	8000768 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009e6:	220c      	movs	r2, #12
 80009e8:	4619      	mov	r1, r3
 80009ea:	4818      	ldr	r0, [pc, #96]	; (8000a4c <MX_TIM1_Init+0x12c>)
 80009ec:	f002 fe20 	bl	8003630 <HAL_TIM_PWM_ConfigChannel>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 80009f6:	f7ff feb7 	bl	8000768 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a12:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4807      	ldr	r0, [pc, #28]	; (8000a4c <MX_TIM1_Init+0x12c>)
 8000a30:	f003 fb3c 	bl	80040ac <HAL_TIMEx_ConfigBreakDeadTime>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000a3a:	f7ff fe95 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a3e:	4803      	ldr	r0, [pc, #12]	; (8000a4c <MX_TIM1_Init+0x12c>)
 8000a40:	f000 f9fc 	bl	8000e3c <HAL_TIM_MspPostInit>

}
 8000a44:	bf00      	nop
 8000a46:	3758      	adds	r7, #88	; 0x58
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200000a0 	.word	0x200000a0
 8000a50:	40012c00 	.word	0x40012c00

08000a54 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08c      	sub	sp, #48	; 0x30
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	2224      	movs	r2, #36	; 0x24
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f004 fc4c 	bl	8005300 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a68:	463b      	mov	r3, r7
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <MX_TIM2_Init+0xa4>)
 8000a74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <MX_TIM2_Init+0xa4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <MX_TIM2_Init+0xa4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <MX_TIM2_Init+0xa4>)
 8000a88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_TIM2_Init+0xa4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_TIM2_Init+0xa4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000aaa:	230f      	movs	r3, #15
 8000aac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000aba:	230f      	movs	r3, #15
 8000abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480c      	ldr	r0, [pc, #48]	; (8000af8 <MX_TIM2_Init+0xa4>)
 8000ac6:	f002 fbee 	bl	80032a6 <HAL_TIM_Encoder_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000ad0:	f7ff fe4a 	bl	8000768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000adc:	463b      	mov	r3, r7
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_TIM2_Init+0xa4>)
 8000ae2:	f003 fa5b 	bl	8003f9c <HAL_TIMEx_MasterConfigSynchronization>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000aec:	f7ff fe3c 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	3730      	adds	r7, #48	; 0x30
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200000ec 	.word	0x200000ec

08000afc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08c      	sub	sp, #48	; 0x30
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	2224      	movs	r2, #36	; 0x24
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f004 fbf8 	bl	8005300 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b10:	463b      	mov	r3, r7
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b1a:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <MX_TIM4_Init+0xa4>)
 8000b1c:	4a21      	ldr	r2, [pc, #132]	; (8000ba4 <MX_TIM4_Init+0xa8>)
 8000b1e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b20:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <MX_TIM4_Init+0xa4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b26:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <MX_TIM4_Init+0xa4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <MX_TIM4_Init+0xa4>)
 8000b2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b32:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <MX_TIM4_Init+0xa4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3a:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <MX_TIM4_Init+0xa4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b40:	2303      	movs	r3, #3
 8000b42:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b44:	2300      	movs	r3, #0
 8000b46:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000b50:	230f      	movs	r3, #15
 8000b52:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000b60:	230f      	movs	r3, #15
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <MX_TIM4_Init+0xa4>)
 8000b6c:	f002 fb9b 	bl	80032a6 <HAL_TIM_Encoder_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000b76:	f7ff fdf7 	bl	8000768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b82:	463b      	mov	r3, r7
 8000b84:	4619      	mov	r1, r3
 8000b86:	4806      	ldr	r0, [pc, #24]	; (8000ba0 <MX_TIM4_Init+0xa4>)
 8000b88:	f003 fa08 	bl	8003f9c <HAL_TIMEx_MasterConfigSynchronization>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000b92:	f7ff fde9 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	3730      	adds	r7, #48	; 0x30
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000138 	.word	0x20000138
 8000ba4:	40000800 	.word	0x40000800

08000ba8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b096      	sub	sp, #88	; 0x58
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]
 8000bca:	615a      	str	r2, [r3, #20]
 8000bcc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	222c      	movs	r2, #44	; 0x2c
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f004 fb93 	bl	8005300 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000bda:	4b34      	ldr	r3, [pc, #208]	; (8000cac <MX_TIM15_Init+0x104>)
 8000bdc:	4a34      	ldr	r2, [pc, #208]	; (8000cb0 <MX_TIM15_Init+0x108>)
 8000bde:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1919;
 8000be0:	4b32      	ldr	r3, [pc, #200]	; (8000cac <MX_TIM15_Init+0x104>)
 8000be2:	f240 727f 	movw	r2, #1919	; 0x77f
 8000be6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be8:	4b30      	ldr	r3, [pc, #192]	; (8000cac <MX_TIM15_Init+0x104>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8000bee:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <MX_TIM15_Init+0x104>)
 8000bf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bf4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <MX_TIM15_Init+0x104>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000bfc:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <MX_TIM15_Init+0x104>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c02:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <MX_TIM15_Init+0x104>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000c08:	4828      	ldr	r0, [pc, #160]	; (8000cac <MX_TIM15_Init+0x104>)
 8000c0a:	f002 faf5 	bl	80031f8 <HAL_TIM_PWM_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8000c14:	f7ff fda8 	bl	8000768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000c20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c24:	4619      	mov	r1, r3
 8000c26:	4821      	ldr	r0, [pc, #132]	; (8000cac <MX_TIM15_Init+0x104>)
 8000c28:	f003 f9b8 	bl	8003f9c <HAL_TIMEx_MasterConfigSynchronization>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8000c32:	f7ff fd99 	bl	8000768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c36:	2360      	movs	r3, #96	; 0x60
 8000c38:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50;
 8000c3a:	2332      	movs	r3, #50	; 0x32
 8000c3c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c42:	2300      	movs	r3, #0
 8000c44:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c56:	2200      	movs	r2, #0
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4814      	ldr	r0, [pc, #80]	; (8000cac <MX_TIM15_Init+0x104>)
 8000c5c:	f002 fce8 	bl	8003630 <HAL_TIM_PWM_ConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 8000c66:	f7ff fd7f 	bl	8000768 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4807      	ldr	r0, [pc, #28]	; (8000cac <MX_TIM15_Init+0x104>)
 8000c8e:	f003 fa0d 	bl	80040ac <HAL_TIMEx_ConfigBreakDeadTime>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM15_Init+0xf4>
  {
    Error_Handler();
 8000c98:	f7ff fd66 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000c9c:	4803      	ldr	r0, [pc, #12]	; (8000cac <MX_TIM15_Init+0x104>)
 8000c9e:	f000 f8cd 	bl	8000e3c <HAL_TIM_MspPostInit>

}
 8000ca2:	bf00      	nop
 8000ca4:	3758      	adds	r7, #88	; 0x58
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000184 	.word	0x20000184
 8000cb0:	40014000 	.word	0x40014000

08000cb4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a1a      	ldr	r2, [pc, #104]	; (8000d2c <HAL_TIM_PWM_MspInit+0x78>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d114      	bne.n	8000cf0 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <HAL_TIM_PWM_MspInit+0x7c>)
 8000cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cca:	4a19      	ldr	r2, [pc, #100]	; (8000d30 <HAL_TIM_PWM_MspInit+0x7c>)
 8000ccc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cd0:	6613      	str	r3, [r2, #96]	; 0x60
 8000cd2:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <HAL_TIM_PWM_MspInit+0x7c>)
 8000cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2018      	movs	r0, #24
 8000ce4:	f000 fb9b 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000ce8:	2018      	movs	r0, #24
 8000cea:	f000 fbb4 	bl	8001456 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8000cee:	e018      	b.n	8000d22 <HAL_TIM_PWM_MspInit+0x6e>
  else if(tim_pwmHandle->Instance==TIM15)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0f      	ldr	r2, [pc, #60]	; (8000d34 <HAL_TIM_PWM_MspInit+0x80>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d113      	bne.n	8000d22 <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <HAL_TIM_PWM_MspInit+0x7c>)
 8000cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfe:	4a0c      	ldr	r2, [pc, #48]	; (8000d30 <HAL_TIM_PWM_MspInit+0x7c>)
 8000d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d04:	6613      	str	r3, [r2, #96]	; 0x60
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <HAL_TIM_PWM_MspInit+0x7c>)
 8000d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	2018      	movs	r0, #24
 8000d18:	f000 fb81 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000d1c:	2018      	movs	r0, #24
 8000d1e:	f000 fb9a 	bl	8001456 <HAL_NVIC_EnableIRQ>
}
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40012c00 	.word	0x40012c00
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40014000 	.word	0x40014000

08000d38 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08c      	sub	sp, #48	; 0x30
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d58:	d131      	bne.n	8000dbe <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d5a:	4b35      	ldr	r3, [pc, #212]	; (8000e30 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5e:	4a34      	ldr	r2, [pc, #208]	; (8000e30 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6593      	str	r3, [r2, #88]	; 0x58
 8000d66:	4b32      	ldr	r3, [pc, #200]	; (8000e30 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	61bb      	str	r3, [r7, #24]
 8000d70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	4b2f      	ldr	r3, [pc, #188]	; (8000e30 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	4a2e      	ldr	r2, [pc, #184]	; (8000e30 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7e:	4b2c      	ldr	r3, [pc, #176]	; (8000e30 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC2_A2_Pin|ENC2_B2_Pin;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	4619      	mov	r1, r3
 8000da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da8:	f000 fd56 	bl	8001858 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2100      	movs	r1, #0
 8000db0:	201c      	movs	r0, #28
 8000db2:	f000 fb34 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000db6:	201c      	movs	r0, #28
 8000db8:	f000 fb4d 	bl	8001456 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000dbc:	e034      	b.n	8000e28 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(tim_encoderHandle->Instance==TIM4)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a1c      	ldr	r2, [pc, #112]	; (8000e34 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d12f      	bne.n	8000e28 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dc8:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dcc:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000dce:	f043 0304 	orr.w	r3, r3, #4
 8000dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de4:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000de6:	f043 0302 	orr.w	r3, r3, #2
 8000dea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dec:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC1_B1_Pin|ENC1_A1_Pin;
 8000df8:	23c0      	movs	r3, #192	; 0xc0
 8000dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	4619      	mov	r1, r3
 8000e12:	4809      	ldr	r0, [pc, #36]	; (8000e38 <HAL_TIM_Encoder_MspInit+0x100>)
 8000e14:	f000 fd20 	bl	8001858 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	201e      	movs	r0, #30
 8000e1e:	f000 fafe 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e22:	201e      	movs	r0, #30
 8000e24:	f000 fb17 	bl	8001456 <HAL_NVIC_EnableIRQ>
}
 8000e28:	bf00      	nop
 8000e2a:	3730      	adds	r7, #48	; 0x30
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40000800 	.word	0x40000800
 8000e38:	48000400 	.word	0x48000400

08000e3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a23      	ldr	r2, [pc, #140]	; (8000ee8 <HAL_TIM_MspPostInit+0xac>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d11d      	bne.n	8000e9a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e5e:	4b23      	ldr	r3, [pc, #140]	; (8000eec <HAL_TIM_MspPostInit+0xb0>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	4a22      	ldr	r2, [pc, #136]	; (8000eec <HAL_TIM_MspPostInit+0xb0>)
 8000e64:	f043 0310 	orr.w	r3, r3, #16
 8000e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6a:	4b20      	ldr	r3, [pc, #128]	; (8000eec <HAL_TIM_MspPostInit+0xb0>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	f003 0310 	and.w	r3, r3, #16
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8000e76:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	4817      	ldr	r0, [pc, #92]	; (8000ef0 <HAL_TIM_MspPostInit+0xb4>)
 8000e94:	f000 fce0 	bl	8001858 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000e98:	e021      	b.n	8000ede <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM15)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a15      	ldr	r2, [pc, #84]	; (8000ef4 <HAL_TIM_MspPostInit+0xb8>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d11c      	bne.n	8000ede <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_TIM_MspPostInit+0xb0>)
 8000ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea8:	4a10      	ldr	r2, [pc, #64]	; (8000eec <HAL_TIM_MspPostInit+0xb0>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_TIM_MspPostInit+0xb0>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000ecc:	230e      	movs	r3, #14
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eda:	f000 fcbd 	bl	8001858 <HAL_GPIO_Init>
}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	; 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40012c00 	.word	0x40012c00
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	48001000 	.word	0x48001000
 8000ef4:	40014000 	.word	0x40014000

08000ef8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_USART2_UART_Init+0x58>)
 8000efe:	4a15      	ldr	r2, [pc, #84]	; (8000f54 <MX_USART2_UART_Init+0x5c>)
 8000f00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <MX_USART2_UART_Init+0x58>)
 8000f04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <MX_USART2_UART_Init+0x58>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_USART2_UART_Init+0x58>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <MX_USART2_UART_Init+0x58>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <MX_USART2_UART_Init+0x58>)
 8000f1e:	220c      	movs	r2, #12
 8000f20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <MX_USART2_UART_Init+0x58>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <MX_USART2_UART_Init+0x58>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <MX_USART2_UART_Init+0x58>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MX_USART2_UART_Init+0x58>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f3a:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_USART2_UART_Init+0x58>)
 8000f3c:	f003 f952 	bl	80041e4 <HAL_UART_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f46:	f7ff fc0f 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200001d0 	.word	0x200001d0
 8000f54:	40004400 	.word	0x40004400

08000f58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b0ac      	sub	sp, #176	; 0xb0
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2288      	movs	r2, #136	; 0x88
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f004 f9c1 	bl	8005300 <memset>
  if(uartHandle->Instance==USART2)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a5f      	ldr	r2, [pc, #380]	; (8001100 <HAL_UART_MspInit+0x1a8>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	f040 80b7 	bne.w	80010f8 <HAL_UART_MspInit+0x1a0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	4618      	mov	r0, r3
 8000f98:	f001 fc72 	bl	8002880 <HAL_RCCEx_PeriphCLKConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fa2:	f7ff fbe1 	bl	8000768 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fa6:	4b57      	ldr	r3, [pc, #348]	; (8001104 <HAL_UART_MspInit+0x1ac>)
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000faa:	4a56      	ldr	r2, [pc, #344]	; (8001104 <HAL_UART_MspInit+0x1ac>)
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fb2:	4b54      	ldr	r3, [pc, #336]	; (8001104 <HAL_UART_MspInit+0x1ac>)
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4b51      	ldr	r3, [pc, #324]	; (8001104 <HAL_UART_MspInit+0x1ac>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	4a50      	ldr	r2, [pc, #320]	; (8001104 <HAL_UART_MspInit+0x1ac>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fca:	4b4e      	ldr	r3, [pc, #312]	; (8001104 <HAL_UART_MspInit+0x1ac>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd6:	4b4b      	ldr	r3, [pc, #300]	; (8001104 <HAL_UART_MspInit+0x1ac>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	4a4a      	ldr	r2, [pc, #296]	; (8001104 <HAL_UART_MspInit+0x1ac>)
 8000fdc:	f043 0308 	orr.w	r3, r3, #8
 8000fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe2:	4b48      	ldr	r3, [pc, #288]	; (8001104 <HAL_UART_MspInit+0x1ac>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	f003 0308 	and.w	r3, r3, #8
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fee:	2308      	movs	r3, #8
 8000ff0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001006:	2307      	movs	r3, #7
 8001008:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001010:	4619      	mov	r1, r3
 8001012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001016:	f000 fc1f 	bl	8001858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800101a:	2320      	movs	r3, #32
 800101c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102c:	2303      	movs	r3, #3
 800102e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001032:	2307      	movs	r3, #7
 8001034:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001038:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800103c:	4619      	mov	r1, r3
 800103e:	4832      	ldr	r0, [pc, #200]	; (8001108 <HAL_UART_MspInit+0x1b0>)
 8001040:	f000 fc0a 	bl	8001858 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001044:	4b31      	ldr	r3, [pc, #196]	; (800110c <HAL_UART_MspInit+0x1b4>)
 8001046:	4a32      	ldr	r2, [pc, #200]	; (8001110 <HAL_UART_MspInit+0x1b8>)
 8001048:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800104a:	4b30      	ldr	r3, [pc, #192]	; (800110c <HAL_UART_MspInit+0x1b4>)
 800104c:	2202      	movs	r2, #2
 800104e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001050:	4b2e      	ldr	r3, [pc, #184]	; (800110c <HAL_UART_MspInit+0x1b4>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001056:	4b2d      	ldr	r3, [pc, #180]	; (800110c <HAL_UART_MspInit+0x1b4>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800105c:	4b2b      	ldr	r3, [pc, #172]	; (800110c <HAL_UART_MspInit+0x1b4>)
 800105e:	2280      	movs	r2, #128	; 0x80
 8001060:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001062:	4b2a      	ldr	r3, [pc, #168]	; (800110c <HAL_UART_MspInit+0x1b4>)
 8001064:	2200      	movs	r2, #0
 8001066:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001068:	4b28      	ldr	r3, [pc, #160]	; (800110c <HAL_UART_MspInit+0x1b4>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800106e:	4b27      	ldr	r3, [pc, #156]	; (800110c <HAL_UART_MspInit+0x1b4>)
 8001070:	2200      	movs	r2, #0
 8001072:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001074:	4b25      	ldr	r3, [pc, #148]	; (800110c <HAL_UART_MspInit+0x1b4>)
 8001076:	2200      	movs	r2, #0
 8001078:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800107a:	4824      	ldr	r0, [pc, #144]	; (800110c <HAL_UART_MspInit+0x1b4>)
 800107c:	f000 fa06 	bl	800148c <HAL_DMA_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 8001086:	f7ff fb6f 	bl	8000768 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a1f      	ldr	r2, [pc, #124]	; (800110c <HAL_UART_MspInit+0x1b4>)
 800108e:	671a      	str	r2, [r3, #112]	; 0x70
 8001090:	4a1e      	ldr	r2, [pc, #120]	; (800110c <HAL_UART_MspInit+0x1b4>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001096:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <HAL_UART_MspInit+0x1bc>)
 8001098:	4a1f      	ldr	r2, [pc, #124]	; (8001118 <HAL_UART_MspInit+0x1c0>)
 800109a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 800109c:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <HAL_UART_MspInit+0x1bc>)
 800109e:	2202      	movs	r2, #2
 80010a0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <HAL_UART_MspInit+0x1bc>)
 80010a4:	2210      	movs	r2, #16
 80010a6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <HAL_UART_MspInit+0x1bc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <HAL_UART_MspInit+0x1bc>)
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <HAL_UART_MspInit+0x1bc>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010ba:	4b16      	ldr	r3, [pc, #88]	; (8001114 <HAL_UART_MspInit+0x1bc>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <HAL_UART_MspInit+0x1bc>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <HAL_UART_MspInit+0x1bc>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80010cc:	4811      	ldr	r0, [pc, #68]	; (8001114 <HAL_UART_MspInit+0x1bc>)
 80010ce:	f000 f9dd 	bl	800148c <HAL_DMA_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <HAL_UART_MspInit+0x184>
    {
      Error_Handler();
 80010d8:	f7ff fb46 	bl	8000768 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <HAL_UART_MspInit+0x1bc>)
 80010e0:	66da      	str	r2, [r3, #108]	; 0x6c
 80010e2:	4a0c      	ldr	r2, [pc, #48]	; (8001114 <HAL_UART_MspInit+0x1bc>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2100      	movs	r1, #0
 80010ec:	2026      	movs	r0, #38	; 0x26
 80010ee:	f000 f996 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010f2:	2026      	movs	r0, #38	; 0x26
 80010f4:	f000 f9af 	bl	8001456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010f8:	bf00      	nop
 80010fa:	37b0      	adds	r7, #176	; 0xb0
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40004400 	.word	0x40004400
 8001104:	40021000 	.word	0x40021000
 8001108:	48000c00 	.word	0x48000c00
 800110c:	20000254 	.word	0x20000254
 8001110:	4002006c 	.word	0x4002006c
 8001114:	2000029c 	.word	0x2000029c
 8001118:	40020080 	.word	0x40020080

0800111c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800111c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001154 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001120:	f7ff fbec 	bl	80008fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001124:	480c      	ldr	r0, [pc, #48]	; (8001158 <LoopForever+0x6>)
  ldr r1, =_edata
 8001126:	490d      	ldr	r1, [pc, #52]	; (800115c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <LoopForever+0xe>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <LoopForever+0x12>)
  ldr r4, =_ebss
 800113c:	4c0a      	ldr	r4, [pc, #40]	; (8001168 <LoopForever+0x16>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800114a:	f004 f8b5 	bl	80052b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800114e:	f7ff fa9b 	bl	8000688 <main>

08001152 <LoopForever>:

LoopForever:
    b LoopForever
 8001152:	e7fe      	b.n	8001152 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001154:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800115c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001160:	08005ca0 	.word	0x08005ca0
  ldr r2, =_sbss
 8001164:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001168:	200002f8 	.word	0x200002f8

0800116c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800116c:	e7fe      	b.n	800116c <ADC1_2_IRQHandler>
	...

08001170 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <HAL_Init+0x3c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a0b      	ldr	r2, [pc, #44]	; (80011ac <HAL_Init+0x3c>)
 8001180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001184:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001186:	2003      	movs	r0, #3
 8001188:	f000 f93e 	bl	8001408 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800118c:	2000      	movs	r0, #0
 800118e:	f000 f80f 	bl	80011b0 <HAL_InitTick>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	71fb      	strb	r3, [r7, #7]
 800119c:	e001      	b.n	80011a2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800119e:	f7ff fae9 	bl	8000774 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011a2:	79fb      	ldrb	r3, [r7, #7]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40022000 	.word	0x40022000

080011b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <HAL_InitTick+0x6c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d023      	beq.n	800120c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <HAL_InitTick+0x70>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <HAL_InitTick+0x6c>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f949 	bl	8001472 <HAL_SYSTICK_Config>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10f      	bne.n	8001206 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d809      	bhi.n	8001200 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f000 f913 	bl	800141e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011f8:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <HAL_InitTick+0x74>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e007      	b.n	8001210 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	e004      	b.n	8001210 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	73fb      	strb	r3, [r7, #15]
 800120a:	e001      	b.n	8001210 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000008 	.word	0x20000008
 8001220:	20000000 	.word	0x20000000
 8001224:	20000004 	.word	0x20000004

08001228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_IncTick+0x20>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_IncTick+0x24>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_IncTick+0x24>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000008 	.word	0x20000008
 800124c:	200002e4 	.word	0x200002e4

08001250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <HAL_GetTick+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	200002e4 	.word	0x200002e4

08001268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129a:	4a04      	ldr	r2, [pc, #16]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60d3      	str	r3, [r2, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	db0b      	blt.n	80012f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	f003 021f 	and.w	r2, r3, #31
 80012e4:	4907      	ldr	r1, [pc, #28]	; (8001304 <__NVIC_EnableIRQ+0x38>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	2001      	movs	r0, #1
 80012ee:	fa00 f202 	lsl.w	r2, r0, r2
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100

08001308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db0a      	blt.n	8001332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	490c      	ldr	r1, [pc, #48]	; (8001354 <__NVIC_SetPriority+0x4c>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	440b      	add	r3, r1
 800132c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001330:	e00a      	b.n	8001348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4908      	ldr	r1, [pc, #32]	; (8001358 <__NVIC_SetPriority+0x50>)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	3b04      	subs	r3, #4
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	440b      	add	r3, r1
 8001346:	761a      	strb	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f1c3 0307 	rsb	r3, r3, #7
 8001376:	2b04      	cmp	r3, #4
 8001378:	bf28      	it	cs
 800137a:	2304      	movcs	r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3304      	adds	r3, #4
 8001382:	2b06      	cmp	r3, #6
 8001384:	d902      	bls.n	800138c <NVIC_EncodePriority+0x30>
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3b03      	subs	r3, #3
 800138a:	e000      	b.n	800138e <NVIC_EncodePriority+0x32>
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	f04f 32ff 	mov.w	r2, #4294967295
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	401a      	ands	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	4313      	orrs	r3, r2
         );
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d4:	d301      	bcc.n	80013da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00f      	b.n	80013fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <SysTick_Config+0x40>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e2:	210f      	movs	r1, #15
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	f7ff ff8e 	bl	8001308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <SysTick_Config+0x40>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <SysTick_Config+0x40>)
 80013f4:	2207      	movs	r2, #7
 80013f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	e000e010 	.word	0xe000e010

08001408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff29 	bl	8001268 <__NVIC_SetPriorityGrouping>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001430:	f7ff ff3e 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 8001434:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	6978      	ldr	r0, [r7, #20]
 800143c:	f7ff ff8e 	bl	800135c <NVIC_EncodePriority>
 8001440:	4602      	mov	r2, r0
 8001442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff5d 	bl	8001308 <__NVIC_SetPriority>
}
 800144e:	bf00      	nop
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff31 	bl	80012cc <__NVIC_EnableIRQ>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ffa2 	bl	80013c4 <SysTick_Config>
 8001480:	4603      	mov	r3, r0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e098      	b.n	80015d0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b4d      	ldr	r3, [pc, #308]	; (80015dc <HAL_DMA_Init+0x150>)
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d80f      	bhi.n	80014ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b4b      	ldr	r3, [pc, #300]	; (80015e0 <HAL_DMA_Init+0x154>)
 80014b2:	4413      	add	r3, r2
 80014b4:	4a4b      	ldr	r2, [pc, #300]	; (80015e4 <HAL_DMA_Init+0x158>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	091b      	lsrs	r3, r3, #4
 80014bc:	009a      	lsls	r2, r3, #2
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a48      	ldr	r2, [pc, #288]	; (80015e8 <HAL_DMA_Init+0x15c>)
 80014c6:	641a      	str	r2, [r3, #64]	; 0x40
 80014c8:	e00e      	b.n	80014e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b46      	ldr	r3, [pc, #280]	; (80015ec <HAL_DMA_Init+0x160>)
 80014d2:	4413      	add	r3, r2
 80014d4:	4a43      	ldr	r2, [pc, #268]	; (80015e4 <HAL_DMA_Init+0x158>)
 80014d6:	fba2 2303 	umull	r2, r3, r2, r3
 80014da:	091b      	lsrs	r3, r3, #4
 80014dc:	009a      	lsls	r2, r3, #2
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a42      	ldr	r2, [pc, #264]	; (80015f0 <HAL_DMA_Init+0x164>)
 80014e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2202      	movs	r2, #2
 80014ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80014fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001502:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800150c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001518:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001524:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	4313      	orrs	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001542:	d039      	beq.n	80015b8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	4a27      	ldr	r2, [pc, #156]	; (80015e8 <HAL_DMA_Init+0x15c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d11a      	bne.n	8001584 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800154e:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <HAL_DMA_Init+0x168>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	f003 031c 	and.w	r3, r3, #28
 800155a:	210f      	movs	r1, #15
 800155c:	fa01 f303 	lsl.w	r3, r1, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	4924      	ldr	r1, [pc, #144]	; (80015f4 <HAL_DMA_Init+0x168>)
 8001564:	4013      	ands	r3, r2
 8001566:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001568:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <HAL_DMA_Init+0x168>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6859      	ldr	r1, [r3, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001574:	f003 031c 	and.w	r3, r3, #28
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	491d      	ldr	r1, [pc, #116]	; (80015f4 <HAL_DMA_Init+0x168>)
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]
 8001582:	e019      	b.n	80015b8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001584:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <HAL_DMA_Init+0x16c>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158c:	f003 031c 	and.w	r3, r3, #28
 8001590:	210f      	movs	r1, #15
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	4917      	ldr	r1, [pc, #92]	; (80015f8 <HAL_DMA_Init+0x16c>)
 800159a:	4013      	ands	r3, r2
 800159c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <HAL_DMA_Init+0x16c>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6859      	ldr	r1, [r3, #4]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f003 031c 	and.w	r3, r3, #28
 80015ae:	fa01 f303 	lsl.w	r3, r1, r3
 80015b2:	4911      	ldr	r1, [pc, #68]	; (80015f8 <HAL_DMA_Init+0x16c>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	40020407 	.word	0x40020407
 80015e0:	bffdfff8 	.word	0xbffdfff8
 80015e4:	cccccccd 	.word	0xcccccccd
 80015e8:	40020000 	.word	0x40020000
 80015ec:	bffdfbf8 	.word	0xbffdfbf8
 80015f0:	40020400 	.word	0x40020400
 80015f4:	400200a8 	.word	0x400200a8
 80015f8:	400204a8 	.word	0x400204a8

080015fc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d008      	beq.n	8001626 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2204      	movs	r2, #4
 8001618:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e022      	b.n	800166c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 020e 	bic.w	r2, r2, #14
 8001634:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0201 	bic.w	r2, r2, #1
 8001644:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f003 021c 	and.w	r2, r3, #28
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	2101      	movs	r1, #1
 8001654:	fa01 f202 	lsl.w	r2, r1, r2
 8001658:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800166a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800166c:	4618      	mov	r0, r3
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d005      	beq.n	800169c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2204      	movs	r2, #4
 8001694:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	73fb      	strb	r3, [r7, #15]
 800169a:	e029      	b.n	80016f0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 020e 	bic.w	r2, r2, #14
 80016aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0201 	bic.w	r2, r2, #1
 80016ba:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c0:	f003 021c 	and.w	r2, r3, #28
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	2101      	movs	r1, #1
 80016ca:	fa01 f202 	lsl.w	r2, r1, r2
 80016ce:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	4798      	blx	r3
    }
  }
  return status;
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f003 031c 	and.w	r3, r3, #28
 800171a:	2204      	movs	r2, #4
 800171c:	409a      	lsls	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4013      	ands	r3, r2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d026      	beq.n	8001774 <HAL_DMA_IRQHandler+0x7a>
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	d021      	beq.n	8001774 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0320 	and.w	r3, r3, #32
 800173a:	2b00      	cmp	r3, #0
 800173c:	d107      	bne.n	800174e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0204 	bic.w	r2, r2, #4
 800174c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	f003 021c 	and.w	r2, r3, #28
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	2104      	movs	r1, #4
 800175c:	fa01 f202 	lsl.w	r2, r1, r2
 8001760:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	2b00      	cmp	r3, #0
 8001768:	d071      	beq.n	800184e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001772:	e06c      	b.n	800184e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001778:	f003 031c 	and.w	r3, r3, #28
 800177c:	2202      	movs	r2, #2
 800177e:	409a      	lsls	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d02e      	beq.n	80017e6 <HAL_DMA_IRQHandler+0xec>
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d029      	beq.n	80017e6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0320 	and.w	r3, r3, #32
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10b      	bne.n	80017b8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 020a 	bic.w	r2, r2, #10
 80017ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017bc:	f003 021c 	and.w	r2, r3, #28
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	2102      	movs	r1, #2
 80017c6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d038      	beq.n	800184e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80017e4:	e033      	b.n	800184e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f003 031c 	and.w	r3, r3, #28
 80017ee:	2208      	movs	r2, #8
 80017f0:	409a      	lsls	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d02a      	beq.n	8001850 <HAL_DMA_IRQHandler+0x156>
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d025      	beq.n	8001850 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 020e 	bic.w	r2, r2, #14
 8001812:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001818:	f003 021c 	and.w	r2, r3, #28
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	2101      	movs	r1, #1
 8001822:	fa01 f202 	lsl.w	r2, r1, r2
 8001826:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001842:	2b00      	cmp	r3, #0
 8001844:	d004      	beq.n	8001850 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800184e:	bf00      	nop
 8001850:	bf00      	nop
}
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001858:	b480      	push	{r7}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001866:	e17f      	b.n	8001b68 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	2101      	movs	r1, #1
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	fa01 f303 	lsl.w	r3, r1, r3
 8001874:	4013      	ands	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 8171 	beq.w	8001b62 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	2b01      	cmp	r3, #1
 800188a:	d005      	beq.n	8001898 <HAL_GPIO_Init+0x40>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d130      	bne.n	80018fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	2203      	movs	r2, #3
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ce:	2201      	movs	r2, #1
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	091b      	lsrs	r3, r3, #4
 80018e4:	f003 0201 	and.w	r2, r3, #1
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	2b03      	cmp	r3, #3
 8001904:	d118      	bne.n	8001938 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800190c:	2201      	movs	r2, #1
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	08db      	lsrs	r3, r3, #3
 8001922:	f003 0201 	and.w	r2, r3, #1
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4313      	orrs	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	2b03      	cmp	r3, #3
 8001942:	d017      	beq.n	8001974 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	2203      	movs	r2, #3
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d123      	bne.n	80019c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	08da      	lsrs	r2, r3, #3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3208      	adds	r2, #8
 8001988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	220f      	movs	r2, #15
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	691a      	ldr	r2, [r3, #16]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	08da      	lsrs	r2, r3, #3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3208      	adds	r2, #8
 80019c2:	6939      	ldr	r1, [r7, #16]
 80019c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	2203      	movs	r2, #3
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0203 	and.w	r2, r3, #3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80ac 	beq.w	8001b62 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	4b5f      	ldr	r3, [pc, #380]	; (8001b88 <HAL_GPIO_Init+0x330>)
 8001a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0e:	4a5e      	ldr	r2, [pc, #376]	; (8001b88 <HAL_GPIO_Init+0x330>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6613      	str	r3, [r2, #96]	; 0x60
 8001a16:	4b5c      	ldr	r3, [pc, #368]	; (8001b88 <HAL_GPIO_Init+0x330>)
 8001a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a22:	4a5a      	ldr	r2, [pc, #360]	; (8001b8c <HAL_GPIO_Init+0x334>)
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	089b      	lsrs	r3, r3, #2
 8001a28:	3302      	adds	r3, #2
 8001a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	220f      	movs	r2, #15
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a4c:	d025      	beq.n	8001a9a <HAL_GPIO_Init+0x242>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4f      	ldr	r2, [pc, #316]	; (8001b90 <HAL_GPIO_Init+0x338>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d01f      	beq.n	8001a96 <HAL_GPIO_Init+0x23e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4e      	ldr	r2, [pc, #312]	; (8001b94 <HAL_GPIO_Init+0x33c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d019      	beq.n	8001a92 <HAL_GPIO_Init+0x23a>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4d      	ldr	r2, [pc, #308]	; (8001b98 <HAL_GPIO_Init+0x340>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d013      	beq.n	8001a8e <HAL_GPIO_Init+0x236>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4c      	ldr	r2, [pc, #304]	; (8001b9c <HAL_GPIO_Init+0x344>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d00d      	beq.n	8001a8a <HAL_GPIO_Init+0x232>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4b      	ldr	r2, [pc, #300]	; (8001ba0 <HAL_GPIO_Init+0x348>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d007      	beq.n	8001a86 <HAL_GPIO_Init+0x22e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a4a      	ldr	r2, [pc, #296]	; (8001ba4 <HAL_GPIO_Init+0x34c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d101      	bne.n	8001a82 <HAL_GPIO_Init+0x22a>
 8001a7e:	2306      	movs	r3, #6
 8001a80:	e00c      	b.n	8001a9c <HAL_GPIO_Init+0x244>
 8001a82:	2307      	movs	r3, #7
 8001a84:	e00a      	b.n	8001a9c <HAL_GPIO_Init+0x244>
 8001a86:	2305      	movs	r3, #5
 8001a88:	e008      	b.n	8001a9c <HAL_GPIO_Init+0x244>
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	e006      	b.n	8001a9c <HAL_GPIO_Init+0x244>
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e004      	b.n	8001a9c <HAL_GPIO_Init+0x244>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e002      	b.n	8001a9c <HAL_GPIO_Init+0x244>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <HAL_GPIO_Init+0x244>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	f002 0203 	and.w	r2, r2, #3
 8001aa2:	0092      	lsls	r2, r2, #2
 8001aa4:	4093      	lsls	r3, r2
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001aac:	4937      	ldr	r1, [pc, #220]	; (8001b8c <HAL_GPIO_Init+0x334>)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001aba:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <HAL_GPIO_Init+0x350>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ade:	4a32      	ldr	r2, [pc, #200]	; (8001ba8 <HAL_GPIO_Init+0x350>)
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ae4:	4b30      	ldr	r3, [pc, #192]	; (8001ba8 <HAL_GPIO_Init+0x350>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b08:	4a27      	ldr	r2, [pc, #156]	; (8001ba8 <HAL_GPIO_Init+0x350>)
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b0e:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <HAL_GPIO_Init+0x350>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b32:	4a1d      	ldr	r2, [pc, #116]	; (8001ba8 <HAL_GPIO_Init+0x350>)
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b38:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <HAL_GPIO_Init+0x350>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b5c:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <HAL_GPIO_Init+0x350>)
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	3301      	adds	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f47f ae78 	bne.w	8001868 <HAL_GPIO_Init+0x10>
  }
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	371c      	adds	r7, #28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40010000 	.word	0x40010000
 8001b90:	48000400 	.word	0x48000400
 8001b94:	48000800 	.word	0x48000800
 8001b98:	48000c00 	.word	0x48000c00
 8001b9c:	48001000 	.word	0x48001000
 8001ba0:	48001400 	.word	0x48001400
 8001ba4:	48001800 	.word	0x48001800
 8001ba8:	40010400 	.word	0x40010400

08001bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bbc:	787b      	ldrb	r3, [r7, #1]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bc8:	e002      	b.n	8001bd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bca:	887a      	ldrh	r2, [r7, #2]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40007000 	.word	0x40007000

08001bf8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c06:	d130      	bne.n	8001c6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c08:	4b23      	ldr	r3, [pc, #140]	; (8001c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c14:	d038      	beq.n	8001c88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c16:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c1e:	4a1e      	ldr	r2, [pc, #120]	; (8001c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c26:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2232      	movs	r2, #50	; 0x32
 8001c2c:	fb02 f303 	mul.w	r3, r2, r3
 8001c30:	4a1b      	ldr	r2, [pc, #108]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c32:	fba2 2303 	umull	r2, r3, r2, r3
 8001c36:	0c9b      	lsrs	r3, r3, #18
 8001c38:	3301      	adds	r3, #1
 8001c3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c3c:	e002      	b.n	8001c44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c44:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c50:	d102      	bne.n	8001c58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1f2      	bne.n	8001c3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c64:	d110      	bne.n	8001c88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e00f      	b.n	8001c8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c76:	d007      	beq.n	8001c88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c78:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c80:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40007000 	.word	0x40007000
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	431bde83 	.word	0x431bde83

08001ca4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e3d8      	b.n	8002468 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb6:	4b97      	ldr	r3, [pc, #604]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cc0:	4b94      	ldr	r3, [pc, #592]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0310 	and.w	r3, r3, #16
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 80e4 	beq.w	8001ea0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d007      	beq.n	8001cee <HAL_RCC_OscConfig+0x4a>
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	2b0c      	cmp	r3, #12
 8001ce2:	f040 808b 	bne.w	8001dfc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	f040 8087 	bne.w	8001dfc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cee:	4b89      	ldr	r3, [pc, #548]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <HAL_RCC_OscConfig+0x62>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e3b0      	b.n	8002468 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1a      	ldr	r2, [r3, #32]
 8001d0a:	4b82      	ldr	r3, [pc, #520]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d004      	beq.n	8001d20 <HAL_RCC_OscConfig+0x7c>
 8001d16:	4b7f      	ldr	r3, [pc, #508]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d1e:	e005      	b.n	8001d2c <HAL_RCC_OscConfig+0x88>
 8001d20:	4b7c      	ldr	r3, [pc, #496]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d26:	091b      	lsrs	r3, r3, #4
 8001d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d223      	bcs.n	8001d78 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f000 fd43 	bl	80027c0 <RCC_SetFlashLatencyFromMSIRange>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e391      	b.n	8002468 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d44:	4b73      	ldr	r3, [pc, #460]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a72      	ldr	r2, [pc, #456]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001d4a:	f043 0308 	orr.w	r3, r3, #8
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	4b70      	ldr	r3, [pc, #448]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	496d      	ldr	r1, [pc, #436]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d62:	4b6c      	ldr	r3, [pc, #432]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	021b      	lsls	r3, r3, #8
 8001d70:	4968      	ldr	r1, [pc, #416]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	604b      	str	r3, [r1, #4]
 8001d76:	e025      	b.n	8001dc4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d78:	4b66      	ldr	r3, [pc, #408]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a65      	ldr	r2, [pc, #404]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001d7e:	f043 0308 	orr.w	r3, r3, #8
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	4b63      	ldr	r3, [pc, #396]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4960      	ldr	r1, [pc, #384]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d96:	4b5f      	ldr	r3, [pc, #380]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	021b      	lsls	r3, r3, #8
 8001da4:	495b      	ldr	r1, [pc, #364]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d109      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 fd03 	bl	80027c0 <RCC_SetFlashLatencyFromMSIRange>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e351      	b.n	8002468 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dc4:	f000 fc38 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	4b52      	ldr	r3, [pc, #328]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	091b      	lsrs	r3, r3, #4
 8001dd0:	f003 030f 	and.w	r3, r3, #15
 8001dd4:	4950      	ldr	r1, [pc, #320]	; (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001dd6:	5ccb      	ldrb	r3, [r1, r3]
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8001de0:	4a4e      	ldr	r2, [pc, #312]	; (8001f1c <HAL_RCC_OscConfig+0x278>)
 8001de2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <HAL_RCC_OscConfig+0x27c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff f9e1 	bl	80011b0 <HAL_InitTick>
 8001dee:	4603      	mov	r3, r0
 8001df0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d052      	beq.n	8001e9e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	e335      	b.n	8002468 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d032      	beq.n	8001e6a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e04:	4b43      	ldr	r3, [pc, #268]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a42      	ldr	r2, [pc, #264]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e10:	f7ff fa1e 	bl	8001250 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e18:	f7ff fa1a 	bl	8001250 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e31e      	b.n	8002468 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e2a:	4b3a      	ldr	r3, [pc, #232]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e36:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a36      	ldr	r2, [pc, #216]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001e3c:	f043 0308 	orr.w	r3, r3, #8
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	4b34      	ldr	r3, [pc, #208]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	4931      	ldr	r1, [pc, #196]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e54:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	021b      	lsls	r3, r3, #8
 8001e62:	492c      	ldr	r1, [pc, #176]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	604b      	str	r3, [r1, #4]
 8001e68:	e01a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e6a:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a29      	ldr	r2, [pc, #164]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001e70:	f023 0301 	bic.w	r3, r3, #1
 8001e74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e76:	f7ff f9eb 	bl	8001250 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e7e:	f7ff f9e7 	bl	8001250 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e2eb      	b.n	8002468 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e90:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1f0      	bne.n	8001e7e <HAL_RCC_OscConfig+0x1da>
 8001e9c:	e000      	b.n	8001ea0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e9e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d074      	beq.n	8001f96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d005      	beq.n	8001ebe <HAL_RCC_OscConfig+0x21a>
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	2b0c      	cmp	r3, #12
 8001eb6:	d10e      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d10b      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d064      	beq.n	8001f94 <HAL_RCC_OscConfig+0x2f0>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d160      	bne.n	8001f94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e2c8      	b.n	8002468 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ede:	d106      	bne.n	8001eee <HAL_RCC_OscConfig+0x24a>
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0b      	ldr	r2, [pc, #44]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	e026      	b.n	8001f3c <HAL_RCC_OscConfig+0x298>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef6:	d115      	bne.n	8001f24 <HAL_RCC_OscConfig+0x280>
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001efe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	4b03      	ldr	r3, [pc, #12]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a02      	ldr	r2, [pc, #8]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	e014      	b.n	8001f3c <HAL_RCC_OscConfig+0x298>
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	08005c14 	.word	0x08005c14
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	20000004 	.word	0x20000004
 8001f24:	4ba0      	ldr	r3, [pc, #640]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a9f      	ldr	r2, [pc, #636]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 8001f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	4b9d      	ldr	r3, [pc, #628]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a9c      	ldr	r2, [pc, #624]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 8001f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d013      	beq.n	8001f6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f44:	f7ff f984 	bl	8001250 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f4c:	f7ff f980 	bl	8001250 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b64      	cmp	r3, #100	; 0x64
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e284      	b.n	8002468 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f5e:	4b92      	ldr	r3, [pc, #584]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCC_OscConfig+0x2a8>
 8001f6a:	e014      	b.n	8001f96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6c:	f7ff f970 	bl	8001250 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f74:	f7ff f96c 	bl	8001250 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b64      	cmp	r3, #100	; 0x64
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e270      	b.n	8002468 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f86:	4b88      	ldr	r3, [pc, #544]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0x2d0>
 8001f92:	e000      	b.n	8001f96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d060      	beq.n	8002064 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d005      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x310>
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	2b0c      	cmp	r3, #12
 8001fac:	d119      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d116      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fb4:	4b7c      	ldr	r3, [pc, #496]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_OscConfig+0x328>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e24d      	b.n	8002468 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fcc:	4b76      	ldr	r3, [pc, #472]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	061b      	lsls	r3, r3, #24
 8001fda:	4973      	ldr	r1, [pc, #460]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fe0:	e040      	b.n	8002064 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d023      	beq.n	8002032 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fea:	4b6f      	ldr	r3, [pc, #444]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a6e      	ldr	r2, [pc, #440]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 8001ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff6:	f7ff f92b 	bl	8001250 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ffe:	f7ff f927 	bl	8001250 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e22b      	b.n	8002468 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002010:	4b65      	ldr	r3, [pc, #404]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201c:	4b62      	ldr	r3, [pc, #392]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	061b      	lsls	r3, r3, #24
 800202a:	495f      	ldr	r1, [pc, #380]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
 8002030:	e018      	b.n	8002064 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002032:	4b5d      	ldr	r3, [pc, #372]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a5c      	ldr	r2, [pc, #368]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 8002038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800203c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203e:	f7ff f907 	bl	8001250 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002046:	f7ff f903 	bl	8001250 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e207      	b.n	8002468 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002058:	4b53      	ldr	r3, [pc, #332]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1f0      	bne.n	8002046 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	2b00      	cmp	r3, #0
 800206e:	d03c      	beq.n	80020ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d01c      	beq.n	80020b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002078:	4b4b      	ldr	r3, [pc, #300]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 800207a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800207e:	4a4a      	ldr	r2, [pc, #296]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002088:	f7ff f8e2 	bl	8001250 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002090:	f7ff f8de 	bl	8001250 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e1e2      	b.n	8002468 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020a2:	4b41      	ldr	r3, [pc, #260]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 80020a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0ef      	beq.n	8002090 <HAL_RCC_OscConfig+0x3ec>
 80020b0:	e01b      	b.n	80020ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b2:	4b3d      	ldr	r3, [pc, #244]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 80020b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020b8:	4a3b      	ldr	r2, [pc, #236]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 80020ba:	f023 0301 	bic.w	r3, r3, #1
 80020be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c2:	f7ff f8c5 	bl	8001250 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ca:	f7ff f8c1 	bl	8001250 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e1c5      	b.n	8002468 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020dc:	4b32      	ldr	r3, [pc, #200]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 80020de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1ef      	bne.n	80020ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 80a6 	beq.w	8002244 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f8:	2300      	movs	r3, #0
 80020fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020fc:	4b2a      	ldr	r3, [pc, #168]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10d      	bne.n	8002124 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002108:	4b27      	ldr	r3, [pc, #156]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210c:	4a26      	ldr	r2, [pc, #152]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 800210e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002112:	6593      	str	r3, [r2, #88]	; 0x58
 8002114:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 8002116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002120:	2301      	movs	r3, #1
 8002122:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002124:	4b21      	ldr	r3, [pc, #132]	; (80021ac <HAL_RCC_OscConfig+0x508>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d118      	bne.n	8002162 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002130:	4b1e      	ldr	r3, [pc, #120]	; (80021ac <HAL_RCC_OscConfig+0x508>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <HAL_RCC_OscConfig+0x508>)
 8002136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213c:	f7ff f888 	bl	8001250 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002144:	f7ff f884 	bl	8001250 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e188      	b.n	8002468 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002156:	4b15      	ldr	r3, [pc, #84]	; (80021ac <HAL_RCC_OscConfig+0x508>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d108      	bne.n	800217c <HAL_RCC_OscConfig+0x4d8>
 800216a:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 800216c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002170:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800217a:	e029      	b.n	80021d0 <HAL_RCC_OscConfig+0x52c>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b05      	cmp	r3, #5
 8002182:	d115      	bne.n	80021b0 <HAL_RCC_OscConfig+0x50c>
 8002184:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218a:	4a07      	ldr	r2, [pc, #28]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 800218c:	f043 0304 	orr.w	r3, r3, #4
 8002190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002194:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219a:	4a03      	ldr	r2, [pc, #12]	; (80021a8 <HAL_RCC_OscConfig+0x504>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021a4:	e014      	b.n	80021d0 <HAL_RCC_OscConfig+0x52c>
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40007000 	.word	0x40007000
 80021b0:	4b91      	ldr	r3, [pc, #580]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 80021b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b6:	4a90      	ldr	r2, [pc, #576]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 80021b8:	f023 0301 	bic.w	r3, r3, #1
 80021bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021c0:	4b8d      	ldr	r3, [pc, #564]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 80021c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c6:	4a8c      	ldr	r2, [pc, #560]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 80021c8:	f023 0304 	bic.w	r3, r3, #4
 80021cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d016      	beq.n	8002206 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d8:	f7ff f83a 	bl	8001250 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021de:	e00a      	b.n	80021f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e0:	f7ff f836 	bl	8001250 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e138      	b.n	8002468 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f6:	4b80      	ldr	r3, [pc, #512]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 80021f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0ed      	beq.n	80021e0 <HAL_RCC_OscConfig+0x53c>
 8002204:	e015      	b.n	8002232 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002206:	f7ff f823 	bl	8001250 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800220c:	e00a      	b.n	8002224 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220e:	f7ff f81f 	bl	8001250 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f241 3288 	movw	r2, #5000	; 0x1388
 800221c:	4293      	cmp	r3, r2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e121      	b.n	8002468 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002224:	4b74      	ldr	r3, [pc, #464]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1ed      	bne.n	800220e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002232:	7ffb      	ldrb	r3, [r7, #31]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d105      	bne.n	8002244 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002238:	4b6f      	ldr	r3, [pc, #444]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 800223a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223c:	4a6e      	ldr	r2, [pc, #440]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 800223e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002242:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 810c 	beq.w	8002466 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002252:	2b02      	cmp	r3, #2
 8002254:	f040 80d4 	bne.w	8002400 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002258:	4b67      	ldr	r3, [pc, #412]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f003 0203 	and.w	r2, r3, #3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002268:	429a      	cmp	r2, r3
 800226a:	d130      	bne.n	80022ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	3b01      	subs	r3, #1
 8002278:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d127      	bne.n	80022ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002288:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d11f      	bne.n	80022ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002298:	2a07      	cmp	r2, #7
 800229a:	bf14      	ite	ne
 800229c:	2201      	movne	r2, #1
 800229e:	2200      	moveq	r2, #0
 80022a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d113      	bne.n	80022ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b0:	085b      	lsrs	r3, r3, #1
 80022b2:	3b01      	subs	r3, #1
 80022b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d109      	bne.n	80022ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	085b      	lsrs	r3, r3, #1
 80022c6:	3b01      	subs	r3, #1
 80022c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d06e      	beq.n	80023ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	2b0c      	cmp	r3, #12
 80022d2:	d069      	beq.n	80023a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022d4:	4b48      	ldr	r3, [pc, #288]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d105      	bne.n	80022ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022e0:	4b45      	ldr	r3, [pc, #276]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e0bb      	b.n	8002468 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022f0:	4b41      	ldr	r3, [pc, #260]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a40      	ldr	r2, [pc, #256]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 80022f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022fc:	f7fe ffa8 	bl	8001250 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002304:	f7fe ffa4 	bl	8001250 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e0a8      	b.n	8002468 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002316:	4b38      	ldr	r3, [pc, #224]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002322:	4b35      	ldr	r3, [pc, #212]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	4b35      	ldr	r3, [pc, #212]	; (80023fc <HAL_RCC_OscConfig+0x758>)
 8002328:	4013      	ands	r3, r2
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002332:	3a01      	subs	r2, #1
 8002334:	0112      	lsls	r2, r2, #4
 8002336:	4311      	orrs	r1, r2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800233c:	0212      	lsls	r2, r2, #8
 800233e:	4311      	orrs	r1, r2
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002344:	0852      	lsrs	r2, r2, #1
 8002346:	3a01      	subs	r2, #1
 8002348:	0552      	lsls	r2, r2, #21
 800234a:	4311      	orrs	r1, r2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002350:	0852      	lsrs	r2, r2, #1
 8002352:	3a01      	subs	r2, #1
 8002354:	0652      	lsls	r2, r2, #25
 8002356:	4311      	orrs	r1, r2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800235c:	0912      	lsrs	r2, r2, #4
 800235e:	0452      	lsls	r2, r2, #17
 8002360:	430a      	orrs	r2, r1
 8002362:	4925      	ldr	r1, [pc, #148]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 8002364:	4313      	orrs	r3, r2
 8002366:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002368:	4b23      	ldr	r3, [pc, #140]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a22      	ldr	r2, [pc, #136]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 800236e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002372:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002374:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4a1f      	ldr	r2, [pc, #124]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 800237a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800237e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002380:	f7fe ff66 	bl	8001250 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002388:	f7fe ff62 	bl	8001250 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e066      	b.n	8002468 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800239a:	4b17      	ldr	r3, [pc, #92]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023a6:	e05e      	b.n	8002466 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e05d      	b.n	8002468 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ac:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d156      	bne.n	8002466 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a0e      	ldr	r2, [pc, #56]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 80023be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4a0b      	ldr	r2, [pc, #44]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 80023ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023d0:	f7fe ff3e 	bl	8001250 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d8:	f7fe ff3a 	bl	8001250 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e03e      	b.n	8002468 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ea:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <HAL_RCC_OscConfig+0x754>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x734>
 80023f6:	e036      	b.n	8002466 <HAL_RCC_OscConfig+0x7c2>
 80023f8:	40021000 	.word	0x40021000
 80023fc:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2b0c      	cmp	r3, #12
 8002404:	d02d      	beq.n	8002462 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002406:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <HAL_RCC_OscConfig+0x7cc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a19      	ldr	r2, [pc, #100]	; (8002470 <HAL_RCC_OscConfig+0x7cc>)
 800240c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002410:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002412:	4b17      	ldr	r3, [pc, #92]	; (8002470 <HAL_RCC_OscConfig+0x7cc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d105      	bne.n	800242a <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800241e:	4b14      	ldr	r3, [pc, #80]	; (8002470 <HAL_RCC_OscConfig+0x7cc>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	4a13      	ldr	r2, [pc, #76]	; (8002470 <HAL_RCC_OscConfig+0x7cc>)
 8002424:	f023 0303 	bic.w	r3, r3, #3
 8002428:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800242a:	4b11      	ldr	r3, [pc, #68]	; (8002470 <HAL_RCC_OscConfig+0x7cc>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	4a10      	ldr	r2, [pc, #64]	; (8002470 <HAL_RCC_OscConfig+0x7cc>)
 8002430:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002438:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243a:	f7fe ff09 	bl	8001250 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002442:	f7fe ff05 	bl	8001250 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e009      	b.n	8002468 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_RCC_OscConfig+0x7cc>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f0      	bne.n	8002442 <HAL_RCC_OscConfig+0x79e>
 8002460:	e001      	b.n	8002466 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3720      	adds	r7, #32
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40021000 	.word	0x40021000

08002474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0c8      	b.n	800261a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002488:	4b66      	ldr	r3, [pc, #408]	; (8002624 <HAL_RCC_ClockConfig+0x1b0>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d910      	bls.n	80024b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b63      	ldr	r3, [pc, #396]	; (8002624 <HAL_RCC_ClockConfig+0x1b0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 0207 	bic.w	r2, r3, #7
 800249e:	4961      	ldr	r1, [pc, #388]	; (8002624 <HAL_RCC_ClockConfig+0x1b0>)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b5f      	ldr	r3, [pc, #380]	; (8002624 <HAL_RCC_ClockConfig+0x1b0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0b0      	b.n	800261a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d04c      	beq.n	800255e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d107      	bne.n	80024dc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024cc:	4b56      	ldr	r3, [pc, #344]	; (8002628 <HAL_RCC_ClockConfig+0x1b4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d121      	bne.n	800251c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e09e      	b.n	800261a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d107      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024e4:	4b50      	ldr	r3, [pc, #320]	; (8002628 <HAL_RCC_ClockConfig+0x1b4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d115      	bne.n	800251c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e092      	b.n	800261a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d107      	bne.n	800250c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024fc:	4b4a      	ldr	r3, [pc, #296]	; (8002628 <HAL_RCC_ClockConfig+0x1b4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d109      	bne.n	800251c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e086      	b.n	800261a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800250c:	4b46      	ldr	r3, [pc, #280]	; (8002628 <HAL_RCC_ClockConfig+0x1b4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e07e      	b.n	800261a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800251c:	4b42      	ldr	r3, [pc, #264]	; (8002628 <HAL_RCC_ClockConfig+0x1b4>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f023 0203 	bic.w	r2, r3, #3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	493f      	ldr	r1, [pc, #252]	; (8002628 <HAL_RCC_ClockConfig+0x1b4>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800252e:	f7fe fe8f 	bl	8001250 <HAL_GetTick>
 8002532:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002534:	e00a      	b.n	800254c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002536:	f7fe fe8b 	bl	8001250 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	f241 3288 	movw	r2, #5000	; 0x1388
 8002544:	4293      	cmp	r3, r2
 8002546:	d901      	bls.n	800254c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e066      	b.n	800261a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254c:	4b36      	ldr	r3, [pc, #216]	; (8002628 <HAL_RCC_ClockConfig+0x1b4>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 020c 	and.w	r2, r3, #12
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	429a      	cmp	r2, r3
 800255c:	d1eb      	bne.n	8002536 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d008      	beq.n	800257c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800256a:	4b2f      	ldr	r3, [pc, #188]	; (8002628 <HAL_RCC_ClockConfig+0x1b4>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	492c      	ldr	r1, [pc, #176]	; (8002628 <HAL_RCC_ClockConfig+0x1b4>)
 8002578:	4313      	orrs	r3, r2
 800257a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800257c:	4b29      	ldr	r3, [pc, #164]	; (8002624 <HAL_RCC_ClockConfig+0x1b0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d210      	bcs.n	80025ac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b26      	ldr	r3, [pc, #152]	; (8002624 <HAL_RCC_ClockConfig+0x1b0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 0207 	bic.w	r2, r3, #7
 8002592:	4924      	ldr	r1, [pc, #144]	; (8002624 <HAL_RCC_ClockConfig+0x1b0>)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b22      	ldr	r3, [pc, #136]	; (8002624 <HAL_RCC_ClockConfig+0x1b0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e036      	b.n	800261a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b8:	4b1b      	ldr	r3, [pc, #108]	; (8002628 <HAL_RCC_ClockConfig+0x1b4>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	4918      	ldr	r1, [pc, #96]	; (8002628 <HAL_RCC_ClockConfig+0x1b4>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025d6:	4b14      	ldr	r3, [pc, #80]	; (8002628 <HAL_RCC_ClockConfig+0x1b4>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4910      	ldr	r1, [pc, #64]	; (8002628 <HAL_RCC_ClockConfig+0x1b4>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025ea:	f000 f825 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 80025ee:	4602      	mov	r2, r0
 80025f0:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <HAL_RCC_ClockConfig+0x1b4>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	490c      	ldr	r1, [pc, #48]	; (800262c <HAL_RCC_ClockConfig+0x1b8>)
 80025fc:	5ccb      	ldrb	r3, [r1, r3]
 80025fe:	f003 031f 	and.w	r3, r3, #31
 8002602:	fa22 f303 	lsr.w	r3, r2, r3
 8002606:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe fdce 	bl	80011b0 <HAL_InitTick>
 8002614:	4603      	mov	r3, r0
 8002616:	72fb      	strb	r3, [r7, #11]

  return status;
 8002618:	7afb      	ldrb	r3, [r7, #11]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40022000 	.word	0x40022000
 8002628:	40021000 	.word	0x40021000
 800262c:	08005c14 	.word	0x08005c14
 8002630:	20000000 	.word	0x20000000
 8002634:	20000004 	.word	0x20000004

08002638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
 8002642:	2300      	movs	r3, #0
 8002644:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002646:	4b3e      	ldr	r3, [pc, #248]	; (8002740 <HAL_RCC_GetSysClockFreq+0x108>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002650:	4b3b      	ldr	r3, [pc, #236]	; (8002740 <HAL_RCC_GetSysClockFreq+0x108>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_RCC_GetSysClockFreq+0x34>
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	2b0c      	cmp	r3, #12
 8002664:	d121      	bne.n	80026aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d11e      	bne.n	80026aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800266c:	4b34      	ldr	r3, [pc, #208]	; (8002740 <HAL_RCC_GetSysClockFreq+0x108>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b00      	cmp	r3, #0
 8002676:	d107      	bne.n	8002688 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002678:	4b31      	ldr	r3, [pc, #196]	; (8002740 <HAL_RCC_GetSysClockFreq+0x108>)
 800267a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800267e:	0a1b      	lsrs	r3, r3, #8
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	61fb      	str	r3, [r7, #28]
 8002686:	e005      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002688:	4b2d      	ldr	r3, [pc, #180]	; (8002740 <HAL_RCC_GetSysClockFreq+0x108>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002694:	4a2b      	ldr	r2, [pc, #172]	; (8002744 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10d      	bne.n	80026c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026a8:	e00a      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d102      	bne.n	80026b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026b0:	4b25      	ldr	r3, [pc, #148]	; (8002748 <HAL_RCC_GetSysClockFreq+0x110>)
 80026b2:	61bb      	str	r3, [r7, #24]
 80026b4:	e004      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026bc:	4b23      	ldr	r3, [pc, #140]	; (800274c <HAL_RCC_GetSysClockFreq+0x114>)
 80026be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	2b0c      	cmp	r3, #12
 80026c4:	d134      	bne.n	8002730 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026c6:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <HAL_RCC_GetSysClockFreq+0x108>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d003      	beq.n	80026de <HAL_RCC_GetSysClockFreq+0xa6>
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d003      	beq.n	80026e4 <HAL_RCC_GetSysClockFreq+0xac>
 80026dc:	e005      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026de:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <HAL_RCC_GetSysClockFreq+0x110>)
 80026e0:	617b      	str	r3, [r7, #20]
      break;
 80026e2:	e005      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026e4:	4b19      	ldr	r3, [pc, #100]	; (800274c <HAL_RCC_GetSysClockFreq+0x114>)
 80026e6:	617b      	str	r3, [r7, #20]
      break;
 80026e8:	e002      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	617b      	str	r3, [r7, #20]
      break;
 80026ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026f0:	4b13      	ldr	r3, [pc, #76]	; (8002740 <HAL_RCC_GetSysClockFreq+0x108>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	3301      	adds	r3, #1
 80026fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <HAL_RCC_GetSysClockFreq+0x108>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	0a1b      	lsrs	r3, r3, #8
 8002704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	fb03 f202 	mul.w	r2, r3, r2
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	fbb2 f3f3 	udiv	r3, r2, r3
 8002714:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002716:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <HAL_RCC_GetSysClockFreq+0x108>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	0e5b      	lsrs	r3, r3, #25
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	3301      	adds	r3, #1
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	fbb2 f3f3 	udiv	r3, r2, r3
 800272e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002730:	69bb      	ldr	r3, [r7, #24]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3724      	adds	r7, #36	; 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40021000 	.word	0x40021000
 8002744:	08005c2c 	.word	0x08005c2c
 8002748:	00f42400 	.word	0x00f42400
 800274c:	007a1200 	.word	0x007a1200

08002750 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002754:	4b03      	ldr	r3, [pc, #12]	; (8002764 <HAL_RCC_GetHCLKFreq+0x14>)
 8002756:	681b      	ldr	r3, [r3, #0]
}
 8002758:	4618      	mov	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	20000000 	.word	0x20000000

08002768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800276c:	f7ff fff0 	bl	8002750 <HAL_RCC_GetHCLKFreq>
 8002770:	4602      	mov	r2, r0
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	0a1b      	lsrs	r3, r3, #8
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	4904      	ldr	r1, [pc, #16]	; (8002790 <HAL_RCC_GetPCLK1Freq+0x28>)
 800277e:	5ccb      	ldrb	r3, [r1, r3]
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002788:	4618      	mov	r0, r3
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40021000 	.word	0x40021000
 8002790:	08005c24 	.word	0x08005c24

08002794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002798:	f7ff ffda 	bl	8002750 <HAL_RCC_GetHCLKFreq>
 800279c:	4602      	mov	r2, r0
 800279e:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	0adb      	lsrs	r3, r3, #11
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	4904      	ldr	r1, [pc, #16]	; (80027bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80027aa:	5ccb      	ldrb	r3, [r1, r3]
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40021000 	.word	0x40021000
 80027bc:	08005c24 	.word	0x08005c24

080027c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027c8:	2300      	movs	r3, #0
 80027ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027cc:	4b2a      	ldr	r3, [pc, #168]	; (8002878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027d8:	f7ff fa00 	bl	8001bdc <HAL_PWREx_GetVoltageRange>
 80027dc:	6178      	str	r0, [r7, #20]
 80027de:	e014      	b.n	800280a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027e0:	4b25      	ldr	r3, [pc, #148]	; (8002878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e4:	4a24      	ldr	r2, [pc, #144]	; (8002878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ea:	6593      	str	r3, [r2, #88]	; 0x58
 80027ec:	4b22      	ldr	r3, [pc, #136]	; (8002878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027f8:	f7ff f9f0 	bl	8001bdc <HAL_PWREx_GetVoltageRange>
 80027fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027fe:	4b1e      	ldr	r3, [pc, #120]	; (8002878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002802:	4a1d      	ldr	r2, [pc, #116]	; (8002878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002808:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002810:	d10b      	bne.n	800282a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b80      	cmp	r3, #128	; 0x80
 8002816:	d919      	bls.n	800284c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2ba0      	cmp	r3, #160	; 0xa0
 800281c:	d902      	bls.n	8002824 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800281e:	2302      	movs	r3, #2
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	e013      	b.n	800284c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002824:	2301      	movs	r3, #1
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	e010      	b.n	800284c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b80      	cmp	r3, #128	; 0x80
 800282e:	d902      	bls.n	8002836 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002830:	2303      	movs	r3, #3
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	e00a      	b.n	800284c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b80      	cmp	r3, #128	; 0x80
 800283a:	d102      	bne.n	8002842 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800283c:	2302      	movs	r3, #2
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	e004      	b.n	800284c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b70      	cmp	r3, #112	; 0x70
 8002846:	d101      	bne.n	800284c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002848:	2301      	movs	r3, #1
 800284a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f023 0207 	bic.w	r2, r3, #7
 8002854:	4909      	ldr	r1, [pc, #36]	; (800287c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800285c:	4b07      	ldr	r3, [pc, #28]	; (800287c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	429a      	cmp	r2, r3
 8002868:	d001      	beq.n	800286e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40021000 	.word	0x40021000
 800287c:	40022000 	.word	0x40022000

08002880 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002888:	2300      	movs	r3, #0
 800288a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800288c:	2300      	movs	r3, #0
 800288e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002898:	2b00      	cmp	r3, #0
 800289a:	d041      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028a4:	d02a      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80028a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028aa:	d824      	bhi.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028b0:	d008      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028b6:	d81e      	bhi.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80028bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028c0:	d010      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028c2:	e018      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028c4:	4b86      	ldr	r3, [pc, #536]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4a85      	ldr	r2, [pc, #532]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028d0:	e015      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3304      	adds	r3, #4
 80028d6:	2100      	movs	r1, #0
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 fabb 	bl	8002e54 <RCCEx_PLLSAI1_Config>
 80028de:	4603      	mov	r3, r0
 80028e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028e2:	e00c      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3320      	adds	r3, #32
 80028e8:	2100      	movs	r1, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 fba6 	bl	800303c <RCCEx_PLLSAI2_Config>
 80028f0:	4603      	mov	r3, r0
 80028f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028f4:	e003      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	74fb      	strb	r3, [r7, #19]
      break;
 80028fa:	e000      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80028fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028fe:	7cfb      	ldrb	r3, [r7, #19]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10b      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002904:	4b76      	ldr	r3, [pc, #472]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002912:	4973      	ldr	r1, [pc, #460]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800291a:	e001      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800291c:	7cfb      	ldrb	r3, [r7, #19]
 800291e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d041      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002930:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002934:	d02a      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002936:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800293a:	d824      	bhi.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800293c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002940:	d008      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002942:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002946:	d81e      	bhi.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800294c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002950:	d010      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002952:	e018      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002954:	4b62      	ldr	r3, [pc, #392]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4a61      	ldr	r2, [pc, #388]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002960:	e015      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3304      	adds	r3, #4
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f000 fa73 	bl	8002e54 <RCCEx_PLLSAI1_Config>
 800296e:	4603      	mov	r3, r0
 8002970:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002972:	e00c      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3320      	adds	r3, #32
 8002978:	2100      	movs	r1, #0
 800297a:	4618      	mov	r0, r3
 800297c:	f000 fb5e 	bl	800303c <RCCEx_PLLSAI2_Config>
 8002980:	4603      	mov	r3, r0
 8002982:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002984:	e003      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	74fb      	strb	r3, [r7, #19]
      break;
 800298a:	e000      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800298c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800298e:	7cfb      	ldrb	r3, [r7, #19]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10b      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002994:	4b52      	ldr	r3, [pc, #328]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029a2:	494f      	ldr	r1, [pc, #316]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029aa:	e001      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ac:	7cfb      	ldrb	r3, [r7, #19]
 80029ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80a0 	beq.w	8002afe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029be:	2300      	movs	r3, #0
 80029c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029c2:	4b47      	ldr	r3, [pc, #284]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80029d2:	2300      	movs	r3, #0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00d      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d8:	4b41      	ldr	r3, [pc, #260]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029dc:	4a40      	ldr	r2, [pc, #256]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e2:	6593      	str	r3, [r2, #88]	; 0x58
 80029e4:	4b3e      	ldr	r3, [pc, #248]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f0:	2301      	movs	r3, #1
 80029f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029f4:	4b3b      	ldr	r3, [pc, #236]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a3a      	ldr	r2, [pc, #232]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a00:	f7fe fc26 	bl	8001250 <HAL_GetTick>
 8002a04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a06:	e009      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a08:	f7fe fc22 	bl	8001250 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d902      	bls.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	74fb      	strb	r3, [r7, #19]
        break;
 8002a1a:	e005      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a1c:	4b31      	ldr	r3, [pc, #196]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0ef      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a28:	7cfb      	ldrb	r3, [r7, #19]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d15c      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01f      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d019      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a4c:	4b24      	ldr	r3, [pc, #144]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a58:	4b21      	ldr	r3, [pc, #132]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5e:	4a20      	ldr	r2, [pc, #128]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a68:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6e:	4a1c      	ldr	r2, [pc, #112]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a78:	4a19      	ldr	r2, [pc, #100]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d016      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8a:	f7fe fbe1 	bl	8001250 <HAL_GetTick>
 8002a8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a90:	e00b      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a92:	f7fe fbdd 	bl	8001250 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d902      	bls.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	74fb      	strb	r3, [r7, #19]
            break;
 8002aa8:	e006      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0ec      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ab8:	7cfb      	ldrb	r3, [r7, #19]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10c      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002abe:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ace:	4904      	ldr	r1, [pc, #16]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ad6:	e009      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ad8:	7cfb      	ldrb	r3, [r7, #19]
 8002ada:	74bb      	strb	r3, [r7, #18]
 8002adc:	e006      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002ade:	bf00      	nop
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae8:	7cfb      	ldrb	r3, [r7, #19]
 8002aea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aec:	7c7b      	ldrb	r3, [r7, #17]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d105      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af2:	4b9e      	ldr	r3, [pc, #632]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af6:	4a9d      	ldr	r2, [pc, #628]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002afc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00a      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b0a:	4b98      	ldr	r3, [pc, #608]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b10:	f023 0203 	bic.w	r2, r3, #3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b18:	4994      	ldr	r1, [pc, #592]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00a      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b2c:	4b8f      	ldr	r3, [pc, #572]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b32:	f023 020c 	bic.w	r2, r3, #12
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3a:	498c      	ldr	r1, [pc, #560]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b4e:	4b87      	ldr	r3, [pc, #540]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	4983      	ldr	r1, [pc, #524]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00a      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b70:	4b7e      	ldr	r3, [pc, #504]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	497b      	ldr	r1, [pc, #492]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0310 	and.w	r3, r3, #16
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00a      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b92:	4b76      	ldr	r3, [pc, #472]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba0:	4972      	ldr	r1, [pc, #456]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0320 	and.w	r3, r3, #32
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00a      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bb4:	4b6d      	ldr	r3, [pc, #436]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc2:	496a      	ldr	r1, [pc, #424]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bd6:	4b65      	ldr	r3, [pc, #404]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be4:	4961      	ldr	r1, [pc, #388]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00a      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bf8:	4b5c      	ldr	r3, [pc, #368]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c06:	4959      	ldr	r1, [pc, #356]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c1a:	4b54      	ldr	r3, [pc, #336]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c28:	4950      	ldr	r1, [pc, #320]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00a      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c3c:	4b4b      	ldr	r3, [pc, #300]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4a:	4948      	ldr	r1, [pc, #288]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c5e:	4b43      	ldr	r3, [pc, #268]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6c:	493f      	ldr	r1, [pc, #252]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d028      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c80:	4b3a      	ldr	r3, [pc, #232]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c8e:	4937      	ldr	r1, [pc, #220]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c9e:	d106      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ca0:	4b32      	ldr	r3, [pc, #200]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	4a31      	ldr	r2, [pc, #196]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002caa:	60d3      	str	r3, [r2, #12]
 8002cac:	e011      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cb6:	d10c      	bne.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3304      	adds	r3, #4
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 f8c8 	bl	8002e54 <RCCEx_PLLSAI1_Config>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002cc8:	7cfb      	ldrb	r3, [r7, #19]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002cce:	7cfb      	ldrb	r3, [r7, #19]
 8002cd0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d028      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cde:	4b23      	ldr	r3, [pc, #140]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cec:	491f      	ldr	r1, [pc, #124]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cfc:	d106      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cfe:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	4a1a      	ldr	r2, [pc, #104]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d08:	60d3      	str	r3, [r2, #12]
 8002d0a:	e011      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d14:	d10c      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 f899 	bl	8002e54 <RCCEx_PLLSAI1_Config>
 8002d22:	4603      	mov	r3, r0
 8002d24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d26:	7cfb      	ldrb	r3, [r7, #19]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d2c:	7cfb      	ldrb	r3, [r7, #19]
 8002d2e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d02b      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4a:	4908      	ldr	r1, [pc, #32]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d5a:	d109      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d5c:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4a02      	ldr	r2, [pc, #8]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d66:	60d3      	str	r3, [r2, #12]
 8002d68:	e014      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d6a:	bf00      	nop
 8002d6c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	2101      	movs	r1, #1
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 f867 	bl	8002e54 <RCCEx_PLLSAI1_Config>
 8002d86:	4603      	mov	r3, r0
 8002d88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d8a:	7cfb      	ldrb	r3, [r7, #19]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d90:	7cfb      	ldrb	r3, [r7, #19]
 8002d92:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d02f      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002da0:	4b2b      	ldr	r3, [pc, #172]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dae:	4928      	ldr	r1, [pc, #160]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dbe:	d10d      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	2102      	movs	r1, #2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 f844 	bl	8002e54 <RCCEx_PLLSAI1_Config>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dd0:	7cfb      	ldrb	r3, [r7, #19]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d014      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002dd6:	7cfb      	ldrb	r3, [r7, #19]
 8002dd8:	74bb      	strb	r3, [r7, #18]
 8002dda:	e011      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3320      	adds	r3, #32
 8002dea:	2102      	movs	r1, #2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 f925 	bl	800303c <RCCEx_PLLSAI2_Config>
 8002df2:	4603      	mov	r3, r0
 8002df4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002df6:	7cfb      	ldrb	r3, [r7, #19]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002dfc:	7cfb      	ldrb	r3, [r7, #19]
 8002dfe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e0c:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e12:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e1a:	490d      	ldr	r1, [pc, #52]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00b      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e2e:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e3e:	4904      	ldr	r1, [pc, #16]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e46:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40021000 	.word	0x40021000

08002e54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e62:	4b75      	ldr	r3, [pc, #468]	; (8003038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d018      	beq.n	8002ea0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e6e:	4b72      	ldr	r3, [pc, #456]	; (8003038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f003 0203 	and.w	r2, r3, #3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d10d      	bne.n	8002e9a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
       ||
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d009      	beq.n	8002e9a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e86:	4b6c      	ldr	r3, [pc, #432]	; (8003038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	091b      	lsrs	r3, r3, #4
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
       ||
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d047      	beq.n	8002f2a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
 8002e9e:	e044      	b.n	8002f2a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b03      	cmp	r3, #3
 8002ea6:	d018      	beq.n	8002eda <RCCEx_PLLSAI1_Config+0x86>
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d825      	bhi.n	8002ef8 <RCCEx_PLLSAI1_Config+0xa4>
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d002      	beq.n	8002eb6 <RCCEx_PLLSAI1_Config+0x62>
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d009      	beq.n	8002ec8 <RCCEx_PLLSAI1_Config+0x74>
 8002eb4:	e020      	b.n	8002ef8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002eb6:	4b60      	ldr	r3, [pc, #384]	; (8003038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d11d      	bne.n	8002efe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec6:	e01a      	b.n	8002efe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ec8:	4b5b      	ldr	r3, [pc, #364]	; (8003038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d116      	bne.n	8002f02 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ed8:	e013      	b.n	8002f02 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002eda:	4b57      	ldr	r3, [pc, #348]	; (8003038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10f      	bne.n	8002f06 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ee6:	4b54      	ldr	r3, [pc, #336]	; (8003038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d109      	bne.n	8002f06 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ef6:	e006      	b.n	8002f06 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
      break;
 8002efc:	e004      	b.n	8002f08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002efe:	bf00      	nop
 8002f00:	e002      	b.n	8002f08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f02:	bf00      	nop
 8002f04:	e000      	b.n	8002f08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f06:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10d      	bne.n	8002f2a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f0e:	4b4a      	ldr	r3, [pc, #296]	; (8003038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6819      	ldr	r1, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	430b      	orrs	r3, r1
 8002f24:	4944      	ldr	r1, [pc, #272]	; (8003038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d17d      	bne.n	800302c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f30:	4b41      	ldr	r3, [pc, #260]	; (8003038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a40      	ldr	r2, [pc, #256]	; (8003038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f3c:	f7fe f988 	bl	8001250 <HAL_GetTick>
 8002f40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f42:	e009      	b.n	8002f58 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f44:	f7fe f984 	bl	8001250 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d902      	bls.n	8002f58 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	73fb      	strb	r3, [r7, #15]
        break;
 8002f56:	e005      	b.n	8002f64 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f58:	4b37      	ldr	r3, [pc, #220]	; (8003038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1ef      	bne.n	8002f44 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d160      	bne.n	800302c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d111      	bne.n	8002f94 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f70:	4b31      	ldr	r3, [pc, #196]	; (8003038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6892      	ldr	r2, [r2, #8]
 8002f80:	0211      	lsls	r1, r2, #8
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68d2      	ldr	r2, [r2, #12]
 8002f86:	0912      	lsrs	r2, r2, #4
 8002f88:	0452      	lsls	r2, r2, #17
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	492a      	ldr	r1, [pc, #168]	; (8003038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	610b      	str	r3, [r1, #16]
 8002f92:	e027      	b.n	8002fe4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d112      	bne.n	8002fc0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f9a:	4b27      	ldr	r3, [pc, #156]	; (8003038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002fa2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6892      	ldr	r2, [r2, #8]
 8002faa:	0211      	lsls	r1, r2, #8
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6912      	ldr	r2, [r2, #16]
 8002fb0:	0852      	lsrs	r2, r2, #1
 8002fb2:	3a01      	subs	r2, #1
 8002fb4:	0552      	lsls	r2, r2, #21
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	491f      	ldr	r1, [pc, #124]	; (8003038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	610b      	str	r3, [r1, #16]
 8002fbe:	e011      	b.n	8002fe4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fc0:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6892      	ldr	r2, [r2, #8]
 8002fd0:	0211      	lsls	r1, r2, #8
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6952      	ldr	r2, [r2, #20]
 8002fd6:	0852      	lsrs	r2, r2, #1
 8002fd8:	3a01      	subs	r2, #1
 8002fda:	0652      	lsls	r2, r2, #25
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	4916      	ldr	r1, [pc, #88]	; (8003038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002fe4:	4b14      	ldr	r3, [pc, #80]	; (8003038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a13      	ldr	r2, [pc, #76]	; (8003038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff0:	f7fe f92e 	bl	8001250 <HAL_GetTick>
 8002ff4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ff6:	e009      	b.n	800300c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ff8:	f7fe f92a 	bl	8001250 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d902      	bls.n	800300c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	73fb      	strb	r3, [r7, #15]
          break;
 800300a:	e005      	b.n	8003018 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <RCCEx_PLLSAI1_Config+0x1e4>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0ef      	beq.n	8002ff8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800301e:	4b06      	ldr	r3, [pc, #24]	; (8003038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003020:	691a      	ldr	r2, [r3, #16]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	4904      	ldr	r1, [pc, #16]	; (8003038 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003028:	4313      	orrs	r3, r2
 800302a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800302c:	7bfb      	ldrb	r3, [r7, #15]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000

0800303c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800304a:	4b6a      	ldr	r3, [pc, #424]	; (80031f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d018      	beq.n	8003088 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003056:	4b67      	ldr	r3, [pc, #412]	; (80031f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f003 0203 	and.w	r2, r3, #3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d10d      	bne.n	8003082 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
       ||
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800306e:	4b61      	ldr	r3, [pc, #388]	; (80031f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	091b      	lsrs	r3, r3, #4
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
       ||
 800307e:	429a      	cmp	r2, r3
 8003080:	d047      	beq.n	8003112 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	73fb      	strb	r3, [r7, #15]
 8003086:	e044      	b.n	8003112 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b03      	cmp	r3, #3
 800308e:	d018      	beq.n	80030c2 <RCCEx_PLLSAI2_Config+0x86>
 8003090:	2b03      	cmp	r3, #3
 8003092:	d825      	bhi.n	80030e0 <RCCEx_PLLSAI2_Config+0xa4>
 8003094:	2b01      	cmp	r3, #1
 8003096:	d002      	beq.n	800309e <RCCEx_PLLSAI2_Config+0x62>
 8003098:	2b02      	cmp	r3, #2
 800309a:	d009      	beq.n	80030b0 <RCCEx_PLLSAI2_Config+0x74>
 800309c:	e020      	b.n	80030e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800309e:	4b55      	ldr	r3, [pc, #340]	; (80031f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d11d      	bne.n	80030e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ae:	e01a      	b.n	80030e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030b0:	4b50      	ldr	r3, [pc, #320]	; (80031f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d116      	bne.n	80030ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c0:	e013      	b.n	80030ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030c2:	4b4c      	ldr	r3, [pc, #304]	; (80031f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10f      	bne.n	80030ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030ce:	4b49      	ldr	r3, [pc, #292]	; (80031f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d109      	bne.n	80030ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030de:	e006      	b.n	80030ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]
      break;
 80030e4:	e004      	b.n	80030f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030e6:	bf00      	nop
 80030e8:	e002      	b.n	80030f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030ea:	bf00      	nop
 80030ec:	e000      	b.n	80030f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10d      	bne.n	8003112 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030f6:	4b3f      	ldr	r3, [pc, #252]	; (80031f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6819      	ldr	r1, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	3b01      	subs	r3, #1
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	430b      	orrs	r3, r1
 800310c:	4939      	ldr	r1, [pc, #228]	; (80031f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800310e:	4313      	orrs	r3, r2
 8003110:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d167      	bne.n	80031e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003118:	4b36      	ldr	r3, [pc, #216]	; (80031f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a35      	ldr	r2, [pc, #212]	; (80031f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800311e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003122:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003124:	f7fe f894 	bl	8001250 <HAL_GetTick>
 8003128:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800312a:	e009      	b.n	8003140 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800312c:	f7fe f890 	bl	8001250 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d902      	bls.n	8003140 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	73fb      	strb	r3, [r7, #15]
        break;
 800313e:	e005      	b.n	800314c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003140:	4b2c      	ldr	r3, [pc, #176]	; (80031f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1ef      	bne.n	800312c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d14a      	bne.n	80031e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d111      	bne.n	800317c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003158:	4b26      	ldr	r3, [pc, #152]	; (80031f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6892      	ldr	r2, [r2, #8]
 8003168:	0211      	lsls	r1, r2, #8
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	68d2      	ldr	r2, [r2, #12]
 800316e:	0912      	lsrs	r2, r2, #4
 8003170:	0452      	lsls	r2, r2, #17
 8003172:	430a      	orrs	r2, r1
 8003174:	491f      	ldr	r1, [pc, #124]	; (80031f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003176:	4313      	orrs	r3, r2
 8003178:	614b      	str	r3, [r1, #20]
 800317a:	e011      	b.n	80031a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800317c:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003184:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6892      	ldr	r2, [r2, #8]
 800318c:	0211      	lsls	r1, r2, #8
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6912      	ldr	r2, [r2, #16]
 8003192:	0852      	lsrs	r2, r2, #1
 8003194:	3a01      	subs	r2, #1
 8003196:	0652      	lsls	r2, r2, #25
 8003198:	430a      	orrs	r2, r1
 800319a:	4916      	ldr	r1, [pc, #88]	; (80031f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800319c:	4313      	orrs	r3, r2
 800319e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031a0:	4b14      	ldr	r3, [pc, #80]	; (80031f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a13      	ldr	r2, [pc, #76]	; (80031f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ac:	f7fe f850 	bl	8001250 <HAL_GetTick>
 80031b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031b2:	e009      	b.n	80031c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031b4:	f7fe f84c 	bl	8001250 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d902      	bls.n	80031c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	73fb      	strb	r3, [r7, #15]
          break;
 80031c6:	e005      	b.n	80031d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031c8:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0ef      	beq.n	80031b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d106      	bne.n	80031e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80031da:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	4904      	ldr	r1, [pc, #16]	; (80031f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40021000 	.word	0x40021000

080031f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e049      	b.n	800329e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7fd fd48 	bl	8000cb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3304      	adds	r3, #4
 8003234:	4619      	mov	r1, r3
 8003236:	4610      	mov	r0, r2
 8003238:	f000 fb40 	bl	80038bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b086      	sub	sp, #24
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e097      	b.n	80033ea <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fd fd32 	bl	8000d38 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80032ea:	f023 0307 	bic.w	r3, r3, #7
 80032ee:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3304      	adds	r3, #4
 80032f8:	4619      	mov	r1, r3
 80032fa:	4610      	mov	r0, r2
 80032fc:	f000 fade 	bl	80038bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	4313      	orrs	r3, r2
 8003320:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003328:	f023 0303 	bic.w	r3, r3, #3
 800332c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	4313      	orrs	r3, r2
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003346:	f023 030c 	bic.w	r3, r3, #12
 800334a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	021b      	lsls	r3, r3, #8
 8003362:	4313      	orrs	r3, r2
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	011a      	lsls	r2, r3, #4
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	031b      	lsls	r3, r3, #12
 8003376:	4313      	orrs	r3, r2
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003384:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800338c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	4313      	orrs	r3, r2
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4313      	orrs	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b02      	cmp	r3, #2
 8003406:	d122      	bne.n	800344e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b02      	cmp	r3, #2
 8003414:	d11b      	bne.n	800344e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f06f 0202 	mvn.w	r2, #2
 800341e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fa23 	bl	8003880 <HAL_TIM_IC_CaptureCallback>
 800343a:	e005      	b.n	8003448 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fa15 	bl	800386c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fa26 	bl	8003894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b04      	cmp	r3, #4
 800345a:	d122      	bne.n	80034a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b04      	cmp	r3, #4
 8003468:	d11b      	bne.n	80034a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f06f 0204 	mvn.w	r2, #4
 8003472:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f9f9 	bl	8003880 <HAL_TIM_IC_CaptureCallback>
 800348e:	e005      	b.n	800349c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f9eb 	bl	800386c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f9fc 	bl	8003894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f003 0308 	and.w	r3, r3, #8
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d122      	bne.n	80034f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d11b      	bne.n	80034f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f06f 0208 	mvn.w	r2, #8
 80034c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2204      	movs	r2, #4
 80034cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f9cf 	bl	8003880 <HAL_TIM_IC_CaptureCallback>
 80034e2:	e005      	b.n	80034f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f9c1 	bl	800386c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f9d2 	bl	8003894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	2b10      	cmp	r3, #16
 8003502:	d122      	bne.n	800354a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f003 0310 	and.w	r3, r3, #16
 800350e:	2b10      	cmp	r3, #16
 8003510:	d11b      	bne.n	800354a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f06f 0210 	mvn.w	r2, #16
 800351a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2208      	movs	r2, #8
 8003520:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f9a5 	bl	8003880 <HAL_TIM_IC_CaptureCallback>
 8003536:	e005      	b.n	8003544 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f997 	bl	800386c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f9a8 	bl	8003894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b01      	cmp	r3, #1
 8003556:	d10e      	bne.n	8003576 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b01      	cmp	r3, #1
 8003564:	d107      	bne.n	8003576 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f06f 0201 	mvn.w	r2, #1
 800356e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f971 	bl	8003858 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003580:	2b80      	cmp	r3, #128	; 0x80
 8003582:	d10e      	bne.n	80035a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358e:	2b80      	cmp	r3, #128	; 0x80
 8003590:	d107      	bne.n	80035a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800359a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fe0d 	bl	80041bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b0:	d10e      	bne.n	80035d0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035bc:	2b80      	cmp	r3, #128	; 0x80
 80035be:	d107      	bne.n	80035d0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fe00 	bl	80041d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	d10e      	bne.n	80035fc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e8:	2b40      	cmp	r3, #64	; 0x40
 80035ea:	d107      	bne.n	80035fc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f956 	bl	80038a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f003 0320 	and.w	r3, r3, #32
 8003606:	2b20      	cmp	r3, #32
 8003608:	d10e      	bne.n	8003628 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b20      	cmp	r3, #32
 8003616:	d107      	bne.n	8003628 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f06f 0220 	mvn.w	r2, #32
 8003620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fdc0 	bl	80041a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003628:	bf00      	nop
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800363c:	2300      	movs	r3, #0
 800363e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003646:	2b01      	cmp	r3, #1
 8003648:	d101      	bne.n	800364e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800364a:	2302      	movs	r3, #2
 800364c:	e0ff      	b.n	800384e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b14      	cmp	r3, #20
 800365a:	f200 80f0 	bhi.w	800383e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800365e:	a201      	add	r2, pc, #4	; (adr r2, 8003664 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003664:	080036b9 	.word	0x080036b9
 8003668:	0800383f 	.word	0x0800383f
 800366c:	0800383f 	.word	0x0800383f
 8003670:	0800383f 	.word	0x0800383f
 8003674:	080036f9 	.word	0x080036f9
 8003678:	0800383f 	.word	0x0800383f
 800367c:	0800383f 	.word	0x0800383f
 8003680:	0800383f 	.word	0x0800383f
 8003684:	0800373b 	.word	0x0800373b
 8003688:	0800383f 	.word	0x0800383f
 800368c:	0800383f 	.word	0x0800383f
 8003690:	0800383f 	.word	0x0800383f
 8003694:	0800377b 	.word	0x0800377b
 8003698:	0800383f 	.word	0x0800383f
 800369c:	0800383f 	.word	0x0800383f
 80036a0:	0800383f 	.word	0x0800383f
 80036a4:	080037bd 	.word	0x080037bd
 80036a8:	0800383f 	.word	0x0800383f
 80036ac:	0800383f 	.word	0x0800383f
 80036b0:	0800383f 	.word	0x0800383f
 80036b4:	080037fd 	.word	0x080037fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 f996 	bl	80039f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699a      	ldr	r2, [r3, #24]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0208 	orr.w	r2, r2, #8
 80036d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0204 	bic.w	r2, r2, #4
 80036e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6999      	ldr	r1, [r3, #24]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	691a      	ldr	r2, [r3, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	619a      	str	r2, [r3, #24]
      break;
 80036f6:	e0a5      	b.n	8003844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fa06 	bl	8003b10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699a      	ldr	r2, [r3, #24]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6999      	ldr	r1, [r3, #24]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	021a      	lsls	r2, r3, #8
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	619a      	str	r2, [r3, #24]
      break;
 8003738:	e084      	b.n	8003844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68b9      	ldr	r1, [r7, #8]
 8003740:	4618      	mov	r0, r3
 8003742:	f000 fa6f 	bl	8003c24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69da      	ldr	r2, [r3, #28]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0208 	orr.w	r2, r2, #8
 8003754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	69da      	ldr	r2, [r3, #28]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0204 	bic.w	r2, r2, #4
 8003764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69d9      	ldr	r1, [r3, #28]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	61da      	str	r2, [r3, #28]
      break;
 8003778:	e064      	b.n	8003844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68b9      	ldr	r1, [r7, #8]
 8003780:	4618      	mov	r0, r3
 8003782:	f000 fad7 	bl	8003d34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	69da      	ldr	r2, [r3, #28]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69da      	ldr	r2, [r3, #28]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	69d9      	ldr	r1, [r3, #28]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	021a      	lsls	r2, r3, #8
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	61da      	str	r2, [r3, #28]
      break;
 80037ba:	e043      	b.n	8003844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fb20 	bl	8003e08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0208 	orr.w	r2, r2, #8
 80037d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0204 	bic.w	r2, r2, #4
 80037e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80037fa:	e023      	b.n	8003844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fb64 	bl	8003ed0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003816:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003826:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	021a      	lsls	r2, r3, #8
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800383c:	e002      	b.n	8003844 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	75fb      	strb	r3, [r7, #23]
      break;
 8003842:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800384c:	7dfb      	ldrb	r3, [r7, #23]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop

08003858 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a40      	ldr	r2, [pc, #256]	; (80039d0 <TIM_Base_SetConfig+0x114>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d013      	beq.n	80038fc <TIM_Base_SetConfig+0x40>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038da:	d00f      	beq.n	80038fc <TIM_Base_SetConfig+0x40>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a3d      	ldr	r2, [pc, #244]	; (80039d4 <TIM_Base_SetConfig+0x118>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d00b      	beq.n	80038fc <TIM_Base_SetConfig+0x40>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a3c      	ldr	r2, [pc, #240]	; (80039d8 <TIM_Base_SetConfig+0x11c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d007      	beq.n	80038fc <TIM_Base_SetConfig+0x40>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a3b      	ldr	r2, [pc, #236]	; (80039dc <TIM_Base_SetConfig+0x120>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d003      	beq.n	80038fc <TIM_Base_SetConfig+0x40>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a3a      	ldr	r2, [pc, #232]	; (80039e0 <TIM_Base_SetConfig+0x124>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d108      	bne.n	800390e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a2f      	ldr	r2, [pc, #188]	; (80039d0 <TIM_Base_SetConfig+0x114>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d01f      	beq.n	8003956 <TIM_Base_SetConfig+0x9a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800391c:	d01b      	beq.n	8003956 <TIM_Base_SetConfig+0x9a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a2c      	ldr	r2, [pc, #176]	; (80039d4 <TIM_Base_SetConfig+0x118>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d017      	beq.n	8003956 <TIM_Base_SetConfig+0x9a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a2b      	ldr	r2, [pc, #172]	; (80039d8 <TIM_Base_SetConfig+0x11c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d013      	beq.n	8003956 <TIM_Base_SetConfig+0x9a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a2a      	ldr	r2, [pc, #168]	; (80039dc <TIM_Base_SetConfig+0x120>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00f      	beq.n	8003956 <TIM_Base_SetConfig+0x9a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a29      	ldr	r2, [pc, #164]	; (80039e0 <TIM_Base_SetConfig+0x124>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00b      	beq.n	8003956 <TIM_Base_SetConfig+0x9a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a28      	ldr	r2, [pc, #160]	; (80039e4 <TIM_Base_SetConfig+0x128>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d007      	beq.n	8003956 <TIM_Base_SetConfig+0x9a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a27      	ldr	r2, [pc, #156]	; (80039e8 <TIM_Base_SetConfig+0x12c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d003      	beq.n	8003956 <TIM_Base_SetConfig+0x9a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a26      	ldr	r2, [pc, #152]	; (80039ec <TIM_Base_SetConfig+0x130>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d108      	bne.n	8003968 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800395c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4313      	orrs	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a10      	ldr	r2, [pc, #64]	; (80039d0 <TIM_Base_SetConfig+0x114>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d00f      	beq.n	80039b4 <TIM_Base_SetConfig+0xf8>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a12      	ldr	r2, [pc, #72]	; (80039e0 <TIM_Base_SetConfig+0x124>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00b      	beq.n	80039b4 <TIM_Base_SetConfig+0xf8>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a11      	ldr	r2, [pc, #68]	; (80039e4 <TIM_Base_SetConfig+0x128>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d007      	beq.n	80039b4 <TIM_Base_SetConfig+0xf8>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a10      	ldr	r2, [pc, #64]	; (80039e8 <TIM_Base_SetConfig+0x12c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d003      	beq.n	80039b4 <TIM_Base_SetConfig+0xf8>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a0f      	ldr	r2, [pc, #60]	; (80039ec <TIM_Base_SetConfig+0x130>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d103      	bne.n	80039bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	615a      	str	r2, [r3, #20]
}
 80039c2:	bf00      	nop
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40012c00 	.word	0x40012c00
 80039d4:	40000400 	.word	0x40000400
 80039d8:	40000800 	.word	0x40000800
 80039dc:	40000c00 	.word	0x40000c00
 80039e0:	40013400 	.word	0x40013400
 80039e4:	40014000 	.word	0x40014000
 80039e8:	40014400 	.word	0x40014400
 80039ec:	40014800 	.word	0x40014800

080039f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	f023 0201 	bic.w	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0303 	bic.w	r3, r3, #3
 8003a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f023 0302 	bic.w	r3, r3, #2
 8003a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a2c      	ldr	r2, [pc, #176]	; (8003afc <TIM_OC1_SetConfig+0x10c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00f      	beq.n	8003a70 <TIM_OC1_SetConfig+0x80>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a2b      	ldr	r2, [pc, #172]	; (8003b00 <TIM_OC1_SetConfig+0x110>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00b      	beq.n	8003a70 <TIM_OC1_SetConfig+0x80>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a2a      	ldr	r2, [pc, #168]	; (8003b04 <TIM_OC1_SetConfig+0x114>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d007      	beq.n	8003a70 <TIM_OC1_SetConfig+0x80>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a29      	ldr	r2, [pc, #164]	; (8003b08 <TIM_OC1_SetConfig+0x118>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d003      	beq.n	8003a70 <TIM_OC1_SetConfig+0x80>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a28      	ldr	r2, [pc, #160]	; (8003b0c <TIM_OC1_SetConfig+0x11c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d10c      	bne.n	8003a8a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f023 0308 	bic.w	r3, r3, #8
 8003a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f023 0304 	bic.w	r3, r3, #4
 8003a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a1b      	ldr	r2, [pc, #108]	; (8003afc <TIM_OC1_SetConfig+0x10c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d00f      	beq.n	8003ab2 <TIM_OC1_SetConfig+0xc2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a1a      	ldr	r2, [pc, #104]	; (8003b00 <TIM_OC1_SetConfig+0x110>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d00b      	beq.n	8003ab2 <TIM_OC1_SetConfig+0xc2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a19      	ldr	r2, [pc, #100]	; (8003b04 <TIM_OC1_SetConfig+0x114>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d007      	beq.n	8003ab2 <TIM_OC1_SetConfig+0xc2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a18      	ldr	r2, [pc, #96]	; (8003b08 <TIM_OC1_SetConfig+0x118>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d003      	beq.n	8003ab2 <TIM_OC1_SetConfig+0xc2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a17      	ldr	r2, [pc, #92]	; (8003b0c <TIM_OC1_SetConfig+0x11c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d111      	bne.n	8003ad6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	621a      	str	r2, [r3, #32]
}
 8003af0:	bf00      	nop
 8003af2:	371c      	adds	r7, #28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	40012c00 	.word	0x40012c00
 8003b00:	40013400 	.word	0x40013400
 8003b04:	40014000 	.word	0x40014000
 8003b08:	40014400 	.word	0x40014400
 8003b0c:	40014800 	.word	0x40014800

08003b10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	f023 0210 	bic.w	r2, r3, #16
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	021b      	lsls	r3, r3, #8
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f023 0320 	bic.w	r3, r3, #32
 8003b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a28      	ldr	r2, [pc, #160]	; (8003c10 <TIM_OC2_SetConfig+0x100>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d003      	beq.n	8003b7c <TIM_OC2_SetConfig+0x6c>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a27      	ldr	r2, [pc, #156]	; (8003c14 <TIM_OC2_SetConfig+0x104>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d10d      	bne.n	8003b98 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a1d      	ldr	r2, [pc, #116]	; (8003c10 <TIM_OC2_SetConfig+0x100>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00f      	beq.n	8003bc0 <TIM_OC2_SetConfig+0xb0>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a1c      	ldr	r2, [pc, #112]	; (8003c14 <TIM_OC2_SetConfig+0x104>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d00b      	beq.n	8003bc0 <TIM_OC2_SetConfig+0xb0>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a1b      	ldr	r2, [pc, #108]	; (8003c18 <TIM_OC2_SetConfig+0x108>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d007      	beq.n	8003bc0 <TIM_OC2_SetConfig+0xb0>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a1a      	ldr	r2, [pc, #104]	; (8003c1c <TIM_OC2_SetConfig+0x10c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d003      	beq.n	8003bc0 <TIM_OC2_SetConfig+0xb0>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a19      	ldr	r2, [pc, #100]	; (8003c20 <TIM_OC2_SetConfig+0x110>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d113      	bne.n	8003be8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	621a      	str	r2, [r3, #32]
}
 8003c02:	bf00      	nop
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40012c00 	.word	0x40012c00
 8003c14:	40013400 	.word	0x40013400
 8003c18:	40014000 	.word	0x40014000
 8003c1c:	40014400 	.word	0x40014400
 8003c20:	40014800 	.word	0x40014800

08003c24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 0303 	bic.w	r3, r3, #3
 8003c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a27      	ldr	r2, [pc, #156]	; (8003d20 <TIM_OC3_SetConfig+0xfc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d003      	beq.n	8003c8e <TIM_OC3_SetConfig+0x6a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a26      	ldr	r2, [pc, #152]	; (8003d24 <TIM_OC3_SetConfig+0x100>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d10d      	bne.n	8003caa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	021b      	lsls	r3, r3, #8
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ca8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a1c      	ldr	r2, [pc, #112]	; (8003d20 <TIM_OC3_SetConfig+0xfc>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d00f      	beq.n	8003cd2 <TIM_OC3_SetConfig+0xae>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a1b      	ldr	r2, [pc, #108]	; (8003d24 <TIM_OC3_SetConfig+0x100>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00b      	beq.n	8003cd2 <TIM_OC3_SetConfig+0xae>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a1a      	ldr	r2, [pc, #104]	; (8003d28 <TIM_OC3_SetConfig+0x104>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d007      	beq.n	8003cd2 <TIM_OC3_SetConfig+0xae>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a19      	ldr	r2, [pc, #100]	; (8003d2c <TIM_OC3_SetConfig+0x108>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d003      	beq.n	8003cd2 <TIM_OC3_SetConfig+0xae>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a18      	ldr	r2, [pc, #96]	; (8003d30 <TIM_OC3_SetConfig+0x10c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d113      	bne.n	8003cfa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	621a      	str	r2, [r3, #32]
}
 8003d14:	bf00      	nop
 8003d16:	371c      	adds	r7, #28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	40012c00 	.word	0x40012c00
 8003d24:	40013400 	.word	0x40013400
 8003d28:	40014000 	.word	0x40014000
 8003d2c:	40014400 	.word	0x40014400
 8003d30:	40014800 	.word	0x40014800

08003d34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	021b      	lsls	r3, r3, #8
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	031b      	lsls	r3, r3, #12
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a18      	ldr	r2, [pc, #96]	; (8003df4 <TIM_OC4_SetConfig+0xc0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00f      	beq.n	8003db8 <TIM_OC4_SetConfig+0x84>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a17      	ldr	r2, [pc, #92]	; (8003df8 <TIM_OC4_SetConfig+0xc4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d00b      	beq.n	8003db8 <TIM_OC4_SetConfig+0x84>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a16      	ldr	r2, [pc, #88]	; (8003dfc <TIM_OC4_SetConfig+0xc8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d007      	beq.n	8003db8 <TIM_OC4_SetConfig+0x84>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a15      	ldr	r2, [pc, #84]	; (8003e00 <TIM_OC4_SetConfig+0xcc>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d003      	beq.n	8003db8 <TIM_OC4_SetConfig+0x84>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a14      	ldr	r2, [pc, #80]	; (8003e04 <TIM_OC4_SetConfig+0xd0>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d109      	bne.n	8003dcc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	019b      	lsls	r3, r3, #6
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	621a      	str	r2, [r3, #32]
}
 8003de6:	bf00      	nop
 8003de8:	371c      	adds	r7, #28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40012c00 	.word	0x40012c00
 8003df8:	40013400 	.word	0x40013400
 8003dfc:	40014000 	.word	0x40014000
 8003e00:	40014400 	.word	0x40014400
 8003e04:	40014800 	.word	0x40014800

08003e08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	041b      	lsls	r3, r3, #16
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a17      	ldr	r2, [pc, #92]	; (8003ebc <TIM_OC5_SetConfig+0xb4>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00f      	beq.n	8003e82 <TIM_OC5_SetConfig+0x7a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a16      	ldr	r2, [pc, #88]	; (8003ec0 <TIM_OC5_SetConfig+0xb8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00b      	beq.n	8003e82 <TIM_OC5_SetConfig+0x7a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a15      	ldr	r2, [pc, #84]	; (8003ec4 <TIM_OC5_SetConfig+0xbc>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d007      	beq.n	8003e82 <TIM_OC5_SetConfig+0x7a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a14      	ldr	r2, [pc, #80]	; (8003ec8 <TIM_OC5_SetConfig+0xc0>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d003      	beq.n	8003e82 <TIM_OC5_SetConfig+0x7a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a13      	ldr	r2, [pc, #76]	; (8003ecc <TIM_OC5_SetConfig+0xc4>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d109      	bne.n	8003e96 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	021b      	lsls	r3, r3, #8
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	621a      	str	r2, [r3, #32]
}
 8003eb0:	bf00      	nop
 8003eb2:	371c      	adds	r7, #28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	40012c00 	.word	0x40012c00
 8003ec0:	40013400 	.word	0x40013400
 8003ec4:	40014000 	.word	0x40014000
 8003ec8:	40014400 	.word	0x40014400
 8003ecc:	40014800 	.word	0x40014800

08003ed0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	021b      	lsls	r3, r3, #8
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	051b      	lsls	r3, r3, #20
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a18      	ldr	r2, [pc, #96]	; (8003f88 <TIM_OC6_SetConfig+0xb8>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d00f      	beq.n	8003f4c <TIM_OC6_SetConfig+0x7c>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a17      	ldr	r2, [pc, #92]	; (8003f8c <TIM_OC6_SetConfig+0xbc>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00b      	beq.n	8003f4c <TIM_OC6_SetConfig+0x7c>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a16      	ldr	r2, [pc, #88]	; (8003f90 <TIM_OC6_SetConfig+0xc0>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d007      	beq.n	8003f4c <TIM_OC6_SetConfig+0x7c>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a15      	ldr	r2, [pc, #84]	; (8003f94 <TIM_OC6_SetConfig+0xc4>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d003      	beq.n	8003f4c <TIM_OC6_SetConfig+0x7c>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a14      	ldr	r2, [pc, #80]	; (8003f98 <TIM_OC6_SetConfig+0xc8>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d109      	bne.n	8003f60 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	029b      	lsls	r3, r3, #10
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	621a      	str	r2, [r3, #32]
}
 8003f7a:	bf00      	nop
 8003f7c:	371c      	adds	r7, #28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40012c00 	.word	0x40012c00
 8003f8c:	40013400 	.word	0x40013400
 8003f90:	40014000 	.word	0x40014000
 8003f94:	40014400 	.word	0x40014400
 8003f98:	40014800 	.word	0x40014800

08003f9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e068      	b.n	8004086 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a2e      	ldr	r2, [pc, #184]	; (8004094 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d004      	beq.n	8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a2d      	ldr	r2, [pc, #180]	; (8004098 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d108      	bne.n	8003ffa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003fee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004000:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	4313      	orrs	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a1e      	ldr	r2, [pc, #120]	; (8004094 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d01d      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004026:	d018      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a1b      	ldr	r2, [pc, #108]	; (800409c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d013      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a1a      	ldr	r2, [pc, #104]	; (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d00e      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d009      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a13      	ldr	r2, [pc, #76]	; (8004098 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d004      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a14      	ldr	r2, [pc, #80]	; (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d10c      	bne.n	8004074 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004060:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	4313      	orrs	r3, r2
 800406a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	40012c00 	.word	0x40012c00
 8004098:	40013400 	.word	0x40013400
 800409c:	40000400 	.word	0x40000400
 80040a0:	40000800 	.word	0x40000800
 80040a4:	40000c00 	.word	0x40000c00
 80040a8:	40014000 	.word	0x40014000

080040ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d101      	bne.n	80040c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040c4:	2302      	movs	r3, #2
 80040c6:	e065      	b.n	8004194 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4313      	orrs	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	4313      	orrs	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	041b      	lsls	r3, r3, #16
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a16      	ldr	r2, [pc, #88]	; (80041a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d004      	beq.n	8004156 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a14      	ldr	r2, [pc, #80]	; (80041a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d115      	bne.n	8004182 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	051b      	lsls	r3, r3, #20
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	4313      	orrs	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	40012c00 	.word	0x40012c00
 80041a4:	40013400 	.word	0x40013400

080041a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e040      	b.n	8004278 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fc fea6 	bl	8000f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2224      	movs	r2, #36	; 0x24
 8004210:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0201 	bic.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fb2e 	bl	8004884 <UART_SetConfig>
 8004228:	4603      	mov	r3, r0
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e022      	b.n	8004278 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fdda 	bl	8004df4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800424e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800425e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0201 	orr.w	r2, r2, #1
 800426e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fe61 	bl	8004f38 <UART_CheckIdleState>
 8004276:	4603      	mov	r3, r0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b0ba      	sub	sp, #232	; 0xe8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80042aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80042ae:	4013      	ands	r3, r2
 80042b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80042b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d115      	bne.n	80042e8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80042bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00f      	beq.n	80042e8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042cc:	f003 0320 	and.w	r3, r3, #32
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d009      	beq.n	80042e8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 82a6 	beq.w	800482a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	4798      	blx	r3
      }
      return;
 80042e6:	e2a0      	b.n	800482a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80042e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 8117 	beq.w	8004520 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80042f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80042fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004302:	4b85      	ldr	r3, [pc, #532]	; (8004518 <HAL_UART_IRQHandler+0x298>)
 8004304:	4013      	ands	r3, r2
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 810a 	beq.w	8004520 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800430c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d011      	beq.n	800433c <HAL_UART_IRQHandler+0xbc>
 8004318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00b      	beq.n	800433c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2201      	movs	r2, #1
 800432a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004332:	f043 0201 	orr.w	r2, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800433c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d011      	beq.n	800436c <HAL_UART_IRQHandler+0xec>
 8004348:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00b      	beq.n	800436c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2202      	movs	r2, #2
 800435a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004362:	f043 0204 	orr.w	r2, r3, #4
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800436c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b00      	cmp	r3, #0
 8004376:	d011      	beq.n	800439c <HAL_UART_IRQHandler+0x11c>
 8004378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00b      	beq.n	800439c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2204      	movs	r2, #4
 800438a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004392:	f043 0202 	orr.w	r2, r3, #2
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800439c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d017      	beq.n	80043d8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ac:	f003 0320 	and.w	r3, r3, #32
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d105      	bne.n	80043c0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80043b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00b      	beq.n	80043d8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2208      	movs	r2, #8
 80043c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ce:	f043 0208 	orr.w	r2, r3, #8
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80043d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d012      	beq.n	800440a <HAL_UART_IRQHandler+0x18a>
 80043e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00c      	beq.n	800440a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004400:	f043 0220 	orr.w	r2, r3, #32
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 820c 	beq.w	800482e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800441a:	f003 0320 	and.w	r3, r3, #32
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00d      	beq.n	800443e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	2b00      	cmp	r3, #0
 800442c:	d007      	beq.n	800443e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004444:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004452:	2b40      	cmp	r3, #64	; 0x40
 8004454:	d005      	beq.n	8004462 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800445a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800445e:	2b00      	cmp	r3, #0
 8004460:	d04f      	beq.n	8004502 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fe75 	bl	8005152 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004472:	2b40      	cmp	r3, #64	; 0x40
 8004474:	d141      	bne.n	80044fa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3308      	adds	r3, #8
 800447c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004480:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800448c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004494:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3308      	adds	r3, #8
 800449e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80044a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80044a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80044ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80044b2:	e841 2300 	strex	r3, r2, [r1]
 80044b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80044ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1d9      	bne.n	8004476 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d013      	beq.n	80044f2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ce:	4a13      	ldr	r2, [pc, #76]	; (800451c <HAL_UART_IRQHandler+0x29c>)
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fd f8ce 	bl	8001678 <HAL_DMA_Abort_IT>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d017      	beq.n	8004512 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80044ec:	4610      	mov	r0, r2
 80044ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f0:	e00f      	b.n	8004512 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f9b0 	bl	8004858 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f8:	e00b      	b.n	8004512 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f9ac 	bl	8004858 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004500:	e007      	b.n	8004512 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f9a8 	bl	8004858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004510:	e18d      	b.n	800482e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004512:	bf00      	nop
    return;
 8004514:	e18b      	b.n	800482e <HAL_UART_IRQHandler+0x5ae>
 8004516:	bf00      	nop
 8004518:	04000120 	.word	0x04000120
 800451c:	08005219 	.word	0x08005219

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004524:	2b01      	cmp	r3, #1
 8004526:	f040 8146 	bne.w	80047b6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800452a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800452e:	f003 0310 	and.w	r3, r3, #16
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 813f 	beq.w	80047b6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 8138 	beq.w	80047b6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2210      	movs	r2, #16
 800454c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004558:	2b40      	cmp	r3, #64	; 0x40
 800455a:	f040 80b4 	bne.w	80046c6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800456a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 815f 	beq.w	8004832 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800457a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800457e:	429a      	cmp	r2, r3
 8004580:	f080 8157 	bcs.w	8004832 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800458a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b00      	cmp	r3, #0
 800459c:	f040 8085 	bne.w	80046aa <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045ac:	e853 3f00 	ldrex	r3, [r3]
 80045b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80045b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80045ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80045ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80045d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045da:	e841 2300 	strex	r3, r2, [r1]
 80045de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80045e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1da      	bne.n	80045a0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3308      	adds	r3, #8
 80045f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045f4:	e853 3f00 	ldrex	r3, [r3]
 80045f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045fc:	f023 0301 	bic.w	r3, r3, #1
 8004600:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3308      	adds	r3, #8
 800460a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800460e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004612:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004616:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e1      	bne.n	80045ea <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3308      	adds	r3, #8
 800462c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800463c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3308      	adds	r3, #8
 8004646:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800464a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800464c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004650:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004652:	e841 2300 	strex	r3, r2, [r1]
 8004656:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1e3      	bne.n	8004626 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2220      	movs	r2, #32
 8004662:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800467a:	f023 0310 	bic.w	r3, r3, #16
 800467e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	461a      	mov	r2, r3
 8004688:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800468c:	65bb      	str	r3, [r7, #88]	; 0x58
 800468e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004690:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004692:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004694:	e841 2300 	strex	r3, r2, [r1]
 8004698:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800469a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1e4      	bne.n	800466a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fc ffa9 	bl	80015fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	4619      	mov	r1, r3
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f8d4 	bl	800486c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046c4:	e0b5      	b.n	8004832 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 80a7 	beq.w	8004836 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80046e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 80a2 	beq.w	8004836 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fa:	e853 3f00 	ldrex	r3, [r3]
 80046fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004702:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004706:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004714:	647b      	str	r3, [r7, #68]	; 0x44
 8004716:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004718:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800471a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800471c:	e841 2300 	strex	r3, r2, [r1]
 8004720:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e4      	bne.n	80046f2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3308      	adds	r3, #8
 800472e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	e853 3f00 	ldrex	r3, [r3]
 8004736:	623b      	str	r3, [r7, #32]
   return(result);
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	f023 0301 	bic.w	r3, r3, #1
 800473e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3308      	adds	r3, #8
 8004748:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800474c:	633a      	str	r2, [r7, #48]	; 0x30
 800474e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004750:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004754:	e841 2300 	strex	r3, r2, [r1]
 8004758:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1e3      	bne.n	8004728 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2220      	movs	r2, #32
 8004764:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	e853 3f00 	ldrex	r3, [r3]
 800477e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 0310 	bic.w	r3, r3, #16
 8004786:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004794:	61fb      	str	r3, [r7, #28]
 8004796:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004798:	69b9      	ldr	r1, [r7, #24]
 800479a:	69fa      	ldr	r2, [r7, #28]
 800479c:	e841 2300 	strex	r3, r2, [r1]
 80047a0:	617b      	str	r3, [r7, #20]
   return(result);
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1e4      	bne.n	8004772 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047ac:	4619      	mov	r1, r3
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f85c 	bl	800486c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80047b4:	e03f      	b.n	8004836 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80047b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00e      	beq.n	80047e0 <HAL_UART_IRQHandler+0x560>
 80047c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d008      	beq.n	80047e0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80047d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fd5d 	bl	8005298 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047de:	e02d      	b.n	800483c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80047e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00e      	beq.n	800480a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80047ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d008      	beq.n	800480a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d01c      	beq.n	800483a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	4798      	blx	r3
    }
    return;
 8004808:	e017      	b.n	800483a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800480a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800480e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d012      	beq.n	800483c <HAL_UART_IRQHandler+0x5bc>
 8004816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800481a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00c      	beq.n	800483c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fd0e 	bl	8005244 <UART_EndTransmit_IT>
    return;
 8004828:	e008      	b.n	800483c <HAL_UART_IRQHandler+0x5bc>
      return;
 800482a:	bf00      	nop
 800482c:	e006      	b.n	800483c <HAL_UART_IRQHandler+0x5bc>
    return;
 800482e:	bf00      	nop
 8004830:	e004      	b.n	800483c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004832:	bf00      	nop
 8004834:	e002      	b.n	800483c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004836:	bf00      	nop
 8004838:	e000      	b.n	800483c <HAL_UART_IRQHandler+0x5bc>
    return;
 800483a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800483c:	37e8      	adds	r7, #232	; 0xe8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop

08004844 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004888:	b08a      	sub	sp, #40	; 0x28
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	431a      	orrs	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	4ba4      	ldr	r3, [pc, #656]	; (8004b44 <UART_SetConfig+0x2c0>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	6812      	ldr	r2, [r2, #0]
 80048ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048bc:	430b      	orrs	r3, r1
 80048be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a99      	ldr	r2, [pc, #612]	; (8004b48 <UART_SetConfig+0x2c4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ec:	4313      	orrs	r3, r2
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004900:	430a      	orrs	r2, r1
 8004902:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a90      	ldr	r2, [pc, #576]	; (8004b4c <UART_SetConfig+0x2c8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d126      	bne.n	800495c <UART_SetConfig+0xd8>
 800490e:	4b90      	ldr	r3, [pc, #576]	; (8004b50 <UART_SetConfig+0x2cc>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004914:	f003 0303 	and.w	r3, r3, #3
 8004918:	2b03      	cmp	r3, #3
 800491a:	d81b      	bhi.n	8004954 <UART_SetConfig+0xd0>
 800491c:	a201      	add	r2, pc, #4	; (adr r2, 8004924 <UART_SetConfig+0xa0>)
 800491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004922:	bf00      	nop
 8004924:	08004935 	.word	0x08004935
 8004928:	08004945 	.word	0x08004945
 800492c:	0800493d 	.word	0x0800493d
 8004930:	0800494d 	.word	0x0800494d
 8004934:	2301      	movs	r3, #1
 8004936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800493a:	e116      	b.n	8004b6a <UART_SetConfig+0x2e6>
 800493c:	2302      	movs	r3, #2
 800493e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004942:	e112      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004944:	2304      	movs	r3, #4
 8004946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800494a:	e10e      	b.n	8004b6a <UART_SetConfig+0x2e6>
 800494c:	2308      	movs	r3, #8
 800494e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004952:	e10a      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004954:	2310      	movs	r3, #16
 8004956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800495a:	e106      	b.n	8004b6a <UART_SetConfig+0x2e6>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a7c      	ldr	r2, [pc, #496]	; (8004b54 <UART_SetConfig+0x2d0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d138      	bne.n	80049d8 <UART_SetConfig+0x154>
 8004966:	4b7a      	ldr	r3, [pc, #488]	; (8004b50 <UART_SetConfig+0x2cc>)
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496c:	f003 030c 	and.w	r3, r3, #12
 8004970:	2b0c      	cmp	r3, #12
 8004972:	d82d      	bhi.n	80049d0 <UART_SetConfig+0x14c>
 8004974:	a201      	add	r2, pc, #4	; (adr r2, 800497c <UART_SetConfig+0xf8>)
 8004976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497a:	bf00      	nop
 800497c:	080049b1 	.word	0x080049b1
 8004980:	080049d1 	.word	0x080049d1
 8004984:	080049d1 	.word	0x080049d1
 8004988:	080049d1 	.word	0x080049d1
 800498c:	080049c1 	.word	0x080049c1
 8004990:	080049d1 	.word	0x080049d1
 8004994:	080049d1 	.word	0x080049d1
 8004998:	080049d1 	.word	0x080049d1
 800499c:	080049b9 	.word	0x080049b9
 80049a0:	080049d1 	.word	0x080049d1
 80049a4:	080049d1 	.word	0x080049d1
 80049a8:	080049d1 	.word	0x080049d1
 80049ac:	080049c9 	.word	0x080049c9
 80049b0:	2300      	movs	r3, #0
 80049b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049b6:	e0d8      	b.n	8004b6a <UART_SetConfig+0x2e6>
 80049b8:	2302      	movs	r3, #2
 80049ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049be:	e0d4      	b.n	8004b6a <UART_SetConfig+0x2e6>
 80049c0:	2304      	movs	r3, #4
 80049c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049c6:	e0d0      	b.n	8004b6a <UART_SetConfig+0x2e6>
 80049c8:	2308      	movs	r3, #8
 80049ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ce:	e0cc      	b.n	8004b6a <UART_SetConfig+0x2e6>
 80049d0:	2310      	movs	r3, #16
 80049d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049d6:	e0c8      	b.n	8004b6a <UART_SetConfig+0x2e6>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a5e      	ldr	r2, [pc, #376]	; (8004b58 <UART_SetConfig+0x2d4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d125      	bne.n	8004a2e <UART_SetConfig+0x1aa>
 80049e2:	4b5b      	ldr	r3, [pc, #364]	; (8004b50 <UART_SetConfig+0x2cc>)
 80049e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049ec:	2b30      	cmp	r3, #48	; 0x30
 80049ee:	d016      	beq.n	8004a1e <UART_SetConfig+0x19a>
 80049f0:	2b30      	cmp	r3, #48	; 0x30
 80049f2:	d818      	bhi.n	8004a26 <UART_SetConfig+0x1a2>
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d00a      	beq.n	8004a0e <UART_SetConfig+0x18a>
 80049f8:	2b20      	cmp	r3, #32
 80049fa:	d814      	bhi.n	8004a26 <UART_SetConfig+0x1a2>
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <UART_SetConfig+0x182>
 8004a00:	2b10      	cmp	r3, #16
 8004a02:	d008      	beq.n	8004a16 <UART_SetConfig+0x192>
 8004a04:	e00f      	b.n	8004a26 <UART_SetConfig+0x1a2>
 8004a06:	2300      	movs	r3, #0
 8004a08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a0c:	e0ad      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a14:	e0a9      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a16:	2304      	movs	r3, #4
 8004a18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a1c:	e0a5      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a1e:	2308      	movs	r3, #8
 8004a20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a24:	e0a1      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a26:	2310      	movs	r3, #16
 8004a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a2c:	e09d      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a4a      	ldr	r2, [pc, #296]	; (8004b5c <UART_SetConfig+0x2d8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d125      	bne.n	8004a84 <UART_SetConfig+0x200>
 8004a38:	4b45      	ldr	r3, [pc, #276]	; (8004b50 <UART_SetConfig+0x2cc>)
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a42:	2bc0      	cmp	r3, #192	; 0xc0
 8004a44:	d016      	beq.n	8004a74 <UART_SetConfig+0x1f0>
 8004a46:	2bc0      	cmp	r3, #192	; 0xc0
 8004a48:	d818      	bhi.n	8004a7c <UART_SetConfig+0x1f8>
 8004a4a:	2b80      	cmp	r3, #128	; 0x80
 8004a4c:	d00a      	beq.n	8004a64 <UART_SetConfig+0x1e0>
 8004a4e:	2b80      	cmp	r3, #128	; 0x80
 8004a50:	d814      	bhi.n	8004a7c <UART_SetConfig+0x1f8>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <UART_SetConfig+0x1d8>
 8004a56:	2b40      	cmp	r3, #64	; 0x40
 8004a58:	d008      	beq.n	8004a6c <UART_SetConfig+0x1e8>
 8004a5a:	e00f      	b.n	8004a7c <UART_SetConfig+0x1f8>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a62:	e082      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a64:	2302      	movs	r3, #2
 8004a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a6a:	e07e      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a6c:	2304      	movs	r3, #4
 8004a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a72:	e07a      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a74:	2308      	movs	r3, #8
 8004a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a7a:	e076      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a7c:	2310      	movs	r3, #16
 8004a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a82:	e072      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a35      	ldr	r2, [pc, #212]	; (8004b60 <UART_SetConfig+0x2dc>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d12a      	bne.n	8004ae4 <UART_SetConfig+0x260>
 8004a8e:	4b30      	ldr	r3, [pc, #192]	; (8004b50 <UART_SetConfig+0x2cc>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a9c:	d01a      	beq.n	8004ad4 <UART_SetConfig+0x250>
 8004a9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aa2:	d81b      	bhi.n	8004adc <UART_SetConfig+0x258>
 8004aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa8:	d00c      	beq.n	8004ac4 <UART_SetConfig+0x240>
 8004aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aae:	d815      	bhi.n	8004adc <UART_SetConfig+0x258>
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <UART_SetConfig+0x238>
 8004ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ab8:	d008      	beq.n	8004acc <UART_SetConfig+0x248>
 8004aba:	e00f      	b.n	8004adc <UART_SetConfig+0x258>
 8004abc:	2300      	movs	r3, #0
 8004abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ac2:	e052      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aca:	e04e      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004acc:	2304      	movs	r3, #4
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ad2:	e04a      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004ad4:	2308      	movs	r3, #8
 8004ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ada:	e046      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004adc:	2310      	movs	r3, #16
 8004ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ae2:	e042      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a17      	ldr	r2, [pc, #92]	; (8004b48 <UART_SetConfig+0x2c4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d13a      	bne.n	8004b64 <UART_SetConfig+0x2e0>
 8004aee:	4b18      	ldr	r3, [pc, #96]	; (8004b50 <UART_SetConfig+0x2cc>)
 8004af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004af8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004afc:	d01a      	beq.n	8004b34 <UART_SetConfig+0x2b0>
 8004afe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b02:	d81b      	bhi.n	8004b3c <UART_SetConfig+0x2b8>
 8004b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b08:	d00c      	beq.n	8004b24 <UART_SetConfig+0x2a0>
 8004b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b0e:	d815      	bhi.n	8004b3c <UART_SetConfig+0x2b8>
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <UART_SetConfig+0x298>
 8004b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b18:	d008      	beq.n	8004b2c <UART_SetConfig+0x2a8>
 8004b1a:	e00f      	b.n	8004b3c <UART_SetConfig+0x2b8>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b22:	e022      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004b24:	2302      	movs	r3, #2
 8004b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b2a:	e01e      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004b2c:	2304      	movs	r3, #4
 8004b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b32:	e01a      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004b34:	2308      	movs	r3, #8
 8004b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b3a:	e016      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004b3c:	2310      	movs	r3, #16
 8004b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b42:	e012      	b.n	8004b6a <UART_SetConfig+0x2e6>
 8004b44:	efff69f3 	.word	0xefff69f3
 8004b48:	40008000 	.word	0x40008000
 8004b4c:	40013800 	.word	0x40013800
 8004b50:	40021000 	.word	0x40021000
 8004b54:	40004400 	.word	0x40004400
 8004b58:	40004800 	.word	0x40004800
 8004b5c:	40004c00 	.word	0x40004c00
 8004b60:	40005000 	.word	0x40005000
 8004b64:	2310      	movs	r3, #16
 8004b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a9f      	ldr	r2, [pc, #636]	; (8004dec <UART_SetConfig+0x568>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d17a      	bne.n	8004c6a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d824      	bhi.n	8004bc6 <UART_SetConfig+0x342>
 8004b7c:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <UART_SetConfig+0x300>)
 8004b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b82:	bf00      	nop
 8004b84:	08004ba9 	.word	0x08004ba9
 8004b88:	08004bc7 	.word	0x08004bc7
 8004b8c:	08004bb1 	.word	0x08004bb1
 8004b90:	08004bc7 	.word	0x08004bc7
 8004b94:	08004bb7 	.word	0x08004bb7
 8004b98:	08004bc7 	.word	0x08004bc7
 8004b9c:	08004bc7 	.word	0x08004bc7
 8004ba0:	08004bc7 	.word	0x08004bc7
 8004ba4:	08004bbf 	.word	0x08004bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba8:	f7fd fdde 	bl	8002768 <HAL_RCC_GetPCLK1Freq>
 8004bac:	61f8      	str	r0, [r7, #28]
        break;
 8004bae:	e010      	b.n	8004bd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb0:	4b8f      	ldr	r3, [pc, #572]	; (8004df0 <UART_SetConfig+0x56c>)
 8004bb2:	61fb      	str	r3, [r7, #28]
        break;
 8004bb4:	e00d      	b.n	8004bd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb6:	f7fd fd3f 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 8004bba:	61f8      	str	r0, [r7, #28]
        break;
 8004bbc:	e009      	b.n	8004bd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bc2:	61fb      	str	r3, [r7, #28]
        break;
 8004bc4:	e005      	b.n	8004bd2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004bd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 80fb 	beq.w	8004dd0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	4613      	mov	r3, r2
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	4413      	add	r3, r2
 8004be4:	69fa      	ldr	r2, [r7, #28]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d305      	bcc.n	8004bf6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004bf0:	69fa      	ldr	r2, [r7, #28]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d903      	bls.n	8004bfe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004bfc:	e0e8      	b.n	8004dd0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	2200      	movs	r2, #0
 8004c02:	461c      	mov	r4, r3
 8004c04:	4615      	mov	r5, r2
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	f04f 0300 	mov.w	r3, #0
 8004c0e:	022b      	lsls	r3, r5, #8
 8004c10:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004c14:	0222      	lsls	r2, r4, #8
 8004c16:	68f9      	ldr	r1, [r7, #12]
 8004c18:	6849      	ldr	r1, [r1, #4]
 8004c1a:	0849      	lsrs	r1, r1, #1
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	4688      	mov	r8, r1
 8004c20:	4681      	mov	r9, r0
 8004c22:	eb12 0a08 	adds.w	sl, r2, r8
 8004c26:	eb43 0b09 	adc.w	fp, r3, r9
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	603b      	str	r3, [r7, #0]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c38:	4650      	mov	r0, sl
 8004c3a:	4659      	mov	r1, fp
 8004c3c:	f7fb fb18 	bl	8000270 <__aeabi_uldivmod>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4613      	mov	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c4e:	d308      	bcc.n	8004c62 <UART_SetConfig+0x3de>
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c56:	d204      	bcs.n	8004c62 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	60da      	str	r2, [r3, #12]
 8004c60:	e0b6      	b.n	8004dd0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c68:	e0b2      	b.n	8004dd0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c72:	d15e      	bne.n	8004d32 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004c74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d828      	bhi.n	8004cce <UART_SetConfig+0x44a>
 8004c7c:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <UART_SetConfig+0x400>)
 8004c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c82:	bf00      	nop
 8004c84:	08004ca9 	.word	0x08004ca9
 8004c88:	08004cb1 	.word	0x08004cb1
 8004c8c:	08004cb9 	.word	0x08004cb9
 8004c90:	08004ccf 	.word	0x08004ccf
 8004c94:	08004cbf 	.word	0x08004cbf
 8004c98:	08004ccf 	.word	0x08004ccf
 8004c9c:	08004ccf 	.word	0x08004ccf
 8004ca0:	08004ccf 	.word	0x08004ccf
 8004ca4:	08004cc7 	.word	0x08004cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca8:	f7fd fd5e 	bl	8002768 <HAL_RCC_GetPCLK1Freq>
 8004cac:	61f8      	str	r0, [r7, #28]
        break;
 8004cae:	e014      	b.n	8004cda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cb0:	f7fd fd70 	bl	8002794 <HAL_RCC_GetPCLK2Freq>
 8004cb4:	61f8      	str	r0, [r7, #28]
        break;
 8004cb6:	e010      	b.n	8004cda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb8:	4b4d      	ldr	r3, [pc, #308]	; (8004df0 <UART_SetConfig+0x56c>)
 8004cba:	61fb      	str	r3, [r7, #28]
        break;
 8004cbc:	e00d      	b.n	8004cda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cbe:	f7fd fcbb 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 8004cc2:	61f8      	str	r0, [r7, #28]
        break;
 8004cc4:	e009      	b.n	8004cda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cca:	61fb      	str	r3, [r7, #28]
        break;
 8004ccc:	e005      	b.n	8004cda <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004cd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d077      	beq.n	8004dd0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	005a      	lsls	r2, r3, #1
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	085b      	lsrs	r3, r3, #1
 8004cea:	441a      	add	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	2b0f      	cmp	r3, #15
 8004cfa:	d916      	bls.n	8004d2a <UART_SetConfig+0x4a6>
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d02:	d212      	bcs.n	8004d2a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	f023 030f 	bic.w	r3, r3, #15
 8004d0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	085b      	lsrs	r3, r3, #1
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	8afb      	ldrh	r3, [r7, #22]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	8afa      	ldrh	r2, [r7, #22]
 8004d26:	60da      	str	r2, [r3, #12]
 8004d28:	e052      	b.n	8004dd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d30:	e04e      	b.n	8004dd0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d827      	bhi.n	8004d8a <UART_SetConfig+0x506>
 8004d3a:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <UART_SetConfig+0x4bc>)
 8004d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d40:	08004d65 	.word	0x08004d65
 8004d44:	08004d6d 	.word	0x08004d6d
 8004d48:	08004d75 	.word	0x08004d75
 8004d4c:	08004d8b 	.word	0x08004d8b
 8004d50:	08004d7b 	.word	0x08004d7b
 8004d54:	08004d8b 	.word	0x08004d8b
 8004d58:	08004d8b 	.word	0x08004d8b
 8004d5c:	08004d8b 	.word	0x08004d8b
 8004d60:	08004d83 	.word	0x08004d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d64:	f7fd fd00 	bl	8002768 <HAL_RCC_GetPCLK1Freq>
 8004d68:	61f8      	str	r0, [r7, #28]
        break;
 8004d6a:	e014      	b.n	8004d96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d6c:	f7fd fd12 	bl	8002794 <HAL_RCC_GetPCLK2Freq>
 8004d70:	61f8      	str	r0, [r7, #28]
        break;
 8004d72:	e010      	b.n	8004d96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d74:	4b1e      	ldr	r3, [pc, #120]	; (8004df0 <UART_SetConfig+0x56c>)
 8004d76:	61fb      	str	r3, [r7, #28]
        break;
 8004d78:	e00d      	b.n	8004d96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d7a:	f7fd fc5d 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 8004d7e:	61f8      	str	r0, [r7, #28]
        break;
 8004d80:	e009      	b.n	8004d96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d86:	61fb      	str	r3, [r7, #28]
        break;
 8004d88:	e005      	b.n	8004d96 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d94:	bf00      	nop
    }

    if (pclk != 0U)
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d019      	beq.n	8004dd0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	085a      	lsrs	r2, r3, #1
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	441a      	add	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	2b0f      	cmp	r3, #15
 8004db4:	d909      	bls.n	8004dca <UART_SetConfig+0x546>
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dbc:	d205      	bcs.n	8004dca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	60da      	str	r2, [r3, #12]
 8004dc8:	e002      	b.n	8004dd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ddc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3728      	adds	r7, #40	; 0x28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dea:	bf00      	nop
 8004dec:	40008000 	.word	0x40008000
 8004df0:	00f42400 	.word	0x00f42400

08004df4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	f003 0310 	and.w	r3, r3, #16
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	f003 0320 	and.w	r3, r3, #32
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d01a      	beq.n	8004f0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ef2:	d10a      	bne.n	8004f0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	605a      	str	r2, [r3, #4]
  }
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f48:	f7fc f982 	bl	8001250 <HAL_GetTick>
 8004f4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d10e      	bne.n	8004f7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f82d 	bl	8004fca <UART_WaitOnFlagUntilTimeout>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e023      	b.n	8004fc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d10e      	bne.n	8004fa6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f817 	bl	8004fca <UART_WaitOnFlagUntilTimeout>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e00d      	b.n	8004fc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b09c      	sub	sp, #112	; 0x70
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	603b      	str	r3, [r7, #0]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fda:	e0a5      	b.n	8005128 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe2:	f000 80a1 	beq.w	8005128 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe6:	f7fc f933 	bl	8001250 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d302      	bcc.n	8004ffc <UART_WaitOnFlagUntilTimeout+0x32>
 8004ff6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d13e      	bne.n	800507a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005004:	e853 3f00 	ldrex	r3, [r3]
 8005008:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800500a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800500c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005010:	667b      	str	r3, [r7, #100]	; 0x64
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	461a      	mov	r2, r3
 8005018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800501a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800501c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005020:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005022:	e841 2300 	strex	r3, r2, [r1]
 8005026:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1e6      	bne.n	8004ffc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	3308      	adds	r3, #8
 8005034:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005038:	e853 3f00 	ldrex	r3, [r3]
 800503c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	f023 0301 	bic.w	r3, r3, #1
 8005044:	663b      	str	r3, [r7, #96]	; 0x60
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3308      	adds	r3, #8
 800504c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800504e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005050:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005052:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005054:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005056:	e841 2300 	strex	r3, r2, [r1]
 800505a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800505c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1e5      	bne.n	800502e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2220      	movs	r2, #32
 8005066:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2220      	movs	r2, #32
 800506c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e067      	b.n	800514a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d04f      	beq.n	8005128 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005096:	d147      	bne.n	8005128 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050a0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050aa:	e853 3f00 	ldrex	r3, [r3]
 80050ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	461a      	mov	r2, r3
 80050be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c0:	637b      	str	r3, [r7, #52]	; 0x34
 80050c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050c8:	e841 2300 	strex	r3, r2, [r1]
 80050cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1e6      	bne.n	80050a2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3308      	adds	r3, #8
 80050da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	e853 3f00 	ldrex	r3, [r3]
 80050e2:	613b      	str	r3, [r7, #16]
   return(result);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f023 0301 	bic.w	r3, r3, #1
 80050ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3308      	adds	r3, #8
 80050f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80050f4:	623a      	str	r2, [r7, #32]
 80050f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f8:	69f9      	ldr	r1, [r7, #28]
 80050fa:	6a3a      	ldr	r2, [r7, #32]
 80050fc:	e841 2300 	strex	r3, r2, [r1]
 8005100:	61bb      	str	r3, [r7, #24]
   return(result);
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1e5      	bne.n	80050d4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2220      	movs	r2, #32
 800510c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2220      	movs	r2, #32
 8005112:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2220      	movs	r2, #32
 8005118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e010      	b.n	800514a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	69da      	ldr	r2, [r3, #28]
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	4013      	ands	r3, r2
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	429a      	cmp	r2, r3
 8005136:	bf0c      	ite	eq
 8005138:	2301      	moveq	r3, #1
 800513a:	2300      	movne	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	461a      	mov	r2, r3
 8005140:	79fb      	ldrb	r3, [r7, #7]
 8005142:	429a      	cmp	r2, r3
 8005144:	f43f af4a 	beq.w	8004fdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3770      	adds	r7, #112	; 0x70
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005152:	b480      	push	{r7}
 8005154:	b095      	sub	sp, #84	; 0x54
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005162:	e853 3f00 	ldrex	r3, [r3]
 8005166:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800516e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	461a      	mov	r2, r3
 8005176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005178:	643b      	str	r3, [r7, #64]	; 0x40
 800517a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800517e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005180:	e841 2300 	strex	r3, r2, [r1]
 8005184:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e6      	bne.n	800515a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3308      	adds	r3, #8
 8005192:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	e853 3f00 	ldrex	r3, [r3]
 800519a:	61fb      	str	r3, [r7, #28]
   return(result);
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	f023 0301 	bic.w	r3, r3, #1
 80051a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3308      	adds	r3, #8
 80051aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051b4:	e841 2300 	strex	r3, r2, [r1]
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e5      	bne.n	800518c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d118      	bne.n	80051fa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	e853 3f00 	ldrex	r3, [r3]
 80051d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f023 0310 	bic.w	r3, r3, #16
 80051dc:	647b      	str	r3, [r7, #68]	; 0x44
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	461a      	mov	r2, r3
 80051e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051e6:	61bb      	str	r3, [r7, #24]
 80051e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ea:	6979      	ldr	r1, [r7, #20]
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	e841 2300 	strex	r3, r2, [r1]
 80051f2:	613b      	str	r3, [r7, #16]
   return(result);
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1e6      	bne.n	80051c8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2220      	movs	r2, #32
 80051fe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800520c:	bf00      	nop
 800520e:	3754      	adds	r7, #84	; 0x54
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005224:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f7ff fb0e 	bl	8004858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800523c:	bf00      	nop
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b088      	sub	sp, #32
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	60bb      	str	r3, [r7, #8]
   return(result);
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005260:	61fb      	str	r3, [r7, #28]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	6979      	ldr	r1, [r7, #20]
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	613b      	str	r3, [r7, #16]
   return(result);
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e6      	bne.n	800524c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2220      	movs	r2, #32
 8005282:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7ff fada 	bl	8004844 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005290:	bf00      	nop
 8005292:	3720      	adds	r7, #32
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <__errno>:
 80052ac:	4b01      	ldr	r3, [pc, #4]	; (80052b4 <__errno+0x8>)
 80052ae:	6818      	ldr	r0, [r3, #0]
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	2000000c 	.word	0x2000000c

080052b8 <__libc_init_array>:
 80052b8:	b570      	push	{r4, r5, r6, lr}
 80052ba:	4d0d      	ldr	r5, [pc, #52]	; (80052f0 <__libc_init_array+0x38>)
 80052bc:	4c0d      	ldr	r4, [pc, #52]	; (80052f4 <__libc_init_array+0x3c>)
 80052be:	1b64      	subs	r4, r4, r5
 80052c0:	10a4      	asrs	r4, r4, #2
 80052c2:	2600      	movs	r6, #0
 80052c4:	42a6      	cmp	r6, r4
 80052c6:	d109      	bne.n	80052dc <__libc_init_array+0x24>
 80052c8:	4d0b      	ldr	r5, [pc, #44]	; (80052f8 <__libc_init_array+0x40>)
 80052ca:	4c0c      	ldr	r4, [pc, #48]	; (80052fc <__libc_init_array+0x44>)
 80052cc:	f000 fc8e 	bl	8005bec <_init>
 80052d0:	1b64      	subs	r4, r4, r5
 80052d2:	10a4      	asrs	r4, r4, #2
 80052d4:	2600      	movs	r6, #0
 80052d6:	42a6      	cmp	r6, r4
 80052d8:	d105      	bne.n	80052e6 <__libc_init_array+0x2e>
 80052da:	bd70      	pop	{r4, r5, r6, pc}
 80052dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80052e0:	4798      	blx	r3
 80052e2:	3601      	adds	r6, #1
 80052e4:	e7ee      	b.n	80052c4 <__libc_init_array+0xc>
 80052e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ea:	4798      	blx	r3
 80052ec:	3601      	adds	r6, #1
 80052ee:	e7f2      	b.n	80052d6 <__libc_init_array+0x1e>
 80052f0:	08005c98 	.word	0x08005c98
 80052f4:	08005c98 	.word	0x08005c98
 80052f8:	08005c98 	.word	0x08005c98
 80052fc:	08005c9c 	.word	0x08005c9c

08005300 <memset>:
 8005300:	4402      	add	r2, r0
 8005302:	4603      	mov	r3, r0
 8005304:	4293      	cmp	r3, r2
 8005306:	d100      	bne.n	800530a <memset+0xa>
 8005308:	4770      	bx	lr
 800530a:	f803 1b01 	strb.w	r1, [r3], #1
 800530e:	e7f9      	b.n	8005304 <memset+0x4>

08005310 <siprintf>:
 8005310:	b40e      	push	{r1, r2, r3}
 8005312:	b500      	push	{lr}
 8005314:	b09c      	sub	sp, #112	; 0x70
 8005316:	ab1d      	add	r3, sp, #116	; 0x74
 8005318:	9002      	str	r0, [sp, #8]
 800531a:	9006      	str	r0, [sp, #24]
 800531c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005320:	4809      	ldr	r0, [pc, #36]	; (8005348 <siprintf+0x38>)
 8005322:	9107      	str	r1, [sp, #28]
 8005324:	9104      	str	r1, [sp, #16]
 8005326:	4909      	ldr	r1, [pc, #36]	; (800534c <siprintf+0x3c>)
 8005328:	f853 2b04 	ldr.w	r2, [r3], #4
 800532c:	9105      	str	r1, [sp, #20]
 800532e:	6800      	ldr	r0, [r0, #0]
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	a902      	add	r1, sp, #8
 8005334:	f000 f868 	bl	8005408 <_svfiprintf_r>
 8005338:	9b02      	ldr	r3, [sp, #8]
 800533a:	2200      	movs	r2, #0
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	b01c      	add	sp, #112	; 0x70
 8005340:	f85d eb04 	ldr.w	lr, [sp], #4
 8005344:	b003      	add	sp, #12
 8005346:	4770      	bx	lr
 8005348:	2000000c 	.word	0x2000000c
 800534c:	ffff0208 	.word	0xffff0208

08005350 <__ssputs_r>:
 8005350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005354:	688e      	ldr	r6, [r1, #8]
 8005356:	429e      	cmp	r6, r3
 8005358:	4682      	mov	sl, r0
 800535a:	460c      	mov	r4, r1
 800535c:	4690      	mov	r8, r2
 800535e:	461f      	mov	r7, r3
 8005360:	d838      	bhi.n	80053d4 <__ssputs_r+0x84>
 8005362:	898a      	ldrh	r2, [r1, #12]
 8005364:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005368:	d032      	beq.n	80053d0 <__ssputs_r+0x80>
 800536a:	6825      	ldr	r5, [r4, #0]
 800536c:	6909      	ldr	r1, [r1, #16]
 800536e:	eba5 0901 	sub.w	r9, r5, r1
 8005372:	6965      	ldr	r5, [r4, #20]
 8005374:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005378:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800537c:	3301      	adds	r3, #1
 800537e:	444b      	add	r3, r9
 8005380:	106d      	asrs	r5, r5, #1
 8005382:	429d      	cmp	r5, r3
 8005384:	bf38      	it	cc
 8005386:	461d      	movcc	r5, r3
 8005388:	0553      	lsls	r3, r2, #21
 800538a:	d531      	bpl.n	80053f0 <__ssputs_r+0xa0>
 800538c:	4629      	mov	r1, r5
 800538e:	f000 fb63 	bl	8005a58 <_malloc_r>
 8005392:	4606      	mov	r6, r0
 8005394:	b950      	cbnz	r0, 80053ac <__ssputs_r+0x5c>
 8005396:	230c      	movs	r3, #12
 8005398:	f8ca 3000 	str.w	r3, [sl]
 800539c:	89a3      	ldrh	r3, [r4, #12]
 800539e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053a2:	81a3      	strh	r3, [r4, #12]
 80053a4:	f04f 30ff 	mov.w	r0, #4294967295
 80053a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ac:	6921      	ldr	r1, [r4, #16]
 80053ae:	464a      	mov	r2, r9
 80053b0:	f000 fabe 	bl	8005930 <memcpy>
 80053b4:	89a3      	ldrh	r3, [r4, #12]
 80053b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053be:	81a3      	strh	r3, [r4, #12]
 80053c0:	6126      	str	r6, [r4, #16]
 80053c2:	6165      	str	r5, [r4, #20]
 80053c4:	444e      	add	r6, r9
 80053c6:	eba5 0509 	sub.w	r5, r5, r9
 80053ca:	6026      	str	r6, [r4, #0]
 80053cc:	60a5      	str	r5, [r4, #8]
 80053ce:	463e      	mov	r6, r7
 80053d0:	42be      	cmp	r6, r7
 80053d2:	d900      	bls.n	80053d6 <__ssputs_r+0x86>
 80053d4:	463e      	mov	r6, r7
 80053d6:	6820      	ldr	r0, [r4, #0]
 80053d8:	4632      	mov	r2, r6
 80053da:	4641      	mov	r1, r8
 80053dc:	f000 fab6 	bl	800594c <memmove>
 80053e0:	68a3      	ldr	r3, [r4, #8]
 80053e2:	1b9b      	subs	r3, r3, r6
 80053e4:	60a3      	str	r3, [r4, #8]
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	4433      	add	r3, r6
 80053ea:	6023      	str	r3, [r4, #0]
 80053ec:	2000      	movs	r0, #0
 80053ee:	e7db      	b.n	80053a8 <__ssputs_r+0x58>
 80053f0:	462a      	mov	r2, r5
 80053f2:	f000 fba5 	bl	8005b40 <_realloc_r>
 80053f6:	4606      	mov	r6, r0
 80053f8:	2800      	cmp	r0, #0
 80053fa:	d1e1      	bne.n	80053c0 <__ssputs_r+0x70>
 80053fc:	6921      	ldr	r1, [r4, #16]
 80053fe:	4650      	mov	r0, sl
 8005400:	f000 fabe 	bl	8005980 <_free_r>
 8005404:	e7c7      	b.n	8005396 <__ssputs_r+0x46>
	...

08005408 <_svfiprintf_r>:
 8005408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800540c:	4698      	mov	r8, r3
 800540e:	898b      	ldrh	r3, [r1, #12]
 8005410:	061b      	lsls	r3, r3, #24
 8005412:	b09d      	sub	sp, #116	; 0x74
 8005414:	4607      	mov	r7, r0
 8005416:	460d      	mov	r5, r1
 8005418:	4614      	mov	r4, r2
 800541a:	d50e      	bpl.n	800543a <_svfiprintf_r+0x32>
 800541c:	690b      	ldr	r3, [r1, #16]
 800541e:	b963      	cbnz	r3, 800543a <_svfiprintf_r+0x32>
 8005420:	2140      	movs	r1, #64	; 0x40
 8005422:	f000 fb19 	bl	8005a58 <_malloc_r>
 8005426:	6028      	str	r0, [r5, #0]
 8005428:	6128      	str	r0, [r5, #16]
 800542a:	b920      	cbnz	r0, 8005436 <_svfiprintf_r+0x2e>
 800542c:	230c      	movs	r3, #12
 800542e:	603b      	str	r3, [r7, #0]
 8005430:	f04f 30ff 	mov.w	r0, #4294967295
 8005434:	e0d1      	b.n	80055da <_svfiprintf_r+0x1d2>
 8005436:	2340      	movs	r3, #64	; 0x40
 8005438:	616b      	str	r3, [r5, #20]
 800543a:	2300      	movs	r3, #0
 800543c:	9309      	str	r3, [sp, #36]	; 0x24
 800543e:	2320      	movs	r3, #32
 8005440:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005444:	f8cd 800c 	str.w	r8, [sp, #12]
 8005448:	2330      	movs	r3, #48	; 0x30
 800544a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80055f4 <_svfiprintf_r+0x1ec>
 800544e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005452:	f04f 0901 	mov.w	r9, #1
 8005456:	4623      	mov	r3, r4
 8005458:	469a      	mov	sl, r3
 800545a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800545e:	b10a      	cbz	r2, 8005464 <_svfiprintf_r+0x5c>
 8005460:	2a25      	cmp	r2, #37	; 0x25
 8005462:	d1f9      	bne.n	8005458 <_svfiprintf_r+0x50>
 8005464:	ebba 0b04 	subs.w	fp, sl, r4
 8005468:	d00b      	beq.n	8005482 <_svfiprintf_r+0x7a>
 800546a:	465b      	mov	r3, fp
 800546c:	4622      	mov	r2, r4
 800546e:	4629      	mov	r1, r5
 8005470:	4638      	mov	r0, r7
 8005472:	f7ff ff6d 	bl	8005350 <__ssputs_r>
 8005476:	3001      	adds	r0, #1
 8005478:	f000 80aa 	beq.w	80055d0 <_svfiprintf_r+0x1c8>
 800547c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800547e:	445a      	add	r2, fp
 8005480:	9209      	str	r2, [sp, #36]	; 0x24
 8005482:	f89a 3000 	ldrb.w	r3, [sl]
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 80a2 	beq.w	80055d0 <_svfiprintf_r+0x1c8>
 800548c:	2300      	movs	r3, #0
 800548e:	f04f 32ff 	mov.w	r2, #4294967295
 8005492:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005496:	f10a 0a01 	add.w	sl, sl, #1
 800549a:	9304      	str	r3, [sp, #16]
 800549c:	9307      	str	r3, [sp, #28]
 800549e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054a2:	931a      	str	r3, [sp, #104]	; 0x68
 80054a4:	4654      	mov	r4, sl
 80054a6:	2205      	movs	r2, #5
 80054a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054ac:	4851      	ldr	r0, [pc, #324]	; (80055f4 <_svfiprintf_r+0x1ec>)
 80054ae:	f7fa fe8f 	bl	80001d0 <memchr>
 80054b2:	9a04      	ldr	r2, [sp, #16]
 80054b4:	b9d8      	cbnz	r0, 80054ee <_svfiprintf_r+0xe6>
 80054b6:	06d0      	lsls	r0, r2, #27
 80054b8:	bf44      	itt	mi
 80054ba:	2320      	movmi	r3, #32
 80054bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054c0:	0711      	lsls	r1, r2, #28
 80054c2:	bf44      	itt	mi
 80054c4:	232b      	movmi	r3, #43	; 0x2b
 80054c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054ca:	f89a 3000 	ldrb.w	r3, [sl]
 80054ce:	2b2a      	cmp	r3, #42	; 0x2a
 80054d0:	d015      	beq.n	80054fe <_svfiprintf_r+0xf6>
 80054d2:	9a07      	ldr	r2, [sp, #28]
 80054d4:	4654      	mov	r4, sl
 80054d6:	2000      	movs	r0, #0
 80054d8:	f04f 0c0a 	mov.w	ip, #10
 80054dc:	4621      	mov	r1, r4
 80054de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054e2:	3b30      	subs	r3, #48	; 0x30
 80054e4:	2b09      	cmp	r3, #9
 80054e6:	d94e      	bls.n	8005586 <_svfiprintf_r+0x17e>
 80054e8:	b1b0      	cbz	r0, 8005518 <_svfiprintf_r+0x110>
 80054ea:	9207      	str	r2, [sp, #28]
 80054ec:	e014      	b.n	8005518 <_svfiprintf_r+0x110>
 80054ee:	eba0 0308 	sub.w	r3, r0, r8
 80054f2:	fa09 f303 	lsl.w	r3, r9, r3
 80054f6:	4313      	orrs	r3, r2
 80054f8:	9304      	str	r3, [sp, #16]
 80054fa:	46a2      	mov	sl, r4
 80054fc:	e7d2      	b.n	80054a4 <_svfiprintf_r+0x9c>
 80054fe:	9b03      	ldr	r3, [sp, #12]
 8005500:	1d19      	adds	r1, r3, #4
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	9103      	str	r1, [sp, #12]
 8005506:	2b00      	cmp	r3, #0
 8005508:	bfbb      	ittet	lt
 800550a:	425b      	neglt	r3, r3
 800550c:	f042 0202 	orrlt.w	r2, r2, #2
 8005510:	9307      	strge	r3, [sp, #28]
 8005512:	9307      	strlt	r3, [sp, #28]
 8005514:	bfb8      	it	lt
 8005516:	9204      	strlt	r2, [sp, #16]
 8005518:	7823      	ldrb	r3, [r4, #0]
 800551a:	2b2e      	cmp	r3, #46	; 0x2e
 800551c:	d10c      	bne.n	8005538 <_svfiprintf_r+0x130>
 800551e:	7863      	ldrb	r3, [r4, #1]
 8005520:	2b2a      	cmp	r3, #42	; 0x2a
 8005522:	d135      	bne.n	8005590 <_svfiprintf_r+0x188>
 8005524:	9b03      	ldr	r3, [sp, #12]
 8005526:	1d1a      	adds	r2, r3, #4
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	9203      	str	r2, [sp, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	bfb8      	it	lt
 8005530:	f04f 33ff 	movlt.w	r3, #4294967295
 8005534:	3402      	adds	r4, #2
 8005536:	9305      	str	r3, [sp, #20]
 8005538:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005604 <_svfiprintf_r+0x1fc>
 800553c:	7821      	ldrb	r1, [r4, #0]
 800553e:	2203      	movs	r2, #3
 8005540:	4650      	mov	r0, sl
 8005542:	f7fa fe45 	bl	80001d0 <memchr>
 8005546:	b140      	cbz	r0, 800555a <_svfiprintf_r+0x152>
 8005548:	2340      	movs	r3, #64	; 0x40
 800554a:	eba0 000a 	sub.w	r0, r0, sl
 800554e:	fa03 f000 	lsl.w	r0, r3, r0
 8005552:	9b04      	ldr	r3, [sp, #16]
 8005554:	4303      	orrs	r3, r0
 8005556:	3401      	adds	r4, #1
 8005558:	9304      	str	r3, [sp, #16]
 800555a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800555e:	4826      	ldr	r0, [pc, #152]	; (80055f8 <_svfiprintf_r+0x1f0>)
 8005560:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005564:	2206      	movs	r2, #6
 8005566:	f7fa fe33 	bl	80001d0 <memchr>
 800556a:	2800      	cmp	r0, #0
 800556c:	d038      	beq.n	80055e0 <_svfiprintf_r+0x1d8>
 800556e:	4b23      	ldr	r3, [pc, #140]	; (80055fc <_svfiprintf_r+0x1f4>)
 8005570:	bb1b      	cbnz	r3, 80055ba <_svfiprintf_r+0x1b2>
 8005572:	9b03      	ldr	r3, [sp, #12]
 8005574:	3307      	adds	r3, #7
 8005576:	f023 0307 	bic.w	r3, r3, #7
 800557a:	3308      	adds	r3, #8
 800557c:	9303      	str	r3, [sp, #12]
 800557e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005580:	4433      	add	r3, r6
 8005582:	9309      	str	r3, [sp, #36]	; 0x24
 8005584:	e767      	b.n	8005456 <_svfiprintf_r+0x4e>
 8005586:	fb0c 3202 	mla	r2, ip, r2, r3
 800558a:	460c      	mov	r4, r1
 800558c:	2001      	movs	r0, #1
 800558e:	e7a5      	b.n	80054dc <_svfiprintf_r+0xd4>
 8005590:	2300      	movs	r3, #0
 8005592:	3401      	adds	r4, #1
 8005594:	9305      	str	r3, [sp, #20]
 8005596:	4619      	mov	r1, r3
 8005598:	f04f 0c0a 	mov.w	ip, #10
 800559c:	4620      	mov	r0, r4
 800559e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055a2:	3a30      	subs	r2, #48	; 0x30
 80055a4:	2a09      	cmp	r2, #9
 80055a6:	d903      	bls.n	80055b0 <_svfiprintf_r+0x1a8>
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0c5      	beq.n	8005538 <_svfiprintf_r+0x130>
 80055ac:	9105      	str	r1, [sp, #20]
 80055ae:	e7c3      	b.n	8005538 <_svfiprintf_r+0x130>
 80055b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80055b4:	4604      	mov	r4, r0
 80055b6:	2301      	movs	r3, #1
 80055b8:	e7f0      	b.n	800559c <_svfiprintf_r+0x194>
 80055ba:	ab03      	add	r3, sp, #12
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	462a      	mov	r2, r5
 80055c0:	4b0f      	ldr	r3, [pc, #60]	; (8005600 <_svfiprintf_r+0x1f8>)
 80055c2:	a904      	add	r1, sp, #16
 80055c4:	4638      	mov	r0, r7
 80055c6:	f3af 8000 	nop.w
 80055ca:	1c42      	adds	r2, r0, #1
 80055cc:	4606      	mov	r6, r0
 80055ce:	d1d6      	bne.n	800557e <_svfiprintf_r+0x176>
 80055d0:	89ab      	ldrh	r3, [r5, #12]
 80055d2:	065b      	lsls	r3, r3, #25
 80055d4:	f53f af2c 	bmi.w	8005430 <_svfiprintf_r+0x28>
 80055d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055da:	b01d      	add	sp, #116	; 0x74
 80055dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055e0:	ab03      	add	r3, sp, #12
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	462a      	mov	r2, r5
 80055e6:	4b06      	ldr	r3, [pc, #24]	; (8005600 <_svfiprintf_r+0x1f8>)
 80055e8:	a904      	add	r1, sp, #16
 80055ea:	4638      	mov	r0, r7
 80055ec:	f000 f87a 	bl	80056e4 <_printf_i>
 80055f0:	e7eb      	b.n	80055ca <_svfiprintf_r+0x1c2>
 80055f2:	bf00      	nop
 80055f4:	08005c5c 	.word	0x08005c5c
 80055f8:	08005c66 	.word	0x08005c66
 80055fc:	00000000 	.word	0x00000000
 8005600:	08005351 	.word	0x08005351
 8005604:	08005c62 	.word	0x08005c62

08005608 <_printf_common>:
 8005608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800560c:	4616      	mov	r6, r2
 800560e:	4699      	mov	r9, r3
 8005610:	688a      	ldr	r2, [r1, #8]
 8005612:	690b      	ldr	r3, [r1, #16]
 8005614:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005618:	4293      	cmp	r3, r2
 800561a:	bfb8      	it	lt
 800561c:	4613      	movlt	r3, r2
 800561e:	6033      	str	r3, [r6, #0]
 8005620:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005624:	4607      	mov	r7, r0
 8005626:	460c      	mov	r4, r1
 8005628:	b10a      	cbz	r2, 800562e <_printf_common+0x26>
 800562a:	3301      	adds	r3, #1
 800562c:	6033      	str	r3, [r6, #0]
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	0699      	lsls	r1, r3, #26
 8005632:	bf42      	ittt	mi
 8005634:	6833      	ldrmi	r3, [r6, #0]
 8005636:	3302      	addmi	r3, #2
 8005638:	6033      	strmi	r3, [r6, #0]
 800563a:	6825      	ldr	r5, [r4, #0]
 800563c:	f015 0506 	ands.w	r5, r5, #6
 8005640:	d106      	bne.n	8005650 <_printf_common+0x48>
 8005642:	f104 0a19 	add.w	sl, r4, #25
 8005646:	68e3      	ldr	r3, [r4, #12]
 8005648:	6832      	ldr	r2, [r6, #0]
 800564a:	1a9b      	subs	r3, r3, r2
 800564c:	42ab      	cmp	r3, r5
 800564e:	dc26      	bgt.n	800569e <_printf_common+0x96>
 8005650:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005654:	1e13      	subs	r3, r2, #0
 8005656:	6822      	ldr	r2, [r4, #0]
 8005658:	bf18      	it	ne
 800565a:	2301      	movne	r3, #1
 800565c:	0692      	lsls	r2, r2, #26
 800565e:	d42b      	bmi.n	80056b8 <_printf_common+0xb0>
 8005660:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005664:	4649      	mov	r1, r9
 8005666:	4638      	mov	r0, r7
 8005668:	47c0      	blx	r8
 800566a:	3001      	adds	r0, #1
 800566c:	d01e      	beq.n	80056ac <_printf_common+0xa4>
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	68e5      	ldr	r5, [r4, #12]
 8005672:	6832      	ldr	r2, [r6, #0]
 8005674:	f003 0306 	and.w	r3, r3, #6
 8005678:	2b04      	cmp	r3, #4
 800567a:	bf08      	it	eq
 800567c:	1aad      	subeq	r5, r5, r2
 800567e:	68a3      	ldr	r3, [r4, #8]
 8005680:	6922      	ldr	r2, [r4, #16]
 8005682:	bf0c      	ite	eq
 8005684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005688:	2500      	movne	r5, #0
 800568a:	4293      	cmp	r3, r2
 800568c:	bfc4      	itt	gt
 800568e:	1a9b      	subgt	r3, r3, r2
 8005690:	18ed      	addgt	r5, r5, r3
 8005692:	2600      	movs	r6, #0
 8005694:	341a      	adds	r4, #26
 8005696:	42b5      	cmp	r5, r6
 8005698:	d11a      	bne.n	80056d0 <_printf_common+0xc8>
 800569a:	2000      	movs	r0, #0
 800569c:	e008      	b.n	80056b0 <_printf_common+0xa8>
 800569e:	2301      	movs	r3, #1
 80056a0:	4652      	mov	r2, sl
 80056a2:	4649      	mov	r1, r9
 80056a4:	4638      	mov	r0, r7
 80056a6:	47c0      	blx	r8
 80056a8:	3001      	adds	r0, #1
 80056aa:	d103      	bne.n	80056b4 <_printf_common+0xac>
 80056ac:	f04f 30ff 	mov.w	r0, #4294967295
 80056b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b4:	3501      	adds	r5, #1
 80056b6:	e7c6      	b.n	8005646 <_printf_common+0x3e>
 80056b8:	18e1      	adds	r1, r4, r3
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	2030      	movs	r0, #48	; 0x30
 80056be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056c2:	4422      	add	r2, r4
 80056c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056cc:	3302      	adds	r3, #2
 80056ce:	e7c7      	b.n	8005660 <_printf_common+0x58>
 80056d0:	2301      	movs	r3, #1
 80056d2:	4622      	mov	r2, r4
 80056d4:	4649      	mov	r1, r9
 80056d6:	4638      	mov	r0, r7
 80056d8:	47c0      	blx	r8
 80056da:	3001      	adds	r0, #1
 80056dc:	d0e6      	beq.n	80056ac <_printf_common+0xa4>
 80056de:	3601      	adds	r6, #1
 80056e0:	e7d9      	b.n	8005696 <_printf_common+0x8e>
	...

080056e4 <_printf_i>:
 80056e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056e8:	7e0f      	ldrb	r7, [r1, #24]
 80056ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056ec:	2f78      	cmp	r7, #120	; 0x78
 80056ee:	4691      	mov	r9, r2
 80056f0:	4680      	mov	r8, r0
 80056f2:	460c      	mov	r4, r1
 80056f4:	469a      	mov	sl, r3
 80056f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056fa:	d807      	bhi.n	800570c <_printf_i+0x28>
 80056fc:	2f62      	cmp	r7, #98	; 0x62
 80056fe:	d80a      	bhi.n	8005716 <_printf_i+0x32>
 8005700:	2f00      	cmp	r7, #0
 8005702:	f000 80d8 	beq.w	80058b6 <_printf_i+0x1d2>
 8005706:	2f58      	cmp	r7, #88	; 0x58
 8005708:	f000 80a3 	beq.w	8005852 <_printf_i+0x16e>
 800570c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005710:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005714:	e03a      	b.n	800578c <_printf_i+0xa8>
 8005716:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800571a:	2b15      	cmp	r3, #21
 800571c:	d8f6      	bhi.n	800570c <_printf_i+0x28>
 800571e:	a101      	add	r1, pc, #4	; (adr r1, 8005724 <_printf_i+0x40>)
 8005720:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005724:	0800577d 	.word	0x0800577d
 8005728:	08005791 	.word	0x08005791
 800572c:	0800570d 	.word	0x0800570d
 8005730:	0800570d 	.word	0x0800570d
 8005734:	0800570d 	.word	0x0800570d
 8005738:	0800570d 	.word	0x0800570d
 800573c:	08005791 	.word	0x08005791
 8005740:	0800570d 	.word	0x0800570d
 8005744:	0800570d 	.word	0x0800570d
 8005748:	0800570d 	.word	0x0800570d
 800574c:	0800570d 	.word	0x0800570d
 8005750:	0800589d 	.word	0x0800589d
 8005754:	080057c1 	.word	0x080057c1
 8005758:	0800587f 	.word	0x0800587f
 800575c:	0800570d 	.word	0x0800570d
 8005760:	0800570d 	.word	0x0800570d
 8005764:	080058bf 	.word	0x080058bf
 8005768:	0800570d 	.word	0x0800570d
 800576c:	080057c1 	.word	0x080057c1
 8005770:	0800570d 	.word	0x0800570d
 8005774:	0800570d 	.word	0x0800570d
 8005778:	08005887 	.word	0x08005887
 800577c:	682b      	ldr	r3, [r5, #0]
 800577e:	1d1a      	adds	r2, r3, #4
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	602a      	str	r2, [r5, #0]
 8005784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005788:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800578c:	2301      	movs	r3, #1
 800578e:	e0a3      	b.n	80058d8 <_printf_i+0x1f4>
 8005790:	6820      	ldr	r0, [r4, #0]
 8005792:	6829      	ldr	r1, [r5, #0]
 8005794:	0606      	lsls	r6, r0, #24
 8005796:	f101 0304 	add.w	r3, r1, #4
 800579a:	d50a      	bpl.n	80057b2 <_printf_i+0xce>
 800579c:	680e      	ldr	r6, [r1, #0]
 800579e:	602b      	str	r3, [r5, #0]
 80057a0:	2e00      	cmp	r6, #0
 80057a2:	da03      	bge.n	80057ac <_printf_i+0xc8>
 80057a4:	232d      	movs	r3, #45	; 0x2d
 80057a6:	4276      	negs	r6, r6
 80057a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057ac:	485e      	ldr	r0, [pc, #376]	; (8005928 <_printf_i+0x244>)
 80057ae:	230a      	movs	r3, #10
 80057b0:	e019      	b.n	80057e6 <_printf_i+0x102>
 80057b2:	680e      	ldr	r6, [r1, #0]
 80057b4:	602b      	str	r3, [r5, #0]
 80057b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057ba:	bf18      	it	ne
 80057bc:	b236      	sxthne	r6, r6
 80057be:	e7ef      	b.n	80057a0 <_printf_i+0xbc>
 80057c0:	682b      	ldr	r3, [r5, #0]
 80057c2:	6820      	ldr	r0, [r4, #0]
 80057c4:	1d19      	adds	r1, r3, #4
 80057c6:	6029      	str	r1, [r5, #0]
 80057c8:	0601      	lsls	r1, r0, #24
 80057ca:	d501      	bpl.n	80057d0 <_printf_i+0xec>
 80057cc:	681e      	ldr	r6, [r3, #0]
 80057ce:	e002      	b.n	80057d6 <_printf_i+0xf2>
 80057d0:	0646      	lsls	r6, r0, #25
 80057d2:	d5fb      	bpl.n	80057cc <_printf_i+0xe8>
 80057d4:	881e      	ldrh	r6, [r3, #0]
 80057d6:	4854      	ldr	r0, [pc, #336]	; (8005928 <_printf_i+0x244>)
 80057d8:	2f6f      	cmp	r7, #111	; 0x6f
 80057da:	bf0c      	ite	eq
 80057dc:	2308      	moveq	r3, #8
 80057de:	230a      	movne	r3, #10
 80057e0:	2100      	movs	r1, #0
 80057e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057e6:	6865      	ldr	r5, [r4, #4]
 80057e8:	60a5      	str	r5, [r4, #8]
 80057ea:	2d00      	cmp	r5, #0
 80057ec:	bfa2      	ittt	ge
 80057ee:	6821      	ldrge	r1, [r4, #0]
 80057f0:	f021 0104 	bicge.w	r1, r1, #4
 80057f4:	6021      	strge	r1, [r4, #0]
 80057f6:	b90e      	cbnz	r6, 80057fc <_printf_i+0x118>
 80057f8:	2d00      	cmp	r5, #0
 80057fa:	d04d      	beq.n	8005898 <_printf_i+0x1b4>
 80057fc:	4615      	mov	r5, r2
 80057fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005802:	fb03 6711 	mls	r7, r3, r1, r6
 8005806:	5dc7      	ldrb	r7, [r0, r7]
 8005808:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800580c:	4637      	mov	r7, r6
 800580e:	42bb      	cmp	r3, r7
 8005810:	460e      	mov	r6, r1
 8005812:	d9f4      	bls.n	80057fe <_printf_i+0x11a>
 8005814:	2b08      	cmp	r3, #8
 8005816:	d10b      	bne.n	8005830 <_printf_i+0x14c>
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	07de      	lsls	r6, r3, #31
 800581c:	d508      	bpl.n	8005830 <_printf_i+0x14c>
 800581e:	6923      	ldr	r3, [r4, #16]
 8005820:	6861      	ldr	r1, [r4, #4]
 8005822:	4299      	cmp	r1, r3
 8005824:	bfde      	ittt	le
 8005826:	2330      	movle	r3, #48	; 0x30
 8005828:	f805 3c01 	strble.w	r3, [r5, #-1]
 800582c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005830:	1b52      	subs	r2, r2, r5
 8005832:	6122      	str	r2, [r4, #16]
 8005834:	f8cd a000 	str.w	sl, [sp]
 8005838:	464b      	mov	r3, r9
 800583a:	aa03      	add	r2, sp, #12
 800583c:	4621      	mov	r1, r4
 800583e:	4640      	mov	r0, r8
 8005840:	f7ff fee2 	bl	8005608 <_printf_common>
 8005844:	3001      	adds	r0, #1
 8005846:	d14c      	bne.n	80058e2 <_printf_i+0x1fe>
 8005848:	f04f 30ff 	mov.w	r0, #4294967295
 800584c:	b004      	add	sp, #16
 800584e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005852:	4835      	ldr	r0, [pc, #212]	; (8005928 <_printf_i+0x244>)
 8005854:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005858:	6829      	ldr	r1, [r5, #0]
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005860:	6029      	str	r1, [r5, #0]
 8005862:	061d      	lsls	r5, r3, #24
 8005864:	d514      	bpl.n	8005890 <_printf_i+0x1ac>
 8005866:	07df      	lsls	r7, r3, #31
 8005868:	bf44      	itt	mi
 800586a:	f043 0320 	orrmi.w	r3, r3, #32
 800586e:	6023      	strmi	r3, [r4, #0]
 8005870:	b91e      	cbnz	r6, 800587a <_printf_i+0x196>
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	f023 0320 	bic.w	r3, r3, #32
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	2310      	movs	r3, #16
 800587c:	e7b0      	b.n	80057e0 <_printf_i+0xfc>
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	f043 0320 	orr.w	r3, r3, #32
 8005884:	6023      	str	r3, [r4, #0]
 8005886:	2378      	movs	r3, #120	; 0x78
 8005888:	4828      	ldr	r0, [pc, #160]	; (800592c <_printf_i+0x248>)
 800588a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800588e:	e7e3      	b.n	8005858 <_printf_i+0x174>
 8005890:	0659      	lsls	r1, r3, #25
 8005892:	bf48      	it	mi
 8005894:	b2b6      	uxthmi	r6, r6
 8005896:	e7e6      	b.n	8005866 <_printf_i+0x182>
 8005898:	4615      	mov	r5, r2
 800589a:	e7bb      	b.n	8005814 <_printf_i+0x130>
 800589c:	682b      	ldr	r3, [r5, #0]
 800589e:	6826      	ldr	r6, [r4, #0]
 80058a0:	6961      	ldr	r1, [r4, #20]
 80058a2:	1d18      	adds	r0, r3, #4
 80058a4:	6028      	str	r0, [r5, #0]
 80058a6:	0635      	lsls	r5, r6, #24
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	d501      	bpl.n	80058b0 <_printf_i+0x1cc>
 80058ac:	6019      	str	r1, [r3, #0]
 80058ae:	e002      	b.n	80058b6 <_printf_i+0x1d2>
 80058b0:	0670      	lsls	r0, r6, #25
 80058b2:	d5fb      	bpl.n	80058ac <_printf_i+0x1c8>
 80058b4:	8019      	strh	r1, [r3, #0]
 80058b6:	2300      	movs	r3, #0
 80058b8:	6123      	str	r3, [r4, #16]
 80058ba:	4615      	mov	r5, r2
 80058bc:	e7ba      	b.n	8005834 <_printf_i+0x150>
 80058be:	682b      	ldr	r3, [r5, #0]
 80058c0:	1d1a      	adds	r2, r3, #4
 80058c2:	602a      	str	r2, [r5, #0]
 80058c4:	681d      	ldr	r5, [r3, #0]
 80058c6:	6862      	ldr	r2, [r4, #4]
 80058c8:	2100      	movs	r1, #0
 80058ca:	4628      	mov	r0, r5
 80058cc:	f7fa fc80 	bl	80001d0 <memchr>
 80058d0:	b108      	cbz	r0, 80058d6 <_printf_i+0x1f2>
 80058d2:	1b40      	subs	r0, r0, r5
 80058d4:	6060      	str	r0, [r4, #4]
 80058d6:	6863      	ldr	r3, [r4, #4]
 80058d8:	6123      	str	r3, [r4, #16]
 80058da:	2300      	movs	r3, #0
 80058dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058e0:	e7a8      	b.n	8005834 <_printf_i+0x150>
 80058e2:	6923      	ldr	r3, [r4, #16]
 80058e4:	462a      	mov	r2, r5
 80058e6:	4649      	mov	r1, r9
 80058e8:	4640      	mov	r0, r8
 80058ea:	47d0      	blx	sl
 80058ec:	3001      	adds	r0, #1
 80058ee:	d0ab      	beq.n	8005848 <_printf_i+0x164>
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	079b      	lsls	r3, r3, #30
 80058f4:	d413      	bmi.n	800591e <_printf_i+0x23a>
 80058f6:	68e0      	ldr	r0, [r4, #12]
 80058f8:	9b03      	ldr	r3, [sp, #12]
 80058fa:	4298      	cmp	r0, r3
 80058fc:	bfb8      	it	lt
 80058fe:	4618      	movlt	r0, r3
 8005900:	e7a4      	b.n	800584c <_printf_i+0x168>
 8005902:	2301      	movs	r3, #1
 8005904:	4632      	mov	r2, r6
 8005906:	4649      	mov	r1, r9
 8005908:	4640      	mov	r0, r8
 800590a:	47d0      	blx	sl
 800590c:	3001      	adds	r0, #1
 800590e:	d09b      	beq.n	8005848 <_printf_i+0x164>
 8005910:	3501      	adds	r5, #1
 8005912:	68e3      	ldr	r3, [r4, #12]
 8005914:	9903      	ldr	r1, [sp, #12]
 8005916:	1a5b      	subs	r3, r3, r1
 8005918:	42ab      	cmp	r3, r5
 800591a:	dcf2      	bgt.n	8005902 <_printf_i+0x21e>
 800591c:	e7eb      	b.n	80058f6 <_printf_i+0x212>
 800591e:	2500      	movs	r5, #0
 8005920:	f104 0619 	add.w	r6, r4, #25
 8005924:	e7f5      	b.n	8005912 <_printf_i+0x22e>
 8005926:	bf00      	nop
 8005928:	08005c6d 	.word	0x08005c6d
 800592c:	08005c7e 	.word	0x08005c7e

08005930 <memcpy>:
 8005930:	440a      	add	r2, r1
 8005932:	4291      	cmp	r1, r2
 8005934:	f100 33ff 	add.w	r3, r0, #4294967295
 8005938:	d100      	bne.n	800593c <memcpy+0xc>
 800593a:	4770      	bx	lr
 800593c:	b510      	push	{r4, lr}
 800593e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005942:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005946:	4291      	cmp	r1, r2
 8005948:	d1f9      	bne.n	800593e <memcpy+0xe>
 800594a:	bd10      	pop	{r4, pc}

0800594c <memmove>:
 800594c:	4288      	cmp	r0, r1
 800594e:	b510      	push	{r4, lr}
 8005950:	eb01 0402 	add.w	r4, r1, r2
 8005954:	d902      	bls.n	800595c <memmove+0x10>
 8005956:	4284      	cmp	r4, r0
 8005958:	4623      	mov	r3, r4
 800595a:	d807      	bhi.n	800596c <memmove+0x20>
 800595c:	1e43      	subs	r3, r0, #1
 800595e:	42a1      	cmp	r1, r4
 8005960:	d008      	beq.n	8005974 <memmove+0x28>
 8005962:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005966:	f803 2f01 	strb.w	r2, [r3, #1]!
 800596a:	e7f8      	b.n	800595e <memmove+0x12>
 800596c:	4402      	add	r2, r0
 800596e:	4601      	mov	r1, r0
 8005970:	428a      	cmp	r2, r1
 8005972:	d100      	bne.n	8005976 <memmove+0x2a>
 8005974:	bd10      	pop	{r4, pc}
 8005976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800597a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800597e:	e7f7      	b.n	8005970 <memmove+0x24>

08005980 <_free_r>:
 8005980:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005982:	2900      	cmp	r1, #0
 8005984:	d044      	beq.n	8005a10 <_free_r+0x90>
 8005986:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800598a:	9001      	str	r0, [sp, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	f1a1 0404 	sub.w	r4, r1, #4
 8005992:	bfb8      	it	lt
 8005994:	18e4      	addlt	r4, r4, r3
 8005996:	f000 f913 	bl	8005bc0 <__malloc_lock>
 800599a:	4a1e      	ldr	r2, [pc, #120]	; (8005a14 <_free_r+0x94>)
 800599c:	9801      	ldr	r0, [sp, #4]
 800599e:	6813      	ldr	r3, [r2, #0]
 80059a0:	b933      	cbnz	r3, 80059b0 <_free_r+0x30>
 80059a2:	6063      	str	r3, [r4, #4]
 80059a4:	6014      	str	r4, [r2, #0]
 80059a6:	b003      	add	sp, #12
 80059a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059ac:	f000 b90e 	b.w	8005bcc <__malloc_unlock>
 80059b0:	42a3      	cmp	r3, r4
 80059b2:	d908      	bls.n	80059c6 <_free_r+0x46>
 80059b4:	6825      	ldr	r5, [r4, #0]
 80059b6:	1961      	adds	r1, r4, r5
 80059b8:	428b      	cmp	r3, r1
 80059ba:	bf01      	itttt	eq
 80059bc:	6819      	ldreq	r1, [r3, #0]
 80059be:	685b      	ldreq	r3, [r3, #4]
 80059c0:	1949      	addeq	r1, r1, r5
 80059c2:	6021      	streq	r1, [r4, #0]
 80059c4:	e7ed      	b.n	80059a2 <_free_r+0x22>
 80059c6:	461a      	mov	r2, r3
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	b10b      	cbz	r3, 80059d0 <_free_r+0x50>
 80059cc:	42a3      	cmp	r3, r4
 80059ce:	d9fa      	bls.n	80059c6 <_free_r+0x46>
 80059d0:	6811      	ldr	r1, [r2, #0]
 80059d2:	1855      	adds	r5, r2, r1
 80059d4:	42a5      	cmp	r5, r4
 80059d6:	d10b      	bne.n	80059f0 <_free_r+0x70>
 80059d8:	6824      	ldr	r4, [r4, #0]
 80059da:	4421      	add	r1, r4
 80059dc:	1854      	adds	r4, r2, r1
 80059de:	42a3      	cmp	r3, r4
 80059e0:	6011      	str	r1, [r2, #0]
 80059e2:	d1e0      	bne.n	80059a6 <_free_r+0x26>
 80059e4:	681c      	ldr	r4, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	6053      	str	r3, [r2, #4]
 80059ea:	4421      	add	r1, r4
 80059ec:	6011      	str	r1, [r2, #0]
 80059ee:	e7da      	b.n	80059a6 <_free_r+0x26>
 80059f0:	d902      	bls.n	80059f8 <_free_r+0x78>
 80059f2:	230c      	movs	r3, #12
 80059f4:	6003      	str	r3, [r0, #0]
 80059f6:	e7d6      	b.n	80059a6 <_free_r+0x26>
 80059f8:	6825      	ldr	r5, [r4, #0]
 80059fa:	1961      	adds	r1, r4, r5
 80059fc:	428b      	cmp	r3, r1
 80059fe:	bf04      	itt	eq
 8005a00:	6819      	ldreq	r1, [r3, #0]
 8005a02:	685b      	ldreq	r3, [r3, #4]
 8005a04:	6063      	str	r3, [r4, #4]
 8005a06:	bf04      	itt	eq
 8005a08:	1949      	addeq	r1, r1, r5
 8005a0a:	6021      	streq	r1, [r4, #0]
 8005a0c:	6054      	str	r4, [r2, #4]
 8005a0e:	e7ca      	b.n	80059a6 <_free_r+0x26>
 8005a10:	b003      	add	sp, #12
 8005a12:	bd30      	pop	{r4, r5, pc}
 8005a14:	200002e8 	.word	0x200002e8

08005a18 <sbrk_aligned>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	4e0e      	ldr	r6, [pc, #56]	; (8005a54 <sbrk_aligned+0x3c>)
 8005a1c:	460c      	mov	r4, r1
 8005a1e:	6831      	ldr	r1, [r6, #0]
 8005a20:	4605      	mov	r5, r0
 8005a22:	b911      	cbnz	r1, 8005a2a <sbrk_aligned+0x12>
 8005a24:	f000 f8bc 	bl	8005ba0 <_sbrk_r>
 8005a28:	6030      	str	r0, [r6, #0]
 8005a2a:	4621      	mov	r1, r4
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	f000 f8b7 	bl	8005ba0 <_sbrk_r>
 8005a32:	1c43      	adds	r3, r0, #1
 8005a34:	d00a      	beq.n	8005a4c <sbrk_aligned+0x34>
 8005a36:	1cc4      	adds	r4, r0, #3
 8005a38:	f024 0403 	bic.w	r4, r4, #3
 8005a3c:	42a0      	cmp	r0, r4
 8005a3e:	d007      	beq.n	8005a50 <sbrk_aligned+0x38>
 8005a40:	1a21      	subs	r1, r4, r0
 8005a42:	4628      	mov	r0, r5
 8005a44:	f000 f8ac 	bl	8005ba0 <_sbrk_r>
 8005a48:	3001      	adds	r0, #1
 8005a4a:	d101      	bne.n	8005a50 <sbrk_aligned+0x38>
 8005a4c:	f04f 34ff 	mov.w	r4, #4294967295
 8005a50:	4620      	mov	r0, r4
 8005a52:	bd70      	pop	{r4, r5, r6, pc}
 8005a54:	200002ec 	.word	0x200002ec

08005a58 <_malloc_r>:
 8005a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a5c:	1ccd      	adds	r5, r1, #3
 8005a5e:	f025 0503 	bic.w	r5, r5, #3
 8005a62:	3508      	adds	r5, #8
 8005a64:	2d0c      	cmp	r5, #12
 8005a66:	bf38      	it	cc
 8005a68:	250c      	movcc	r5, #12
 8005a6a:	2d00      	cmp	r5, #0
 8005a6c:	4607      	mov	r7, r0
 8005a6e:	db01      	blt.n	8005a74 <_malloc_r+0x1c>
 8005a70:	42a9      	cmp	r1, r5
 8005a72:	d905      	bls.n	8005a80 <_malloc_r+0x28>
 8005a74:	230c      	movs	r3, #12
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	2600      	movs	r6, #0
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a80:	4e2e      	ldr	r6, [pc, #184]	; (8005b3c <_malloc_r+0xe4>)
 8005a82:	f000 f89d 	bl	8005bc0 <__malloc_lock>
 8005a86:	6833      	ldr	r3, [r6, #0]
 8005a88:	461c      	mov	r4, r3
 8005a8a:	bb34      	cbnz	r4, 8005ada <_malloc_r+0x82>
 8005a8c:	4629      	mov	r1, r5
 8005a8e:	4638      	mov	r0, r7
 8005a90:	f7ff ffc2 	bl	8005a18 <sbrk_aligned>
 8005a94:	1c43      	adds	r3, r0, #1
 8005a96:	4604      	mov	r4, r0
 8005a98:	d14d      	bne.n	8005b36 <_malloc_r+0xde>
 8005a9a:	6834      	ldr	r4, [r6, #0]
 8005a9c:	4626      	mov	r6, r4
 8005a9e:	2e00      	cmp	r6, #0
 8005aa0:	d140      	bne.n	8005b24 <_malloc_r+0xcc>
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	4631      	mov	r1, r6
 8005aa6:	4638      	mov	r0, r7
 8005aa8:	eb04 0803 	add.w	r8, r4, r3
 8005aac:	f000 f878 	bl	8005ba0 <_sbrk_r>
 8005ab0:	4580      	cmp	r8, r0
 8005ab2:	d13a      	bne.n	8005b2a <_malloc_r+0xd2>
 8005ab4:	6821      	ldr	r1, [r4, #0]
 8005ab6:	3503      	adds	r5, #3
 8005ab8:	1a6d      	subs	r5, r5, r1
 8005aba:	f025 0503 	bic.w	r5, r5, #3
 8005abe:	3508      	adds	r5, #8
 8005ac0:	2d0c      	cmp	r5, #12
 8005ac2:	bf38      	it	cc
 8005ac4:	250c      	movcc	r5, #12
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	4638      	mov	r0, r7
 8005aca:	f7ff ffa5 	bl	8005a18 <sbrk_aligned>
 8005ace:	3001      	adds	r0, #1
 8005ad0:	d02b      	beq.n	8005b2a <_malloc_r+0xd2>
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	442b      	add	r3, r5
 8005ad6:	6023      	str	r3, [r4, #0]
 8005ad8:	e00e      	b.n	8005af8 <_malloc_r+0xa0>
 8005ada:	6822      	ldr	r2, [r4, #0]
 8005adc:	1b52      	subs	r2, r2, r5
 8005ade:	d41e      	bmi.n	8005b1e <_malloc_r+0xc6>
 8005ae0:	2a0b      	cmp	r2, #11
 8005ae2:	d916      	bls.n	8005b12 <_malloc_r+0xba>
 8005ae4:	1961      	adds	r1, r4, r5
 8005ae6:	42a3      	cmp	r3, r4
 8005ae8:	6025      	str	r5, [r4, #0]
 8005aea:	bf18      	it	ne
 8005aec:	6059      	strne	r1, [r3, #4]
 8005aee:	6863      	ldr	r3, [r4, #4]
 8005af0:	bf08      	it	eq
 8005af2:	6031      	streq	r1, [r6, #0]
 8005af4:	5162      	str	r2, [r4, r5]
 8005af6:	604b      	str	r3, [r1, #4]
 8005af8:	4638      	mov	r0, r7
 8005afa:	f104 060b 	add.w	r6, r4, #11
 8005afe:	f000 f865 	bl	8005bcc <__malloc_unlock>
 8005b02:	f026 0607 	bic.w	r6, r6, #7
 8005b06:	1d23      	adds	r3, r4, #4
 8005b08:	1af2      	subs	r2, r6, r3
 8005b0a:	d0b6      	beq.n	8005a7a <_malloc_r+0x22>
 8005b0c:	1b9b      	subs	r3, r3, r6
 8005b0e:	50a3      	str	r3, [r4, r2]
 8005b10:	e7b3      	b.n	8005a7a <_malloc_r+0x22>
 8005b12:	6862      	ldr	r2, [r4, #4]
 8005b14:	42a3      	cmp	r3, r4
 8005b16:	bf0c      	ite	eq
 8005b18:	6032      	streq	r2, [r6, #0]
 8005b1a:	605a      	strne	r2, [r3, #4]
 8005b1c:	e7ec      	b.n	8005af8 <_malloc_r+0xa0>
 8005b1e:	4623      	mov	r3, r4
 8005b20:	6864      	ldr	r4, [r4, #4]
 8005b22:	e7b2      	b.n	8005a8a <_malloc_r+0x32>
 8005b24:	4634      	mov	r4, r6
 8005b26:	6876      	ldr	r6, [r6, #4]
 8005b28:	e7b9      	b.n	8005a9e <_malloc_r+0x46>
 8005b2a:	230c      	movs	r3, #12
 8005b2c:	603b      	str	r3, [r7, #0]
 8005b2e:	4638      	mov	r0, r7
 8005b30:	f000 f84c 	bl	8005bcc <__malloc_unlock>
 8005b34:	e7a1      	b.n	8005a7a <_malloc_r+0x22>
 8005b36:	6025      	str	r5, [r4, #0]
 8005b38:	e7de      	b.n	8005af8 <_malloc_r+0xa0>
 8005b3a:	bf00      	nop
 8005b3c:	200002e8 	.word	0x200002e8

08005b40 <_realloc_r>:
 8005b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b44:	4680      	mov	r8, r0
 8005b46:	4614      	mov	r4, r2
 8005b48:	460e      	mov	r6, r1
 8005b4a:	b921      	cbnz	r1, 8005b56 <_realloc_r+0x16>
 8005b4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b50:	4611      	mov	r1, r2
 8005b52:	f7ff bf81 	b.w	8005a58 <_malloc_r>
 8005b56:	b92a      	cbnz	r2, 8005b64 <_realloc_r+0x24>
 8005b58:	f7ff ff12 	bl	8005980 <_free_r>
 8005b5c:	4625      	mov	r5, r4
 8005b5e:	4628      	mov	r0, r5
 8005b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b64:	f000 f838 	bl	8005bd8 <_malloc_usable_size_r>
 8005b68:	4284      	cmp	r4, r0
 8005b6a:	4607      	mov	r7, r0
 8005b6c:	d802      	bhi.n	8005b74 <_realloc_r+0x34>
 8005b6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b72:	d812      	bhi.n	8005b9a <_realloc_r+0x5a>
 8005b74:	4621      	mov	r1, r4
 8005b76:	4640      	mov	r0, r8
 8005b78:	f7ff ff6e 	bl	8005a58 <_malloc_r>
 8005b7c:	4605      	mov	r5, r0
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d0ed      	beq.n	8005b5e <_realloc_r+0x1e>
 8005b82:	42bc      	cmp	r4, r7
 8005b84:	4622      	mov	r2, r4
 8005b86:	4631      	mov	r1, r6
 8005b88:	bf28      	it	cs
 8005b8a:	463a      	movcs	r2, r7
 8005b8c:	f7ff fed0 	bl	8005930 <memcpy>
 8005b90:	4631      	mov	r1, r6
 8005b92:	4640      	mov	r0, r8
 8005b94:	f7ff fef4 	bl	8005980 <_free_r>
 8005b98:	e7e1      	b.n	8005b5e <_realloc_r+0x1e>
 8005b9a:	4635      	mov	r5, r6
 8005b9c:	e7df      	b.n	8005b5e <_realloc_r+0x1e>
	...

08005ba0 <_sbrk_r>:
 8005ba0:	b538      	push	{r3, r4, r5, lr}
 8005ba2:	4d06      	ldr	r5, [pc, #24]	; (8005bbc <_sbrk_r+0x1c>)
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	4604      	mov	r4, r0
 8005ba8:	4608      	mov	r0, r1
 8005baa:	602b      	str	r3, [r5, #0]
 8005bac:	f7fa fe70 	bl	8000890 <_sbrk>
 8005bb0:	1c43      	adds	r3, r0, #1
 8005bb2:	d102      	bne.n	8005bba <_sbrk_r+0x1a>
 8005bb4:	682b      	ldr	r3, [r5, #0]
 8005bb6:	b103      	cbz	r3, 8005bba <_sbrk_r+0x1a>
 8005bb8:	6023      	str	r3, [r4, #0]
 8005bba:	bd38      	pop	{r3, r4, r5, pc}
 8005bbc:	200002f0 	.word	0x200002f0

08005bc0 <__malloc_lock>:
 8005bc0:	4801      	ldr	r0, [pc, #4]	; (8005bc8 <__malloc_lock+0x8>)
 8005bc2:	f000 b811 	b.w	8005be8 <__retarget_lock_acquire_recursive>
 8005bc6:	bf00      	nop
 8005bc8:	200002f4 	.word	0x200002f4

08005bcc <__malloc_unlock>:
 8005bcc:	4801      	ldr	r0, [pc, #4]	; (8005bd4 <__malloc_unlock+0x8>)
 8005bce:	f000 b80c 	b.w	8005bea <__retarget_lock_release_recursive>
 8005bd2:	bf00      	nop
 8005bd4:	200002f4 	.word	0x200002f4

08005bd8 <_malloc_usable_size_r>:
 8005bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bdc:	1f18      	subs	r0, r3, #4
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	bfbc      	itt	lt
 8005be2:	580b      	ldrlt	r3, [r1, r0]
 8005be4:	18c0      	addlt	r0, r0, r3
 8005be6:	4770      	bx	lr

08005be8 <__retarget_lock_acquire_recursive>:
 8005be8:	4770      	bx	lr

08005bea <__retarget_lock_release_recursive>:
 8005bea:	4770      	bx	lr

08005bec <_init>:
 8005bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bee:	bf00      	nop
 8005bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bf2:	bc08      	pop	{r3}
 8005bf4:	469e      	mov	lr, r3
 8005bf6:	4770      	bx	lr

08005bf8 <_fini>:
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfa:	bf00      	nop
 8005bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfe:	bc08      	pop	{r3}
 8005c00:	469e      	mov	lr, r3
 8005c02:	4770      	bx	lr
